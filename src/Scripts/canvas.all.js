!function(t) {
    "use strict";
    function l(t, e) {
        var a = (65535 & t) + (65535 & e);
        return (t >> 16) + (e >> 16) + (a >> 16) << 16 | 65535 & a
    }
    function r(t, e, a, s, i, n) {
        return l((n = l(l(e, t), l(s, n))) << (i = i) | n >>> 32 - i, a)
    }
    function d(t, e, a, s, i, n, o) {
        return r(e & a | ~e & s, t, e, i, n, o)
    }
    function v(t, e, a, s, i, n, o) {
        return r(e & s | a & ~s, t, e, i, n, o)
    }
    function u(t, e, a, s, i, n, o) {
        return r(e ^ a ^ s, t, e, i, n, o)
    }
    function m(t, e, a, s, i, n, o) {
        return r(a ^ (e | ~s), t, e, i, n, o)
    }
    function o(t, e) {
        var a, s, i, n;
        t[e >> 5] |= 128 << e % 32,
        t[14 + (e + 64 >>> 9 << 4)] = e;
        for (var o = 1732584193, r = -271733879, c = -1732584194, p = 271733878, h = 0; h < t.length; h += 16)
            o = d(a = o, s = r, i = c, n = p, t[h], 7, -680876936),
            p = d(p, o, r, c, t[h + 1], 12, -389564586),
            c = d(c, p, o, r, t[h + 2], 17, 606105819),
            r = d(r, c, p, o, t[h + 3], 22, -1044525330),
            o = d(o, r, c, p, t[h + 4], 7, -176418897),
            p = d(p, o, r, c, t[h + 5], 12, 1200080426),
            c = d(c, p, o, r, t[h + 6], 17, -1473231341),
            r = d(r, c, p, o, t[h + 7], 22, -45705983),
            o = d(o, r, c, p, t[h + 8], 7, 1770035416),
            p = d(p, o, r, c, t[h + 9], 12, -1958414417),
            c = d(c, p, o, r, t[h + 10], 17, -42063),
            r = d(r, c, p, o, t[h + 11], 22, -1990404162),
            o = d(o, r, c, p, t[h + 12], 7, 1804603682),
            p = d(p, o, r, c, t[h + 13], 12, -40341101),
            c = d(c, p, o, r, t[h + 14], 17, -1502002290),
            o = v(o, r = d(r, c, p, o, t[h + 15], 22, 1236535329), c, p, t[h + 1], 5, -165796510),
            p = v(p, o, r, c, t[h + 6], 9, -1069501632),
            c = v(c, p, o, r, t[h + 11], 14, 643717713),
            r = v(r, c, p, o, t[h], 20, -373897302),
            o = v(o, r, c, p, t[h + 5], 5, -701558691),
            p = v(p, o, r, c, t[h + 10], 9, 38016083),
            c = v(c, p, o, r, t[h + 15], 14, -660478335),
            r = v(r, c, p, o, t[h + 4], 20, -405537848),
            o = v(o, r, c, p, t[h + 9], 5, 568446438),
            p = v(p, o, r, c, t[h + 14], 9, -1019803690),
            c = v(c, p, o, r, t[h + 3], 14, -187363961),
            r = v(r, c, p, o, t[h + 8], 20, 1163531501),
            o = v(o, r, c, p, t[h + 13], 5, -1444681467),
            p = v(p, o, r, c, t[h + 2], 9, -51403784),
            c = v(c, p, o, r, t[h + 7], 14, 1735328473),
            o = u(o, r = v(r, c, p, o, t[h + 12], 20, -1926607734), c, p, t[h + 5], 4, -378558),
            p = u(p, o, r, c, t[h + 8], 11, -2022574463),
            c = u(c, p, o, r, t[h + 11], 16, 1839030562),
            r = u(r, c, p, o, t[h + 14], 23, -35309556),
            o = u(o, r, c, p, t[h + 1], 4, -1530992060),
            p = u(p, o, r, c, t[h + 4], 11, 1272893353),
            c = u(c, p, o, r, t[h + 7], 16, -155497632),
            r = u(r, c, p, o, t[h + 10], 23, -1094730640),
            o = u(o, r, c, p, t[h + 13], 4, 681279174),
            p = u(p, o, r, c, t[h], 11, -358537222),
            c = u(c, p, o, r, t[h + 3], 16, -722521979),
            r = u(r, c, p, o, t[h + 6], 23, 76029189),
            o = u(o, r, c, p, t[h + 9], 4, -640364487),
            p = u(p, o, r, c, t[h + 12], 11, -421815835),
            c = u(c, p, o, r, t[h + 15], 16, 530742520),
            o = m(o, r = u(r, c, p, o, t[h + 2], 23, -995338651), c, p, t[h], 6, -198630844),
            p = m(p, o, r, c, t[h + 7], 10, 1126891415),
            c = m(c, p, o, r, t[h + 14], 15, -1416354905),
            r = m(r, c, p, o, t[h + 5], 21, -57434055),
            o = m(o, r, c, p, t[h + 12], 6, 1700485571),
            p = m(p, o, r, c, t[h + 3], 10, -1894986606),
            c = m(c, p, o, r, t[h + 10], 15, -1051523),
            r = m(r, c, p, o, t[h + 1], 21, -2054922799),
            o = m(o, r, c, p, t[h + 8], 6, 1873313359),
            p = m(p, o, r, c, t[h + 15], 10, -30611744),
            c = m(c, p, o, r, t[h + 6], 15, -1560198380),
            r = m(r, c, p, o, t[h + 13], 21, 1309151649),
            o = m(o, r, c, p, t[h + 4], 6, -145523070),
            p = m(p, o, r, c, t[h + 11], 10, -1120210379),
            c = m(c, p, o, r, t[h + 2], 15, 718787259),
            r = m(r, c, p, o, t[h + 9], 21, -343485551),
            o = l(o, a),
            r = l(r, s),
            c = l(c, i),
            p = l(p, n);
        return [o, r, c, p]
    }
    function c(t) {
        for (var e = "", a = 32 * t.length, s = 0; s < a; s += 8)
            e += String.fromCharCode(t[s >> 5] >>> s % 32 & 255);
        return e
    }
    function p(t) {
        var e = [];
        for (e[(t.length >> 2) - 1] = void 0,
        s = 0; s < e.length; s += 1)
            e[s] = 0;
        for (var a = 8 * t.length, s = 0; s < a; s += 8)
            e[s >> 5] |= (255 & t.charCodeAt(s / 8)) << s % 32;
        return e
    }
    function s(t) {
        for (var e, a = "0123456789abcdef", s = "", i = 0; i < t.length; i += 1)
            e = t.charCodeAt(i),
            s += a.charAt(e >>> 4 & 15) + a.charAt(15 & e);
        return s
    }
    function a(t) {
        return unescape(encodeURIComponent(t))
    }
    function i(t) {
        return c(o(p(t = a(t)), 8 * t.length))
    }
    function n(t, e) {
        return function(t, e) {
            var a, s = p(t), i = [], n = [];
            for (i[15] = n[15] = void 0,
            16 < s.length && (s = o(s, 8 * t.length)),
            a = 0; a < 16; a += 1)
                i[a] = 909522486 ^ s[a],
                n[a] = 1549556828 ^ s[a];
            return e = o(i.concat(p(e)), 512 + 8 * e.length),
            c(o(n.concat(e), 640))
        }(a(t), a(e))
    }
    function e(t, e, a) {
        return e ? a ? n(e, t) : s(n(e, t)) : a ? i(t) : s(i(t))
    }
    "function" == typeof define && define.amd ? define(function() {
        return e
    }) : "object" == typeof module && module.exports ? module.exports = e : t.md5 = e
}(this),
function() {
    "use strict";
    function t() {
        this.init()
    }
    function e(t) {
        t.src && 0 !== t.src.length ? this.init(t) : console.error("An array of source files must be passed with any new Howl.")
    }
    t.prototype = {
        init: function() {
            var t = this || m;
            return t._counter = 1e3,
            t._codecs = {},
            t._howls = [],
            t._muted = !1,
            t._volume = 1,
            t._canPlayEvent = "canplaythrough",
            t._navigator = "undefined" != typeof window && window.navigator ? window.navigator : null,
            t.masterGain = null,
            t.noAudio = !1,
            t.usingWebAudio = !0,
            t.autoSuspend = !0,
            t.ctx = null,
            t.mobileAutoEnable = !0,
            t._setup(),
            t
        },
        volume: function(t) {
            var e = this || m;
            if (t = parseFloat(t),
            e.ctx || l(),
            void 0 !== t && 0 <= t && t <= 1) {
                if (e._volume = t,
                e._muted)
                    return e;
                e.usingWebAudio && e.masterGain.gain.setValueAtTime(t, m.ctx.currentTime);
                for (var a = 0; a < e._howls.length; a++)
                    if (!e._howls[a]._webAudio)
                        for (var s = e._howls[a]._getSoundIds(), i = 0; i < s.length; i++) {
                            var n = e._howls[a]._soundById(s[i]);
                            n && n._node && (n._node.volume = n._volume * t)
                        }
                return e
            }
            return e._volume
        },
        mute: function(t) {
            var e = this || m;
            e.ctx || l(),
            e._muted = t,
            e.usingWebAudio && e.masterGain.gain.setValueAtTime(t ? 0 : e._volume, m.ctx.currentTime);
            for (var a = 0; a < e._howls.length; a++)
                if (!e._howls[a]._webAudio)
                    for (var s = e._howls[a]._getSoundIds(), i = 0; i < s.length; i++) {
                        var n = e._howls[a]._soundById(s[i]);
                        n && n._node && (n._node.muted = !!t || n._muted)
                    }
            return e
        },
        unload: function() {
            for (var t = this || m, e = t._howls.length - 1; 0 <= e; e--)
                t._howls[e].unload();
            return t.usingWebAudio && t.ctx && void 0 !== t.ctx.close && (t.ctx.close(),
            t.ctx = null,
            l()),
            t
        },
        codecs: function(t) {
            return (this || m)._codecs[t.replace(/^x-/, "")]
        },
        _setup: function() {
            var e = this || m;
            if (e.state = e.ctx && e.ctx.state || "running",
            e._autoSuspend(),
            !e.usingWebAudio)
                if ("undefined" != typeof Audio)
                    try {
                        void 0 === (new Audio).oncanplaythrough && (e._canPlayEvent = "canplay")
                    } catch (t) {
                        e.noAudio = !0
                    }
                else
                    e.noAudio = !0;
            try {
                (new Audio).muted && (e.noAudio = !0)
            } catch (t) {}
            return e.noAudio || e._setupCodecs(),
            e
        },
        _setupCodecs: function() {
            var e = this || m
              , t = null;
            try {
                t = "undefined" != typeof Audio ? new Audio : null
            } catch (t) {
                return e
            }
            if (!t || "function" != typeof t.canPlayType)
                return e;
            var a = t.canPlayType("audio/mpeg;").replace(/^no$/, "")
              , s = e._navigator && e._navigator.userAgent.match(/OPR\/([0-6].)/g)
              , s = s && parseInt(s[0].split("/")[1], 10) < 33;
            return e._codecs = {
                mp3: !(s || !a && !t.canPlayType("audio/mp3;").replace(/^no$/, "")),
                mpeg: !!a,
                opus: !!t.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ""),
                ogg: !!t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
                oga: !!t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ""),
                wav: !!t.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ""),
                aac: !!t.canPlayType("audio/aac;").replace(/^no$/, ""),
                caf: !!t.canPlayType("audio/x-caf;").replace(/^no$/, ""),
                m4a: !!(t.canPlayType("audio/x-m4a;") || t.canPlayType("audio/m4a;") || t.canPlayType("audio/aac;")).replace(/^no$/, ""),
                mp4: !!(t.canPlayType("audio/x-mp4;") || t.canPlayType("audio/mp4;") || t.canPlayType("audio/aac;")).replace(/^no$/, ""),
                weba: !!t.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""),
                webm: !!t.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, ""),
                dolby: !!t.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/, ""),
                flac: !!(t.canPlayType("audio/x-flac;") || t.canPlayType("audio/flac;")).replace(/^no$/, "")
            },
            e
        },
        _enableMobileAudio: function() {
            var e = this || m
              , t = /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(e._navigator && e._navigator.userAgent)
              , a = !!("ontouchend"in window || e._navigator && 0 < e._navigator.maxTouchPoints || e._navigator && 0 < e._navigator.msMaxTouchPoints);
            if (!e._mobileEnabled && e.ctx && (t || a)) {
                e._mobileEnabled = !1,
                e._mobileUnloaded || 44100 === e.ctx.sampleRate || (e._mobileUnloaded = !0,
                e.unload()),
                e._scratchBuffer = e.ctx.createBuffer(1, 1, 22050);
                var s = function() {
                    m._autoResume();
                    var t = e.ctx.createBufferSource();
                    t.buffer = e._scratchBuffer,
                    t.connect(e.ctx.destination),
                    void 0 === t.start ? t.noteOn(0) : t.start(0),
                    "function" == typeof e.ctx.resume && e.ctx.resume(),
                    t.onended = function() {
                        t.disconnect(0),
                        e._mobileEnabled = !0,
                        e.mobileAutoEnable = !1,
                        document.removeEventListener("touchstart", s, !0),
                        document.removeEventListener("touchend", s, !0)
                    }
                };
                return document.addEventListener("touchstart", s, !0),
                document.addEventListener("touchend", s, !0),
                e
            }
        },
        _autoSuspend: function() {
            var t = this;
            if (t.autoSuspend && t.ctx && void 0 !== t.ctx.suspend && m.usingWebAudio) {
                for (var e = 0; e < t._howls.length; e++)
                    if (t._howls[e]._webAudio)
                        for (var a = 0; a < t._howls[e]._sounds.length; a++)
                            if (!t._howls[e]._sounds[a]._paused)
                                return t;
                return t._suspendTimer && clearTimeout(t._suspendTimer),
                t._suspendTimer = setTimeout(function() {
                    t.autoSuspend && (t._suspendTimer = null,
                    t.state = "suspending",
                    t.ctx.suspend().then(function() {
                        t.state = "suspended",
                        t._resumeAfterSuspend && (delete t._resumeAfterSuspend,
                        t._autoResume())
                    }))
                }, 3e4),
                t
            }
        },
        _autoResume: function() {
            var e = this;
            if (e.ctx && void 0 !== e.ctx.resume && m.usingWebAudio)
                return "running" === e.state && e._suspendTimer ? (clearTimeout(e._suspendTimer),
                e._suspendTimer = null) : "suspended" === e.state ? (e.ctx.resume().then(function() {
                    e.state = "running";
                    for (var t = 0; t < e._howls.length; t++)
                        e._howls[t]._emit("resume")
                }),
                e._suspendTimer && (clearTimeout(e._suspendTimer),
                e._suspendTimer = null)) : "suspending" === e.state && (e._resumeAfterSuspend = !0),
                e
        }
    };
    var m = new t;
    e.prototype = {
        init: function(t) {
            var e = this;
            return m.ctx || l(),
            e._autoplay = t.autoplay || !1,
            e._format = "string" != typeof t.format ? t.format : [t.format],
            e._html5 = t.html5 || !1,
            e._muted = t.mute || !1,
            e._loop = t.loop || !1,
            e._pool = t.pool || 5,
            e._preload = "boolean" != typeof t.preload || t.preload,
            e._rate = t.rate || 1,
            e._sprite = t.sprite || {},
            e._src = "string" != typeof t.src ? t.src : [t.src],
            e._volume = void 0 !== t.volume ? t.volume : 1,
            e._xhrWithCredentials = t.xhrWithCredentials || !1,
            e._duration = 0,
            e._state = "unloaded",
            e._sounds = [],
            e._endTimers = {},
            e._queue = [],
            e._playLock = !1,
            e._onend = t.onend ? [{
                fn: t.onend
            }] : [],
            e._onfade = t.onfade ? [{
                fn: t.onfade
            }] : [],
            e._onload = t.onload ? [{
                fn: t.onload
            }] : [],
            e._onloaderror = t.onloaderror ? [{
                fn: t.onloaderror
            }] : [],
            e._onplayerror = t.onplayerror ? [{
                fn: t.onplayerror
            }] : [],
            e._onpause = t.onpause ? [{
                fn: t.onpause
            }] : [],
            e._onplay = t.onplay ? [{
                fn: t.onplay
            }] : [],
            e._onstop = t.onstop ? [{
                fn: t.onstop
            }] : [],
            e._onmute = t.onmute ? [{
                fn: t.onmute
            }] : [],
            e._onvolume = t.onvolume ? [{
                fn: t.onvolume
            }] : [],
            e._onrate = t.onrate ? [{
                fn: t.onrate
            }] : [],
            e._onseek = t.onseek ? [{
                fn: t.onseek
            }] : [],
            e._onresume = [],
            e._webAudio = m.usingWebAudio && !e._html5,
            void 0 !== m.ctx && m.ctx && m.mobileAutoEnable && m._enableMobileAudio(),
            m._howls.push(e),
            e._autoplay && e._queue.push({
                event: "play",
                action: function() {
                    e.play()
                }
            }),
            e._preload && e.load(),
            e
        },
        load: function() {
            var t = this
              , e = null;
            if (m.noAudio)
                t._emit("loaderror", null, "No audio support.");
            else {
                "string" == typeof t._src && (t._src = [t._src]);
                for (var a, s, i = 0; i < t._src.length; i++) {
                    if (t._format && t._format[i])
                        a = t._format[i];
                    else {
                        if ("string" != typeof (s = t._src[i])) {
                            t._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");
                            continue
                        }
                        a = (a = (a = /^data:audio\/([^;,]+);/i.exec(s)) || /\.([^.]+)$/.exec(s.split("?", 1)[0])) && a[1].toLowerCase()
                    }
                    if (a || console.warn('No file extension was found. Consider using the "format" property or specify an extension.'),
                    a && m.codecs(a)) {
                        e = t._src[i];
                        break
                    }
                }
                if (e)
                    return t._src = e,
                    t._state = "loading",
                    "https:" === window.location.protocol && "http:" === e.slice(0, 5) && (t._html5 = !0,
                    t._webAudio = !1),
                    new n(t),
                    t._webAudio && r(t),
                    t;
                t._emit("loaderror", null, "No codec support for selected audio sources.")
            }
        },
        play: function(t, e) {
            var a = this
              , s = null;
            if ("number" == typeof t)
                s = t,
                t = null;
            else {
                if ("string" == typeof t && "loaded" === a._state && !a._sprite[t])
                    return null;
                if (void 0 === t) {
                    t = "__default";
                    for (var i = 0, n = 0; n < a._sounds.length; n++)
                        a._sounds[n]._paused && !a._sounds[n]._ended && (i++,
                        s = a._sounds[n]._id);
                    1 === i ? t = null : s = null
                }
            }
            var o = s ? a._soundById(s) : a._inactiveSound();
            if (!o)
                return null;
            if (s && !t && (t = o._sprite || "__default"),
            "loaded" !== a._state) {
                o._sprite = t,
                o._ended = !1;
                var r = o._id;
                return a._queue.push({
                    event: "play",
                    action: function() {
                        a.play(r)
                    }
                }),
                r
            }
            if (s && !o._paused)
                return e || setTimeout(function() {
                    a._emit("play", o._id)
                }, 0),
                o._id;
            a._webAudio && m._autoResume();
            var c = Math.max(0, 0 < o._seek ? o._seek : a._sprite[t][0] / 1e3)
              , p = Math.max(0, (a._sprite[t][0] + a._sprite[t][1]) / 1e3 - c)
              , h = 1e3 * p / Math.abs(o._rate);
            o._paused = !1,
            o._ended = !1,
            o._sprite = t,
            o._seek = c,
            o._start = a._sprite[t][0] / 1e3,
            o._stop = (a._sprite[t][0] + a._sprite[t][1]) / 1e3,
            o._loop = !(!o._loop && !a._sprite[t][2]);
            var l, d, v, u = o._node;
            return a._webAudio ? (d = function() {
                a._refreshBuffer(o);
                var t = o._muted || a._muted ? 0 : o._volume;
                u.gain.setValueAtTime(t, m.ctx.currentTime),
                o._playStart = m.ctx.currentTime,
                void 0 === u.bufferSource.start ? o._loop ? u.bufferSource.noteGrainOn(0, c, 86400) : u.bufferSource.noteGrainOn(0, c, p) : o._loop ? u.bufferSource.start(0, c, 86400) : u.bufferSource.start(0, c, p),
                h != 1 / 0 && (a._endTimers[o._id] = setTimeout(a._ended.bind(a, o), h)),
                e || setTimeout(function() {
                    a._emit("play", o._id)
                }, 0)
            }
            ,
            "running" === m.state ? d() : (a.once("resume", d),
            a._clearTimer(o._id))) : (l = function() {
                u.currentTime = c,
                u.muted = o._muted || a._muted || m._muted || u.muted,
                u.volume = o._volume * m.volume(),
                u.playbackRate = o._rate;
                try {
                    var t = u.play();
                    if ("undefined" != typeof Promise && t instanceof Promise && (a._playLock = !0,
                    t.then(function() {
                        a._playLock = !1,
                        a._loadQueue()
                    })),
                    u.paused)
                        return void a._emit("playerror", o._id, "Playback was unable to start. This is most commonly an issue on mobile devices where playback was not within a user interaction.");
                    h != 1 / 0 && (a._endTimers[o._id] = setTimeout(a._ended.bind(a, o), h)),
                    e || a._emit("play", o._id)
                } catch (t) {
                    a._emit("playerror", o._id, t)
                }
            }
            ,
            d = window && window.ejecta || !u.readyState && m._navigator.isCocoonJS,
            4 === u.readyState || d ? l() : (v = function() {
                l(),
                u.removeEventListener(m._canPlayEvent, v, !1)
            }
            ,
            u.addEventListener(m._canPlayEvent, v, !1),
            a._clearTimer(o._id))),
            o._id
        },
        pause: function(t) {
            var e = this;
            if ("loaded" !== e._state || e._playLock)
                return e._queue.push({
                    event: "pause",
                    action: function() {
                        e.pause(t)
                    }
                }),
                e;
            for (var a = e._getSoundIds(t), s = 0; s < a.length; s++) {
                e._clearTimer(a[s]);
                var i = e._soundById(a[s]);
                if (i && !i._paused && (i._seek = e.seek(a[s]),
                i._rateSeek = 0,
                i._paused = !0,
                e._stopFade(a[s]),
                i._node))
                    if (e._webAudio) {
                        if (!i._node.bufferSource)
                            continue;
                        void 0 === i._node.bufferSource.stop ? i._node.bufferSource.noteOff(0) : i._node.bufferSource.stop(0),
                        e._cleanBuffer(i._node)
                    } else
                        isNaN(i._node.duration) && i._node.duration !== 1 / 0 || i._node.pause();
                arguments[1] || e._emit("pause", i ? i._id : null)
            }
            return e
        },
        stop: function(t, e) {
            var a = this;
            if ("loaded" !== a._state)
                return a._queue.push({
                    event: "stop",
                    action: function() {
                        a.stop(t)
                    }
                }),
                a;
            for (var s = a._getSoundIds(t), i = 0; i < s.length; i++) {
                a._clearTimer(s[i]);
                var n = a._soundById(s[i]);
                n && (n._seek = n._start || 0,
                n._rateSeek = 0,
                n._paused = !0,
                n._ended = !0,
                a._stopFade(s[i]),
                n._node && (a._webAudio ? n._node.bufferSource && (void 0 === n._node.bufferSource.stop ? n._node.bufferSource.noteOff(0) : n._node.bufferSource.stop(0),
                a._cleanBuffer(n._node)) : isNaN(n._node.duration) && n._node.duration !== 1 / 0 || (n._node.currentTime = n._start || 0,
                n._node.pause())),
                e || a._emit("stop", n._id))
            }
            return a
        },
        mute: function(t, e) {
            var a = this;
            if ("loaded" !== a._state)
                return a._queue.push({
                    event: "mute",
                    action: function() {
                        a.mute(t, e)
                    }
                }),
                a;
            if (void 0 === e) {
                if ("boolean" != typeof t)
                    return a._muted;
                a._muted = t
            }
            for (var s = a._getSoundIds(e), i = 0; i < s.length; i++) {
                var n = a._soundById(s[i]);
                n && (n._muted = t,
                n._interval && a._stopFade(n._id),
                a._webAudio && n._node ? n._node.gain.setValueAtTime(t ? 0 : n._volume, m.ctx.currentTime) : n._node && (n._node.muted = !!m._muted || t),
                a._emit("mute", n._id))
            }
            return a
        },
        volume: function() {
            var t, e, a, s = this, i = arguments;
            if (0 === i.length)
                return s._volume;
            if (1 === i.length || 2 === i.length && void 0 === i[1] ? 0 <= s._getSoundIds().indexOf(i[0]) ? e = parseInt(i[0], 10) : t = parseFloat(i[0]) : 2 <= i.length && (t = parseFloat(i[0]),
            e = parseInt(i[1], 10)),
            !(void 0 !== t && 0 <= t && t <= 1))
                return (a = e ? s._soundById(e) : s._sounds[0]) ? a._volume : 0;
            if ("loaded" !== s._state)
                return s._queue.push({
                    event: "volume",
                    action: function() {
                        s.volume.apply(s, i)
                    }
                }),
                s;
            void 0 === e && (s._volume = t),
            e = s._getSoundIds(e);
            for (var n = 0; n < e.length; n++)
                (a = s._soundById(e[n])) && (a._volume = t,
                i[2] || s._stopFade(e[n]),
                s._webAudio && a._node && !a._muted ? a._node.gain.setValueAtTime(t, m.ctx.currentTime) : a._node && !a._muted && (a._node.volume = t * m.volume()),
                s._emit("volume", a._id));
            return s
        },
        fade: function(t, e, a, s) {
            var i = this;
            if ("loaded" !== i._state)
                return i._queue.push({
                    event: "fade",
                    action: function() {
                        i.fade(t, e, a, s)
                    }
                }),
                i;
            i.volume(t, s);
            for (var n = i._getSoundIds(s), o = 0; o < n.length; o++) {
                var r, c, p = i._soundById(n[o]);
                p && (s || i._stopFade(n[o]),
                i._webAudio && !p._muted && (c = (r = m.ctx.currentTime) + a / 1e3,
                p._volume = t,
                p._node.gain.setValueAtTime(t, r),
                p._node.gain.linearRampToValueAtTime(e, c)),
                i._startFadeInterval(p, t, e, a, n[o], void 0 === s))
            }
            return i
        },
        _startFadeInterval: function(e, a, s, i, t, n) {
            var o = this
              , r = a
              , c = s - a
              , p = Math.abs(c / .01)
              , p = Math.max(4, 0 < p ? i / p : i)
              , h = Date.now();
            e._fadeTo = s,
            e._interval = setInterval(function() {
                var t = (Date.now() - h) / i;
                h = Date.now(),
                r += c * t,
                r = Math.max(0, r),
                r = Math.min(1, r),
                r = Math.round(100 * r) / 100,
                o._webAudio ? e._volume = r : o.volume(r, e._id, !0),
                n && (o._volume = r),
                (s < a && r <= s || a < s && s <= r) && (clearInterval(e._interval),
                e._interval = null,
                e._fadeTo = null,
                o.volume(s, e._id),
                o._emit("fade", e._id))
            }, p)
        },
        _stopFade: function(t) {
            var e = this
              , a = e._soundById(t);
            return a && a._interval && (e._webAudio && a._node.gain.cancelScheduledValues(m.ctx.currentTime),
            clearInterval(a._interval),
            a._interval = null,
            e.volume(a._fadeTo, t),
            a._fadeTo = null,
            e._emit("fade", t)),
            e
        },
        loop: function() {
            var t, e, a, s = this, i = arguments;
            if (0 === i.length)
                return s._loop;
            if (1 === i.length) {
                if ("boolean" != typeof i[0])
                    return !!(a = s._soundById(parseInt(i[0], 10))) && a._loop;
                t = i[0],
                s._loop = t
            } else
                2 === i.length && (t = i[0],
                e = parseInt(i[1], 10));
            for (var n = s._getSoundIds(e), o = 0; o < n.length; o++)
                (a = s._soundById(n[o])) && (a._loop = t,
                s._webAudio && a._node && a._node.bufferSource && (a._node.bufferSource.loop = t) && (a._node.bufferSource.loopStart = a._start || 0,
                a._node.bufferSource.loopEnd = a._stop));
            return s
        },
        rate: function() {
            var t, e, a = this, s = arguments;
            if (0 === s.length ? e = a._sounds[0]._id : 1 === s.length ? 0 <= a._getSoundIds().indexOf(s[0]) ? e = parseInt(s[0], 10) : t = parseFloat(s[0]) : 2 === s.length && (t = parseFloat(s[0]),
            e = parseInt(s[1], 10)),
            "number" != typeof t)
                return ((n = a._soundById(e)) || a)._rate;
            if ("loaded" !== a._state)
                return a._queue.push({
                    event: "rate",
                    action: function() {
                        a.rate.apply(a, s)
                    }
                }),
                a;
            void 0 === e && (a._rate = t),
            e = a._getSoundIds(e);
            for (var i, n, o = 0; o < e.length; o++)
                (n = a._soundById(e[o])) && (n._rateSeek = a.seek(e[o]),
                n._playStart = a._webAudio ? m.ctx.currentTime : n._playStart,
                n._rate = t,
                a._webAudio && n._node && n._node.bufferSource ? n._node.bufferSource.playbackRate.setValueAtTime(t, m.ctx.currentTime) : n._node && (n._node.playbackRate = t),
                i = a.seek(e[o]),
                i = 1e3 * ((a._sprite[n._sprite][0] + a._sprite[n._sprite][1]) / 1e3 - i) / Math.abs(n._rate),
                !a._endTimers[e[o]] && n._paused || (a._clearTimer(e[o]),
                a._endTimers[e[o]] = setTimeout(a._ended.bind(a, n), i)),
                a._emit("rate", n._id));
            return a
        },
        seek: function() {
            var t, e, a = this, s = arguments;
            if (0 === s.length ? e = a._sounds[0]._id : 1 === s.length ? 0 <= a._getSoundIds().indexOf(s[0]) ? e = parseInt(s[0], 10) : a._sounds.length && (e = a._sounds[0]._id,
            t = parseFloat(s[0])) : 2 === s.length && (t = parseFloat(s[0]),
            e = parseInt(s[1], 10)),
            void 0 === e)
                return a;
            if ("loaded" !== a._state)
                return a._queue.push({
                    event: "seek",
                    action: function() {
                        a.seek.apply(a, s)
                    }
                }),
                a;
            var i = a._soundById(e);
            if (i) {
                if (!("number" == typeof t && 0 <= t)) {
                    if (a._webAudio) {
                        var n = a.playing(e) ? m.ctx.currentTime - i._playStart : 0
                          , o = i._rateSeek ? i._rateSeek - i._seek : 0;
                        return i._seek + (o + n * Math.abs(i._rate))
                    }
                    return i._node.currentTime
                }
                n = a.playing(e);
                n && a.pause(e, !0),
                i._seek = t,
                i._ended = !1,
                a._clearTimer(e),
                n && a.play(e, !0),
                !a._webAudio && i._node && (i._node.currentTime = t),
                a._emit("seek", e)
            }
            return a
        },
        playing: function(t) {
            if ("number" == typeof t) {
                t = this._soundById(t);
                return !!t && !t._paused
            }
            for (var e = 0; e < this._sounds.length; e++)
                if (!this._sounds[e]._paused)
                    return !0;
            return !1
        },
        duration: function(t) {
            var e = this._duration
              , t = this._soundById(t);
            return t && (e = this._sprite[t._sprite][1] / 1e3),
            e
        },
        state: function() {
            return this._state
        },
        unload: function() {
            for (var t = this, e = t._sounds, a = 0; a < e.length; a++) {
                e[a]._paused || t.stop(e[a]._id),
                t._webAudio || (/MSIE |Trident\//.test(m._navigator && m._navigator.userAgent) || (e[a]._node.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"),
                e[a]._node.removeEventListener("error", e[a]._errorFn, !1),
                e[a]._node.removeEventListener(m._canPlayEvent, e[a]._loadFn, !1)),
                delete e[a]._node,
                t._clearTimer(e[a]._id);
                var s = m._howls.indexOf(t);
                0 <= s && m._howls.splice(s, 1)
            }
            for (var i = !0, a = 0; a < m._howls.length; a++)
                if (m._howls[a]._src === t._src) {
                    i = !1;
                    break
                }
            return o && i && delete o[t._src],
            m.noAudio = !1,
            t._state = "unloaded",
            t._sounds = [],
            t = null
        },
        on: function(t, e, a, s) {
            t = this["_on" + t];
            return "function" == typeof e && t.push(s ? {
                id: a,
                fn: e,
                once: s
            } : {
                id: a,
                fn: e
            }),
            this
        },
        off: function(t, e, a) {
            var s = this
              , i = s["_on" + t]
              , n = 0;
            if ("number" == typeof e && (a = e,
            e = null),
            e || a)
                for (n = 0; n < i.length; n++) {
                    var o = a === i[n].id;
                    if (e === i[n].fn && o || !e && o) {
                        i.splice(n, 1);
                        break
                    }
                }
            else if (t)
                s["_on" + t] = [];
            else
                for (var r = Object.keys(s), n = 0; n < r.length; n++)
                    0 === r[n].indexOf("_on") && Array.isArray(s[r[n]]) && (s[r[n]] = []);
            return s
        },
        once: function(t, e, a) {
            return this.on(t, e, a, 1),
            this
        },
        _emit: function(t, e, a) {
            for (var s = this["_on" + t], i = s.length - 1; 0 <= i; i--)
                s[i].id && s[i].id !== e && "load" !== t || (setTimeout(function(t) {
                    t.call(this, e, a)
                }
                .bind(this, s[i].fn), 0),
                s[i].once && this.off(t, s[i].fn, s[i].id));
            return this
        },
        _loadQueue: function() {
            var t, e = this;
            return 0 < e._queue.length && (t = e._queue[0],
            e.once(t.event, function() {
                e._queue.shift(),
                e._loadQueue()
            }),
            t.action()),
            e
        },
        _ended: function(t) {
            var e = this
              , a = t._sprite;
            if (!e._webAudio && t._node && !t._node.paused && !t._node.ended && t._node.currentTime < t._stop)
                return setTimeout(e._ended.bind(e, t), 100),
                e;
            var s = !(!t._loop && !e._sprite[a][2]);
            return e._emit("end", t._id),
            !e._webAudio && s && e.stop(t._id, !0).play(t._id),
            e._webAudio && s && (e._emit("play", t._id),
            t._seek = t._start || 0,
            t._rateSeek = 0,
            t._playStart = m.ctx.currentTime,
            a = 1e3 * (t._stop - t._start) / Math.abs(t._rate),
            e._endTimers[t._id] = setTimeout(e._ended.bind(e, t), a)),
            e._webAudio && !s && (t._paused = !0,
            t._ended = !0,
            t._seek = t._start || 0,
            t._rateSeek = 0,
            e._clearTimer(t._id),
            e._cleanBuffer(t._node),
            m._autoSuspend()),
            e._webAudio || s || e.stop(t._id),
            e
        },
        _clearTimer: function(t) {
            return this._endTimers[t] && (clearTimeout(this._endTimers[t]),
            delete this._endTimers[t]),
            this
        },
        _soundById: function(t) {
            for (var e = 0; e < this._sounds.length; e++)
                if (t === this._sounds[e]._id)
                    return this._sounds[e];
            return null
        },
        _inactiveSound: function() {
            var t = this;
            t._drain();
            for (var e = 0; e < t._sounds.length; e++)
                if (t._sounds[e]._ended)
                    return t._sounds[e].reset();
            return new n(t)
        },
        _drain: function() {
            var t = this
              , e = t._pool
              , a = 0
              , s = 0;
            if (!(t._sounds.length < e)) {
                for (s = 0; s < t._sounds.length; s++)
                    t._sounds[s]._ended && a++;
                for (s = t._sounds.length - 1; 0 <= s; s--) {
                    if (a <= e)
                        return;
                    t._sounds[s]._ended && (t._webAudio && t._sounds[s]._node && t._sounds[s]._node.disconnect(0),
                    t._sounds.splice(s, 1),
                    a--)
                }
            }
        },
        _getSoundIds: function(t) {
            if (void 0 !== t)
                return [t];
            for (var e = [], a = 0; a < this._sounds.length; a++)
                e.push(this._sounds[a]._id);
            return e
        },
        _refreshBuffer: function(t) {
            return t._node.bufferSource = m.ctx.createBufferSource(),
            t._node.bufferSource.buffer = o[this._src],
            t._panner ? t._node.bufferSource.connect(t._panner) : t._node.bufferSource.connect(t._node),
            t._node.bufferSource.loop = t._loop,
            t._loop && (t._node.bufferSource.loopStart = t._start || 0,
            t._node.bufferSource.loopEnd = t._stop),
            t._node.bufferSource.playbackRate.setValueAtTime(t._rate, m.ctx.currentTime),
            this
        },
        _cleanBuffer: function(t) {
            if (m._scratchBuffer) {
                t.bufferSource.onended = null,
                t.bufferSource.disconnect(0);
                try {
                    t.bufferSource.buffer = m._scratchBuffer
                } catch (t) {}
            }
            return t.bufferSource = null,
            this
        }
    };
    var n = function(t) {
        this._parent = t,
        this.init()
    };
    n.prototype = {
        init: function() {
            var t = this
              , e = t._parent;
            return t._muted = e._muted,
            t._loop = e._loop,
            t._volume = e._volume,
            t._rate = e._rate,
            t._seek = 0,
            t._paused = !0,
            t._ended = !0,
            t._sprite = "__default",
            t._id = ++m._counter,
            e._sounds.push(t),
            t.create(),
            t
        },
        create: function() {
            var t = this
              , e = t._parent
              , a = m._muted || t._muted || t._parent._muted ? 0 : t._volume;
            return e._webAudio ? (t._node = void 0 === m.ctx.createGain ? m.ctx.createGainNode() : m.ctx.createGain(),
            t._node.gain.setValueAtTime(a, m.ctx.currentTime),
            t._node.paused = !0,
            t._node.connect(m.masterGain)) : (t._node = new Audio,
            t._errorFn = t._errorListener.bind(t),
            t._node.addEventListener("error", t._errorFn, !1),
            t._loadFn = t._loadListener.bind(t),
            t._node.addEventListener(m._canPlayEvent, t._loadFn, !1),
            t._node.src = e._src,
            t._node.preload = "auto",
            t._node.volume = a * m.volume(),
            t._node.load()),
            t
        },
        reset: function() {
            var t = this
              , e = t._parent;
            return t._muted = e._muted,
            t._loop = e._loop,
            t._volume = e._volume,
            t._rate = e._rate,
            t._seek = 0,
            t._rateSeek = 0,
            t._paused = !0,
            t._ended = !0,
            t._sprite = "__default",
            t._id = ++m._counter,
            t
        },
        _errorListener: function() {
            var t = this;
            t._parent._emit("loaderror", t._id, t._node.error ? t._node.error.code : 0),
            t._node.removeEventListener("error", t._errorFn, !1)
        },
        _loadListener: function() {
            var t = this._parent;
            t._duration = Math.ceil(10 * this._node.duration) / 10,
            0 === Object.keys(t._sprite).length && (t._sprite = {
                __default: [0, 1e3 * t._duration]
            }),
            "loaded" !== t._state && (t._state = "loaded",
            t._emit("load"),
            t._loadQueue()),
            this._node.removeEventListener(m._canPlayEvent, this._loadFn, !1)
        }
    };
    var o = {}
      , r = function(e) {
        var t = e._src;
        if (o[t])
            return e._duration = o[t].duration,
            void h(e);
        if (/^data:[^;]+;base64,/.test(t)) {
            for (var a = atob(t.split(",")[1]), s = new Uint8Array(a.length), i = 0; i < a.length; ++i)
                s[i] = a.charCodeAt(i);
            p(s.buffer, e)
        } else {
            var n = new XMLHttpRequest;
            n.open("GET", t, !0),
            n.withCredentials = e._xhrWithCredentials,
            n.responseType = "arraybuffer",
            n.onload = function() {
                var t = (n.status + "")[0];
                "0" === t || "2" === t || "3" === t ? p(n.response, e) : e._emit("loaderror", null, "Failed loading audio file with status: " + n.status + ".")
            }
            ,
            n.onerror = function() {
                e._webAudio && (e._html5 = !0,
                e._webAudio = !1,
                e._sounds = [],
                delete o[t],
                e.load())
            }
            ,
            c(n)
        }
    }
      , c = function(e) {
        try {
            e.send()
        } catch (t) {
            e.onerror()
        }
    }
      , p = function(t, e) {
        m.ctx.decodeAudioData(t, function(t) {
            t && 0 < e._sounds.length && (o[e._src] = t,
            h(e, t))
        }, function() {
            e._emit("loaderror", null, "Decoding audio data failed.")
        })
    }
      , h = function(t, e) {
        e && !t._duration && (t._duration = e.duration),
        0 === Object.keys(t._sprite).length && (t._sprite = {
            __default: [0, 1e3 * t._duration]
        }),
        "loaded" !== t._state && (t._state = "loaded",
        t._emit("load"),
        t._loadQueue())
    }
      , l = function() {
        try {
            "undefined" != typeof AudioContext ? m.ctx = new AudioContext : "undefined" != typeof webkitAudioContext ? m.ctx = new webkitAudioContext : m.usingWebAudio = !1
        } catch (t) {
            m.usingWebAudio = !1
        }
        var t = /iP(hone|od|ad)/.test(m._navigator && m._navigator.platform)
          , e = m._navigator && m._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/)
          , e = e ? parseInt(e[1], 10) : null;
        t && e && e < 9 && (e = /safari/.test(m._navigator && m._navigator.userAgent.toLowerCase()),
        (m._navigator && m._navigator.standalone && !e || m._navigator && !m._navigator.standalone && !e) && (m.usingWebAudio = !1)),
        m.usingWebAudio && (m.masterGain = void 0 === m.ctx.createGain ? m.ctx.createGainNode() : m.ctx.createGain(),
        m.masterGain.gain.setValueAtTime(m._muted ? 0 : 1, m.ctx.currentTime),
        m.masterGain.connect(m.ctx.destination)),
        m._setup()
    };
    "function" == typeof define && define.amd && define([], function() {
        return {
            Howler: m,
            Howl: e
        }
    }),
    "undefined" != typeof exports && (exports.Howler = m,
    exports.Howl = e),
    "undefined" != typeof window ? (window.HowlerGlobal = t,
    window.Howler = m,
    window.Howl = e,
    window.Sound = n) : "undefined" != typeof global && (global.HowlerGlobal = t,
    global.Howler = m,
    global.Howl = e,
    global.Sound = n)
}(),
function() {
    "use strict";
    var a, s, e;
    HowlerGlobal.prototype._pos = [0, 0, 0],
    HowlerGlobal.prototype._orientation = [0, 0, -1, 0, 1, 0],
    HowlerGlobal.prototype.stereo = function(t) {
        var e = this;
        if (!e.ctx || !e.ctx.listener)
            return e;
        for (var a = e._howls.length - 1; 0 <= a; a--)
            e._howls[a].stereo(t);
        return e
    }
    ,
    HowlerGlobal.prototype.pos = function(t, e, a) {
        var s = this;
        return s.ctx && s.ctx.listener ? (e = "number" != typeof e ? s._pos[1] : e,
        a = "number" != typeof a ? s._pos[2] : a,
        "number" != typeof t ? s._pos : (s._pos = [t, e, a],
        s.ctx.listener.setPosition(s._pos[0], s._pos[1], s._pos[2]),
        s)) : s
    }
    ,
    HowlerGlobal.prototype.orientation = function(t, e, a, s, i, n) {
        var o = this;
        if (!o.ctx || !o.ctx.listener)
            return o;
        var r = o._orientation;
        return e = "number" != typeof e ? r[1] : e,
        a = "number" != typeof a ? r[2] : a,
        s = "number" != typeof s ? r[3] : s,
        i = "number" != typeof i ? r[4] : i,
        n = "number" != typeof n ? r[5] : n,
        "number" != typeof t ? r : (o._orientation = [t, e, a, s, i, n],
        o.ctx.listener.setOrientation(t, e, a, s, i, n),
        o)
    }
    ,
    Howl.prototype.init = (a = Howl.prototype.init,
    function(t) {
        var e = this;
        return e._orientation = t.orientation || [1, 0, 0],
        e._stereo = t.stereo || null,
        e._pos = t.pos || null,
        e._pannerAttr = {
            coneInnerAngle: void 0 !== t.coneInnerAngle ? t.coneInnerAngle : 360,
            coneOuterAngle: void 0 !== t.coneOuterAngle ? t.coneOuterAngle : 360,
            coneOuterGain: void 0 !== t.coneOuterGain ? t.coneOuterGain : 0,
            distanceModel: void 0 !== t.distanceModel ? t.distanceModel : "inverse",
            maxDistance: void 0 !== t.maxDistance ? t.maxDistance : 1e4,
            panningModel: void 0 !== t.panningModel ? t.panningModel : "HRTF",
            refDistance: void 0 !== t.refDistance ? t.refDistance : 1,
            rolloffFactor: void 0 !== t.rolloffFactor ? t.rolloffFactor : 1
        },
        e._onstereo = t.onstereo ? [{
            fn: t.onstereo
        }] : [],
        e._onpos = t.onpos ? [{
            fn: t.onpos
        }] : [],
        e._onorientation = t.onorientation ? [{
            fn: t.onorientation
        }] : [],
        a.call(this, t)
    }
    ),
    Howl.prototype.stereo = function(t, e) {
        var a = this;
        if (!a._webAudio)
            return a;
        if ("loaded" !== a._state)
            return a._queue.push({
                event: "stereo",
                action: function() {
                    a.stereo(t, e)
                }
            }),
            a;
        var s = void 0 === Howler.ctx.createStereoPanner ? "spatial" : "stereo";
        if (void 0 === e) {
            if ("number" != typeof t)
                return a._stereo;
            a._stereo = t,
            a._pos = [t, 0, 0]
        }
        for (var i = a._getSoundIds(e), n = 0; n < i.length; n++) {
            var o = a._soundById(i[n]);
            if (o) {
                if ("number" != typeof t)
                    return o._stereo;
                o._stereo = t,
                o._pos = [t, 0, 0],
                o._node && (o._pannerAttr.panningModel = "equalpower",
                o._panner && o._panner.pan || p(o, s),
                "spatial" == s ? o._panner.setPosition(t, 0, 0) : o._panner.pan.setValueAtTime(t, Howler.ctx.currentTime)),
                a._emit("stereo", o._id)
            }
        }
        return a
    }
    ,
    Howl.prototype.pos = function(t, e, a, s) {
        var i = this;
        if (!i._webAudio)
            return i;
        if ("loaded" !== i._state)
            return i._queue.push({
                event: "pos",
                action: function() {
                    i.pos(t, e, a, s)
                }
            }),
            i;
        if (e = "number" != typeof e ? 0 : e,
        a = "number" != typeof a ? -.5 : a,
        void 0 === s) {
            if ("number" != typeof t)
                return i._pos;
            i._pos = [t, e, a]
        }
        for (var n = i._getSoundIds(s), o = 0; o < n.length; o++) {
            var r = i._soundById(n[o]);
            if (r) {
                if ("number" != typeof t)
                    return r._pos;
                r._pos = [t, e, a],
                r._node && (r._panner && !r._panner.pan || p(r, "spatial"),
                r._panner.setPosition(t, e, a)),
                i._emit("pos", r._id)
            }
        }
        return i
    }
    ,
    Howl.prototype.orientation = function(t, e, a, s) {
        var i = this;
        if (!i._webAudio)
            return i;
        if ("loaded" !== i._state)
            return i._queue.push({
                event: "orientation",
                action: function() {
                    i.orientation(t, e, a, s)
                }
            }),
            i;
        if (e = "number" != typeof e ? i._orientation[1] : e,
        a = "number" != typeof a ? i._orientation[2] : a,
        void 0 === s) {
            if ("number" != typeof t)
                return i._orientation;
            i._orientation = [t, e, a]
        }
        for (var n = i._getSoundIds(s), o = 0; o < n.length; o++) {
            var r = i._soundById(n[o]);
            if (r) {
                if ("number" != typeof t)
                    return r._orientation;
                r._orientation = [t, e, a],
                r._node && (r._panner || (r._pos || (r._pos = i._pos || [0, 0, -.5]),
                p(r, "spatial")),
                r._panner.setOrientation(t, e, a)),
                i._emit("orientation", r._id)
            }
        }
        return i
    }
    ,
    Howl.prototype.pannerAttr = function() {
        var t, e, a = this, s = arguments;
        if (!a._webAudio)
            return a;
        if (0 === s.length)
            return a._pannerAttr;
        if (1 === s.length) {
            if ("object" != typeof s[0])
                return ((o = a._soundById(parseInt(s[0], 10))) || a)._pannerAttr;
            t = s[0],
            void 0 === e && (t.pannerAttr || (t.pannerAttr = {
                coneInnerAngle: t.coneInnerAngle,
                coneOuterAngle: t.coneOuterAngle,
                coneOuterGain: t.coneOuterGain,
                distanceModel: t.distanceModel,
                maxDistance: t.maxDistance,
                refDistance: t.refDistance,
                rolloffFactor: t.rolloffFactor,
                panningModel: t.panningModel
            }),
            a._pannerAttr = {
                coneInnerAngle: void 0 !== t.pannerAttr.coneInnerAngle ? t.pannerAttr.coneInnerAngle : a._coneInnerAngle,
                coneOuterAngle: void 0 !== t.pannerAttr.coneOuterAngle ? t.pannerAttr.coneOuterAngle : a._coneOuterAngle,
                coneOuterGain: void 0 !== t.pannerAttr.coneOuterGain ? t.pannerAttr.coneOuterGain : a._coneOuterGain,
                distanceModel: void 0 !== t.pannerAttr.distanceModel ? t.pannerAttr.distanceModel : a._distanceModel,
                maxDistance: void 0 !== t.pannerAttr.maxDistance ? t.pannerAttr.maxDistance : a._maxDistance,
                refDistance: void 0 !== t.pannerAttr.refDistance ? t.pannerAttr.refDistance : a._refDistance,
                rolloffFactor: void 0 !== t.pannerAttr.rolloffFactor ? t.pannerAttr.rolloffFactor : a._rolloffFactor,
                panningModel: void 0 !== t.pannerAttr.panningModel ? t.pannerAttr.panningModel : a._panningModel
            })
        } else
            2 === s.length && (t = s[0],
            e = parseInt(s[1], 10));
        for (var i, n, o, r = a._getSoundIds(e), c = 0; c < r.length; c++)
            (o = a._soundById(r[c])) && (i = o._pannerAttr,
            i = {
                coneInnerAngle: (void 0 !== t.coneInnerAngle ? t : i).coneInnerAngle,
                coneOuterAngle: (void 0 !== t.coneOuterAngle ? t : i).coneOuterAngle,
                coneOuterGain: (void 0 !== t.coneOuterGain ? t : i).coneOuterGain,
                distanceModel: (void 0 !== t.distanceModel ? t : i).distanceModel,
                maxDistance: (void 0 !== t.maxDistance ? t : i).maxDistance,
                refDistance: (void 0 !== t.refDistance ? t : i).refDistance,
                rolloffFactor: (void 0 !== t.rolloffFactor ? t : i).rolloffFactor,
                panningModel: (void 0 !== t.panningModel ? t : i).panningModel
            },
            (n = o._panner) ? (n.coneInnerAngle = i.coneInnerAngle,
            n.coneOuterAngle = i.coneOuterAngle,
            n.coneOuterGain = i.coneOuterGain,
            n.distanceModel = i.distanceModel,
            n.maxDistance = i.maxDistance,
            n.refDistance = i.refDistance,
            n.rolloffFactor = i.rolloffFactor,
            n.panningModel = i.panningModel) : (o._pos || (o._pos = a._pos || [0, 0, -.5]),
            p(o, "spatial")));
        return a
    }
    ,
    Sound.prototype.init = (s = Sound.prototype.init,
    function() {
        var t = this
          , e = t._parent;
        t._orientation = e._orientation,
        t._stereo = e._stereo,
        t._pos = e._pos,
        t._pannerAttr = e._pannerAttr,
        s.call(this),
        t._stereo ? e.stereo(t._stereo) : t._pos && e.pos(t._pos[0], t._pos[1], t._pos[2], t._id)
    }
    ),
    Sound.prototype.reset = (e = Sound.prototype.reset,
    function() {
        var t = this._parent;
        return this._orientation = t._orientation,
        this._pos = t._pos,
        this._pannerAttr = t._pannerAttr,
        e.call(this)
    }
    );
    var p = function(t, e) {
        "spatial" === (e = e || "spatial") ? (t._panner = Howler.ctx.createPanner(),
        t._panner.coneInnerAngle = t._pannerAttr.coneInnerAngle,
        t._panner.coneOuterAngle = t._pannerAttr.coneOuterAngle,
        t._panner.coneOuterGain = t._pannerAttr.coneOuterGain,
        t._panner.distanceModel = t._pannerAttr.distanceModel,
        t._panner.maxDistance = t._pannerAttr.maxDistance,
        t._panner.refDistance = t._pannerAttr.refDistance,
        t._panner.rolloffFactor = t._pannerAttr.rolloffFactor,
        t._panner.panningModel = t._pannerAttr.panningModel,
        t._panner.setPosition(t._pos[0], t._pos[1], t._pos[2]),
        t._panner.setOrientation(t._orientation[0], t._orientation[1], t._orientation[2])) : (t._panner = Howler.ctx.createStereoPanner(),
        t._panner.pan.setValueAtTime(t._stereo, Howler.ctx.currentTime)),
        t._panner.connect(t._node),
        t._paused || t._parent.pause(t._id, !0).play(t._id, !0)
    }
}();
var _Group = function() {
    this._tweens = {},
    this._tweensAddedDuringUpdate = {}
};
_Group.prototype = {
    getAll: function() {
        return Object.keys(this._tweens).map(function(t) {
            return this._tweens[t]
        }
        .bind(this))
    },
    removeAll: function() {
        this._tweens = {}
    },
    add: function(t) {
        this._tweens[t.getId()] = t,
        this._tweensAddedDuringUpdate[t.getId()] = t
    },
    remove: function(t) {
        delete this._tweens[t.getId()],
        delete this._tweensAddedDuringUpdate[t.getId()]
    },
    update: function(t, e) {
        var a = Object.keys(this._tweens);
        if (0 === a.length)
            return !1;
        for (t = void 0 !== t ? t : TWEEN.now(); 0 < a.length; ) {
            this._tweensAddedDuringUpdate = {};
            for (var s = 0; s < a.length; s++) {
                var i = this._tweens[a[s]];
                i && !1 === i.update(t) && (i._isPlaying = !1,
                e || delete this._tweens[a[s]])
            }
            a = Object.keys(this._tweensAddedDuringUpdate)
        }
        return !0
    }
};
var TWEEN = new _Group;
TWEEN.Group = _Group,
TWEEN._nextId = 0,
TWEEN.nextId = function() {
    return TWEEN._nextId++
}
,
"undefined" == typeof window && "undefined" != typeof process ? TWEEN.now = function() {
    var t = process.hrtime();
    return 1e3 * t[0] + t[1] / 1e6
}
: "undefined" != typeof window && void 0 !== window.performance && void 0 !== window.performance.now ? TWEEN.now = window.performance.now.bind(window.performance) : void 0 !== Date.now ? TWEEN.now = Date.now : TWEEN.now = function() {
    return (new Date).getTime()
}
,
TWEEN.Tween = function(t, e) {
    this._object = t,
    this._valuesStart = {},
    this._valuesEnd = {},
    this._valuesStartRepeat = {},
    this._duration = 1e3,
    this._repeat = 0,
    this._repeatDelayTime = void 0,
    this._yoyo = !1,
    this._isPlaying = !1,
    this._reversed = !1,
    this._delayTime = 0,
    this._startTime = null,
    this._easingFunction = TWEEN.Easing.Linear.None,
    this._interpolationFunction = TWEEN.Interpolation.Linear,
    this._chainedTweens = [],
    this._onStartCallback = null,
    this._onStartCallbackFired = !1,
    this._onUpdateCallback = null,
    this._onCompleteCallback = null,
    this._onStopCallback = null,
    this._group = e || TWEEN,
    this._id = TWEEN.nextId()
}
,
TWEEN.Tween.prototype = {
    getId: function() {
        return this._id
    },
    isPlaying: function() {
        return this._isPlaying
    },
    to: function(t, e) {
        return this._valuesEnd = t,
        void 0 !== e && (this._duration = e),
        this
    },
    start: function(t) {
        for (var e in this._group.add(this),
        this._isPlaying = !0,
        this._onStartCallbackFired = !1,
        this._startTime = void 0 !== t ? "string" == typeof t ? TWEEN.now() + parseFloat(t) : t : TWEEN.now(),
        this._startTime += this._delayTime,
        this._valuesEnd) {
            if (this._valuesEnd[e]instanceof Array) {
                if (0 === this._valuesEnd[e].length)
                    continue;
                this._valuesEnd[e] = [this._object[e]].concat(this._valuesEnd[e])
            }
            void 0 !== this._object[e] && (this._valuesStart[e] = this._object[e],
            this._valuesStart[e]instanceof Array == !1 && (this._valuesStart[e] *= 1),
            this._valuesStartRepeat[e] = this._valuesStart[e] || 0)
        }
        return this
    },
    stop: function() {
        return this._isPlaying && (this._group.remove(this),
        this._isPlaying = !1,
        null !== this._onStopCallback && this._onStopCallback(this._object),
        this.stopChainedTweens()),
        this
    },
    end: function() {
        return this.update(this._startTime + this._duration),
        this
    },
    stopChainedTweens: function() {
        for (var t = 0, e = this._chainedTweens.length; t < e; t++)
            this._chainedTweens[t].stop()
    },
    delay: function(t) {
        return this._delayTime = t,
        this
    },
    repeat: function(t) {
        return this._repeat = t,
        this
    },
    repeatDelay: function(t) {
        return this._repeatDelayTime = t,
        this
    },
    yoyo: function(t) {
        return this._yoyo = t,
        this
    },
    easing: function(t) {
        return this._easingFunction = t,
        this
    },
    interpolation: function(t) {
        return this._interpolationFunction = t,
        this
    },
    chain: function() {
        return this._chainedTweens = arguments,
        this
    },
    onStart: function(t) {
        return this._onStartCallback = t,
        this
    },
    onUpdate: function(t) {
        return this._onUpdateCallback = t,
        this
    },
    onComplete: function(t) {
        return this._onCompleteCallback = t,
        this
    },
    onStop: function(t) {
        return this._onStopCallback = t,
        this
    },
    update: function(t) {
        var e, a, s, i, n, o;
        if (t < this._startTime)
            return !0;
        for (e in !1 === this._onStartCallbackFired && (null !== this._onStartCallback && this._onStartCallback(this._object),
        this._onStartCallbackFired = !0),
        a = 1 < (a = (t - this._startTime) / this._duration) ? 1 : a,
        s = this._easingFunction(a),
        this._valuesEnd)
            void 0 !== this._valuesStart[e] && (i = this._valuesStart[e] || 0,
            (n = this._valuesEnd[e])instanceof Array ? this._object[e] = this._interpolationFunction(n, s) : ("string" == typeof n && (n = "+" === n.charAt(0) || "-" === n.charAt(0) ? i + parseFloat(n) : parseFloat(n)),
            "number" == typeof n && (this._object[e] = i + (n - i) * s)));
        if (null !== this._onUpdateCallback && this._onUpdateCallback(this._object),
        1 !== a)
            return !0;
        if (0 < this._repeat) {
            for (e in isFinite(this._repeat) && this._repeat--,
            this._valuesStartRepeat)
                "string" == typeof this._valuesEnd[e] && (this._valuesStartRepeat[e] = this._valuesStartRepeat[e] + parseFloat(this._valuesEnd[e])),
                this._yoyo && (o = this._valuesStartRepeat[e],
                this._valuesStartRepeat[e] = this._valuesEnd[e],
                this._valuesEnd[e] = o),
                this._valuesStart[e] = this._valuesStartRepeat[e];
            return this._yoyo && (this._reversed = !this._reversed),
            void 0 !== this._repeatDelayTime ? this._startTime = t + this._repeatDelayTime : this._startTime = t + this._delayTime,
            !0
        }
        null !== this._onCompleteCallback && this._onCompleteCallback(this._object);
        for (var r = 0, c = this._chainedTweens.length; r < c; r++)
            this._chainedTweens[r].start(this._startTime + this._duration);
        return !1
    }
},
TWEEN.Easing = {
    Linear: {
        None: function(t) {
            return t
        }
    },
    Quadratic: {
        In: function(t) {
            return t * t
        },
        Out: function(t) {
            return t * (2 - t)
        },
        InOut: function(t) {
            return (t *= 2) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1)
        }
    },
    Cubic: {
        In: function(t) {
            return t * t * t
        },
        Out: function(t) {
            return --t * t * t + 1
        },
        InOut: function(t) {
            return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2)
        }
    },
    Quartic: {
        In: function(t) {
            return t * t * t * t
        },
        Out: function(t) {
            return 1 - --t * t * t * t
        },
        InOut: function(t) {
            return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2)
        }
    },
    Quintic: {
        In: function(t) {
            return t * t * t * t * t
        },
        Out: function(t) {
            return --t * t * t * t * t + 1
        },
        InOut: function(t) {
            return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2)
        }
    },
    Sinusoidal: {
        In: function(t) {
            return 1 - Math.cos(t * Math.PI / 2)
        },
        Out: function(t) {
            return Math.sin(t * Math.PI / 2)
        },
        InOut: function(t) {
            return .5 * (1 - Math.cos(Math.PI * t))
        }
    },
    Exponential: {
        In: function(t) {
            return 0 === t ? 0 : Math.pow(1024, t - 1)
        },
        Out: function(t) {
            return 1 === t ? 1 : 1 - Math.pow(2, -10 * t)
        },
        InOut: function(t) {
            return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? .5 * Math.pow(1024, t - 1) : .5 * (2 - Math.pow(2, -10 * (t - 1)))
        }
    },
    Circular: {
        In: function(t) {
            return 1 - Math.sqrt(1 - t * t)
        },
        Out: function(t) {
            return Math.sqrt(1 - --t * t)
        },
        InOut: function(t) {
            return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1)
        }
    },
    Elastic: {
        In: function(t) {
            return 0 === t ? 0 : 1 === t ? 1 : -Math.pow(2, 10 * (t - 1)) * Math.sin(5 * (t - 1.1) * Math.PI)
        },
        Out: function(t) {
            return 0 === t ? 0 : 1 === t ? 1 : Math.pow(2, -10 * t) * Math.sin(5 * (t - .1) * Math.PI) + 1
        },
        InOut: function(t) {
            return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? -.5 * Math.pow(2, 10 * (t - 1)) * Math.sin(5 * (t - 1.1) * Math.PI) : .5 * Math.pow(2, -10 * (t - 1)) * Math.sin(5 * (t - 1.1) * Math.PI) + 1
        }
    },
    Back: {
        In: function(t) {
            return t * t * (2.70158 * t - 1.70158)
        },
        Out: function(t) {
            return --t * t * (2.70158 * t + 1.70158) + 1
        },
        InOut: function(t) {
            var e = 2.5949095;
            return (t *= 2) < 1 ? t * t * ((1 + e) * t - e) * .5 : .5 * ((t -= 2) * t * ((1 + e) * t + e) + 2)
        }
    },
    Bounce: {
        In: function(t) {
            return 1 - TWEEN.Easing.Bounce.Out(1 - t)
        },
        Out: function(t) {
            return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375
        },
        InOut: function(t) {
            return t < .5 ? .5 * TWEEN.Easing.Bounce.In(2 * t) : .5 * TWEEN.Easing.Bounce.Out(2 * t - 1) + .5
        }
    }
},
TWEEN.Interpolation = {
    Linear: function(t, e) {
        var a = t.length - 1
          , s = a * e
          , i = Math.floor(s)
          , n = TWEEN.Interpolation.Utils.Linear;
        return e < 0 ? n(t[0], t[1], s) : 1 < e ? n(t[a], t[a - 1], a - s) : n(t[i], t[a < i + 1 ? a : i + 1], s - i)
    },
    Bezier: function(t, e) {
        for (var a = 0, s = t.length - 1, i = Math.pow, n = TWEEN.Interpolation.Utils.Bernstein, o = 0; o <= s; o++)
            a += i(1 - e, s - o) * i(e, o) * t[o] * n(s, o);
        return a
    },
    CatmullRom: function(t, e) {
        var a = t.length - 1
          , s = a * e
          , i = Math.floor(s)
          , n = TWEEN.Interpolation.Utils.CatmullRom;
        return t[0] === t[a] ? (e < 0 && (i = Math.floor(s = a * (1 + e))),
        n(t[(i - 1 + a) % a], t[i], t[(i + 1) % a], t[(i + 2) % a], s - i)) : e < 0 ? t[0] - (n(t[0], t[0], t[1], t[1], -s) - t[0]) : 1 < e ? t[a] - (n(t[a], t[a], t[a - 1], t[a - 1], s - a) - t[a]) : n(t[i ? i - 1 : 0], t[i], t[a < i + 1 ? a : i + 1], t[a < i + 2 ? a : i + 2], s - i)
    },
    Utils: {
        Linear: function(t, e, a) {
            return (e - t) * a + t
        },
        Bernstein: function(t, e) {
            var a = TWEEN.Interpolation.Utils.Factorial;
            return a(t) / a(e) / a(t - e)
        },
        Factorial: function() {
            var s = [1];
            return function(t) {
                var e = 1;
                if (s[t])
                    return s[t];
                for (var a = t; 1 < a; a--)
                    e *= a;
                return s[t] = e
            }
        }(),
        CatmullRom: function(t, e, a, s, i) {
            var n = .5 * (a - t)
              , t = .5 * (s - e)
              , s = i * i;
            return (2 * e - 2 * a + n + t) * (i * s) + (-3 * e + 3 * a - 2 * n - t) * s + n * i + e
        }
    }
},
function(t) {
    "function" == typeof define && define.amd ? define([], function() {
        return TWEEN
    }) : "undefined" != typeof module && "object" == typeof exports ? module.exports = TWEEN : void 0 !== t && (t.TWEEN = TWEEN)
}(this),
function(t) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define([], t) : ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).pako = t()
}(function() {
    return function s(i, n, o) {
        function r(e, t) {
            if (!n[e]) {
                if (!i[e]) {
                    var a = "function" == typeof require && require;
                    if (!t && a)
                        return a(e, !0);
                    if (c)
                        return c(e, !0);
                    a = new Error("Cannot find module '" + e + "'");
                    throw a.code = "MODULE_NOT_FOUND",
                    a
                }
                a = n[e] = {
                    exports: {}
                };
                i[e][0].call(a.exports, function(t) {
                    return r(i[e][1][t] || t)
                }, a, a.exports, s, i, n, o)
            }
            return n[e].exports
        }
        for (var c = "function" == typeof require && require, t = 0; t < o.length; t++)
            r(o[t]);
        return r
    }({
        1: [function(t, e, a) {
            "use strict";
            var s = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;
            a.assign = function(t) {
                for (var e, a, s = Array.prototype.slice.call(arguments, 1); s.length; ) {
                    var i = s.shift();
                    if (i) {
                        if ("object" != typeof i)
                            throw new TypeError(i + "must be non-object");
                        for (var n in i)
                            e = i,
                            a = n,
                            Object.prototype.hasOwnProperty.call(e, a) && (t[n] = i[n])
                    }
                }
                return t
            }
            ,
            a.shrinkBuf = function(t, e) {
                return t.length === e ? t : t.subarray ? t.subarray(0, e) : (t.length = e,
                t)
            }
            ;
            var i = {
                arraySet: function(t, e, a, s, i) {
                    if (e.subarray && t.subarray)
                        t.set(e.subarray(a, a + s), i);
                    else
                        for (var n = 0; n < s; n++)
                            t[i + n] = e[a + n]
                },
                flattenChunks: function(t) {
                    for (var e, a, s, i = 0, n = 0, o = t.length; n < o; n++)
                        i += t[n].length;
                    for (s = new Uint8Array(i),
                    n = e = 0,
                    o = t.length; n < o; n++)
                        a = t[n],
                        s.set(a, e),
                        e += a.length;
                    return s
                }
            }
              , n = {
                arraySet: function(t, e, a, s, i) {
                    for (var n = 0; n < s; n++)
                        t[i + n] = e[a + n]
                },
                flattenChunks: function(t) {
                    return [].concat.apply([], t)
                }
            };
            a.setTyped = function(t) {
                t ? (a.Buf8 = Uint8Array,
                a.Buf16 = Uint16Array,
                a.Buf32 = Int32Array,
                a.assign(a, i)) : (a.Buf8 = Array,
                a.Buf16 = Array,
                a.Buf32 = Array,
                a.assign(a, n))
            }
            ,
            a.setTyped(s)
        }
        , {}],
        2: [function(t, e, a) {
            "use strict";
            function c(t, e) {
                if (e < 65537 && (t.subarray && n || !t.subarray && i))
                    return String.fromCharCode.apply(null, p.shrinkBuf(t, e));
                for (var a = "", s = 0; s < e; s++)
                    a += String.fromCharCode(t[s]);
                return a
            }
            var p = t("./common")
              , i = !0
              , n = !0;
            try {
                String.fromCharCode.apply(null, [0])
            } catch (t) {
                i = !1
            }
            try {
                String.fromCharCode.apply(null, new Uint8Array(1))
            } catch (t) {
                n = !1
            }
            for (var h = new p.Buf8(256), s = 0; s < 256; s++)
                h[s] = 252 <= s ? 6 : 248 <= s ? 5 : 240 <= s ? 4 : 224 <= s ? 3 : 192 <= s ? 2 : 1;
            h[254] = h[254] = 1,
            a.string2buf = function(t) {
                for (var e, a, s, i, n = t.length, o = 0, r = 0; r < n; r++)
                    55296 == (64512 & (a = t.charCodeAt(r))) && r + 1 < n && 56320 == (64512 & (s = t.charCodeAt(r + 1))) && (a = 65536 + (a - 55296 << 10) + (s - 56320),
                    r++),
                    o += a < 128 ? 1 : a < 2048 ? 2 : a < 65536 ? 3 : 4;
                for (e = new p.Buf8(o),
                r = i = 0; i < o; r++)
                    55296 == (64512 & (a = t.charCodeAt(r))) && r + 1 < n && 56320 == (64512 & (s = t.charCodeAt(r + 1))) && (a = 65536 + (a - 55296 << 10) + (s - 56320),
                    r++),
                    a < 128 ? e[i++] = a : (a < 2048 ? e[i++] = 192 | a >>> 6 : (a < 65536 ? e[i++] = 224 | a >>> 12 : (e[i++] = 240 | a >>> 18,
                    e[i++] = 128 | a >>> 12 & 63),
                    e[i++] = 128 | a >>> 6 & 63),
                    e[i++] = 128 | 63 & a);
                return e
            }
            ,
            a.buf2binstring = function(t) {
                return c(t, t.length)
            }
            ,
            a.binstring2buf = function(t) {
                for (var e = new p.Buf8(t.length), a = 0, s = e.length; a < s; a++)
                    e[a] = t.charCodeAt(a);
                return e
            }
            ,
            a.buf2string = function(t, e) {
                for (var a, s, i = e || t.length, n = new Array(2 * i), o = 0, r = 0; r < i; )
                    if ((a = t[r++]) < 128)
                        n[o++] = a;
                    else if (4 < (s = h[a]))
                        n[o++] = 65533,
                        r += s - 1;
                    else {
                        for (a &= 2 === s ? 31 : 3 === s ? 15 : 7; 1 < s && r < i; )
                            a = a << 6 | 63 & t[r++],
                            s--;
                        1 < s ? n[o++] = 65533 : a < 65536 ? n[o++] = a : (a -= 65536,
                        n[o++] = 55296 | a >> 10 & 1023,
                        n[o++] = 56320 | 1023 & a)
                    }
                return c(n, o)
            }
            ,
            a.utf8border = function(t, e) {
                var a;
                for ((e = e || t.length) > t.length && (e = t.length),
                a = e - 1; 0 <= a && 128 == (192 & t[a]); )
                    a--;
                return !(a < 0) && 0 !== a && a + h[t[a]] > e ? a : e
            }
        }
        , {
            "./common": 1
        }],
        3: [function(t, e, a) {
            "use strict";
            e.exports = function(t, e, a, s) {
                for (var i = 65535 & t | 0, n = t >>> 16 & 65535 | 0, o = 0; 0 !== a; ) {
                    for (a -= o = 2e3 < a ? 2e3 : a; n = n + (i = i + e[s++] | 0) | 0,
                    --o; )
                        ;
                    i %= 65521,
                    n %= 65521
                }
                return i | n << 16 | 0
            }
        }
        , {}],
        4: [function(t, e, a) {
            "use strict";
            e.exports = {
                Z_NO_FLUSH: 0,
                Z_PARTIAL_FLUSH: 1,
                Z_SYNC_FLUSH: 2,
                Z_FULL_FLUSH: 3,
                Z_FINISH: 4,
                Z_BLOCK: 5,
                Z_TREES: 6,
                Z_OK: 0,
                Z_STREAM_END: 1,
                Z_NEED_DICT: 2,
                Z_ERRNO: -1,
                Z_STREAM_ERROR: -2,
                Z_DATA_ERROR: -3,
                Z_BUF_ERROR: -5,
                Z_NO_COMPRESSION: 0,
                Z_BEST_SPEED: 1,
                Z_BEST_COMPRESSION: 9,
                Z_DEFAULT_COMPRESSION: -1,
                Z_FILTERED: 1,
                Z_HUFFMAN_ONLY: 2,
                Z_RLE: 3,
                Z_FIXED: 4,
                Z_DEFAULT_STRATEGY: 0,
                Z_BINARY: 0,
                Z_TEXT: 1,
                Z_UNKNOWN: 2,
                Z_DEFLATED: 8
            }
        }
        , {}],
        5: [function(t, e, a) {
            "use strict";
            var r = function() {
                for (var t, e = [], a = 0; a < 256; a++) {
                    t = a;
                    for (var s = 0; s < 8; s++)
                        t = 1 & t ? 3988292384 ^ t >>> 1 : t >>> 1;
                    e[a] = t
                }
                return e
            }();
            e.exports = function(t, e, a, s) {
                var i = r
                  , n = s + a;
                t ^= -1;
                for (var o = s; o < n; o++)
                    t = t >>> 8 ^ i[255 & (t ^ e[o])];
                return -1 ^ t
            }
        }
        , {}],
        6: [function(t, e, a) {
            "use strict";
            e.exports = function() {
                this.text = 0,
                this.time = 0,
                this.xflags = 0,
                this.os = 0,
                this.extra = null,
                this.extra_len = 0,
                this.name = "",
                this.comment = "",
                this.hcrc = 0,
                this.done = !1
            }
        }
        , {}],
        7: [function(t, e, a) {
            "use strict";
            e.exports = function(t, e) {
                var a, s, i, n, o, r, c = t.state, p = t.next_in, h = t.input, l = p + (t.avail_in - 5), d = t.next_out, v = t.output, u = d - (e - t.avail_out), m = d + (t.avail_out - 257), _ = c.dmax, g = c.wsize, f = c.whave, w = c.wnext, E = c.window, b = c.hold, C = c.bits, y = c.lencode, T = c.distcode, M = (1 << c.lenbits) - 1, S = (1 << c.distbits) - 1;
                t: do {
                    C < 15 && (b += h[p++] << C,
                    C += 8,
                    b += h[p++] << C,
                    C += 8),
                    a = y[b & M];
                    e: for (; ; ) {
                        if (b >>>= s = a >>> 24,
                        C -= s,
                        0 == (s = a >>> 16 & 255))
                            v[d++] = 65535 & a;
                        else {
                            if (!(16 & s)) {
                                if (0 == (64 & s)) {
                                    a = y[(65535 & a) + (b & (1 << s) - 1)];
                                    continue e
                                }
                                if (32 & s) {
                                    c.mode = 12;
                                    break t
                                }
                                t.msg = "invalid literal/length code",
                                c.mode = 30;
                                break t
                            }
                            i = 65535 & a,
                            (s &= 15) && (C < s && (b += h[p++] << C,
                            C += 8),
                            i += b & (1 << s) - 1,
                            b >>>= s,
                            C -= s),
                            C < 15 && (b += h[p++] << C,
                            C += 8,
                            b += h[p++] << C,
                            C += 8),
                            a = T[b & S];
                            a: for (; ; ) {
                                if (b >>>= s = a >>> 24,
                                C -= s,
                                !(16 & (s = a >>> 16 & 255))) {
                                    if (0 == (64 & s)) {
                                        a = T[(65535 & a) + (b & (1 << s) - 1)];
                                        continue a
                                    }
                                    t.msg = "invalid distance code",
                                    c.mode = 30;
                                    break t
                                }
                                if (n = 65535 & a,
                                C < (s &= 15) && (b += h[p++] << C,
                                (C += 8) < s && (b += h[p++] << C,
                                C += 8)),
                                (n += b & (1 << s) - 1) > _) {
                                    t.msg = "invalid distance too far back",
                                    c.mode = 30;
                                    break t
                                }
                                if (b >>>= s,
                                C -= s,
                                (s = d - u) < n) {
                                    if ((s = n - s) > f && c.sane) {
                                        t.msg = "invalid distance too far back",
                                        c.mode = 30;
                                        break t
                                    }
                                    if (r = E,
                                    (o = 0) === w) {
                                        if (o += g - s,
                                        s < i) {
                                            for (i -= s; v[d++] = E[o++],
                                            --s; )
                                                ;
                                            o = d - n,
                                            r = v
                                        }
                                    } else if (w < s) {
                                        if (o += g + w - s,
                                        (s -= w) < i) {
                                            for (i -= s; v[d++] = E[o++],
                                            --s; )
                                                ;
                                            if (o = 0,
                                            w < i) {
                                                for (i -= s = w; v[d++] = E[o++],
                                                --s; )
                                                    ;
                                                o = d - n,
                                                r = v
                                            }
                                        }
                                    } else if (o += w - s,
                                    s < i) {
                                        for (i -= s; v[d++] = E[o++],
                                        --s; )
                                            ;
                                        o = d - n,
                                        r = v
                                    }
                                    for (; 2 < i; )
                                        v[d++] = r[o++],
                                        v[d++] = r[o++],
                                        v[d++] = r[o++],
                                        i -= 3;
                                    i && (v[d++] = r[o++],
                                    1 < i && (v[d++] = r[o++]))
                                } else {
                                    for (o = d - n; v[d++] = v[o++],
                                    v[d++] = v[o++],
                                    v[d++] = v[o++],
                                    i -= 3,
                                    2 < i; )
                                        ;
                                    i && (v[d++] = v[o++],
                                    1 < i && (v[d++] = v[o++]))
                                }
                                break
                            }
                        }
                        break
                    }
                } while (p < l && d < m);
                p -= i = C >> 3,
                b &= (1 << (C -= i << 3)) - 1,
                t.next_in = p,
                t.next_out = d,
                t.avail_in = p < l ? l - p + 5 : 5 - (p - l),
                t.avail_out = d < m ? m - d + 257 : 257 - (d - m),
                c.hold = b,
                c.bits = C
            }
        }
        , {}],
        8: [function(t, e, a) {
            "use strict";
            function A(t) {
                return (t >>> 24 & 255) + (t >>> 8 & 65280) + ((65280 & t) << 8) + ((255 & t) << 24)
            }
            function s() {
                this.mode = 0,
                this.last = !1,
                this.wrap = 0,
                this.havedict = !1,
                this.flags = 0,
                this.dmax = 0,
                this.check = 0,
                this.total = 0,
                this.head = null,
                this.wbits = 0,
                this.wsize = 0,
                this.whave = 0,
                this.wnext = 0,
                this.window = null,
                this.hold = 0,
                this.bits = 0,
                this.length = 0,
                this.offset = 0,
                this.extra = 0,
                this.lencode = null,
                this.distcode = null,
                this.lenbits = 0,
                this.distbits = 0,
                this.ncode = 0,
                this.nlen = 0,
                this.ndist = 0,
                this.have = 0,
                this.next = null,
                this.lens = new k.Buf16(320),
                this.work = new k.Buf16(288),
                this.lendyn = null,
                this.distdyn = null,
                this.sane = 0,
                this.back = 0,
                this.was = 0
            }
            function i(t) {
                var e;
                return t && t.state ? (e = t.state,
                t.total_in = t.total_out = e.total = 0,
                t.msg = "",
                e.wrap && (t.adler = 1 & e.wrap),
                e.mode = W,
                e.last = 0,
                e.havedict = 0,
                e.dmax = 32768,
                e.head = null,
                e.hold = 0,
                e.bits = 0,
                e.lencode = e.lendyn = new k.Buf32(c),
                e.distcode = e.distdyn = new k.Buf32(p),
                e.sane = 1,
                e.back = -1,
                V) : U
            }
            function n(t) {
                var e;
                return t && t.state ? ((e = t.state).wsize = 0,
                e.whave = 0,
                e.wnext = 0,
                i(t)) : U
            }
            function o(t, e) {
                var a, s;
                return t && t.state ? (s = t.state,
                e < 0 ? (a = 0,
                e = -e) : (a = 1 + (e >> 4),
                e < 48 && (e &= 15)),
                e && (e < 8 || 15 < e) ? U : (null !== s.window && s.wbits !== e && (s.window = null),
                s.wrap = a,
                s.wbits = e,
                n(t))) : U
            }
            function r(t, e) {
                var a;
                return t ? (a = new s,
                (t.state = a).window = null,
                (e = o(t, e)) !== V && (t.state = null),
                e) : U
            }
            function L(t, e, a, s) {
                var i = t.state;
                return null === i.window && (i.wsize = 1 << i.wbits,
                i.wnext = 0,
                i.whave = 0,
                i.window = new k.Buf8(i.wsize)),
                s >= i.wsize ? (k.arraySet(i.window, e, a - i.wsize, i.wsize, 0),
                i.wnext = 0,
                i.whave = i.wsize) : ((t = i.wsize - i.wnext) > s && (t = s),
                k.arraySet(i.window, e, a - s, t, i.wnext),
                (s -= t) ? (k.arraySet(i.window, e, a - s, s, 0),
                i.wnext = s,
                i.whave = i.wsize) : (i.wnext += t,
                i.wnext === i.wsize && (i.wnext = 0),
                i.whave < i.wsize && (i.whave += t))),
                0
            }
            var O, R, k = t("../utils/common"), P = t("./adler32"), B = t("./crc32"), H = t("./inffast"), N = t("./inftrees"), F = 1, D = 2, V = 0, U = -2, W = 1, c = 852, p = 592, G = !0;
            a.inflateReset = n,
            a.inflateReset2 = o,
            a.inflateResetKeep = i,
            a.inflateInit = function(t) {
                return r(t, 15)
            }
            ,
            a.inflateInit2 = r,
            a.inflate = function(t, e) {
                var a, s, i, n, o, r, c, p, h, l, d, v, u, m, _, g, f, w, E, b, C, y, T, M, S = 0, x = new k.Buf8(4), I = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
                if (!t || !t.state || !t.output || !t.input && 0 !== t.avail_in)
                    return U;
                12 === (a = t.state).mode && (a.mode = 13),
                o = t.next_out,
                i = t.output,
                c = t.avail_out,
                n = t.next_in,
                s = t.input,
                r = t.avail_in,
                p = a.hold,
                h = a.bits,
                l = r,
                d = c,
                y = V;
                t: for (; ; )
                    switch (a.mode) {
                    case W:
                        if (0 === a.wrap) {
                            a.mode = 13;
                            break
                        }
                        for (; h < 16; ) {
                            if (0 === r)
                                break t;
                            r--,
                            p += s[n++] << h,
                            h += 8
                        }
                        if (2 & a.wrap && 35615 === p) {
                            x[a.check = 0] = 255 & p,
                            x[1] = p >>> 8 & 255,
                            a.check = B(a.check, x, 2, 0),
                            h = p = 0,
                            a.mode = 2;
                            break
                        }
                        if (a.flags = 0,
                        a.head && (a.head.done = !1),
                        !(1 & a.wrap) || (((255 & p) << 8) + (p >> 8)) % 31) {
                            t.msg = "incorrect header check",
                            a.mode = 30;
                            break
                        }
                        if (8 != (15 & p)) {
                            t.msg = "unknown compression method",
                            a.mode = 30;
                            break
                        }
                        if (h -= 4,
                        C = 8 + (15 & (p >>>= 4)),
                        0 === a.wbits)
                            a.wbits = C;
                        else if (C > a.wbits) {
                            t.msg = "invalid window size",
                            a.mode = 30;
                            break
                        }
                        a.dmax = 1 << C,
                        t.adler = a.check = 1,
                        a.mode = 512 & p ? 10 : 12,
                        h = p = 0;
                        break;
                    case 2:
                        for (; h < 16; ) {
                            if (0 === r)
                                break t;
                            r--,
                            p += s[n++] << h,
                            h += 8
                        }
                        if (a.flags = p,
                        8 != (255 & a.flags)) {
                            t.msg = "unknown compression method",
                            a.mode = 30;
                            break
                        }
                        if (57344 & a.flags) {
                            t.msg = "unknown header flags set",
                            a.mode = 30;
                            break
                        }
                        a.head && (a.head.text = p >> 8 & 1),
                        512 & a.flags && (x[0] = 255 & p,
                        x[1] = p >>> 8 & 255,
                        a.check = B(a.check, x, 2, 0)),
                        h = p = 0,
                        a.mode = 3;
                    case 3:
                        for (; h < 32; ) {
                            if (0 === r)
                                break t;
                            r--,
                            p += s[n++] << h,
                            h += 8
                        }
                        a.head && (a.head.time = p),
                        512 & a.flags && (x[0] = 255 & p,
                        x[1] = p >>> 8 & 255,
                        x[2] = p >>> 16 & 255,
                        x[3] = p >>> 24 & 255,
                        a.check = B(a.check, x, 4, 0)),
                        h = p = 0,
                        a.mode = 4;
                    case 4:
                        for (; h < 16; ) {
                            if (0 === r)
                                break t;
                            r--,
                            p += s[n++] << h,
                            h += 8
                        }
                        a.head && (a.head.xflags = 255 & p,
                        a.head.os = p >> 8),
                        512 & a.flags && (x[0] = 255 & p,
                        x[1] = p >>> 8 & 255,
                        a.check = B(a.check, x, 2, 0)),
                        h = p = 0,
                        a.mode = 5;
                    case 5:
                        if (1024 & a.flags) {
                            for (; h < 16; ) {
                                if (0 === r)
                                    break t;
                                r--,
                                p += s[n++] << h,
                                h += 8
                            }
                            a.length = p,
                            a.head && (a.head.extra_len = p),
                            512 & a.flags && (x[0] = 255 & p,
                            x[1] = p >>> 8 & 255,
                            a.check = B(a.check, x, 2, 0)),
                            h = p = 0
                        } else
                            a.head && (a.head.extra = null);
                        a.mode = 6;
                    case 6:
                        if (1024 & a.flags && ((v = a.length) > r && (v = r),
                        v && (a.head && (C = a.head.extra_len - a.length,
                        a.head.extra || (a.head.extra = new Array(a.head.extra_len)),
                        k.arraySet(a.head.extra, s, n, v, C)),
                        512 & a.flags && (a.check = B(a.check, s, v, n)),
                        r -= v,
                        n += v,
                        a.length -= v),
                        a.length))
                            break t;
                        a.length = 0,
                        a.mode = 7;
                    case 7:
                        if (2048 & a.flags) {
                            if (0 === r)
                                break t;
                            for (v = 0; C = s[n + v++],
                            a.head && C && a.length < 65536 && (a.head.name += String.fromCharCode(C)),
                            C && v < r; )
                                ;
                            if (512 & a.flags && (a.check = B(a.check, s, v, n)),
                            r -= v,
                            n += v,
                            C)
                                break t
                        } else
                            a.head && (a.head.name = null);
                        a.length = 0,
                        a.mode = 8;
                    case 8:
                        if (4096 & a.flags) {
                            if (0 === r)
                                break t;
                            for (v = 0; C = s[n + v++],
                            a.head && C && a.length < 65536 && (a.head.comment += String.fromCharCode(C)),
                            C && v < r; )
                                ;
                            if (512 & a.flags && (a.check = B(a.check, s, v, n)),
                            r -= v,
                            n += v,
                            C)
                                break t
                        } else
                            a.head && (a.head.comment = null);
                        a.mode = 9;
                    case 9:
                        if (512 & a.flags) {
                            for (; h < 16; ) {
                                if (0 === r)
                                    break t;
                                r--,
                                p += s[n++] << h,
                                h += 8
                            }
                            if (p !== (65535 & a.check)) {
                                t.msg = "header crc mismatch",
                                a.mode = 30;
                                break
                            }
                            h = p = 0
                        }
                        a.head && (a.head.hcrc = a.flags >> 9 & 1,
                        a.head.done = !0),
                        t.adler = a.check = 0,
                        a.mode = 12;
                        break;
                    case 10:
                        for (; h < 32; ) {
                            if (0 === r)
                                break t;
                            r--,
                            p += s[n++] << h,
                            h += 8
                        }
                        t.adler = a.check = A(p),
                        h = p = 0,
                        a.mode = 11;
                    case 11:
                        if (0 === a.havedict)
                            return t.next_out = o,
                            t.avail_out = c,
                            t.next_in = n,
                            t.avail_in = r,
                            a.hold = p,
                            a.bits = h,
                            2;
                        t.adler = a.check = 1,
                        a.mode = 12;
                    case 12:
                        if (5 === e || 6 === e)
                            break t;
                    case 13:
                        if (a.last) {
                            p >>>= 7 & h,
                            h -= 7 & h,
                            a.mode = 27;
                            break
                        }
                        for (; h < 3; ) {
                            if (0 === r)
                                break t;
                            r--,
                            p += s[n++] << h,
                            h += 8
                        }
                        switch (a.last = 1 & p,
                        --h,
                        3 & (p >>>= 1)) {
                        case 0:
                            a.mode = 14;
                            break;
                        case 1:
                            if (function(t) {
                                if (G) {
                                    var e;
                                    for (O = new k.Buf32(512),
                                    R = new k.Buf32(32),
                                    e = 0; e < 144; )
                                        t.lens[e++] = 8;
                                    for (; e < 256; )
                                        t.lens[e++] = 9;
                                    for (; e < 280; )
                                        t.lens[e++] = 7;
                                    for (; e < 288; )
                                        t.lens[e++] = 8;
                                    for (N(F, t.lens, 0, 288, O, 0, t.work, {
                                        bits: 9
                                    }),
                                    e = 0; e < 32; )
                                        t.lens[e++] = 5;
                                    N(D, t.lens, 0, 32, R, 0, t.work, {
                                        bits: 5
                                    }),
                                    G = !1
                                }
                                t.lencode = O,
                                t.lenbits = 9,
                                t.distcode = R,
                                t.distbits = 5
                            }(a),
                            a.mode = 20,
                            6 !== e)
                                break;
                            p >>>= 2,
                            h -= 2;
                            break t;
                        case 2:
                            a.mode = 17;
                            break;
                        case 3:
                            t.msg = "invalid block type",
                            a.mode = 30
                        }
                        p >>>= 2,
                        h -= 2;
                        break;
                    case 14:
                        for (p >>>= 7 & h,
                        h -= 7 & h; h < 32; ) {
                            if (0 === r)
                                break t;
                            r--,
                            p += s[n++] << h,
                            h += 8
                        }
                        if ((65535 & p) != (p >>> 16 ^ 65535)) {
                            t.msg = "invalid stored block lengths",
                            a.mode = 30;
                            break
                        }
                        if (a.length = 65535 & p,
                        h = p = 0,
                        a.mode = 15,
                        6 === e)
                            break t;
                    case 15:
                        a.mode = 16;
                    case 16:
                        if (v = a.length) {
                            if (r < v && (v = r),
                            c < v && (v = c),
                            0 === v)
                                break t;
                            k.arraySet(i, s, n, v, o),
                            r -= v,
                            n += v,
                            c -= v,
                            o += v,
                            a.length -= v;
                            break
                        }
                        a.mode = 12;
                        break;
                    case 17:
                        for (; h < 14; ) {
                            if (0 === r)
                                break t;
                            r--,
                            p += s[n++] << h,
                            h += 8
                        }
                        if (a.nlen = 257 + (31 & p),
                        p >>>= 5,
                        h -= 5,
                        a.ndist = 1 + (31 & p),
                        p >>>= 5,
                        h -= 5,
                        a.ncode = 4 + (15 & p),
                        p >>>= 4,
                        h -= 4,
                        286 < a.nlen || 30 < a.ndist) {
                            t.msg = "too many length or distance symbols",
                            a.mode = 30;
                            break
                        }
                        a.have = 0,
                        a.mode = 18;
                    case 18:
                        for (; a.have < a.ncode; ) {
                            for (; h < 3; ) {
                                if (0 === r)
                                    break t;
                                r--,
                                p += s[n++] << h,
                                h += 8
                            }
                            a.lens[I[a.have++]] = 7 & p,
                            p >>>= 3,
                            h -= 3
                        }
                        for (; a.have < 19; )
                            a.lens[I[a.have++]] = 0;
                        if (a.lencode = a.lendyn,
                        a.lenbits = 7,
                        T = {
                            bits: a.lenbits
                        },
                        y = N(0, a.lens, 0, 19, a.lencode, 0, a.work, T),
                        a.lenbits = T.bits,
                        y) {
                            t.msg = "invalid code lengths set",
                            a.mode = 30;
                            break
                        }
                        a.have = 0,
                        a.mode = 19;
                    case 19:
                        for (; a.have < a.nlen + a.ndist; ) {
                            for (; g = (S = a.lencode[p & (1 << a.lenbits) - 1]) >>> 16 & 255,
                            f = 65535 & S,
                            !((_ = S >>> 24) <= h); ) {
                                if (0 === r)
                                    break t;
                                r--,
                                p += s[n++] << h,
                                h += 8
                            }
                            if (f < 16)
                                p >>>= _,
                                h -= _,
                                a.lens[a.have++] = f;
                            else {
                                if (16 === f) {
                                    for (M = _ + 2; h < M; ) {
                                        if (0 === r)
                                            break t;
                                        r--,
                                        p += s[n++] << h,
                                        h += 8
                                    }
                                    if (p >>>= _,
                                    h -= _,
                                    0 === a.have) {
                                        t.msg = "invalid bit length repeat",
                                        a.mode = 30;
                                        break
                                    }
                                    C = a.lens[a.have - 1],
                                    v = 3 + (3 & p),
                                    p >>>= 2,
                                    h -= 2
                                } else if (17 === f) {
                                    for (M = _ + 3; h < M; ) {
                                        if (0 === r)
                                            break t;
                                        r--,
                                        p += s[n++] << h,
                                        h += 8
                                    }
                                    h -= _,
                                    C = 0,
                                    v = 3 + (7 & (p >>>= _)),
                                    p >>>= 3,
                                    h -= 3
                                } else {
                                    for (M = _ + 7; h < M; ) {
                                        if (0 === r)
                                            break t;
                                        r--,
                                        p += s[n++] << h,
                                        h += 8
                                    }
                                    h -= _,
                                    C = 0,
                                    v = 11 + (127 & (p >>>= _)),
                                    p >>>= 7,
                                    h -= 7
                                }
                                if (a.have + v > a.nlen + a.ndist) {
                                    t.msg = "invalid bit length repeat",
                                    a.mode = 30;
                                    break
                                }
                                for (; v--; )
                                    a.lens[a.have++] = C
                            }
                        }
                        if (30 === a.mode)
                            break;
                        if (0 === a.lens[256]) {
                            t.msg = "invalid code -- missing end-of-block",
                            a.mode = 30;
                            break
                        }
                        if (a.lenbits = 9,
                        T = {
                            bits: a.lenbits
                        },
                        y = N(F, a.lens, 0, a.nlen, a.lencode, 0, a.work, T),
                        a.lenbits = T.bits,
                        y) {
                            t.msg = "invalid literal/lengths set",
                            a.mode = 30;
                            break
                        }
                        if (a.distbits = 6,
                        a.distcode = a.distdyn,
                        T = {
                            bits: a.distbits
                        },
                        y = N(D, a.lens, a.nlen, a.ndist, a.distcode, 0, a.work, T),
                        a.distbits = T.bits,
                        y) {
                            t.msg = "invalid distances set",
                            a.mode = 30;
                            break
                        }
                        if (a.mode = 20,
                        6 === e)
                            break t;
                    case 20:
                        a.mode = 21;
                    case 21:
                        if (6 <= r && 258 <= c) {
                            t.next_out = o,
                            t.avail_out = c,
                            t.next_in = n,
                            t.avail_in = r,
                            a.hold = p,
                            a.bits = h,
                            H(t, d),
                            o = t.next_out,
                            i = t.output,
                            c = t.avail_out,
                            n = t.next_in,
                            s = t.input,
                            r = t.avail_in,
                            p = a.hold,
                            h = a.bits,
                            12 === a.mode && (a.back = -1);
                            break
                        }
                        for (a.back = 0; g = (S = a.lencode[p & (1 << a.lenbits) - 1]) >>> 16 & 255,
                        f = 65535 & S,
                        !((_ = S >>> 24) <= h); ) {
                            if (0 === r)
                                break t;
                            r--,
                            p += s[n++] << h,
                            h += 8
                        }
                        if (g && 0 == (240 & g)) {
                            for (w = _,
                            E = g,
                            b = f; g = (S = a.lencode[b + ((p & (1 << w + E) - 1) >> w)]) >>> 16 & 255,
                            f = 65535 & S,
                            !(w + (_ = S >>> 24) <= h); ) {
                                if (0 === r)
                                    break t;
                                r--,
                                p += s[n++] << h,
                                h += 8
                            }
                            p >>>= w,
                            h -= w,
                            a.back += w
                        }
                        if (p >>>= _,
                        h -= _,
                        a.back += _,
                        a.length = f,
                        0 === g) {
                            a.mode = 26;
                            break
                        }
                        if (32 & g) {
                            a.back = -1,
                            a.mode = 12;
                            break
                        }
                        if (64 & g) {
                            t.msg = "invalid literal/length code",
                            a.mode = 30;
                            break
                        }
                        a.extra = 15 & g,
                        a.mode = 22;
                    case 22:
                        if (a.extra) {
                            for (M = a.extra; h < M; ) {
                                if (0 === r)
                                    break t;
                                r--,
                                p += s[n++] << h,
                                h += 8
                            }
                            a.length += p & (1 << a.extra) - 1,
                            p >>>= a.extra,
                            h -= a.extra,
                            a.back += a.extra
                        }
                        a.was = a.length,
                        a.mode = 23;
                    case 23:
                        for (; g = (S = a.distcode[p & (1 << a.distbits) - 1]) >>> 16 & 255,
                        f = 65535 & S,
                        !((_ = S >>> 24) <= h); ) {
                            if (0 === r)
                                break t;
                            r--,
                            p += s[n++] << h,
                            h += 8
                        }
                        if (0 == (240 & g)) {
                            for (w = _,
                            E = g,
                            b = f; g = (S = a.distcode[b + ((p & (1 << w + E) - 1) >> w)]) >>> 16 & 255,
                            f = 65535 & S,
                            !(w + (_ = S >>> 24) <= h); ) {
                                if (0 === r)
                                    break t;
                                r--,
                                p += s[n++] << h,
                                h += 8
                            }
                            p >>>= w,
                            h -= w,
                            a.back += w
                        }
                        if (p >>>= _,
                        h -= _,
                        a.back += _,
                        64 & g) {
                            t.msg = "invalid distance code",
                            a.mode = 30;
                            break
                        }
                        a.offset = f,
                        a.extra = 15 & g,
                        a.mode = 24;
                    case 24:
                        if (a.extra) {
                            for (M = a.extra; h < M; ) {
                                if (0 === r)
                                    break t;
                                r--,
                                p += s[n++] << h,
                                h += 8
                            }
                            a.offset += p & (1 << a.extra) - 1,
                            p >>>= a.extra,
                            h -= a.extra,
                            a.back += a.extra
                        }
                        if (a.offset > a.dmax) {
                            t.msg = "invalid distance too far back",
                            a.mode = 30;
                            break
                        }
                        a.mode = 25;
                    case 25:
                        if (0 === c)
                            break t;
                        if (v = d - c,
                        a.offset > v) {
                            if ((v = a.offset - v) > a.whave && a.sane) {
                                t.msg = "invalid distance too far back",
                                a.mode = 30;
                                break
                            }
                            u = v > a.wnext ? (v -= a.wnext,
                            a.wsize - v) : a.wnext - v,
                            v > a.length && (v = a.length),
                            m = a.window
                        } else
                            m = i,
                            u = o - a.offset,
                            v = a.length;
                        for (c < v && (v = c),
                        c -= v,
                        a.length -= v; i[o++] = m[u++],
                        --v; )
                            ;
                        0 === a.length && (a.mode = 21);
                        break;
                    case 26:
                        if (0 === c)
                            break t;
                        i[o++] = a.length,
                        c--,
                        a.mode = 21;
                        break;
                    case 27:
                        if (a.wrap) {
                            for (; h < 32; ) {
                                if (0 === r)
                                    break t;
                                r--,
                                p |= s[n++] << h,
                                h += 8
                            }
                            if (d -= c,
                            t.total_out += d,
                            a.total += d,
                            d && (t.adler = a.check = (a.flags ? B : P)(a.check, i, d, o - d)),
                            d = c,
                            (a.flags ? p : A(p)) !== a.check) {
                                t.msg = "incorrect data check",
                                a.mode = 30;
                                break
                            }
                            h = p = 0
                        }
                        a.mode = 28;
                    case 28:
                        if (a.wrap && a.flags) {
                            for (; h < 32; ) {
                                if (0 === r)
                                    break t;
                                r--,
                                p += s[n++] << h,
                                h += 8
                            }
                            if (p !== (4294967295 & a.total)) {
                                t.msg = "incorrect length check",
                                a.mode = 30;
                                break
                            }
                            h = p = 0
                        }
                        a.mode = 29;
                    case 29:
                        y = 1;
                        break t;
                    case 30:
                        y = -3;
                        break t;
                    case 31:
                        return -4;
                    case 32:
                    default:
                        return U
                    }
                return t.next_out = o,
                t.avail_out = c,
                t.next_in = n,
                t.avail_in = r,
                a.hold = p,
                a.bits = h,
                (a.wsize || d !== t.avail_out && a.mode < 30 && (a.mode < 27 || 4 !== e)) && L(t, t.output, t.next_out, d - t.avail_out) ? (a.mode = 31,
                -4) : (l -= t.avail_in,
                d -= t.avail_out,
                t.total_in += l,
                t.total_out += d,
                a.total += d,
                a.wrap && d && (t.adler = a.check = (a.flags ? B : P)(a.check, i, d, t.next_out - d)),
                t.data_type = a.bits + (a.last ? 64 : 0) + (12 === a.mode ? 128 : 0) + (20 === a.mode || 15 === a.mode ? 256 : 0),
                (0 == l && 0 === d || 4 === e) && y === V && (y = -5),
                y)
            }
            ,
            a.inflateEnd = function(t) {
                if (!t || !t.state)
                    return U;
                var e = t.state;
                return e.window && (e.window = null),
                t.state = null,
                V
            }
            ,
            a.inflateGetHeader = function(t, e) {
                var a;
                return !t || !t.state || 0 == (2 & (a = t.state).wrap) ? U : ((a.head = e).done = !1,
                V)
            }
            ,
            a.inflateSetDictionary = function(t, e) {
                var a, s = e.length;
                return !t || !t.state || 0 !== (a = t.state).wrap && 11 !== a.mode ? U : 11 === a.mode && P(1, e, s, 0) !== a.check ? -3 : L(t, e, s, s) ? (a.mode = 31,
                -4) : (a.havedict = 1,
                V)
            }
            ,
            a.inflateInfo = "pako inflate (from Nodeca project)"
        }
        , {
            "../utils/common": 1,
            "./adler32": 3,
            "./crc32": 5,
            "./inffast": 7,
            "./inftrees": 9
        }],
        9: [function(t, e, a) {
            "use strict";
            var P = t("../utils/common")
              , B = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0]
              , H = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78]
              , N = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0]
              , F = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
            e.exports = function(t, e, a, s, i, n, o, r) {
                for (var c, p, h, l, d, v, u, m, _, g = r.bits, f = 0, w = 0, E = 0, b = 0, C = 0, y = 0, T = 0, M = 0, S = 0, x = 0, I = null, A = 0, L = new P.Buf16(16), O = new P.Buf16(16), R = null, k = 0, f = 0; f <= 15; f++)
                    L[f] = 0;
                for (w = 0; w < s; w++)
                    L[e[a + w]]++;
                for (C = g,
                b = 15; 1 <= b && 0 === L[b]; b--)
                    ;
                if (b < C && (C = b),
                0 === b)
                    return i[n++] = 20971520,
                    i[n++] = 20971520,
                    r.bits = 1,
                    0;
                for (E = 1; E < b && 0 === L[E]; E++)
                    ;
                for (C < E && (C = E),
                f = M = 1; f <= 15; f++)
                    if (M <<= 1,
                    (M -= L[f]) < 0)
                        return -1;
                if (0 < M && (0 === t || 1 !== b))
                    return -1;
                for (O[1] = 0,
                f = 1; f < 15; f++)
                    O[f + 1] = O[f] + L[f];
                for (w = 0; w < s; w++)
                    0 !== e[a + w] && (o[O[e[a + w]]++] = w);
                if (v = 0 === t ? (I = R = o,
                19) : 1 === t ? (I = B,
                A -= 257,
                R = H,
                k -= 257,
                256) : (I = N,
                R = F,
                -1),
                f = E,
                d = n,
                T = w = x = 0,
                h = -1,
                l = (S = 1 << (y = C)) - 1,
                1 === t && 852 < S || 2 === t && 592 < S)
                    return 1;
                for (; ; ) {
                    for (u = f - T,
                    _ = o[w] < v ? (m = 0,
                    o[w]) : o[w] > v ? (m = R[k + o[w]],
                    I[A + o[w]]) : (m = 96,
                    0),
                    c = 1 << f - T,
                    E = p = 1 << y; i[d + (x >> T) + (p -= c)] = u << 24 | m << 16 | _ | 0,
                    0 !== p; )
                        ;
                    for (c = 1 << f - 1; x & c; )
                        c >>= 1;
                    if (0 !== c ? (x &= c - 1,
                    x += c) : x = 0,
                    w++,
                    0 == --L[f]) {
                        if (f === b)
                            break;
                        f = e[a + o[w]]
                    }
                    if (C < f && (x & l) !== h) {
                        for (0 === T && (T = C),
                        d += E,
                        M = 1 << (y = f - T); y + T < b && !((M -= L[y + T]) <= 0); )
                            y++,
                            M <<= 1;
                        if (S += 1 << y,
                        1 === t && 852 < S || 2 === t && 592 < S)
                            return 1;
                        i[h = x & l] = C << 24 | y << 16 | d - n | 0
                    }
                }
                return 0 !== x && (i[d + x] = f - T << 24 | 64 << 16 | 0),
                r.bits = C,
                0
            }
        }
        , {
            "../utils/common": 1
        }],
        10: [function(t, e, a) {
            "use strict";
            e.exports = {
                2: "need dictionary",
                1: "stream end",
                0: "",
                "-1": "file error",
                "-2": "stream error",
                "-3": "data error",
                "-4": "insufficient memory",
                "-5": "buffer error",
                "-6": "incompatible version"
            }
        }
        , {}],
        11: [function(t, e, a) {
            "use strict";
            e.exports = function() {
                this.input = null,
                this.next_in = 0,
                this.avail_in = 0,
                this.total_in = 0,
                this.output = null,
                this.next_out = 0,
                this.avail_out = 0,
                this.total_out = 0,
                this.msg = "",
                this.state = null,
                this.data_type = 2,
                this.adler = 0
            }
        }
        , {}],
        "/lib/inflate.js": [function(t, e, a) {
            "use strict";
            function s(t) {
                if (!(this instanceof s))
                    return new s(t);
                this.options = d.assign({
                    chunkSize: 16384,
                    windowBits: 0,
                    to: ""
                }, t || {});
                var e = this.options;
                e.raw && 0 <= e.windowBits && e.windowBits < 16 && (e.windowBits = -e.windowBits,
                0 === e.windowBits && (e.windowBits = -15)),
                !(0 <= e.windowBits && e.windowBits < 16) || t && t.windowBits || (e.windowBits += 32),
                15 < e.windowBits && e.windowBits < 48 && 0 == (15 & e.windowBits) && (e.windowBits |= 15),
                this.err = 0,
                this.msg = "",
                this.ended = !1,
                this.chunks = [],
                this.strm = new o,
                this.strm.avail_out = 0;
                e = l.inflateInit2(this.strm, e.windowBits);
                if (e !== u.Z_OK)
                    throw new Error(n[e]);
                this.header = new r,
                l.inflateGetHeader(this.strm, this.header)
            }
            function i(t, e) {
                e = new s(e);
                if (e.push(t, !0),
                e.err)
                    throw e.msg || n[e.err];
                return e.result
            }
            var l = t("./zlib/inflate")
              , d = t("./utils/common")
              , v = t("./utils/strings")
              , u = t("./zlib/constants")
              , n = t("./zlib/messages")
              , o = t("./zlib/zstream")
              , r = t("./zlib/gzheader")
              , m = Object.prototype.toString;
            s.prototype.push = function(t, e) {
                var a, s, i, n, o, r = this.strm, c = this.options.chunkSize, p = this.options.dictionary, h = !1;
                if (this.ended)
                    return !1;
                s = e === ~~e ? e : !0 === e ? u.Z_FINISH : u.Z_NO_FLUSH,
                "string" == typeof t ? r.input = v.binstring2buf(t) : "[object ArrayBuffer]" === m.call(t) ? r.input = new Uint8Array(t) : r.input = t,
                r.next_in = 0,
                r.avail_in = r.input.length;
                do {
                    if (0 === r.avail_out && (r.output = new d.Buf8(c),
                    r.next_out = 0,
                    r.avail_out = c),
                    (a = l.inflate(r, u.Z_NO_FLUSH)) === u.Z_NEED_DICT && p && (o = "string" == typeof p ? v.string2buf(p) : "[object ArrayBuffer]" === m.call(p) ? new Uint8Array(p) : p,
                    a = l.inflateSetDictionary(this.strm, o)),
                    a === u.Z_BUF_ERROR && !0 === h && (a = u.Z_OK,
                    h = !1),
                    a !== u.Z_STREAM_END && a !== u.Z_OK)
                        return this.onEnd(a),
                        !(this.ended = !0)
                } while (r.next_out && (0 !== r.avail_out && a !== u.Z_STREAM_END && (0 !== r.avail_in || s !== u.Z_FINISH && s !== u.Z_SYNC_FLUSH) || ("string" === this.options.to ? (i = v.utf8border(r.output, r.next_out),
                n = r.next_out - i,
                o = v.buf2string(r.output, i),
                r.next_out = n,
                r.avail_out = c - n,
                n && d.arraySet(r.output, r.output, i, n, 0),
                this.onData(o)) : this.onData(d.shrinkBuf(r.output, r.next_out)))),
                0 === r.avail_in && 0 === r.avail_out && (h = !0),
                (0 < r.avail_in || 0 === r.avail_out) && a !== u.Z_STREAM_END);
                return a === u.Z_STREAM_END && (s = u.Z_FINISH),
                s === u.Z_FINISH ? (a = l.inflateEnd(this.strm),
                this.onEnd(a),
                this.ended = !0,
                a === u.Z_OK) : s !== u.Z_SYNC_FLUSH || (this.onEnd(u.Z_OK),
                !(r.avail_out = 0))
            }
            ,
            s.prototype.onData = function(t) {
                this.chunks.push(t)
            }
            ,
            s.prototype.onEnd = function(t) {
                t === u.Z_OK && ("string" === this.options.to ? this.result = this.chunks.join("") : this.result = d.flattenChunks(this.chunks)),
                this.chunks = [],
                this.err = t,
                this.msg = this.strm.msg
            }
            ,
            a.Inflate = s,
            a.inflate = i,
            a.inflateRaw = function(t, e) {
                return (e = e || {}).raw = !0,
                i(t, e)
            }
            ,
            a.ungzip = i
        }
        , {
            "./utils/common": 1,
            "./utils/strings": 2,
            "./zlib/constants": 4,
            "./zlib/gzheader": 6,
            "./zlib/inflate": 8,
            "./zlib/messages": 10,
            "./zlib/zstream": 11
        }]
    }, {}, [])("/lib/inflate.js")
}),
function s(i, n, o) {
    function r(a, t) {
        if (!n[a]) {
            if (!i[a]) {
                var e = "function" == typeof require && require;
                if (!t && e)
                    return e(a, !0);
                if (c)
                    return c(a, !0);
                throw new Error("Cannot find module '" + a + "'")
            }
            e = n[a] = {
                exports: {}
            };
            i[a][0].call(e.exports, function(t) {
                var e = i[a][1][t];
                return r(e || t)
            }, e, e.exports, s, i, n, o)
        }
        return n[a].exports
    }
    for (var c = "function" == typeof require && require, t = 0; t < o.length; t++)
        r(o[t]);
    return r
}({
    1: [function(s) {
        (function() {
            var t = s("./lib/amf/amf.js")
              , e = s("./lib/amf/spec.js")
              , a = s("./lib/type/bytearray.js");
            window.AMF = t,
            window.Spec = e,
            window.ByteArray = a
        }
        ).call(this, s("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, s("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/fake_aabf2119.js", "/")
    }
    , {
        "./lib/amf/amf.js": 2,
        "./lib/amf/spec.js": 6,
        "./lib/type/bytearray.js": 14,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    2: [function(t, p) {
        (function() {
            function a(t, e, a, s) {
                s = void 0 === s ? n : s;
                var i = new o;
                return new r(i,s).serialize(t, e, a)
            }
            function e(t, e) {
                t = new s(t);
                return new i(t).deserialize(e)
            }
            var n = 0;
            p.exports = {
                serialize: a,
                deserialize: e,
                parse: function(t) {
                    return e(t)
                },
                stringify: function(t, e) {
                    return a(t, !0, void 0, e)
                },
                registerClassAlias: function(t, e) {
                    c[t] = e
                },
                getClassByAlias: function(t) {
                    return t in c ? c[t] : null
                },
                CLASS_MAPPING: 1,
                DEFAULT_OPTIONS: n,
                CLASS_MAPPING_FIELD: "_classMapping"
            };
            var o = t("../io/output.js")
              , s = t("../io/input.js")
              , r = t("../amf/serializer.js")
              , i = t("../amf/deserializer.js")
              , c = {}
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/amf/amf.js", "/lib/amf")
    }
    , {
        "../amf/deserializer.js": 4,
        "../amf/serializer.js": 5,
        "../io/input.js": 11,
        "../io/output.js": 12,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    3: [function(n, o) {
        (function() {
            function t(t) {
                this.stream = t,
                this.referenceStore = new s
            }
            var e = n("./spec.js")
              , a = n("../type/bytearray.js")
              , s = n("../util/reference-store.js")
              , i = n("../exception/not-supported.js");
            t.prototype = {
                getDataType: function(t) {
                    switch (!0) {
                    case void 0 === t:
                        return e.AMF3_UNDEFINED;
                    case null === t:
                        return e.AMF3_NULL;
                    case !0 === t || !1 === t:
                        return t ? e.AMF3_TRUE : e.AMF3_FALSE;
                    case "number" == typeof t && t % 1 == 0:
                        return t < e.MIN_INT || t > e.MAX_INT ? e.AMF3_DOUBLE : e.AMF3_INT;
                    case "number" == typeof t && t % 1 != 0:
                        return e.AMF3_DOUBLE;
                    case "string" == typeof t:
                        return e.AMF3_STRING;
                    case t instanceof Date:
                        return e.AMF3_DATE;
                    case t instanceof a:
                        return e.AMF3_BYTE_ARRAY;
                    case t instanceof Array:
                        return e.AMF3_ARRAY;
                    case "object" == typeof t:
                        return e.AMF3_OBJECT;
                    case "function" == typeof t:
                        throw new i("Cannot serialize a function");
                    default:
                        return null
                    }
                }
            },
            o.exports = t
        }
        ).call(this, n("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, n("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/amf/base.js", "/lib/amf")
    }
    , {
        "../exception/not-supported.js": 9,
        "../type/bytearray.js": 14,
        "../util/reference-store.js": 18,
        "./spec.js": 6,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    4: [function(i, h) {
        (function() {
            function t(t) {
                e.call(this, t)
            }
            var n = i("./amf.js")
              , e = i("./base.js")
              , o = i("./spec.js")
              , r = i("../util/reference-store.js")
              , a = i("../type/bytearray.js")
              , s = i("utf8")
              , c = i("../exception/deserialization.js");
            ((t.prototype = new e).constructor = t).prototype.deserialize = function(t) {
                var e = this.stream.readByte(t);
                switch (parseInt(e)) {
                case o.AMF3_UNDEFINED:
                    return;
                case o.AMF3_NULL:
                    return null;
                case o.AMF3_FALSE:
                    return !1;
                case o.AMF3_TRUE:
                    return !0;
                case o.AMF3_INT:
                    return this.deserializeInt();
                case o.AMF3_DOUBLE:
                    return this.deserializeDouble();
                case o.AMF3_STRING:
                    return this.deserializeString();
                case o.AMF3_DATE:
                    return this.deserializeDate();
                case o.AMF3_ARRAY:
                    return this.deserializeArray();
                case o.AMF3_OBJECT:
                    return this.deserializeObject();
                case o.AMF3_BYTE_ARRAY:
                    return this.deserializeByteArray();
                default:
                    throw new c("Cannot deserialize type: " + e)
                }
            }
            ,
            t.prototype.deserializeInt = function() {
                for (var t = 0, e = 0, a = this.stream.readByte(); 0 != (128 & a) && e < 3; )
                    t <<= 7,
                    t |= 127 & a,
                    a = this.stream.readByte(),
                    e++;
                return e < 3 ? (t <<= 7,
                t |= a) : (t <<= 8,
                0 != (268435456 & (t |= a)) && (t |= 3758096384)),
                t
            }
            ,
            t.prototype.deserializeDouble = function() {
                return this.stream.readDouble()
            }
            ,
            t.prototype.deserializeString = function() {
                var t = this.deserializeInt();
                if (0 == (t & o.REFERENCE_BIT))
                    return t >>= o.REFERENCE_BIT,
                    this.referenceStore.getByReference(t, r.TYPE_STRING);
                t >>= o.REFERENCE_BIT,
                t = s.decode(this.stream.readRawBytes(t));
                return this.referenceStore.addReference(t, r.TYPE_STRING),
                t
            }
            ,
            t.prototype.deserializeDate = function() {
                var t = this.deserializeInt();
                if (0 == (t & o.REFERENCE_BIT))
                    return t >>= o.REFERENCE_BIT,
                    this.referenceStore.getByReference(t, r.TYPE_OBJECT);
                t = this.stream.readDouble(),
                t = new Date(t);
                return this.referenceStore.addReference(t, r.TYPE_OBJECT),
                t
            }
            ,
            t.prototype.deserializeArray = function() {
                var t = this.deserializeInt();
                if (0 == (t & o.REFERENCE_BIT))
                    return t >>= o.REFERENCE_BIT,
                    this.referenceStore.getByReference(t, r.TYPE_OBJECT);
                var e = t >> o.REFERENCE_BIT
                  , a = [];
                this.referenceStore.addReference(a, r.TYPE_OBJECT);
                for (var s = this.deserializeString(); 0 < s.length; )
                    a[s] = this.deserialize(),
                    s = this.deserializeString();
                for (var i = 0; i < e; i++)
                    a.push(this.deserialize());
                return a
            }
            ,
            t.prototype.deserializeObject = function() {
                var t = this.deserializeInt();
                if (0 == (t & o.REFERENCE_BIT))
                    return t >>= o.REFERENCE_BIT,
                    this.referenceStore.getByReference(t, r.TYPE_OBJECT);
                var e = this.deserializeString()
                  , a = {};
                this.referenceStore.addReference(a, r.TYPE_OBJECT);
                for (var s = {}, i = this.deserializeString(); i.length; )
                    s[i] = this.deserialize(),
                    i = this.deserializeString();
                if (e && 0 < e.length) {
                    t = n.getClassByAlias(e);
                    if (!t)
                        throw new c("Class " + e + " cannot be found. Consider registering a class alias.");
                    "importData"in (a = new t) && "function" == typeof a.importData ? a.importData(s) : p(a, s)
                } else
                    p(a, s);
                return a
            }
            ;
            var p = function(e, t) {
                try {
                    for (var a in t) {
                        var s = t[a];
                        e[a] = s
                    }
                } catch (t) {
                    throw new c("Property '" + a + "' cannot be set on instance '" + typeof e + "'")
                }
            };
            t.prototype.deserializeByteArray = function() {
                var t = this.deserializeInt();
                if (0 == (t & o.REFERENCE_BIT))
                    return t >>= o.REFERENCE_BIT,
                    this.referenceStore.getByReference(t, r.TYPE_OBJECT);
                t >>= o.REFERENCE_BIT,
                t = this.stream.readRawBytes(t);
                return new a(t)
            }
            ,
            h.exports = t
        }
        ).call(this, i("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, i("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/amf/deserializer.js", "/lib/amf")
    }
    , {
        "../exception/deserialization.js": 8,
        "../type/bytearray.js": 14,
        "../util/reference-store.js": 18,
        "./amf.js": 2,
        "./base.js": 3,
        "./spec.js": 6,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19,
        utf8: 23
    }],
    5: [function(e, o) {
        (function() {
            function t(t, e) {
                this.options = e,
                a.call(this, t)
            }
            var a = e("./base.js")
              , n = e("./spec.js")
              , r = e("../util/reference-store.js")
              , c = e("../util/object.js")
              , s = (e("../type/bytearray.js"),
            e("utf8"))
              , i = e("../exception/serialization.js");
            ((t.prototype = new a).constructor = t).prototype.serialize = function(t, e, a) {
                void 0 === e && (e = !0);
                var s = a || this.getDataType(t);
                switch (e && this.stream.writeByte(s),
                s) {
                case n.AMF3_UNDEFINED:
                case n.AMF3_NULL:
                case n.AMF3_FALSE:
                case n.AMF3_TRUE:
                    break;
                case n.AMF3_INT:
                    this.serializeInt(t);
                    break;
                case n.AMF3_DOUBLE:
                    this.serializeDouble(t);
                    break;
                case n.AMF3_STRING:
                    this.serializeString(t);
                    break;
                case n.AMF3_DATE:
                    this.serializeDate(t);
                    break;
                case n.AMF3_ARRAY:
                    this.serializeArray(t);
                    break;
                case n.AMF3_OBJECT:
                    this.serializeObject(t);
                    break;
                case n.AMF3_BYTE_ARRAY:
                    this.serializeByteArray(t);
                    break;
                default:
                    throw new i("Unrecognized AMF type [" + s + "]")
                }
                return this.stream.getRaw()
            }
            ,
            t.prototype.serializeInt = function(t) {
                if (t < n.MIN_INT || t > n.MAX_INT)
                    throw new i("Integer out of range: " + t);
                (t &= 536870911) < n.MIN_2_BYTE_INT ? this.stream.writeByte(t) : t < n.MIN_3_BYTE_INT ? (this.stream.writeByte(t >> 7 & 127 | 128),
                this.stream.writeByte(127 & t)) : t < n.MIN_4_BYTE_INT ? (this.stream.writeByte(t >> 14 & 127 | 128),
                this.stream.writeByte(t >> 7 & 127 | 128),
                this.stream.writeByte(127 & t)) : (this.stream.writeByte(t >> 22 & 127 | 128),
                this.stream.writeByte(t >> 15 & 127 | 128),
                this.stream.writeByte(t >> 8 & 127 | 128),
                this.stream.writeByte(255 & t))
            }
            ,
            t.prototype.serializeDouble = function(t) {
                this.stream.writeDouble(t)
            }
            ,
            t.prototype.serializeString = function(t, e) {
                if (e = void 0 === e || e) {
                    e = this.referenceStore.getReference(t, r.TYPE_STRING);
                    if (!1 !== e)
                        return void this.serializeInt(e << 1)
                }
                t = s.encode(t);
                this.serializeInt(t.length << 1 | 1),
                this.stream.writeRaw(t)
            }
            ,
            t.prototype.serializeDate = function(t) {
                var e = this.referenceStore.getReference(t, r.TYPE_OBJECT);
                return !1 !== e ? void this.serializeInt(e << 1) : void this.serialize(t.getTime(), !0, n.AMF3_DOUBLE)
            }
            ,
            t.prototype.serializeArray = function(t) {
                var e = this.referenceStore.getReference(t, r.TYPE_OBJECT);
                if (!1 === e) {
                    var a = null;
                    if (n.isDenseArray(t))
                        for (var s in this.serializeInt(t.length << 1 | n.REFERENCE_BIT),
                        this.serializeString(""),
                        t)
                            a = t[s],
                            this.serialize(a);
                    else {
                        for (var i in this.serializeInt(1),
                        t)
                            a = t[i],
                            this.serializeString(i, !1),
                            this.serialize(a);
                        this.serializeString("")
                    }
                } else
                    this.serializeInt(e << 1)
            }
            ,
            t.prototype.serializeObject = function(t) {
                var e = this.referenceStore.getReference(t, r.TYPE_OBJECT);
                if (!1 === e) {
                    var a = t;
                    c.isSerializable(t) && (t = t.exportData());
                    var s = c.getObjectKeys(t);
                    if (this.serializeInt(11),
                    this.serializeString(c.getClassName(a, this.options), !1),
                    0 < s.length)
                        for (var i in s) {
                            var n = s[i]
                              , o = t[n];
                            this.serializeString(n, !1),
                            this.serialize(o)
                        }
                    this.serializeString("")
                } else
                    this.serializeInt(e << 1)
            }
            ,
            t.prototype.serializeByteArray = function(t) {
                if (!("getData"in t))
                    throw new i("Invalid ByteArray data provided");
                var e = this.referenceStore.getReference(t, r.TYPE_OBJECT);
                return !1 !== e ? void this.serializeInt(e << 1) : (this.serializeInt(t.getData().length << 1 | n.REFERENCE_BIT),
                void this.stream.writeRaw(t.getData()))
            }
            ,
            o.exports = t
        }
        ).call(this, e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/amf/serializer.js", "/lib/amf")
    }
    , {
        "../exception/serialization.js": 10,
        "../type/bytearray.js": 14,
        "../util/object.js": 17,
        "../util/reference-store.js": 18,
        "./base.js": 3,
        "./spec.js": 6,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19,
        utf8: 23
    }],
    6: [function(t, e) {
        (function() {
            e.exports = {
                AMF3_UNDEFINED: 0,
                AMF3_NULL: 1,
                AMF3_FALSE: 2,
                AMF3_TRUE: 3,
                AMF3_INT: 4,
                AMF3_DOUBLE: 5,
                AMF3_STRING: 6,
                AMF3_XML_DOC: 7,
                AMF3_DATE: 8,
                AMF3_ARRAY: 9,
                AMF3_OBJECT: 10,
                AMF3_XML: 11,
                AMF3_BYTE_ARRAY: 12,
                AMF3_VECTOR_INT: 13,
                AMF3_VECTOR_UINT: 14,
                AMF3_VECTOR_DOUBLE: 15,
                AMF3_VECTOR_OBJECT: 16,
                AMF3_DICTIONARY: 17,
                OBJECT_DYNAMIC: 0,
                REFERENCE_BIT: 1,
                MIN_2_BYTE_INT: 128,
                MIN_3_BYTE_INT: 16384,
                MIN_4_BYTE_INT: 2097152,
                MAX_INT: 268435455,
                MIN_INT: -268435456,
                isLittleEndian: function() {
                    return !0
                },
                isDenseArray: function(t) {
                    if (!t)
                        return !0;
                    var e, a = 0;
                    for (e in t) {
                        if (e != a)
                            return !1;
                        a++
                    }
                    return !0
                }
            }
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/amf/spec.js", "/lib/amf")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    7: [function(t, e) {
        (function() {
            function t(t, e) {
                this.message = t,
                this.name = e
            }
            (t.prototype = new Error).constructor = t,
            e.exports = t
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/exception/base.js", "/lib/exception")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    8: [function(a, s) {
        (function() {
            function t(t) {
                e.call(this, t, "DeserializationException")
            }
            var e = a("./base.js");
            (t.prototype = new e).constructor = t,
            s.exports = t
        }
        ).call(this, a("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, a("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/exception/deserialization.js", "/lib/exception")
    }
    , {
        "./base.js": 7,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    9: [function(a, s) {
        (function() {
            function t(t) {
                e.call(this, t, "NotSupportedException")
            }
            var e = a("./base.js");
            (t.prototype = new e).constructor = t,
            s.exports = t
        }
        ).call(this, a("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, a("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/exception/not-supported.js", "/lib/exception")
    }
    , {
        "./base.js": 7,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    10: [function(a, s) {
        (function() {
            function t(t) {
                e.call(this, t, "SerializationException")
            }
            var e = a("./base.js");
            (t.prototype = new e).constructor = t,
            s.exports = t
        }
        ).call(this, a("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, a("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/exception/serialization.js", "/lib/exception")
    }
    , {
        "./base.js": 7,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    11: [function(i, n) {
        (function() {
            function t(t) {
                this.pointer = 0,
                e.call(this, t)
            }
            var e = i("./stream.js")
              , a = (i("../amf/spec.js"),
            i("../util/ieee754.js"));
            ((t.prototype = new e).constructor = t).prototype.readByte = function() {
                return this.readBytes(1)
            }
            ,
            t.prototype.readRawByte = function() {
                return this.readBytes(1, !0)
            }
            ,
            t.prototype.readRawBytes = function(t) {
                return void 0 === t && (t = 1),
                this.readBytes(t, !0)
            }
            ,
            t.prototype.readBytes = function(t, e) {
                if (void 0 === t && (t = 1),
                void 0 === e && (e = !1),
                value = this.getRaw().substr(this.pointer, t),
                this.pointer += value.length,
                e)
                    return value;
                for (var a = "", s = 0; s < value.length; s++)
                    a += value.charCodeAt(s);
                return a
            }
            ,
            t.prototype.readDouble = function() {
                var t = this.readRawBytes(8);
                return a.unpack(s(t))
            }
            ;
            var s = function(t) {
                var e, a = [], s = t.split("");
                for (e in s)
                    a.push(s[e].toString().charCodeAt(0));
                return a
            };
            n.exports = t
        }
        ).call(this, i("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, i("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/io/input.js", "/lib/io")
    }
    , {
        "../amf/spec.js": 6,
        "../util/ieee754.js": 15,
        "./stream.js": 13,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    12: [function(i, n) {
        (function() {
            function t(t) {
                e.call(this, t)
            }
            var e = i("./stream.js")
              , a = (i("../amf/spec.js"),
            i("../util/ieee754.js"));
            ((t.prototype = new e).constructor = t).prototype.writeByte = function(t) {
                this.raw += String.fromCharCode(t)
            }
            ,
            t.prototype.writeDouble = function(t) {
                this.raw += s(a.pack(t, 11, 52))
            }
            ,
            t.prototype.writeRaw = function(t) {
                this.raw += t
            }
            ;
            var s = function(t) {
                var e, a = "";
                for (e in t) {
                    var s = t[e];
                    a += String.fromCharCode(parseInt(s))
                }
                return a
            };
            n.exports = t
        }
        ).call(this, i("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, i("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/io/output.js", "/lib/io")
    }
    , {
        "../amf/spec.js": 6,
        "../util/ieee754.js": 15,
        "./stream.js": 13,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    13: [function(t, e) {
        (function() {
            function t(t) {
                t && void 0 !== t || (t = ""),
                this.raw = t.toString()
            }
            t.prototype = {
                getRaw: function() {
                    return this.raw
                },
                toString: function() {
                    return this.getRaw()
                }
            },
            e.exports = t
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/io/stream.js", "/lib/io")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    14: [function(t, e) {
        (function() {
            function t(t) {
                this.data = t
            }
            t.prototype = {
                getData: function() {
                    return this.data
                },
                setData: function(t) {
                    this.data = t
                },
                toString: function() {
                    return this.getData()
                }
            },
            e.exports = t
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/type/bytearray.js", "/lib/type")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    15: [function(t, e) {
        (function() {
            e.exports = {
                pack: function(t) {
                    var e, a, s, i, n, o, r, c, p = 1023;
                    for (isNaN(t) ? (a = (1 << p) - 1,
                    s = Math.pow(2, 51),
                    e = 0) : 1 / 0 === t || t === -1 / 0 ? (a = (1 << p) - 1,
                    e = t < (s = 0) ? 1 : 0) : 0 === t ? e = 1 / t == -1 / (s = a = 0) ? 1 : 0 : (e = t < 0,
                    s = (t = Math.abs(t)) >= Math.pow(2, 1 - p) ? (a = (i = Math.min(Math.floor(Math.log(t) / Math.LN2), p)) + p,
                    Math.round(t * Math.pow(2, 52 - i) - Math.pow(2, 52))) : (a = 0,
                    Math.round(t / Math.pow(2, -1074)))),
                    o = [],
                    n = 52; n; --n)
                        o.push(s % 2 ? 1 : 0),
                        s = Math.floor(s / 2);
                    for (n = 11; n; --n)
                        o.push(a % 2 ? 1 : 0),
                        a = Math.floor(a / 2);
                    for (o.push(e ? 1 : 0),
                    o.reverse(),
                    r = o.join(""),
                    c = []; r.length; )
                        c.push(parseInt(r.substring(0, 8), 2)),
                        r = r.substring(8);
                    return c
                },
                unpack: function(t) {
                    for (var e, a, s, i, n, o = [], r = t.length; r; --r)
                        for (a = t[r - 1],
                        e = 8; e; --e)
                            o.push(a % 2 ? 1 : 0),
                            a >>= 1;
                    return o.reverse(),
                    n = o.join(""),
                    s = parseInt(n.substring(0, 1), 2) ? -1 : 1,
                    i = parseInt(n.substring(1, 12), 2),
                    n = parseInt(n.substring(12), 2),
                    2047 === i ? 0 !== n ? NaN : 1 / 0 * s : 0 < i ? s * Math.pow(2, i - 1023) * (1 + n / Math.pow(2, 52)) : 0 !== n ? s * Math.pow(2, -1022) * (n / Math.pow(2, 52)) : s < 0 ? -0 : 0
                }
            }
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/util/ieee754.js", "/lib/util")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    16: [function(t, e) {
        (function() {
            e.exports = function(t, e, a) {
                if (null == t)
                    throw new TypeError('"array" is null or not defined');
                var s = t.length >>> 0;
                for (a = +a || 0,
                1 / 0 === Math.abs(a) && (a = 0),
                a < 0 && ((a += s) < 0 && (a = 0)); a < s; a++)
                    if (t[a] === e)
                        return a;
                return -1
            }
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/util/indexof.js", "/lib/util")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    17: [function(t, e) {
        (function() {
            var s = t("./../amf/amf.js");
            e.exports = {
                isSerializable: function(t) {
                    return !!t && ("exportData"in t && "importData"in t)
                },
                getClassName: function(t, e) {
                    return "object" == typeof t && s.CLASS_MAPPING_FIELD in t && e & s.CLASS_MAPPING ? t._classMapping : ""
                },
                getObjectKeys: function(t) {
                    if (!t)
                        return [];
                    var e, a = [];
                    for (e in t)
                        e != s.CLASS_MAPPING_FIELD && "function" != typeof t[e] && a.push(e);
                    return a
                }
            }
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/util/object.js", "/lib/util")
    }
    , {
        "./../amf/amf.js": 2,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    18: [function(e, a) {
        (function() {
            var s = e("./indexof.js")
              , t = function() {
                this.store = {},
                this.store[t.TYPE_STRING] = [],
                this.store[t.TYPE_OBJECT] = []
            };
            t.prototype = {
                getReference: function(t, e) {
                    var a = s(this.store[e], t);
                    return 0 <= a ? a : (this.validate(t) && this.addReference(t, e),
                    !1)
                },
                addReference: function(t, e) {
                    return !!this.validate(t) && (this.store[e].push(t),
                    t)
                },
                getByReference: function(t, e) {
                    if (!this.store.hasOwnProperty(e))
                        return !1;
                    var a = this.store[e].length;
                    return !(a <= t) && (!!a && this.store[e][t])
                },
                validate: function(t) {
                    return !(null === t || "string" == typeof t && !t.length)
                }
            },
            t.TYPE_STRING = "string",
            t.TYPE_OBJECT = "object",
            a.exports = t
        }
        ).call(this, e("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/lib/util/reference-store.js", "/lib/util")
    }
    , {
        "./indexof.js": 16,
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    19: [function(P, t, B) {
        (function(t, e, h) {
            function h(t, e, a) {
                if (!(this instanceof h))
                    return new h(t,e,a);
                var s, i, n, o, r = typeof t;
                if ("base64" === e && "string" == r)
                    for (t = (o = t).trim ? o.trim() : o.replace(/^\s+|\s+$/g, ""); t.length % 4 != 0; )
                        t += "=";
                if ("number" == r)
                    s = E(t);
                else if ("string" == r)
                    s = h.byteLength(t, e);
                else {
                    if ("object" != r)
                        throw new Error("First argument needs to be a number, array or string.");
                    s = E(t.length)
                }
                if (h._useTypedArrays ? i = f(new Uint8Array(s)) : ((i = this).length = s,
                i._isBuffer = !0),
                h._useTypedArrays && "function" == typeof Uint8Array && t instanceof Uint8Array)
                    i._set(t);
                else if (b(o = t) || h.isBuffer(o) || o && "object" == typeof o && "number" == typeof o.length)
                    for (n = 0; n < s; n++)
                        i[n] = h.isBuffer(t) ? t.readUInt8(n) : t[n];
                else if ("string" == r)
                    i.write(t, 0, e);
                else if ("number" == r && !h._useTypedArrays && !a)
                    for (n = 0; n < s; n++)
                        i[n] = 0;
                return i
            }
            function l(t, e, a, s) {
                return h._charsWritten = M(function(t) {
                    for (var e = [], a = 0; a < t.length; a++)
                        e.push(255 & t.charCodeAt(a));
                    return e
                }(e), t, a, s)
            }
            function d(t, e, a, s) {
                return h._charsWritten = M(function(t) {
                    for (var e, a, s = [], i = 0; i < t.length; i++)
                        a = t.charCodeAt(i),
                        e = a >> 8,
                        a = a % 256,
                        s.push(a),
                        s.push(e);
                    return s
                }(e), t, a, s)
            }
            function c(t, e, a) {
                var s = "";
                a = Math.min(t.length, a);
                for (var i = e; i < a; i++)
                    s += String.fromCharCode(t[i]);
                return s
            }
            function i(t, e, a, s) {
                s || (L("boolean" == typeof a, "missing or invalid endian"),
                L(null != e, "missing offset"),
                L(e + 1 < t.length, "Trying to read beyond buffer length"));
                var i, s = t.length;
                if (!(s <= e))
                    return a ? (i = t[e],
                    e + 1 < s && (i |= t[e + 1] << 8)) : (i = t[e] << 8,
                    e + 1 < s && (i |= t[e + 1])),
                    i
            }
            function n(t, e, a, s) {
                s || (L("boolean" == typeof a, "missing or invalid endian"),
                L(null != e, "missing offset"),
                L(e + 3 < t.length, "Trying to read beyond buffer length"));
                var i, s = t.length;
                if (!(s <= e))
                    return a ? (e + 2 < s && (i = t[e + 2] << 16),
                    e + 1 < s && (i |= t[e + 1] << 8),
                    i |= t[e],
                    e + 3 < s && (i += t[e + 3] << 24 >>> 0)) : (e + 1 < s && (i = t[e + 1] << 16),
                    e + 2 < s && (i |= t[e + 2] << 8),
                    e + 3 < s && (i |= t[e + 3]),
                    i += t[e] << 24 >>> 0),
                    i
            }
            function a(t, e, a, s) {
                if (s || (L("boolean" == typeof a, "missing or invalid endian"),
                L(null != e, "missing offset"),
                L(e + 1 < t.length, "Trying to read beyond buffer length")),
                !(t.length <= e)) {
                    a = i(t, e, a, !0);
                    return 32768 & a ? -1 * (65535 - a + 1) : a
                }
            }
            function s(t, e, a, s) {
                if (s || (L("boolean" == typeof a, "missing or invalid endian"),
                L(null != e, "missing offset"),
                L(e + 3 < t.length, "Trying to read beyond buffer length")),
                !(t.length <= e)) {
                    a = n(t, e, a, !0);
                    return 2147483648 & a ? -1 * (4294967295 - a + 1) : a
                }
            }
            function o(t, e, a, s) {
                return s || (L("boolean" == typeof a, "missing or invalid endian"),
                L(e + 3 < t.length, "Trying to read beyond buffer length")),
                R.read(t, e, a, 23, 4)
            }
            function r(t, e, a, s) {
                return s || (L("boolean" == typeof a, "missing or invalid endian"),
                L(e + 7 < t.length, "Trying to read beyond buffer length")),
                R.read(t, e, a, 52, 8)
            }
            function p(t, e, a, s, i) {
                i || (L(null != e, "missing value"),
                L("boolean" == typeof s, "missing or invalid endian"),
                L(null != a, "missing offset"),
                L(a + 1 < t.length, "trying to write beyond buffer length"),
                x(e, 65535));
                i = t.length;
                if (!(i <= a))
                    for (var n = 0, o = Math.min(i - a, 2); n < o; n++)
                        t[a + n] = (e & 255 << 8 * (s ? n : 1 - n)) >>> 8 * (s ? n : 1 - n)
            }
            function v(t, e, a, s, i) {
                i || (L(null != e, "missing value"),
                L("boolean" == typeof s, "missing or invalid endian"),
                L(null != a, "missing offset"),
                L(a + 3 < t.length, "trying to write beyond buffer length"),
                x(e, 4294967295));
                i = t.length;
                if (!(i <= a))
                    for (var n = 0, o = Math.min(i - a, 4); n < o; n++)
                        t[a + n] = e >>> 8 * (s ? n : 3 - n) & 255
            }
            function u(t, e, a, s, i) {
                i || (L(null != e, "missing value"),
                L("boolean" == typeof s, "missing or invalid endian"),
                L(null != a, "missing offset"),
                L(a + 1 < t.length, "Trying to write beyond buffer length"),
                I(e, 32767, -32768)),
                t.length <= a || p(t, 0 <= e ? e : 65535 + e + 1, a, s, i)
            }
            function m(t, e, a, s, i) {
                i || (L(null != e, "missing value"),
                L("boolean" == typeof s, "missing or invalid endian"),
                L(null != a, "missing offset"),
                L(a + 3 < t.length, "Trying to write beyond buffer length"),
                I(e, 2147483647, -2147483648)),
                t.length <= a || v(t, 0 <= e ? e : 4294967295 + e + 1, a, s, i)
            }
            function _(t, e, a, s, i) {
                i || (L(null != e, "missing value"),
                L("boolean" == typeof s, "missing or invalid endian"),
                L(null != a, "missing offset"),
                L(a + 3 < t.length, "Trying to write beyond buffer length"),
                A(e, 34028234663852886e22, -34028234663852886e22)),
                t.length <= a || R.write(t, e, a, s, 23, 4)
            }
            function g(t, e, a, s, i) {
                i || (L(null != e, "missing value"),
                L("boolean" == typeof s, "missing or invalid endian"),
                L(null != a, "missing offset"),
                L(a + 7 < t.length, "Trying to write beyond buffer length"),
                A(e, 17976931348623157e292, -17976931348623157e292)),
                t.length <= a || R.write(t, e, a, s, 52, 8)
            }
            function f(t) {
                return t._isBuffer = !0,
                t._get = t.get,
                t._set = t.set,
                t.get = k.get,
                t.set = k.set,
                t.write = k.write,
                t.toString = k.toString,
                t.toLocaleString = k.toString,
                t.toJSON = k.toJSON,
                t.copy = k.copy,
                t.slice = k.slice,
                t.readUInt8 = k.readUInt8,
                t.readUInt16LE = k.readUInt16LE,
                t.readUInt16BE = k.readUInt16BE,
                t.readUInt32LE = k.readUInt32LE,
                t.readUInt32BE = k.readUInt32BE,
                t.readInt8 = k.readInt8,
                t.readInt16LE = k.readInt16LE,
                t.readInt16BE = k.readInt16BE,
                t.readInt32LE = k.readInt32LE,
                t.readInt32BE = k.readInt32BE,
                t.readFloatLE = k.readFloatLE,
                t.readFloatBE = k.readFloatBE,
                t.readDoubleLE = k.readDoubleLE,
                t.readDoubleBE = k.readDoubleBE,
                t.writeUInt8 = k.writeUInt8,
                t.writeUInt16LE = k.writeUInt16LE,
                t.writeUInt16BE = k.writeUInt16BE,
                t.writeUInt32LE = k.writeUInt32LE,
                t.writeUInt32BE = k.writeUInt32BE,
                t.writeInt8 = k.writeInt8,
                t.writeInt16LE = k.writeInt16LE,
                t.writeInt16BE = k.writeInt16BE,
                t.writeInt32LE = k.writeInt32LE,
                t.writeInt32BE = k.writeInt32BE,
                t.writeFloatLE = k.writeFloatLE,
                t.writeFloatBE = k.writeFloatBE,
                t.writeDoubleLE = k.writeDoubleLE,
                t.writeDoubleBE = k.writeDoubleBE,
                t.fill = k.fill,
                t.inspect = k.inspect,
                t.toArrayBuffer = k.toArrayBuffer,
                t
            }
            function w(t, e, a) {
                return "number" != typeof t ? a : e <= (t = ~~t) ? e : 0 <= t ? t : 0 <= (t += e) ? t : 0
            }
            function E(t) {
                return (t = ~~Math.ceil(+t)) < 0 ? 0 : t
            }
            function b(t) {
                return (Array.isArray || function(t) {
                    return "[object Array]" === Object.prototype.toString.call(t)
                }
                )(t)
            }
            function C(t) {
                return t < 16 ? "0" + t.toString(16) : t.toString(16)
            }
            function y(t) {
                for (var e = [], a = 0; a < t.length; a++) {
                    var s = t.charCodeAt(a);
                    if (s <= 127)
                        e.push(t.charCodeAt(a));
                    else {
                        var i = a;
                        55296 <= s && s <= 57343 && a++;
                        for (var n = encodeURIComponent(t.slice(i, a + 1)).substr(1).split("%"), o = 0; o < n.length; o++)
                            e.push(parseInt(n[o], 16))
                    }
                }
                return e
            }
            function T(t) {
                return O.toByteArray(t)
            }
            function M(t, e, a, s) {
                for (var i = 0; i < s && !(i + a >= e.length || i >= t.length); i++)
                    e[i + a] = t[i];
                return i
            }
            function S(t) {
                try {
                    return decodeURIComponent(t)
                } catch (t) {
                    return String.fromCharCode(65533)
                }
            }
            function x(t, e) {
                L("number" == typeof t, "cannot write a non-number as a number"),
                L(0 <= t, "specified a negative value for writing an unsigned value"),
                L(t <= e, "value is larger than maximum value for type"),
                L(Math.floor(t) === t, "value has a fractional component")
            }
            function I(t, e, a) {
                L("number" == typeof t, "cannot write a non-number as a number"),
                L(t <= e, "value larger than maximum allowed value"),
                L(a <= t, "value smaller than minimum allowed value"),
                L(Math.floor(t) === t, "value has a fractional component")
            }
            function A(t, e, a) {
                L("number" == typeof t, "cannot write a non-number as a number"),
                L(t <= e, "value larger than maximum allowed value"),
                L(a <= t, "value smaller than minimum allowed value")
            }
            function L(t, e) {
                if (!t)
                    throw new Error(e || "Failed assertion")
            }
            var O = P("base64-js")
              , R = P("ieee754");
            B.Buffer = h,
            B.SlowBuffer = h,
            B.INSPECT_MAX_BYTES = 50,
            h.poolSize = 8192,
            h._useTypedArrays = function() {
                if ("undefined" == typeof Uint8Array || "undefined" == typeof ArrayBuffer)
                    return !1;
                try {
                    var t = new Uint8Array(0);
                    return t.foo = function() {
                        return 42
                    }
                    ,
                    42 === t.foo() && "function" == typeof t.subarray
                } catch (t) {
                    return !1
                }
            }(),
            h.isEncoding = function(t) {
                switch (String(t).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "binary":
                case "base64":
                case "raw":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    return !0;
                default:
                    return !1
                }
            }
            ,
            h.isBuffer = function(t) {
                return !(null == t || !t._isBuffer)
            }
            ,
            h.byteLength = function(t, e) {
                var a;
                switch (t += "",
                e || "utf8") {
                case "hex":
                    a = t.length / 2;
                    break;
                case "utf8":
                case "utf-8":
                    a = y(t).length;
                    break;
                case "ascii":
                case "binary":
                case "raw":
                    a = t.length;
                    break;
                case "base64":
                    a = T(t).length;
                    break;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    a = 2 * t.length;
                    break;
                default:
                    throw new Error("Unknown encoding")
                }
                return a
            }
            ,
            h.concat = function(t, e) {
                if (L(b(t), "Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."),
                0 === t.length)
                    return new h(0);
                if (1 === t.length)
                    return t[0];
                if ("number" != typeof e)
                    for (i = e = 0; i < t.length; i++)
                        e += t[i].length;
                for (var a = new h(e), s = 0, i = 0; i < t.length; i++) {
                    var n = t[i];
                    n.copy(a, s),
                    s += n.length
                }
                return a
            }
            ,
            h.prototype.write = function(t, e, a, s) {
                isFinite(e) ? isFinite(a) || (s = a,
                a = void 0) : (p = s,
                s = e,
                e = a,
                a = p),
                e = Number(e) || 0;
                var i, n, o, r, c, p = this.length - e;
                switch (a ? p < (a = Number(a)) && (a = p) : a = p,
                s = String(s || "utf8").toLowerCase()) {
                case "hex":
                    i = function(t, e, a, s) {
                        a = Number(a) || 0;
                        var i = t.length - a;
                        s ? i < (s = Number(s)) && (s = i) : s = i,
                        L((i = e.length) % 2 == 0, "Invalid hex string"),
                        i / 2 < s && (s = i / 2);
                        for (var n = 0; n < s; n++) {
                            var o = parseInt(e.substr(2 * n, 2), 16);
                            L(!isNaN(o), "Invalid hex string"),
                            t[a + n] = o
                        }
                        return h._charsWritten = 2 * n,
                        n
                    }(this, t, e, a);
                    break;
                case "utf8":
                case "utf-8":
                    n = this,
                    o = t,
                    r = e,
                    c = a,
                    i = h._charsWritten = M(y(o), n, r, c);
                    break;
                case "ascii":
                case "binary":
                    i = l(this, t, e, a);
                    break;
                case "base64":
                    o = this,
                    n = t,
                    r = e,
                    c = a,
                    i = h._charsWritten = M(T(n), o, r, c);
                    break;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    i = d(this, t, e, a);
                    break;
                default:
                    throw new Error("Unknown encoding")
                }
                return i
            }
            ,
            h.prototype.toString = function(t, e, a) {
                var s, i, n, o, r = this;
                if (t = String(t || "utf8").toLowerCase(),
                e = Number(e) || 0,
                (a = void 0 !== a ? Number(a) : a = r.length) === e)
                    return "";
                switch (t) {
                case "hex":
                    s = function(t, e, a) {
                        var s = t.length;
                        (!e || e < 0) && (e = 0),
                        (!a || a < 0 || s < a) && (a = s);
                        for (var i = "", n = e; n < a; n++)
                            i += C(t[n]);
                        return i
                    }(r, e, a);
                    break;
                case "utf8":
                case "utf-8":
                    s = function(t, e, a) {
                        var s = ""
                          , i = "";
                        a = Math.min(t.length, a);
                        for (var n = e; n < a; n++)
                            t[n] <= 127 ? (s += S(i) + String.fromCharCode(t[n]),
                            i = "") : i += "%" + t[n].toString(16);
                        return s + S(i)
                    }(r, e, a);
                    break;
                case "ascii":
                case "binary":
                    s = c(r, e, a);
                    break;
                case "base64":
                    i = r,
                    n = e,
                    o = a,
                    s = O.fromByteArray(0 === n && o === i.length ? i : i.slice(n, o));
                    break;
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                    s = function(t, e, a) {
                        for (var s = t.slice(e, a), i = "", n = 0; n < s.length; n += 2)
                            i += String.fromCharCode(s[n] + 256 * s[n + 1]);
                        return i
                    }(r, e, a);
                    break;
                default:
                    throw new Error("Unknown encoding")
                }
                return s
            }
            ,
            h.prototype.toJSON = function() {
                return {
                    type: "Buffer",
                    data: Array.prototype.slice.call(this._arr || this, 0)
                }
            }
            ,
            h.prototype.copy = function(t, e, a, s) {
                if (a = a || 0,
                s || 0 === s || (s = this.length),
                e = e || 0,
                s !== a && 0 !== t.length && 0 !== this.length) {
                    L(a <= s, "sourceEnd < sourceStart"),
                    L(0 <= e && e < t.length, "targetStart out of bounds"),
                    L(0 <= a && a < this.length, "sourceStart out of bounds"),
                    L(0 <= s && s <= this.length, "sourceEnd out of bounds"),
                    s > this.length && (s = this.length),
                    t.length - e < s - a && (s = t.length - e + a);
                    for (var i = 0; i < s - a; i++)
                        t[i + e] = this[i + a]
                }
            }
            ,
            h.prototype.slice = function(t, e) {
                var a = this.length;
                if (t = w(t, a, 0),
                e = w(e, a, a),
                h._useTypedArrays)
                    return f(this.subarray(t, e));
                for (var s = e - t, i = new h(s,void 0,!0), n = 0; n < s; n++)
                    i[n] = this[n + t];
                return i
            }
            ,
            h.prototype.get = function(t) {
                return console.log(".get() is deprecated. Access using array indexes instead."),
                this.readUInt8(t)
            }
            ,
            h.prototype.set = function(t, e) {
                return console.log(".set() is deprecated. Access using array indexes instead."),
                this.writeUInt8(t, e)
            }
            ,
            h.prototype.readUInt8 = function(t, e) {
                return e || (L(null != t, "missing offset"),
                L(t < this.length, "Trying to read beyond buffer length")),
                t >= this.length ? void 0 : this[t]
            }
            ,
            h.prototype.readUInt16LE = function(t, e) {
                return i(this, t, !0, e)
            }
            ,
            h.prototype.readUInt16BE = function(t, e) {
                return i(this, t, !1, e)
            }
            ,
            h.prototype.readUInt32LE = function(t, e) {
                return n(this, t, !0, e)
            }
            ,
            h.prototype.readUInt32BE = function(t, e) {
                return n(this, t, !1, e)
            }
            ,
            h.prototype.readInt8 = function(t, e) {
                if (e || (L(null != t, "missing offset"),
                L(t < this.length, "Trying to read beyond buffer length")),
                !(t >= this.length))
                    return 128 & this[t] ? -1 * (255 - this[t] + 1) : this[t]
            }
            ,
            h.prototype.readInt16LE = function(t, e) {
                return a(this, t, !0, e)
            }
            ,
            h.prototype.readInt16BE = function(t, e) {
                return a(this, t, !1, e)
            }
            ,
            h.prototype.readInt32LE = function(t, e) {
                return s(this, t, !0, e)
            }
            ,
            h.prototype.readInt32BE = function(t, e) {
                return s(this, t, !1, e)
            }
            ,
            h.prototype.readFloatLE = function(t, e) {
                return o(this, t, !0, e)
            }
            ,
            h.prototype.readFloatBE = function(t, e) {
                return o(this, t, !1, e)
            }
            ,
            h.prototype.readDoubleLE = function(t, e) {
                return r(this, t, !0, e)
            }
            ,
            h.prototype.readDoubleBE = function(t, e) {
                return r(this, t, !1, e)
            }
            ,
            h.prototype.writeUInt8 = function(t, e, a) {
                a || (L(null != t, "missing value"),
                L(null != e, "missing offset"),
                L(e < this.length, "trying to write beyond buffer length"),
                x(t, 255)),
                e >= this.length || (this[e] = t)
            }
            ,
            h.prototype.writeUInt16LE = function(t, e, a) {
                p(this, t, e, !0, a)
            }
            ,
            h.prototype.writeUInt16BE = function(t, e, a) {
                p(this, t, e, !1, a)
            }
            ,
            h.prototype.writeUInt32LE = function(t, e, a) {
                v(this, t, e, !0, a)
            }
            ,
            h.prototype.writeUInt32BE = function(t, e, a) {
                v(this, t, e, !1, a)
            }
            ,
            h.prototype.writeInt8 = function(t, e, a) {
                a || (L(null != t, "missing value"),
                L(null != e, "missing offset"),
                L(e < this.length, "Trying to write beyond buffer length"),
                I(t, 127, -128)),
                e >= this.length || (0 <= t ? this.writeUInt8(t, e, a) : this.writeUInt8(255 + t + 1, e, a))
            }
            ,
            h.prototype.writeInt16LE = function(t, e, a) {
                u(this, t, e, !0, a)
            }
            ,
            h.prototype.writeInt16BE = function(t, e, a) {
                u(this, t, e, !1, a)
            }
            ,
            h.prototype.writeInt32LE = function(t, e, a) {
                m(this, t, e, !0, a)
            }
            ,
            h.prototype.writeInt32BE = function(t, e, a) {
                m(this, t, e, !1, a)
            }
            ,
            h.prototype.writeFloatLE = function(t, e, a) {
                _(this, t, e, !0, a)
            }
            ,
            h.prototype.writeFloatBE = function(t, e, a) {
                _(this, t, e, !1, a)
            }
            ,
            h.prototype.writeDoubleLE = function(t, e, a) {
                g(this, t, e, !0, a)
            }
            ,
            h.prototype.writeDoubleBE = function(t, e, a) {
                g(this, t, e, !1, a)
            }
            ,
            h.prototype.fill = function(t, e, a) {
                if (t = t || 0,
                e = e || 0,
                a = a || this.length,
                "string" == typeof t && (t = t.charCodeAt(0)),
                L("number" == typeof t && !isNaN(t), "value is not a number"),
                L(e <= a, "end < start"),
                a !== e && 0 !== this.length) {
                    L(0 <= e && e < this.length, "start out of bounds"),
                    L(0 <= a && a <= this.length, "end out of bounds");
                    for (var s = e; s < a; s++)
                        this[s] = t
                }
            }
            ,
            h.prototype.inspect = function() {
                for (var t = [], e = this.length, a = 0; a < e; a++)
                    if (t[a] = C(this[a]),
                    a === B.INSPECT_MAX_BYTES) {
                        t[a + 1] = "...";
                        break
                    }
                return "<Buffer " + t.join(" ") + ">"
            }
            ,
            h.prototype.toArrayBuffer = function() {
                if ("function" != typeof Uint8Array)
                    throw new Error("Buffer.toArrayBuffer not supported in this browser");
                if (h._useTypedArrays)
                    return new h(this).buffer;
                for (var t = new Uint8Array(this.length), e = 0, a = t.length; e < a; e += 1)
                    t[e] = this[e];
                return t.buffer
            }
            ;
            var k = h.prototype
        }
        ).call(this, P("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, P("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/browserify/node_modules/buffer/index.js", "/node_modules/browserify/node_modules/buffer")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        "base64-js": 20,
        buffer: 19,
        ieee754: 21
    }],
    20: [function(t, o) {
        (function() {
            !function() {
                "use strict";
                function c(t) {
                    t = t.charCodeAt(0);
                    return t === e ? 62 : t === a ? 63 : t < s ? -1 : t < s + 10 ? t - s + 26 + 26 : t < n + 26 ? t - n : t < i + 26 ? t - i + 26 : void 0
                }
                var p = "undefined" != typeof Uint8Array ? Uint8Array : Array
                  , e = ("0".charCodeAt(0),
                "+".charCodeAt(0))
                  , a = "/".charCodeAt(0)
                  , s = "0".charCodeAt(0)
                  , i = "a".charCodeAt(0)
                  , n = "A".charCodeAt(0);
                o.exports.toByteArray = function(t) {
                    function e(t) {
                        i[o++] = t
                    }
                    var a;
                    if (0 < t.length % 4)
                        throw new Error("Invalid string. Length must be a multiple of 4");
                    for (var s = t.length, s = "=" === t.charAt(s - 2) ? 2 : "=" === t.charAt(s - 1) ? 1 : 0, i = new p(3 * t.length / 4 - s), n = 0 < s ? t.length - 4 : t.length, o = 0, r = 0; r < n; r += 4,
                    0)
                        e((16711680 & (a = c(t.charAt(r)) << 18 | c(t.charAt(r + 1)) << 12 | c(t.charAt(r + 2)) << 6 | c(t.charAt(r + 3)))) >> 16),
                        e((65280 & a) >> 8),
                        e(255 & a);
                    return 2 == s ? e(255 & (a = c(t.charAt(r)) << 2 | c(t.charAt(r + 1)) >> 4)) : 1 == s && (e((a = c(t.charAt(r)) << 10 | c(t.charAt(r + 1)) << 4 | c(t.charAt(r + 2)) >> 2) >> 8 & 255),
                    e(255 & a)),
                    i
                }
                ,
                o.exports.fromByteArray = function(t) {
                    function e(t) {
                        return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(t)
                    }
                    for (var a, s, i = t.length % 3, n = "", o = 0, r = t.length - i; o < r; o += 3)
                        a = (t[o] << 16) + (t[o + 1] << 8) + t[o + 2],
                        n += e((s = a) >> 18 & 63) + e(s >> 12 & 63) + e(s >> 6 & 63) + e(63 & s);
                    switch (i) {
                    case 1:
                        n += e((a = t[t.length - 1]) >> 2),
                        n += e(a << 4 & 63),
                        n += "==";
                        break;
                    case 2:
                        n += e((a = (t[t.length - 2] << 8) + t[t.length - 1]) >> 10),
                        n += e(a >> 4 & 63),
                        n += e(a << 2 & 63),
                        n += "="
                    }
                    return n
                }
            }()
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib/b64.js", "/node_modules/browserify/node_modules/buffer/node_modules/base64-js/lib")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    21: [function(t, e, a) {
        (function() {
            a.read = function(t, e, a, s, i) {
                var n, o, r = 8 * i - s - 1, c = (1 << r) - 1, p = c >> 1, h = -7, l = a ? i - 1 : 0, d = a ? -1 : 1, a = t[e + l];
                for (l += d,
                n = a & (1 << -h) - 1,
                a >>= -h,
                h += r; 0 < h; n = 256 * n + t[e + l],
                l += d,
                h -= 8)
                    ;
                for (o = n & (1 << -h) - 1,
                n >>= -h,
                h += s; 0 < h; o = 256 * o + t[e + l],
                l += d,
                h -= 8)
                    ;
                if (0 === n)
                    n = 1 - p;
                else {
                    if (n === c)
                        return o ? NaN : 1 / 0 * (a ? -1 : 1);
                    o += Math.pow(2, s),
                    n -= p
                }
                return (a ? -1 : 1) * o * Math.pow(2, n - s)
            }
            ,
            a.write = function(t, e, a, s, i, n) {
                var o, r, c = 8 * n - i - 1, p = (1 << c) - 1, h = p >> 1, l = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0, d = s ? 0 : n - 1, v = s ? 1 : -1, n = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0;
                for (e = Math.abs(e),
                isNaN(e) || 1 / 0 === e ? (r = isNaN(e) ? 1 : 0,
                o = p) : (o = Math.floor(Math.log(e) / Math.LN2),
                e * (s = Math.pow(2, -o)) < 1 && (o--,
                s *= 2),
                2 <= (e += 1 <= o + h ? l / s : l * Math.pow(2, 1 - h)) * s && (o++,
                s /= 2),
                p <= o + h ? (r = 0,
                o = p) : 1 <= o + h ? (r = (e * s - 1) * Math.pow(2, i),
                o += h) : (r = e * Math.pow(2, h - 1) * Math.pow(2, i),
                o = 0)); 8 <= i; t[a + d] = 255 & r,
                d += v,
                r /= 256,
                i -= 8)
                    ;
                for (o = o << i | r,
                c += i; 0 < c; t[a + d] = 255 & o,
                d += v,
                o /= 256,
                c -= 8)
                    ;
                t[a + d - v] |= 128 * n
            }
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/browserify/node_modules/buffer/node_modules/ieee754/index.js", "/node_modules/browserify/node_modules/buffer/node_modules/ieee754")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    22: [function(t, e) {
        (function(t) {
            (t = e.exports = {}).nextTick = function() {
                var t = "undefined" != typeof window && window.setImmediate
                  , e = "undefined" != typeof window && window.postMessage && window.addEventListener;
                if (t)
                    return function(t) {
                        return window.setImmediate(t)
                    }
                    ;
                if (e) {
                    var a = [];
                    return window.addEventListener("message", function(t) {
                        var e = t.source;
                        (e === window || null === e) && "process-tick" === t.data && (t.stopPropagation(),
                        0 < a.length) && a.shift()()
                    }, !0),
                    function(t) {
                        a.push(t),
                        window.postMessage("process-tick", "*")
                    }
                }
                return function(t) {
                    setTimeout(t, 0)
                }
            }(),
            t.title = "browser",
            t.browser = !0,
            t.env = {},
            t.argv = [],
            t.binding = function() {
                throw new Error("process.binding is not supported")
            }
            ,
            t.cwd = function() {
                return "/"
            }
            ,
            t.chdir = function() {
                throw new Error("process.chdir is not supported")
            }
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js", "/node_modules/browserify/node_modules/insert-module-globals/node_modules/process")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }],
    23: [function(t, m, _) {
        (function(t, u) {
            !function(t) {
                function n(t) {
                    for (var e, a, s = [], i = 0, n = t.length; i < n; )
                        55296 <= (e = t.charCodeAt(i++)) && e <= 56319 && i < n ? 56320 == (64512 & (a = t.charCodeAt(i++))) ? s.push(((1023 & e) << 10) + (1023 & a) + 65536) : (s.push(e),
                        i--) : s.push(e);
                    return s
                }
                function o(t, e) {
                    return h(t >> e & 63 | 128)
                }
                function s() {
                    if (c <= p)
                        throw Error("Invalid byte index");
                    var t = 255 & r[p];
                    if (p++,
                    128 == (192 & t))
                        return 63 & t;
                    throw Error("Invalid continuation byte")
                }
                var e = "object" == typeof _ && _
                  , a = "object" == typeof m && m && m.exports == e && m
                  , i = "object" == typeof u && u;
                i.global !== i && i.window !== i || (t = i);
                var r, c, p, h = String.fromCharCode, l = {
                    version: "2.0.0",
                    encode: function(t) {
                        for (var e = n(t), a = e.length, s = -1, i = ""; ++s < a; )
                            i += function(t) {
                                if (0 == (4294967168 & t))
                                    return h(t);
                                var e = "";
                                return 0 == (4294965248 & t) ? e = h(t >> 6 & 31 | 192) : 0 == (4294901760 & t) ? (e = h(t >> 12 & 15 | 224),
                                e += o(t, 6)) : 0 == (4292870144 & t) && (e = h(t >> 18 & 7 | 240),
                                e += o(t, 12),
                                e += o(t, 6)),
                                e + h(63 & t | 128)
                            }(e[s]);
                        return i
                    },
                    decode: function(t) {
                        r = n(t),
                        c = r.length,
                        p = 0;
                        for (var e, a = []; !1 !== (e = function() {
                            var t, e;
                            if (c < p)
                                throw Error("Invalid byte index");
                            if (p == c)
                                return !1;
                            if (t = 255 & r[p],
                            p++,
                            0 == (128 & t))
                                return t;
                            if (192 == (224 & t)) {
                                if (128 <= (e = (31 & t) << 6 | s()))
                                    return e;
                                throw Error("Invalid continuation byte")
                            }
                            if (224 == (240 & t)) {
                                if (2048 <= (e = (15 & t) << 12 | s() << 6 | s()))
                                    return e;
                                throw Error("Invalid continuation byte")
                            }
                            if (240 == (248 & t) && (65536 <= (e = (15 & t) << 18 | s() << 12 | s() << 6 | s()) && e <= 1114111))
                                return e;
                            throw Error("Invalid UTF-8 detected")
                        }()); )
                            a.push(e);
                        return function(t) {
                            for (var e, a = t.length, s = -1, i = ""; ++s < a; )
                                65535 < (e = t[s]) && (i += h((e -= 65536) >>> 10 & 1023 | 55296),
                                e = 56320 | 1023 & e),
                                i += h(e);
                            return i
                        }(a)
                    }
                };
                if ("function" == typeof define && "object" == typeof define.amd && define.amd)
                    define(function() {
                        return l
                    });
                else if (e && !e.nodeType)
                    if (a)
                        a.exports = l;
                    else {
                        var d, v = {}.hasOwnProperty;
                        for (d in l)
                            v.call(l, d) && (e[d] = l[d])
                    }
                else
                    t.utf8 = l
            }(this)
        }
        ).call(this, t("/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js"), "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, t("buffer").Buffer, arguments[3], arguments[4], arguments[5], arguments[6], "/node_modules/utf8/utf8.js", "/node_modules/utf8")
    }
    , {
        "/Library/WebServer/Documents/projects/amf/js/node_modules/browserify/node_modules/insert-module-globals/node_modules/process/browser.js": 22,
        buffer: 19
    }]
}, {}, [1]);
var canvas = {
    animation: {},
    utils: {},
    ui: {},
    px: {
        Loader: PIXI.loader,
        Container: PIXI.Container,
        Sprite: PIXI.Sprite,
        Ticker: PIXI.ticker.Ticker,
        Application: PIXI.Application,
        ColorMatrixFilter: PIXI.filters.ColorMatrixFilter,
        TextureEmpty: PIXI.Texture.EMPTY,
        SlicedSprite: PIXI.mesh.NineSlicePlane,
        Graphics: PIXI.Graphics,
        Text: PIXI.Text,
        BitmapText: PIXI.extras.BitmapText,
        Point: PIXI.Point,
        Rectangle: PIXI.Rectangle,
        Circle: PIXI.Circle,
        Ellipse: PIXI.Ellipse,
        BlendMode: PIXI.BLEND_MODES,
        ScaleMode: PIXI.SCALE_MODES,
        GlowFilter: PIXI.filters.GlowFilter,
        TiltShiftFilter: PIXI.filters.TiltShiftFilter,
        DropShadowFilter: PIXI.filters.DropShadowFilter,
        AlphaFilter: PIXI.filters.AlphaFilter,
        TilingSprite: PIXI.extras.TilingSprite,
        utils: PIXI.utils,
        Texture: PIXI.Texture,
        ResponseType: PIXI.loaders.Resource.XHR_RESPONSE_TYPE,
        LoadType: PIXI.loaders.Resource.LOAD_TYPE,
        Tween: TWEEN,
        inflate: pako.inflate,
        Howl: Howl,
        AMF: AMF
    },
    data: {
        battle: {},
        location: {},
        manor: {
            throne: {}
        },
        leftMenu: {},
        cube: {},
        clanWar: {}
    },
    app: {
        view: {
            window: {}
        },
        battle: {
            view: {
                elements: {}
            },
            engine: {}
        },
        mem: {
            view: {}
        },
        location: {
            view: {
                elements: {},
                popups: {},
                fronts: {}
            }
        },
        world: {
            view: {},
            engine: {},
            manor: {
                popup: {}
            }
        },
        manor: {
            view: {
                controls: {
                    elements: {},
                    camp: {},
                    throne: {}
                }
            }
        },
        hunt: {
            view: {
                elements: {}
            },
            engine: {}
        },
        inst: {
            view: {
                combo: {}
            }
        },
        user: {
            view: {}
        },
        leftMenu: {
            view: {}
        },
        avatar: {
            view: {}
        },
        topMenu: {
            view: {}
        },
        rightMenu: {
            view: {
                menu: {}
            }
        },
        compass: {
            view: {}
        },
        magic: {
            view: {
                slots: {}
            }
        },
        birthday: {
            view: {}
        },
        cube: {
            view: {}
        },
        casino: {
            view: {}
        },
        diceGame: {
            view: {}
        },
        treasure: {
            view: {}
        },
        wheel: {
            view: {}
        },
        mirror: {
            view: {}
        },
        clanWar: {
            view: {}
        },
        clanCitadel: {
            view: {
                sanctuary: {}
            }
        },
        barber: {},
        firstBattle: {
            view: {}
        },
        puzzle: {
            view: {}
        }
    },
    modules: {},
    isSupported: function() {
        var t = /Chrome\/(\d+)/.exec(navigator.userAgent);
        return !(t && t[1] && parseInt(t[1]) < 30)
    },
    isMobile: function() {
        return /iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi/i.test(navigator && navigator.userAgent)
    },
    getClientVersion: function() {
        var t = /Client\/(\d+)/.exec(navigator.userAgent);
        return t && t[1] ? parseInt(t[1]) : 0
    }
};
canvas.px.Container.prototype.startDrag = function(t, e, a, s) {
    this._dragScale = s || 1,
    this._dragLockPoint = t || new canvas.px.Point,
    this._dragBounds = e,
    this._dragStartPosition = this.parent.toGlobal(new canvas.px.Point(this.x,this.y)),
    this._dragStartViewPosition = new canvas.px.Point(this.x,this.y),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this._dragMouseMoveHandler, this),
    a && this._dragMouseMoveHandler({
        params: {
            x: a.x,
            y: a.y,
            mouseData: {
                offsetX: a.x,
                offsetY: a.y
            }
        }
    })
}
,
canvas.px.Container.prototype.stopDrag = function() {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this._dragMouseMoveHandler, this)
}
,
canvas.px.Container.prototype._dragMouseMoveHandler = function(t) {
    t = new canvas.px.Point(this._dragStartViewPosition.x + (t.params.mouseData.offsetX - this._dragStartPosition.x - this._dragLockPoint.x),this._dragStartViewPosition.y + (t.params.mouseData.offsetY - this._dragStartPosition.y - this._dragLockPoint.y));
    this._dragBounds && (t.x = t.x < this._dragBounds.x ? this._dragBounds.x : t.x > this._dragBounds.x + this._dragBounds.width ? this._dragBounds.x + this._dragBounds.width : t.x,
    t.y = t.y < this._dragBounds.y ? this._dragBounds.y : t.y > this._dragBounds.y + this._dragBounds.height ? this._dragBounds.y + this._dragBounds.height : t.y),
    this.position.set(t.x * this._dragScale, t.y * this._dragScale)
}
,
null == canvas.px.Container.prototype.numChildren && Object.defineProperty(canvas.px.Container.prototype, "numChildren", {
    get: function() {
        return this.children ? this.children.length : 0
    }
}),
canvas.px.Container.prototype.contains = function(t) {
    return t && t.parent == this
}
,
canvas.px.Container.prototype.removeIfExist = function(t) {
    return this.contains(t) ? this.removeChild(t) : null
}
,
canvas.px.Rectangle.prototype.intersects = function(t) {
    return t.x < this.x + this.width && this.x < t.x + t.width && t.y < this.y + this.height && this.y < t.y + t.height
}
,
canvas.px.Rectangle.prototype.intersectsPoint = function(t) {
    return t.x <= this.x + this.width && t.x >= this.x && t.y <= this.y + this.height && t.y >= this.y
}
,
canvas.px.SlicedSprite.prototype.setSize = function(t, e) {
    0 < t && (this.width = t),
    0 < e && (this.height = e)
}
,
canvas.px.Container.prototype.getObjectsUnderPoint = function(t) {
    for (var e, a = [], s = this.children.length, i = 0; i < s; i++)
        (e = this.children[i]).getBounds().intersectsPoint(t) && (a.push(e),
        a = a.concat(e.getObjectsUnderPoint(new canvas.px.Point(t.x,t.y))));
    return a
}
,
canvas.isMobile() && (canvas.px.Container.prototype.pointertap = function(t) {
    this.click && this.click.call(this, t)
}
,
canvas.px.Container.prototype.pointerdown = function(t) {
    this.mousedown && this.mousedown.call(this, t)
}
,
canvas.px.Container.prototype.pointerup = function(t) {
    this.mouseup && this.mouseup.call(this, t)
}
,
canvas.px.Container.prototype.pointermove = function(t) {
    this.mousemove && this.mousemove.call(this, t)
}
,
canvas.px.Container.prototype.pointerout = function(t) {
    this.mouseout && this.mouseout.call(this, t)
}
,
canvas.px.Container.prototype.pointerover = function(t) {
    this.mouseover && this.mouseover.call(this, t)
}
),
canvas.Config = {
    init: function() {
        !this.domain && document.domain && (this.domain = "http" + ("https" == document.URL.substr(0, 5) ? "s" : "") + "://" + document.domain + (document.location.port ? ":" + document.location.port : ""),
        (0 <= this.domain.indexOf("localhost") || 0 <= this.domain.indexOf("127.0.0.1")) && (this.isLocal = !0),
        this.wwwPath = this.domain + "/",
        this.dataPath = this.domain + (this.isLocal ? "/canvas/content/" : "/images/data/"),
        this.imgPath = this.dataPath + (this.isLocal ? "" : "canvas/"),
        this.soundsPath = this.imgPath + "sounds/",
        this.botsPath = this.imgPath + "bots/",
        this.petsPath = this.imgPath + "pets/",
        this.petsUiPath = this.imgPath + "pets_ui/",
        this.huntMapsPath = this.imgPath + "hunt_maps/",
        this.huntBotsPath = this.imgPath + "hunt_bots/",
        this.huntResPath = this.imgPath + "hunt_res/",
        this.spellsPath = this.imgPath + "spells/mci/",
        this.spellsAtlasPath = this.imgPath + "spells/",
        this.effectsAtlasPath = this.imgPath + "effects/",
        this.effectsPath = this.imgPath + "effects/mci/",
        this.flagsPath = this.imgPath + "flags/",
        this.skPath = this.imgPath + "sk/",
        this.packsPath = this.imgPath + "packs/",
        this.packsAnimsPath = this.imgPath + "packs_anims/",
        this.fontsPath = this.imgPath + "fonts/",
        this.areasPath = this.imgPath + "areas/",
        this.worldPath = this.imgPath + "world/",
        this.instPath = this.imgPath + "inst/",
        this.skyPath = this.imgPath + "sky/",
        this.userBackgroundsPath = this.imgPath + "user_backs/",
        this.userViewsPath = this.imgPath + "user_views/",
        this.mountsPath = this.imgPath + "mounts/",
        this.clanBuildingsPath = this.imgPath + "clan_buildings/",
        this.manorBuildingsPath = this.imgPath + "estate_buildings/",
        this.throneRoomPath = this.imgPath + "throne_room/",
        this.localePath = this.imgPath + "locale/",
        this.ui = this.imgPath + "ui/",
        this.effects = this.imgPath + "effects/effects.json",
        this.amfPath = this.dataPath + "locale/ru/amf/",
        this.artifactsPath = this.dataPath + "artifacts/",
        this.clansPath = this.dataPath + "clans/",
        this.uxPath = "images/data/canvas/ux.cfg?ux=1517916589",
        this.entryPoint = "entry_point.php",
        this.isMobile = canvas.isMobile(),
        this.initLang("ru"))
    },
    initLang: function(t) {
        this.lng = t,
        this.amfPath = this.dataPath + "locale/" + this.lng + "/amf/",
        this.langPath = this.localePath + this.lng + "/",
        this.locale = this.langPath + "locale.json"
    }
},
canvas.Const = {
    FONT_ARIAL_9_BOLD_STROKE: "arial_9_bold_stroke",
    FONT_ARIAL_10_BOLD_STROKE: "arial_10_bold_stroke",
    FONT_ARIAL_11: "arial_11",
    FONT_ARIAL_11_BOLD: "arial_11_bold",
    FONT_ARIAL_11_BOLD_STROKE: "arial_11_bold_stroke",
    FONT_IFLASH: "iFlash502",
    FONT_CUPRUM_12_BOLD: "cuprum_12_bold",
    FONT_CUPRUM_16_BOLD: "cuprum_16_bold",
    FONT_CUPRUM_22_BOLD: "cuprum_22_bold",
    FONT_CUPRUM_22_BOLD_STROKE: "cuprum_22_bold_stroke",
    FONT_CUPRUM_34_BOLD_STROKE: "cuprum_34_bold_stroke",
    FONT_CUPRUM_24_BOLD_STROKE_BROWN: "cuprum_24_bold_stroke_brown",
    FONT_CUPRUM_40_BOLD: "cuprum_40_bold",
    FONT_AMERICAN_TEXT_40_SHADOW_GRADIENT: "american_text_40_shadow_gradient",
    FONT_TAHOMA_9: "tahoma_9",
    FONT_TAHOMA_9_STROKE: "tahoma_9_stroke",
    FONT_TAHOMA_9_BOLD: "tahoma_9_bold",
    FONT_TAHOMA_9_BOLD_STROKE: "tahoma_9_bold_stroke",
    FONT_TAHOMA_10: "tahoma_10",
    FONT_TAHOMA_10_STROKE: "tahoma_10_stroke",
    FONT_TAHOMA_10_BOLD: "tahoma_10_bold",
    FONT_TAHOMA_10_BOLD_STROKE: "tahoma_10_bold_stroke",
    FONT_TAHOMA_10_BOLD_SHARP: "tahoma_10_bold_sharp",
    FONT_TAHOMA_11: "tahoma_11",
    FONT_TAHOMA_11_BOLD: "tahoma_11_bold",
    FONT_TAHOMA_11_BOLD_STROKE: "tahoma_11_bold_stroke",
    FONT_TAHOMA_11_BOLD_STROKE_BEVEL_SHARP: "tahoma_11_bold_stroke_bevel_sharp",
    FONT_TAHOMA_12: "tahoma_12",
    FONT_TAHOMA_12_BOLD: "tahoma_12_bold",
    FONT_TAHOMA_12_BOLD_STROKE: "tahoma_12_bold_stroke",
    FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE: "tahoma_12_bold_stroke_red_white",
    FONT_TAHOMA_13: "tahoma_13",
    FONT_TAHOMA_13_BOLD: "tahoma_13_bold",
    FONT_TAHOMA_13_BOLD_STROKE: "tahoma_13_bold_stroke",
    FONT_TAHOMA_14: "tahoma_14",
    FONT_TAHOMA_14_STROKE: "tahoma_14_stroke",
    FONT_TAHOMA_14_BOLD: "tahoma_14_bold",
    FONT_TAHOMA_14_BOLD_STROKE: "tahoma_14_bold_stroke",
    FONT_TAHOMA_14_NUMBERS_BOLD_STROKE_BEVEL: "tahoma_14_numbers_bold_stroke_bevel",
    FONT_TAHOMA_15: "tahoma_15",
    FONT_TAHOMA_15_STROKE: "tahoma_15_stroke",
    FONT_TAHOMA_15_BOLD: "tahoma_15_bold",
    FONT_TAHOMA_15_BOLD_STROKE: "tahoma_15_bold_stroke",
    FONT_TAHOMA_16: "tahoma_16",
    FONT_TAHOMA_16_STROKE: "tahoma_16_stroke",
    FONT_TAHOMA_16_BOLD: "tahoma_16_bold",
    FONT_TAHOMA_16_BOLD_STROKE: "tahoma_16_bold_stroke",
    FONT_TAHOMA_16_BOLD_GLOW_NUMBERS: "tahoma_16_bold_glow_numbers",
    FONT_TAHOMA_18: "tahoma_18",
    FONT_TAHOMA_18_BOLD_STROKE: "tahoma_18_bold_stroke",
    FONT_TAHOMA_20_BOLD_STROKE: "tahoma_20_bold_stroke",
    FONT_TAHOMA_S_15_BOLD: "tahoma_s_15_bold",
    FONT_RADA_18: "rada_18",
    FONT_MYRIAD_PRO_15_BOLD_STROKE: "myriad_pro_15_bold_stroke",
    LANG_RU: "ru",
    LANG_EN: "en",
    SK_SLOT_NAMES: ["HEAD", "HELM", "BODY", "TRUS", "HAND11", "HAND12", "HAND13", "HAND21", "HAND22", "HAND23", "FOOT11", "FOOT12", "FOOT13", "FOOT21", "FOOT22", "FOOT23", "SWORD", "SHIELD", "SWORD2", "BANNER", "BOW"],
    SK_WPN_SLOT_NAMES: ["SWORD", "SHIELD", "SWORD2", "BANNER", "BOW"],
    UI_SLOT_NAMES: ["HEAD", "HELM", "BODY", "TRUS", "HAND11", "HAND12", "HAND13", "HAND21", "HAND22", "HAND23", "FOOT11", "FOOT12", "FOOT13", "FOOT21", "FOOT22", "FOOT23", "SWORD", "SHIELD", "SWORD2"],
    AVATAR_SLOT_NAMES: ["HEAD", "HELM", "BODY", "HAND11", "HAND21"],
    UI_EXCLUDE_ANIM_SLOTS: ["TRUS", "FOOT21", "FOOT22", "FOOT23", "HAND21", "HAND22", "HAND23", "HAND13"],
    UI_TROPHY_SLOT_NAMES: ["HEAD"],
    UI_SLOT_POS: {
        HAND13: [8, 7],
        SWORD: [1],
        SWORD2: [1],
        HAND12: [8],
        HAND11: [8],
        FOOT11: [1, 8],
        FOOT12: [1, 8],
        FOOT13: [1, 8],
        BODY: [8],
        TRUS: [8],
        HEAD: [8],
        HELM: [8],
        FOOT21: [2, 4],
        FOOT22: [2, 3],
        FOOT23: [2, 3],
        HAND22: [2, 3],
        HAND23: [2, 3],
        HAND21: [2, 3],
        SHIELD: [1]
    },
    SK_COLOR_TRANSFORMS: {
        c1: {
            rr: -30,
            gg: -30,
            bb: -30
        },
        c2: {
            rr: -80,
            gg: -80,
            bb: -80
        },
        c3: {
            rr: 0,
            gg: -30,
            bb: -30
        },
        c4: {
            rr: 20,
            gg: 20,
            bb: 0
        },
        c5: {
            rr: 40,
            gg: 40,
            bb: 0
        },
        c6: {
            rr: -60,
            gg: -40,
            bb: -215
        },
        c7: {
            rr: -60,
            gg: 10,
            bb: 45
        },
        c8: {
            rr: -75,
            gg: 20,
            bb: 10
        },
        c9: {
            rr: 0,
            gg: 10,
            bb: 0,
            gm: 1.2,
            bm: .8
        },
        c10: {
            rr: 0,
            gg: -30,
            bb: 0,
            rm: .8
        },
        c11: {
            rr: -20,
            gg: -20,
            bb: -20
        },
        c12: {
            rr: -90,
            gg: -90,
            bb: -90
        },
        c13: {
            rr: -50,
            gg: -75,
            bb: -100
        },
        c14: {
            rr: 75,
            gg: -25,
            bb: -150
        },
        c15: {
            rr: 128,
            gg: 110,
            bb: 0
        },
        c16: {
            rr: 100,
            gg: -50,
            bb: -50
        },
        c17: {
            rr: -30,
            gg: -30,
            bb: -30
        },
        c18: {
            rr: -100,
            gg: -100,
            bb: -100
        },
        c19: {
            rr: 50,
            gg: 0,
            bb: -150
        },
        c20: {
            rr: 0,
            gg: -180,
            bb: -180
        }
    },
    SK_DIE_COLORS_HUMAN: [[.875, .875, .875, 0, 26, 32], [.75, .75, .75, 0, 51, 64], [.625, .625, .625, 0, 77, 96], [.5, .5, .5, 0, 102, 128], [.375, .375, .375, 0, 128, 159], [.25, .25, .25, 0, 153, 191], [.125, .125, .125, 0, 179, 223]],
    SK_DIE_COLORS_MAGMAR: [[.875, .875, .875, 0, 26, 32], [.75, .75, .75, 0, 51, 64], [.625, .625, .625, 0, 77, 96], [.5, .5, .5, 0, 102, 128], [.375, .375, .375, 0, 128, 159], [.25, .25, .25, 0, 153, 191], [.125, .125, .125, 0, 179, 223]],
    KEYS: {
        A: 65,
        B: 66,
        C: 67,
        D: 68,
        E: 69,
        F: 70,
        G: 71,
        H: 72,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        M: 77,
        N: 78,
        O: 79,
        P: 80,
        Q: 81,
        R: 82,
        S: 83,
        T: 84,
        U: 85,
        V: 86,
        W: 87,
        X: 88,
        Y: 89,
        Z: 90,
        LEFT_ARROW: 37,
        UP_ARROW: 38,
        RIGHT_ARROW: 39,
        DOWN_ARROW: 40,
        KEY_0: 48,
        KEY_1: 49,
        KEY_2: 50,
        KEY_3: 51,
        KEY_4: 52,
        KEY_5: 53,
        KEY_6: 54,
        KEY_7: 55,
        KEY_8: 56,
        KEY_9: 57,
        NUM_0: 96,
        NUM_1: 97,
        NUM_2: 98,
        NUM_3: 99,
        NUM_4: 100,
        NUM_5: 101,
        NUM_6: 102,
        NUM_7: 103,
        NUM_8: 104,
        NUM_9: 105,
        MINUS: 189,
        EQUAL: 187,
        RIGHT_SQUARE_BRACKET: 221,
        LEFT_SQUARE_BRACKET: 219,
        SPACEBAR: 32,
        ESC: 27,
        TAB: 9,
        POINT: 190
    },
    CODE_TO_KEYS: {
        KeyA: "A",
        KeyB: "B",
        KeyC: "C",
        KeyD: "D",
        KeyE: "E",
        KeyF: "F",
        KeyG: "G",
        KeyH: "H",
        KeyI: "I",
        KeyJ: "J",
        KeyK: "K",
        KeyL: "L",
        KeyM: "M",
        KeyN: "N",
        KeyO: "O",
        KeyP: "P",
        KeyQ: "Q",
        KeyR: "R",
        KeyS: "S",
        KeyT: "T",
        KeyU: "U",
        KeyV: "V",
        KeyW: "W",
        KeyX: "X",
        KeyY: "Y",
        KeyZ: "Z",
        ArrowLeft: "LEFT_ARROW",
        ArrowUp: "UP_ARROW",
        ArrowRight: "RIGHT_ARROW",
        ArrowDown: "DOWN_ARROW",
        Digit0: "KEY_0",
        Digit1: "KEY_1",
        Digit2: "KEY_2",
        Digit3: "KEY_3",
        Digit4: "KEY_4",
        Digit5: "KEY_5",
        Digit6: "KEY_6",
        Digit7: "KEY_7",
        Digit8: "KEY_8",
        Digit9: "KEY_9",
        Numpad0: "NUM_0",
        Numpad1: "NUM_1",
        Numpad2: "NUM_2",
        Numpad3: "NUM_3",
        Numpad4: "NUM_4",
        Numpad5: "NUM_5",
        Numpad6: "NUM_6",
        Numpad7: "NUM_7",
        Numpad8: "NUM_8",
        Numpad9: "NUM_9",
        Minus: "MINUS",
        Equal: "EQUAL",
        BracketRight: "RIGHT_SQUARE_BRACKET",
        BracketLeft: "LEFT_SQUARE_BRACKET",
        Space: "SPACEBAR",
        Escape: "ESC",
        Tab: "TAB",
        Period: "POINT"
    },
    KEYBOARD_BUTTONS: {
        113: "й",
        119: "ц",
        101: "у",
        114: "к",
        116: "е",
        121: "н",
        117: "г",
        105: "ш",
        111: "щ",
        112: "з",
        91: "х",
        93: "ъ",
        97: "ф",
        115: "ы",
        100: "в",
        102: "а",
        103: "п",
        104: "р",
        106: "о",
        107: "л",
        108: "д",
        59: "ж",
        39: "э",
        122: "я",
        120: "ч",
        99: "с",
        118: "м",
        98: "и",
        110: "т",
        109: "ь",
        44: "б",
        46: "ю",
        96: "ё"
    },
    GENDER: {
        MALE: "M",
        FEMALE: "F"
    },
    KIND: {
        HUM: 1,
        MAG: 2
    }
},
canvas.EventManager = {
    events: {},
    addEventListener: function(t, e, a, s) {
        this.hasEventListener(t, e, a, s) || (this.events[t] || (this.events[t] = new Array),
        this.events[t].push({
            target: e,
            handler: a,
            context: s
        }))
    },
    removeEventListener: function(t, e, a, s) {
        if (this.events[t] && 0 < this.events[t].length)
            for (var i = this.events[t], n = i.length - 1; 0 <= n; n--)
                i[n].target != e || i[n].handler != a || void 0 !== s && i[n].context != s || i.splice(n, 1)
    },
    hasEventListener: function(t, e, a, s) {
        if (this.events[t] && 0 < this.events[t].length)
            for (var i = this.events[t], n = i.length - 1; 0 <= n; n--)
                if (!(e && i[n].target != e || a && i[n].handler != a || s && i[n].context != s))
                    return !0;
        return !1
    },
    removeAllListeners: function(t, e, a, s) {
        var i = this.events[t];
        if (i && 0 < i.length)
            for (var n = i.length - 1; 0 <= n; n--)
                e && i[n].target != e || a && i[n].handler != a || s && i[n].context != s || i.splice(n, 1)
    },
    dispatchEvent: function(t, e, a) {
        for (var s in this.events)
            if (s == t && this.events[t] && 0 < this.events[t].length) {
                for (var i = this.events[t].slice(0), n = 0; n < i.length; n++) {
                    var o = i[n];
                    !o.handler || null != o.target && o.target != e || o.handler.apply(o.context, [{
                        target: e,
                        params: a,
                        name: t
                    }])
                }
                break
            }
    },
    destroy: function() {
        for (var t in this.events)
            delete this.events[t]
    }
},
canvas.Functions = {
    colorMatrixCache: {},
    setNumberLen: function(t, e) {
        for (null == e && (e = 2),
        t = t.toString(); t.length < e; )
            t = "0" + t;
        return t
    },
    getColorMatrixFilter: function() {
        var t = canvas.Functions.getColorMatrixHash.apply(this, arguments);
        if (canvas.Functions.colorMatrixCache[t])
            return canvas.Functions.colorMatrixCache[t];
        var e = new canvas.px.ColorMatrixFilter;
        return e.matrix = [arguments[0], 0, 0, 0, arguments[4] / 255, 0, arguments[1], 0, 0, arguments[5] / 255, 0, 0, arguments[2], 0, arguments[6] / 255, 0, 0, 0, arguments[3], 0],
        canvas.Functions.colorMatrixCache[t] = e
    },
    getColorMatrixHash: function() {
        return arguments[0].toString().concat("_", arguments[1], "_", arguments[2], "_", arguments[3], "_", arguments[4], "_", arguments[5], "_", arguments[6])
    },
    formatDate: function(t, e, a, s, i, n) {
        if (null == e && (e = "00"),
        null == i && (i = !0),
        null == n && (n = !0),
        0 == t)
            return "";
        var o, r = Math.round(.001 * t), t = i ? Math.floor(r / 60) : Math.ceil(r / 60), c = e;
        if (0 < r)
            if (c = "",
            0 < (e = Math.floor(t / 1440))) {
                switch (c += n ? this.setNumberLen(e, 2) : e,
                a) {
                case 1:
                case 2:
                    c += canvas.Translator.getText(2e3) + " ";
                    break;
                case 3:
                    c += " " + canvas.Translator.getText(2e3) + ". ";
                    break;
                default:
                    c += ":"
                }
                switch (o = Math.floor((t - 1440 * e) / 60),
                c += n ? this.setNumberLen(o, 2) : o,
                a) {
                case 1:
                case 2:
                    c += canvas.Translator.getText(2001);
                    break;
                case 3:
                    c += " " + canvas.Translator.getText(2001) + ".";
                    break;
                default:
                    c += ""
                }
            } else if (0 < (o = Math.floor(t / 60))) {
                switch (c += n ? this.setNumberLen(o, 2) : o,
                a) {
                case 1:
                case 2:
                    c += canvas.Translator.getText(2001) + " ";
                    break;
                case 3:
                    c += " " + canvas.Translator.getText(2001) + ". ";
                    break;
                default:
                    c += ":"
                }
                switch (t -= 60 * o,
                c += n ? this.setNumberLen(t, 2) : t,
                a) {
                case 1:
                    c += canvas.Translator.getText(2002);
                    break;
                case 2:
                    c += canvas.Translator.getText(2016);
                    break;
                case 3:
                    c += " " + canvas.Translator.getText(2016) + ".";
                    break;
                default:
                    c += ""
                }
            } else {
                if (0 < t)
                    switch (c += n ? this.setNumberLen(t, 2) : t,
                    a) {
                    case 1:
                        c += canvas.Translator.getText(2002) + " ";
                        break;
                    case 2:
                        c += canvas.Translator.getText(2016) + " ";
                        break;
                    case 3:
                        c += " " + canvas.Translator.getText(2016) + ". ";
                        break;
                    default:
                        c += ":"
                    }
                else
                    s && (c += "00:");
                if (i)
                    switch (r -= 60 * t,
                    c += n ? this.setNumberLen(r, 2) : r,
                    a) {
                    case 1:
                        c += canvas.Translator.getText(2003);
                        break;
                    case 2:
                        c += canvas.Translator.getText(2017);
                        break;
                    case 3:
                        c += " " + canvas.Translator.getText(2017) + ".";
                        break;
                    default:
                        c += ""
                    }
                else
                    c = c.substr(0, c.length - 1)
            }
        return c
    },
    degToRad: function(t) {
        return t * (Math.PI / 180)
    },
    radToDeg: function(t) {
        return t * (180 / Math.PI)
    },
    navigateToURL: function(t, e) {
        window.open(t, e)
    },
    clearChildren: function(t) {
        for (; 0 < t.children.length; )
            t.removeChildAt(0)
    },
    destroyChildren: function(t) {
        for (; 0 < t.children.length; )
            t.removeChildAt(0).destroy({
                children: !0
            })
    },
    decodeUrlParams: function(t) {
        for (var e, a = t.split("&"), s = a.length, i = {}, n = 0; n < s; n++)
            i[(e = a[n].split("="))[0]] = decodeURIComponent(e[1]);
        return i
    },
    testFlag: function(t, e) {
        return (t & e) == e
    },
    testStatus: function(t) {
        return !t || !t.hasOwnProperty("status") || 100 == t.status || null == t.error
    },
    greyScaleCache: {},
    getGreyScale: function(t) {
        if (null == t && (t = .5),
        canvas.Functions.greyScaleCache[t])
            return canvas.Functions.greyScaleCache[t];
        var e = new canvas.px.ColorMatrixFilter;
        return e.greyscale(t),
        canvas.Functions.greyScaleCache[t] = e
    },
    brightnessCache: {},
    getBrightness: function(t) {
        if (null == t && (t = 1.2),
        canvas.Functions.brightnessCache[t])
            return canvas.Functions.brightnessCache[t];
        var e = new canvas.px.ColorMatrixFilter;
        return e.brightness(t),
        canvas.Functions.brightnessCache[t] = e
    },
    saturationCache: {},
    getSaturation: function(t) {
        if (null == t && (t = .2),
        canvas.Functions.saturationCache[t])
            return canvas.Functions.saturationCache[t];
        var e = new canvas.px.ColorMatrixFilter;
        return e.saturate(t),
        canvas.Functions.saturationCache[t] = e
    },
    blurCache: {},
    getBlur: function(t) {
        if (null == t && (t = 1),
        canvas.Functions.blurCache[t])
            return canvas.Functions.blurCache[t];
        var e = new canvas.px.TiltShiftFilter(t,0);
        return canvas.Functions.blurCache[t] = e
    },
    dropShadowCache: {},
    getDropShadow: function(t, e, a, s, i) {
        null == t && (t = 45),
        null == e && (e = 5),
        null == a && (a = 2),
        null == s && (s = 0),
        null == i && (i = .5);
        var n = t.toString().concat("_" + e + "_" + a + "_" + s + "_" + i);
        if (canvas.Functions.dropShadowCache[n])
            return canvas.Functions.dropShadowCache[n];
        i = new canvas.px.DropShadowFilter({
            rotation: t,
            distance: e,
            blur: a,
            color: s,
            alpha: i
        });
        return canvas.Functions.dropShadowCache[n] = i
    },
    blackAndWhiteCache: null,
    getBlackAndWhite: function() {
        if (canvas.Functions.blackAndWhiteCache)
            return canvas.Functions.blackAndWhiteCache;
        var t = new canvas.px.ColorMatrixFilter;
        return t.blackAndWhite(),
        canvas.Functions.blackAndWhiteCache = t
    },
    glowCache: {},
    getGlow: function(t, e, a, s, i) {
        null == t && (t = 10),
        null == e && (e = 4),
        null == a && (a = 0),
        null == s && (s = 16777215),
        null == i && (i = .1);
        var n = t.toString().concat("_" + e + "_" + a + "_" + s + "_" + i);
        if (canvas.Functions.glowCache[n])
            return canvas.Functions.glowCache[n];
        i = new canvas.px.GlowFilter(t,e,a,s,i);
        return canvas.Functions.glowCache[n] = i
    },
    alphaCache: {},
    getAlpha: function(t) {
        if (null == t && (t = 1),
        canvas.Functions.alphaCache[t])
            return canvas.Functions.alphaCache[t];
        var e = new canvas.px.AlphaFilter;
        return e.alpha = t,
        canvas.Functions.alphaCache[t] = e
    },
    findParent: function(t, e) {
        for (; e; ) {
            if (e == t)
                return !0;
            e = e.parent
        }
        return !1
    },
    findParentByName: function(t, e) {
        for (var a = t.length; e; ) {
            if (e.name && e.name.substr(0, a) == t)
                return e;
            e = e.parent
        }
        return null
    },
    cloneSimpleObject: function(t) {
        var e, a = {};
        for (e in t)
            a[e] = t[e];
        return a
    },
    parseUx: function() {
        if (!canvas.ResourceLoader.ux) {
            canvas.ResourceLoader.ux = {};
            for (var t, e, a, s, i, n, o, r = 0; e = canvas.ResourceLoader.get("ux" + r++); ) {
                for (i = [],
                n = (s = (a = e.data.split("\n"))[0].split(",")).length,
                t = 0; t < n; t++)
                    o = s[t].match(/{(\d+)}:(.+)/i),
                    i[parseInt(o[1])] = canvas.Config.wwwPath + o[2];
                for (n = a.length,
                t = 1; t < n; t++)
                    a[t] && (o = a[t].match(/{(\d+)}(.+)\?ux=(.+)/i),
                    canvas.ResourceLoader.ux[i[parseInt(o[1])] + o[2]] = o[3])
            }
            canvas.ResourceLoader.uxReady = !0,
            canvas.EventManager.dispatchEvent(canvas.Event.UX_READY)
        }
    },
    extractSwfName: function(t) {
        if (!t)
            return "";
        t = t.split(".")[0].split("/");
        return t[t.length - 1]
    },
    random: function(t) {
        if (!t)
            return 0;
        var e = Math.floor(Math.random() * t);
        return t <= e ? t - 1 : e
    },
    randomArray: function(t) {
        for (var e, a, s = t.length - 1; 0 < s; s--)
            e = Math.floor(Math.random() * (s + 1)),
            a = t[s],
            t[s] = t[e],
            t[e] = a
    },
    pointInRect: function(t, e) {
        return t.x > e.x && t.x < e.x + e.width && t.y > e.y && t.y < e.y + e.height
    },
    now: function() {
        return Math.round(.001 * Date.now())
    },
    getCyrillicInput: function(t) {
        return (t || "").replace(/[a-z\[\]\;\'\,\.\`]/gi, function(t, e) {
            return canvas.Const.KEYBOARD_BUTTONS[t.toLowerCase().charCodeAt(0)] || t
        })
    },
    getMoney: function(t) {
        return Math.floor(100 * t)
    },
    getMoneyGold: function(t) {
        return Math.floor(.01 * t)
    },
    getGems: function(t) {
        return Math.round(100 * t) / 100
    },
    getSessTarget: function() {
        var t, e = {
            target: "",
            autoPenalty: -1
        };
        try {
            var a = getCookie("sess_target")
        } catch (t) {}
        return a && "null" != a && (t = a.split("_"),
        e.target = t[0],
        e.autoPenalty = 1 < t.length ? parseInt(t[1]) : -1,
        e.manor = 2 < t.length && 1 == parseInt(t[2])),
        e
    },
    deleteSessTarget: function() {
        deleteCookie("sess_target"),
        deleteCookie("sess_navigate_memory"),
        deleteCookie("sess_navigate_array")
    },
    getAttribute: function(t, e) {
        return t.attributes[e] ? t.attributes[e].value : void 0
    },
    getChildNodeByName: function(t, e) {
        for (var a = t.children.length, s = null, i = 0; i < a; i++)
            t.children[i].nodeName == e && (s = s || new Array).push(t.children[i]);
        return s
    },
    getChildValueByName: function(t, e) {
        for (var a = t.children.length, s = 0; s < a; s++)
            if (t.children[s].nodeName == e)
                return t.children[s].innerHTML;
        return ""
    },
    getMoneyForText: function(t) {
        var e = {
            icon: "money_silver"
        };
        return 100 <= (e.value = t) ? (e.value = .01 * t,
        e.icon = "money_gold") : t < 1 && (e.value = 100 * t,
        e.icon = "money_bronze"),
        e
    },
    getNumberName: function(t, e, a, s) {
        var i = t % 100
          , s = 5 <= i && i <= 20 ? t + " " + s : 1 == (i %= 10) ? t + " " + e : 2 <= i && i <= 4 ? t + " " + a : t + " " + s;
        return s
    },
    hasChildNode: function(t, e) {
        return t && 0 < t.getElementsByTagName(e).length
    },
    destroy: function() {
        for (var t, e, a = [this.colorMatrixCache, this.greyScaleCache, this.brightnessCache, this.saturationCache, this.blurCache, this.dropShadowCache, this.glowCache, this.alphaCache], s = a.length, i = 0; i < s; i++)
            for (e in t = a[i])
                delete t[e]
    }
},
canvas.ResourceLoader = {
    EVENT_COMPLETE: "ResourceLoader.COMPLETE",
    EVENT_PROGRESS: "ResourceLoader.PROGRESS",
    stack: [],
    aliases: {},
    inProgress: !1,
    inited: !1,
    ux: null,
    uxReady: !1,
    init: function() {
        this.inited || (canvas.px.Loader.on("progress", this.progress),
        canvas.px.Loader.on("error", function() {}),
        canvas.px.Loader.on("add", {}),
        canvas.px.Loader.on("complete", this.complete),
        this.inited = !0)
    },
    add: function(t) {
        if (this.inProgress)
            this.stack = this.stack.concat(t);
        else {
            for (var e = {}, a = t.length - 1; 0 <= a; a--)
                "object" == typeof t[a] ? (t[a][1] = this.applyUx(t[a][1]),
                t[a][0] && (this.aliases[t[a][0]] = t[a][1]),
                null != t[a][2] ? (t[a][2].url = t[a][1],
                t[a] = t[a][2]) : t[a] = t[a][1]) : t[a] = this.applyUx(t[a]),
                this.getResource(t[a]) || e[t[a]] ? t.splice(a, 1) : e[t[a]] = !0;
            if (0 < t.length) {
                this.inProgress = !0;
                try {
                    canvas.px.Loader.add(t).load()
                } catch (t) {
                    console.log("ResourceLoader.load: " + t)
                }
            } else
                this.complete()
        }
    },
    remove: function(t) {
        t = this.applyUx(t),
        this.deleteResource(this.aliases[t] || t)
    },
    complete: function() {
        var t, e = canvas.ResourceLoader;
        e.inProgress = !1,
        0 < e.stack.length ? (t = e.stack,
        e.stack = [],
        e.add(t)) : canvas.EventManager.dispatchEvent(e.EVENT_COMPLETE, e)
    },
    progress: function() {
        var t = canvas.ResourceLoader;
        canvas.EventManager.dispatchEvent(t.EVENT_PROGRESS, t, {
            progress: 100 < canvas.px.Loader.progress ? canvas.px.Loader.progress - 100 : canvas.px.Loader.progress
        })
    },
    get: function(t) {
        t = this.applyUx(t);
        var e = this.getResource(this.aliases[t] || t)
          , a = null;
        if (e)
            switch (e.extension) {
            case "mci":
                if (!a && e.data) {
                    if (!e.unpacked && "string" == typeof e.data && "{" != e.data.charAt(0))
                        try {
                            e.data = this.unpackBinary(e.data)
                        } catch (t) {
                            return null
                        }
                    e.unpacked = !0,
                    "string" == typeof e.data && (e.data = JSON.parse(e.data)),
                    a = e
                }
                break;
            case "xml":
            case "fnt":
                a = e.data ? e : null;
                break;
            case "json":
                a = e.textures ? e : null;
                break;
            case "amf":
                e.unpacked ? a = e.data : (a = e.data = this.unpackAmf(e.data),
                e.unpacked = !0);
                break;
            default:
                a = e.data ? e : null
            }
        return a
    },
    getTexture: function(t) {
        return this.get(t) && this.get(t).texture ? this.get(t).texture : canvas.px.TextureEmpty
    },
    getImage: function(t, e) {
        var a = this.get(t);
        return a && !a.textures[e + ".png"] && console.log("Warning! Texture '" + e + "' not found in atlas '" + t + "'."),
        a && a.textures[e + ".png"] || canvas.px.TextureEmpty
    },
    unpackBinary: function(t) {
        for (var e = atob(t), a = [], s = e.length, i = 0; i < s; i++)
            a.push(e.charCodeAt(i));
        t = canvas.px.inflate(a);
        return this.arrayBufferToString(t)
    },
    arrayBufferToString: function(t) {
        for (var e = new Uint16Array(t), a = e.length, s = "", i = Math.pow(2, 16) - 1, n = 0; n < a; n += i)
            a < n + i && (i = a - n),
            s += String.fromCharCode.apply(null, e.subarray(n, n + i));
        return s
    },
    unpackAmf: function(t) {
        for (var e = new Uint8Array(t), a = "", s = e.length, i = 0; i < s; i++)
            a += String.fromCharCode(e[i]);
        return canvas.px.AMF.parse(a)
    },
    applyUx: function(t) {
        return this.ux && this.ux[t] ? t + "?ux=" + this.ux[t] : t
    },
    testUx: function(t) {
        return !(this.ux && !this.ux[t])
    },
    addSubAlias: function(t, e) {
        this.aliases[t] && (this.aliases[e] = this.aliases[t])
    },
    getResource: function(t) {
        return canvas.px.Loader.resources[t]
    },
    deleteResource: function(t) {
        delete canvas.px.Loader.resources[t]
    },
    destroy: function() {
        delete this.ux
    }
},
canvas.Log = {
    debug: !1,
    ALL: "ALL",
    BATTLE: "BATTLE",
    MEM: "MEM",
    LOCATION: "LOCATION",
    WORLD: "WORLD",
    MANOR: "MANOR",
    HUNT: "HUNT",
    INST: "INST",
    USER: "USER",
    LEFT_MENU: "LEFT_MENU",
    AVATAR: "AVATAR",
    TOP_MENU: "TOP_MENU",
    RIGHT_MENU: "RIGHT_MENU",
    COMPASS: "COMPASS",
    MAGIC: "MAGIC",
    PETS: "PETS",
    BIRTHDAY: "BIRTHDAY",
    CUBE: "CUBE",
    CASINO: "CASINO",
    DICE_GAME: "DICE_GAME",
    TREASURE: "TREASURE",
    WHEEL: "WHEEL",
    MIRROR: "MIRROR",
    CLAN_CITADEL: "CLAN_CITADEL",
    CLAN_WAR: "CLAN_WAR",
    BARBER: "BARBER",
    FIRST_BATTLE: "FIRST_BATTLE",
    PUZZLE: "PUZZLE",
    ALL_NAMES: [this.BATTLE, this.MEM, this.LOCATION, this.WORLD, this.MANOR, this.HUNT, this.INST, this.USER, this.LEFT_MENU, this.AVATAR, this.TOP_MENU, this.RIGHT_MENU, this.COMPASS, this.MAGIC, this.PETS, this.BIRTHDAY, this.CUBE, this.CASINO, this.DICE_GAME, this.TREASURE, this.WHEEL, this.MIRROR, this.CLAN_WAR, this.CLAN_CITADEL, this.BARBER, this.FIRST_BATTLE, this.PUZZLE],
    maxLen: 2e3,
    log: {},
    internal: "",
    title: "",
    add: function(t, e, a) {
        if (t != this.ALL) {
            this.log[t] || (this.log[t] = []);
            var s = "";
            a && (s += '<font color="' + a + '">'),
            s += Date.now() + ": " + e,
            a && (s += "</font>"),
            this.log[t].push(s),
            this.log[t].length > this.maxLen && this.log[t].shift(),
            this.debug && console.log(Date.now() + " " + t + ": " + e)
        } else
            for (var i = 0; i < this.ALL_NAMES.length; i++)
                this.add(this.ALL_NAMES[i], "GLOBAL LOG >> " + e, a)
    },
    addInternal: function(t, e) {
        e && (this.internal += '<font color="' + e + '">'),
        this.internal += Date.now() + ": " + t,
        e && (this.internal += "</font>"),
        this.internal += "<br/>"
    },
    show: function(t) {
        var e = "<h1>DWAR LOG</h1>" + (this.title ? "<span style='color: blue;'>" + this.title + "</span><br/><br/>" : "");
        for (t in this.log)
            for (var a = this.log[t].length, s = 0; s < a; s++)
                e += this.log[t][s] + "<br/>";
        this.log[t] = [];
        try {
            var i = window.open();
            i.document.open(),
            i.document.write(e),
            i.document.close()
        } catch (t) {}
    },
    showInternal: function(t, e, a) {
        this.field = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,0,e,a,"left","top",16777215,1),
        t.addChild(this.field),
        this.field.text = this.internal,
        canvas.EventManager.addEventListener(canvas.Event.STAGE_WHEEL, null, this.mouseWheelHandler, this)
    },
    mouseWheelHandler: function(t) {
        0 < t.params.wheelDelta ? this.field.container.y += 40 : this.field.container.y -= 40
    }
},
canvas.InputManager = {
    inited: !1,
    lastExternalKey: "",
    lastExternalKeyTime: 0,
    init: function() {
        this.inited || (document.addEventListener("keydown", this.onKeyDown.bind(this)),
        document.addEventListener("keyup", this.onKeyUp.bind(this)),
        this.inited = !0)
    },
    onKeyDown: function(t) {
        canvas.EventManager.dispatchEvent(canvas.Event.STAGE_KEY_DOWN, null, this.processKey(t))
    },
    onKeyUp: function(t) {
        canvas.EventManager.dispatchEvent(canvas.Event.STAGE_KEY_UP, null, this.processKey(t))
    },
    processKey: function(t) {
        return t.code ? t.globalKeyCode = canvas.Const.KEYS[canvas.Const.CODE_TO_KEYS[t.code]] : t.globalKeyCode = t.keyCode,
        t
    },
    externalKey: function(t) {
        var e = t.altKey + "," + t.code + "," + t.ctrlKey + "," + t.globalKeyCode + "," + t.keyCode + "," + t.shiftKey;
        (e != this.lastExternalKey || Date.now() > this.lastExternalKeyTime + 100) && (this.onKeyDown(t),
        this.lastExternalKey = e,
        this.lastExternalKeyTime = Date.now())
    }
},
canvas.Translator = {
    lang: "ru",
    dictionary: {
        text0: "ЖДИТЕ",
        text1: "БОЙ ОКОНЧЕН",
        text2: "выход",
        text3: "Невозможно авторизироваться",
        text4: "ОШИБКА",
        text5: "соединение с сервером\nпрервано",
        text6: "Бой уже закончен",
        text7: "восстановить",
        text8: "Запрос",
        text9: "согласен",
        text10: "отклоняю",
        text11: "отменить",
        text12: "Отправлен запрос на применение",
        text13: "Ожидание ответа ...",
        text14: "Игрок",
        text15: "запрашивает использование на Вас",
        text16: "УВОРОТ",
        text17: "ПОГЛОЩЕНО",
        text18: "ОТРАЖЕНО",
        text19: "Невозможно применить эту магию",
        text20: "Невозможно использовать на себя",
        text21: "Невозможно использовать на дружественную цель",
        text22: "Невозможно использовать на текущего оппонента",
        text23: "Невозможно использовать на оппонентов",
        text24: "Не хватает маны",
        text25: "На цель уже наложено подобное заклинание",
        text26: 'На вас наложено "Молчание"',
        text27: "Недостаточно стрел",
        text28: "Недостаточно ярости",
        text29: "Воскрешение",
        text30: "нанесённый урон",
        text31: "БЛОК",
        text32: "Закрыть",
        text33: "атака в голову",
        text34: "атака в корпус",
        text35: "атака в ноги",
        text36: "оборонительный режим",
        text37: "обновить",
        text38: "позвать на помощь",
        text39: "покинуть бой?",
        text40: "Внимание! Покинув этот бой, вы не сможете в него вернуться.",
        text41: "данный игрок вышел из боя",
        text42: "Следующее использование через ",
        text43: "осталось",
        text44: "осталcя",
        text46: "ИММУНИТЕТ",
        text47: "ПРОМАХ",
        text48: "далее",
        text49: "мана",
        text50: "ходa",
        text51: "ход",
        text52: "ходов",
        text53: ", но не более",
        text54: "не более",
        text55: "д.",
        text56: "ч.",
        text57: "м.",
        text58: "с.",
        text59: "бой был прерван",
        text60: "Q/UP",
        text61: "W/RIGHT",
        text62: "E/DOWN",
        text63: "R/LEFT",
        text64: "Tab",
        text65: "пропустить ход",
        text66: "Призвать в бой тень?",
        text67: "ПОДТВЕРЖДЕНИЕ",
        text68: "призвать",
        text69: "отмена",
        text70: "На цель не наложено необходимое заклинание",
        text71: "Всего (Игроков) / Убитых",
        text72: "Неподходящая цель",
        text100: "Охрана",
        text101: "Ячейки в мире Фэо",
        text102: "Рюкзак",
        text103: "Хранилище",
        text104: "Войти",
        text105: "Найм рабочих",
        text106: "Здание",
        text107: "Энергия",
        text108: "по цене",
        text109: "Купить риолит",
        text110: "Разместить",
        text111: "Изменить",
        text112: "Ожидаемое время выкупа заявки",
        text113: "Здание построено до максимального уровня",
        text114: "Улучшение",
        text115: "Использовать",
        text116: "Продукты",
        text117: "нет данных",
        text118: "более 1 дня",
        text121: "Цена",
        text122: "Активные предложения",
        text123: "Продавец",
        text124: "Продать",
        text126: "Продать участок",
        text127: "Область",
        text128: "Локация",
        text129: "Накопленный опыт",
        text130: "Прибавлять",
        text131: "Вычитать",
        text132: "Вы накапливаете опыт когда находитесь в поместье. Количество накапливаемого опыта зависит от уровня здания.",
        text133: "Накапливать",
        text134: "Вы уверены, что хотите перейти в режим накапливания опыта?",
        text135: "Вы уверены, что хотите перейти в режим использования накопленного опыта? Стоимость составит",
        text136: "Накопленная доблесть",
        text137: "Вы накапливаете доблесть, когда находитесь в поместье. Количество накапливаемой доблести зависит от уровня здания.",
        text138: "Вы уверены, что хотите перейти в режим накапливания доблести?",
        text139: "Вы уверены, что хотите перейти в режим использования накопленной доблести? Стоимость составит",
        text140: "часов",
        text141: "Корм",
        text142: "Опыт",
        text143: "Тренировать",
        text144: "Требуется",
        text145: "Изготовление займет",
        text146: "Изготовить",
        text147: "Выберите рецепт",
        text148: "Поместье",
        text149: "энергия",
        text150: "Выход",
        text151: "Работать",
        text152: "В локацию",
        text153: "Выбрать",
        text154: "Заказчик",
        text155: "Цена за ед.",
        text156: "Обновить",
        text157: "Биржа энергии",
        text158: "Все заявки",
        text159: "Мои заявки",
        text160: "У вас есть",
        text161: "единиц энергии",
        text162: "Выполн./Объем",
        text163: "Создать заявку",
        text164: "Удалить заявку?",
        text165: "Прогноз: работы будут выполнены через",
        text166: "рекоммендуется повысить цену работ",
        text167: "Купить",
        text168: "Купить участок за",
        text169: "Риолит",
        text170: "У вас денег",
        text171: "Вы потратите",
        text172: "уровень",
        text173: "Поместья",
        text174: "Покупка",
        text175: "Продажа",
        text176: "требует энергии",
        text177: "Нанять рабочих",
        text178: "Построить",
        text179: "Построен на",
        text180: "Благо антитравматизма",
        text181: "Получить",
        text182: "Потратить",
        text183: "Вы получите",
        text184: "Работать на",
        text186: "Количество",
        text187: "Все",
        text188: "Скрыть меню",
        text189: "Показать меню",
        text190: "Ваши вещи со сроком жизни",
        text191: "Список задач",
        text192: "Забрать",
        text193: "Отменить",
        text194: "хватает",
        text195: "не хватает",
        text196: "из",
        text199: "Цена изменилась. Купить участок за",
        text200: "купить",
        text201: "нет предложений",
        text202: "снять с продажи",
        text203: "продать",
        text204: "Снять участок с продажи?",
        text205: "У вас энергии",
        text206: "или",
        text207: "Текущее местоположение",
        text208: "Переход между",
        text209: "Переход в область",
        text210: "Загрузка",
        text211: "Флаг",
        text212: "Ваше текущее местоположение",
        text213: "Выделенная область",
        text214: "Выделенная локация",
        text215: "Список локаций",
        text216: "Ваше местоназначение",
        text217: "Цель",
        text218: "Ваше поместье",
        text219: "Купить у государства",
        text220: "Купить у игроков",
        text221: "Режим карты",
        text222: "Режим недвижимости",
        text224: "Ваш участок",
        text225: "Переезд на новый участок обойдётся вам в",
        text226: "Поговорить",
        text227: "Искать рецепт",
        text228: "Разрушить",
        text229: "Разрушить здание",
        text230: "Выбор здания для постройки",
        text231: "Для постройки требуется",
        text232: "Вернуться",
        text233: "Если вы еще не использовали ресурсы для строительства данного здания, можно изменить  выбор, вернувшись к списку доступных для возведения зданий.",
        text234: "Добыча",
        text235: "Добыть за",
        text236: "Произвести за",
        text237: "Произвести",
        text238: "Не хватает ресурсов для производства",
        text239: "До окончания поиска клада осталось",
        text240: "Котлован",
        text242: "добавить",
        text243: "информация",
        text244: "Все рецепты",
        text245: "Избранные рецепты",
        text246: "Ваши вещи для хранения на складе",
        text247: "Ваши вещи для «заморозки» на складе",
        text248: "Доступно при постройке Хранилища",
        text249: "уровня",
        text250: "В Поместье все здания построены до максимального уровня.",
        text251: "Доступные фронты",
        text252: "В тронный зал",
        text253: "Склад",
        text254: "Тронный зал",
        text255: "Необходимо активировать портал",
        text256: "Доступно при постройке портала",
        text258: "После открытия портала вы сможете выбрать локацию, на которую он будет вести.",
        text259: "Искать локацию",
        text260: "Перенастройка станет доступна через",
        text261: "Активировать",
        text262: "Перенастроить",
        text263: "Сбросить",
        text264: "Запрашивать подтверждение при перемещении в локации",
        text265: "Переход за",
        text266: "Купить камень",
        text267: "Не ждать",
        text268: "Выберите локацию",
        text269: "Переместиться в локацию",
        text270: "Переход",
        text271: "Стоимость составит",
        text272: "Сортировка по названию",
        text273: "Сортировка по цвету",
        text274: "Сортировка по типу",
        text275: "Сортировка по времени жизни",
        text276: "Введите название предмета",
        text277: "Поиск по названию",
        text278: "Сортировка предметов",
        text279: "Сбросить фильтр",
        text280: "Сортировка по умолчанию",
        text281: "Введите имя питомца",
        text282: "Сортировка по готовности",
        text283: "Сортировка по имени",
        text284: "Сортировка по уровню",
        text285: "Сортировка",
        text286: "Гарантированные трофеи",
        text287: "Осталось нажатий",
        text288: "Убить сразу 10 монстров",
        text289: "Выберите монстра для охоты",
        text290: "Охота за",
        text291: "Большая охота за",
        text292: "Егерский лагерь",
        text293: "Добыча ресурсов",
        text294: "Поиск артефактов",
        text295: "Экипировка",
        text296: "Тип ресурса",
        text297: "Вид ресурса",
        text298: "Награда",
        text299: "Фрагменты в наличии",
        text300: "Выйти",
        text301: "Гильдийский пул",
        text302: "Серый остров",
        text303: "Зеленый остров",
        text304: "Золотой остров",
        text305: "Красный остров",
        text306: "Синий остров",
        text307: "Бойцы",
        text308: "Выпустить резерв",
        text309: "Готов",
        text310: "закрыть",
        text311: "лог боя",
        text312: "команда",
        text313: "Ok",
        text314: "До начала",
        text315: "Резерв",
        text316: "Воеводы",
        text317: "Левая башня",
        text318: "Правая башня",
        text319: "Ворота",
        text320: "Вы уверены, что хотите покинуть клановую битву до ее завершения?",
        text321: "Расставить",
        text322: "Воевода",
        text323: "Внимание! Не все участники распределены по островам.<br>Вы уверены, что хотите вступить в бой?",
        text324: "Создать случайный талисман",
        text325: "Создать талисман выбранного уровня",
        text326: "Разрушить предметы",
        text327: "Выбор питомца",
        text328: "Трава",
        text329: "Камни",
        text330: "Рыба",
        text331: "Поиск талисманов",
        text332: "Поиск ценностей",
        text333: "Поиск снаряжения",
        text334: "Вы уверены, что хотите разрушить вещь?",
        text335: "Добыча травы",
        text336: "Добыча камней",
        text337: "Добыча рыбы",
        text338: "Выберите питомца",
        text339: "Добыча ресурсов в Егерском лагере доступна со 2 уровня здания.",
        text340: "План",
        text400: "Не определено",
        text402: "Добыча прошла успешно",
        text403: "Добыча не удалась",
        text405: "мирный",
        text406: "пассивный",
        text407: "спокойный",
        text408: "раздраженный",
        text409: "агрессивный",
        text410: "частый",
        text411: "обычный",
        text412: "редкий",
        text413: "единичный",
        text414: "раритетный",
        text417: "Выберите объект действия",
        text418: "Информация об объекте",
        text419: "добыть",
        text420: "собрать",
        text421: "ловить",
        text422: "атаковать",
        text424: "Недостаточно даных",
        text425: "Неверные даные",
        text426: "Неизвестная ошибка",
        text429: "Вами",
        text430: "Всего",
        text431: "Проверка мастерства",
        text432: "Соберите изображение за отведенное время и нажмите кнопку “готово”",
        text433: "Оставшееся время",
        text434: "сек.",
        text435: "Готово",
        text436: "Вы начали добывать ресурс первым.",
        text437: "Вы начали добывать ресурс не первым.",
        text438: "Перетащите, чтобы найти клад",
        text440: "использовать",
        text441: "Выполняется действие",
        text442: "Действие выполнено успешно",
        text443: "Действие завершилось неудачей",
        text444: "далеко",
        text445: "близко",
        text446: "рядом!",
        text447: "Отображать ресурс этого цвета",
        text500: "Премиум-аккаунт",
        text505: "статуя",
        text506: "обелиск",
        text507: "Осталось убийств монстров на сегодня",
        text600: "Дар небес",
        text601: "Испытайте судьбу и заберите награду",
        text602: "Каждый бросок приближает к четырем кубикам!",
        text603: "Кости",
        text604: "Призы",
        text605: 'Каждый день вы можете испытать удачу до 5 раз подряд. Первые две попытки бросается 1 кубик, следующие две попытки - 2 кубика, пятая попытка - 3 кубика. Сумма очков, выпавших на кубиках, укажет на ваш приз! Кроме того, каждый бросок кубиков приближает вас к супер-игре, которая позволит вам бросить сразу 4 кубика и даст шанс выиграть самые ценные призы! <a href="event:infoLink" target="_blank">Подробнее...</a>',
        text606: "Бросить бесплатно",
        text607: "Бросить за",
        text608: "Завершить игру на сегодня",
        text609: "/info/library/index.php?obj=cat&id=157",
        text700: "Нажмите, чтобы получить Дар Небес!",
        text702: "Локация под контролем магмар",
        text703: "Локация под контролем людей",
        text704: "Локация свободна",
        text706: "Бой доступен через",
        text707: "Начать бой",
        text708: "Бой доступен",
        text709: "Подготовка к бою еще",
        text710: "Идет бой",
        text711: "Время для боя еще не пришло",
        text712: "Вступить",
        text713: "Бой уже идет. Вы не можете вмешаться.",
        text714: "Вмешаться в бой",
        text715: "Вы уверены, что хотите вмешаться в бой за локацию",
        text716: "Действие доступно до",
        text718: "Ошибка",
        text720: "Вы уверены, что хотите начать бой за локацию",
        text721: "/info/library/index.php?obj=cat&id=161",
        text723: "Время",
        text724: "Владения людей",
        text725: "Владения магмар",
        text726: "Нейтральные владения",
        text727: "Ожидание начала боя",
        text728: "Подготовка к бою",
        text731: "Воскреснуть за",
        text732: "Волшебное зеркало",
        text733: "Активности",
        text734: "Однорукий бандит",
        text735: "Бриллиантовый бандит",
        text800: "Название",
        text802: "Снять",
        text803: "Снять эффект",
        text805: "Да",
        text806: "Нет",
        text809: "Количество слотов зависит от браслета",
        text810: "Скрыть",
        text811: "Осталось скрытий",
        text812: "Скрыть все",
        text813: "Отменить скрытие",
        text814: "Открыть все",
        text900: "Взломать",
        text901: "Открыть",
        text902: "Оставшиеся ходы",
        text903: "Замок заклинило!",
        text905: "Вы уверены?",
        text1000: "убрать",
        text1100: "/info/forum/",
        text1200: "Бриллиант",
        text1201: "назад",
        text1202: "Цитадель",
        text1203: "Чертеж",
        text1250: "Обратиться",
        text1252: "Нужен уровень",
        text1253: "Алтарь доступен",
        text1254: "Персонаж доступен",
        text1255: "Персонажи",
        text1299: "строить",
        text1300: "ПОКАЗАТЬ УБИТЫХ",
        text1301: "СКРЫТЬ УБИТЫХ",
        text1302: "Показать жизнь/ману",
        text1303: "Скрыть жизнь/ману",
        text1304: "1я Команда",
        text1305: "2я Команда",
        text1306: "Введите ник цели",
        text1400: "Магия Зеркал",
        text1401: "Вы можете выиграть один из этих призов",
        text1402: "ваш результат",
        text1403: "Играть за",
        text1404: "Выберите любые три зеркала,<br/>сумма очков укажет ваш приз!",
        text1405: "Шкала удачи",
        text1406: "Гарантированные призы",
        text1407: "/info/library/index.php?obj=cat&id=189",
        text1408: "Каждая игра накапливает энергию удачи. При достижении максимума Вы сможете сыграть на более ценные призы!",
        text1409: "Каждая игра приближает вас к очередному гарантированному призу. Счетчик игр сбрасывается по окончании события!",
        text1500: "Режим просмотра",
        text1501: "Выберите объект в зале, который хотите купить. Вы увидите список доступных вариантов.",
        text1502: "Магазин",
        text1506: "поставить",
        text1507: "Купить предмет",
        text1508: "примерить",
        text1509: "Сегодня день рождения у <b>#0#</b> ваших друзей!<br/>Вы можете подарить им подарки.",
        text1510: "Поздравить",
        text1511: "Подарки в рюкзаке",
        text1512: "Купить подарок",
        text1513: "У вас нет ни одного подарка.",
        text1514: "",
        text1515: "Сегодня день рождения у <b>1</b> вашего друга!<br/>Вы можете подарить ему подарок.",
        text1516: "Ваш текущий бонус",
        text1517: "Получить бонус",
        text1518: "Играть еще раз",
        text1519: "Начав следующую игру, вы получите возможность накопить новый бонус вместо текущего.<br/>Хотите сыграть еще раз?",
        text1520: "Бесплатная попытка через",
        text1521: "Игра окончена",
        text1522: "Жми!",
        text1523: "Начать",
        text1524: "Завершить",
        text1525: "Недостаточно средств!",
        text1526: "Чтобы получить бонус, обменяйте бриллианты на золото.",
        text1527: "Максимальный выигрыш на сервере",
        text1528: "Ваш наибольший выигрыш за сегодня",
        text1600: "ДЖЕКПОТ",
        text1601: "Беспл.игр",
        text1700: "Описание",
        text1701: "Выберите пол персонажа и вступите в бой со своим первым противником. Чтобы победить врага, используйте не только обычные удары, но и заклинания.",
        text1702: "Выбор пола",
        text1703: "МУЖСКОЙ",
        text1704: "ЖЕНСКИЙ",
        text1705: "выбрать",
        text1706: "магия огня",
        text1707: "магия воздуха",
        text1708: "магия света",
        text1709: "магия земли",
        text1710: "магия тьмы",
        text1711: "переход в режим магии",
        text1712: "переход в режим атаки",
        text1713: "Инферно, длительность #0# сек",
        text1714: "используйте книгу заклинаний",
        text1715: 'Сражения - лишь часть великих свершений и приключений, ожидающих вас в игре "Легенда: Наследие драконов".',
        text1716: "Вы только начали путь славного воина, но уже одолели искусного мага мертвой магии и невероятно могущественного монстра! Мы восхищаемся вашей силой и бесстрашием, и прочим вам судьбу великого воителя. А теперь зарегистируйтесь в игре и продолжайте свой легендарный путь в мире Фэо!",
        text1717: "Для того чтобы проверить свои силы в бою, выберите один из типов ударов, наведя курсор мыши на любой из мечей, расположенных по кругу.",
        text1718: "Освоить режим магии очень просто: наведите курсор мыши на меч на синем поле и используйте силы огня, воздуха или тьмы.",
        text1800: "Выход в",
        text1801: "Вход в",
        text1802: "Игроки",
        text2000: "д",
        text2001: "ч",
        text2002: "мин",
        text2003: "сек",
        text2004: "Января",
        text2005: "Февраля",
        text2006: "Марта",
        text2007: "Апреля",
        text2008: "Мая",
        text2009: "Июня",
        text2010: "Июля",
        text2011: "Августа",
        text2012: "Сентября",
        text2013: "Октября",
        text2014: "Ноября",
        text2015: "Декабря",
        text2016: "м",
        text2017: "с",
        text2018: "Ок",
        text2019: "Отмена",
        text2020: "Подтверждение",
        text2021: "За",
        text2022: "шт",
        text2023: "час",
        text2024: "часа",
        text2025: "ур.",
        text2026: "Больше не спрашивать",
        text2027: "Сбрасывается при выходе из локации",
        text2028: "C",
        text2029: "до",
        text2030: "Время до окончания",
        text2031: "Время до начала",
        text2032: "В процессе",
        text2033: "Отправить",
        text2034: "Создать",
        text3000: "великие битвы",
        text3001: "невидимость",
        text3002: "доблесть",
        text3003: "жизнь",
        text3004: "почта",
        text3005: "квесты",
        text3006: "животное",
        text3007: "компас",
        text3008: "профессии",
        text3009: "друзья",
        text3010: "Проложите кратчайший путь к любой точке ФЭО",
        text3011: "Локации",
        text3012: "Ресурсы",
        text3013: "Монстры",
        text3014: "Инстансы",
        text3015: "Путь займет",
        text3016: "переходов",
        text3017: "Искомый объект можно найти в нескольких локациях:",
        text3018: "Ничего не найдено",
        text3019: "Маршрут не найден",
        text3020: "переход",
        text3021: "перехода",
        text3022: "Проложить маршрут",
        text3023: "Объект находится в текущей локации",
        text3024: "Проложить",
        text3025: "Недостаточно средств.",
        text3026: "Случайный вид",
        text3027: "Смена образа",
        text3028: "Персонализация",
        text3029: "Выбор народа",
        text3030: "Создания мира Фэо,  обладающие разумом, волей и человеческой речью, обитают на материке Огрий, приручили тигров, владеют магией света, воздуха, воды.",
        text3031: "Создания мира Фэо, в их жилах течет раскаленная лава, обладают огромной физической силой, укротили зорбов, поклоняются богине Верциде, владеют магией теней, огня, земли.",
        text3032: "Дойти",
        text3033: "Соединение",
        text3034: "Регистрация открыта",
        text3035: "Регистрация закрыта",
        text3036: "Хорошее",
        text3037: "Население",
        text3038: "Выбрать сервер",
        text3039: "Выбор сервера",
        text3040: "Введите название объекта",
        text3041: "или выберите из списка"
    },
    isInited: !1,
    init: function(t) {
        for (key in this.isInited = !0,
        this.dictionary)
            this.dictionary[key] = this.dictionary[key].replace("И", String.fromCharCode(1048));
        var e, a = {};
        for (key in this.dictionary)
            a[this.dictionary[e]] ? canvas.Log.add(canvas.Log.ALL, "Same word in Dictionary! ID: " + e + " VALUE: " + this.dictionary[e] + " REPLACE_ID: " + a[this.dictionary[e]], 16711680) : a[this.dictionary[e]] = e;
        if (t && t.firstChild && t.firstChild.childNodes)
            for (var s = t.firstChild.childNodes.length, i = 0; i < s; i++) {
                var n = t.firstChild.childNodes[i];
                n.firstChild && (this.dictionary[n.nodeName] = n.textContent)
            }
    },
    getText: function(t, e) {
        var a, s, i, n, o = this.dictionary ? this.dictionary["text" + t.toString()] : "Translator not initialized!";
        if (e)
            for (n in t = /#\d+[^#]*#/gi,
            a = o.match(t))
                "string" == typeof (s = a[n]) && (i = s.substr(1, s.length - 2).split(","),
                (i = e[parseInt(i[0])]) && (o = o.replace(s, i)));
        return o
    },
    getLang: function() {
        return this.lang
    },
    toUpperCaseFirstChar: function(t) {
        return t && "" != t ? t.charAt(0).toUpperCase() + t.substr(1).toLowerCase() : ""
    }
},
canvas.SoundManager = {
    volume: 1,
    cache: {},
    play: function(t) {
        var e = t.split(".")
          , e = e[e.length - 1];
        4 < e.length ? t += ".ogg" : t = t.substr(0, t.length - e.length) + "ogg",
        this.lastPath = t,
        canvas.ResourceLoader.testUx(t) ? (t = canvas.ResourceLoader.applyUx(t),
        (e = this.cache[t]) ? (e.volume(this.volume),
        e.play()) : (e = new canvas.px.Howl({
            src: [t],
            autoplay: !0,
            loop: !1,
            volume: this.volume,
            onloaderror: this.onError.bind(this)
        }),
        this.cache[t] = e)) : console.log("Warning! Sound not found: " + t)
    },
    onError: function() {
        canvas.app.battle.log("Error load sound: " + this.lastPath, 16777215)
    }
},
canvas.Event = {
    STAGE_MOUSE_UP: "STAGE_MOUSE_UP",
    STAGE_MOUSE_MOVE: "STAGE_MOUSE_MOVE",
    STAGE_MOUSE_OUT: "STAGE_MOUSE_OUT",
    STAGE_WHEEL: "STAGE_WHEEL",
    STAGE_KEY_DOWN: "STAGE_KEY_DONW",
    STAGE_KEY_UP: "STAGE_KEY_UP",
    UX_READY: "UX_READY",
    ARTIKULS_LOADED: "ARTIKULS_LOADED"
},
canvas.px.MovieClipEvent = {
    EVENT_UPDATE: "MovieClip.UPDATE",
    EVENT_COMPLETE: "MovieClip.COMPLETE",
    EVENT_READY: "MovieClip.READY"
},
canvas.px.MovieClipProps = {
    colorTransform: "ct",
    alpha: "al",
    masking: "mg",
    mask: "mk",
    matrix: "mx",
    actions: "as",
    children: "ch",
    label: "lb"
},
canvas.px.MovieClip = function(t, e, a) {
    return this._frameEvent = "",
    Object.defineProperty(this, "frameEvent", {
        get: function() {
            return this._frameEvent
        },
        set: function(t) {
            this._frameEvent && canvas.EventManager.removeEventListener(this._frameEvent, null, this._render, this),
            this._frameEvent = t,
            this._frameEvent && canvas.EventManager.addEventListener(this._frameEvent, null, this._render, this),
            this.updateFrameEvent()
        }
    }),
    this._currentFrame = 1,
    Object.defineProperty(this, "currentFrame", {
        get: function() {
            return this._currentFrame
        },
        set: function(t) {
            if (t > this.totalFrames && !this.loop)
                return this.stop(),
                canvas.EventManager.dispatchEvent(canvas.px.MovieClipEvent.EVENT_COMPLETE, this),
                void (this.autoDestroy && this.destroy({
                    children: !0
                }));
            this._currentFrame = t > this.totalFrames ? 1 : t < 1 ? this.totalFrames : t
        }
    }),
    this._locked = !1,
    Object.defineProperty(this, "locked", {
        get: function() {
            return this._locked
        },
        set: function(t) {
            this._locked != t && (this._locked = t)
        }
    }),
    this.url = t,
    this.container = new canvas.px.Container,
    this.spriteHash = {},
    this.stopped = !1,
    this.labels = {},
    this.currentLabel = "",
    this.basePath = e,
    this.autoDestroy = !1,
    this.loop = !1,
    this.ready = !1,
    this.skipMasks = !1,
    this.mcChildsCache = {},
    this.smoothing = null == a || a,
    canvas.px.Container.call(this),
    this.addChild(this.container),
    this.data || canvas.ResourceLoader.get(this.url + ".mci") ? this._init() : (canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this._init, this),
    canvas.ResourceLoader.add([this.url + ".mci"])),
    this
}
,
canvas.px.MovieClip.prototype = Object.create(canvas.px.Container.prototype),
canvas.px.MovieClip.prototype._init = function() {
    if (canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this._init, this),
    !this.data) {
        if (!canvas.ResourceLoader.get(this.url + ".mci"))
            return;
        this.data = canvas.ResourceLoader.get(this.url + ".mci").data
    }
    if (this.maxTotalFrames = this.totalFrames = this.data.frames.length,
    this.mcChilds || (this.mcChilds = this.data.mc),
    this.mcChilds)
        for (var t in this.mcChilds) {
            var e = this.mcChilds[t].frames.length;
            e > this.maxTotalFrames && (this.maxTotalFrames = e)
        }
    for (var t in this.data.frames)
        this.data.frames[t][canvas.px.MovieClipProps.label] && (this.labels[this.data.frames[t][canvas.px.MovieClipProps.label].name] = this.data.frames[t][canvas.px.MovieClipProps.label].frame);
    var a;
    this.framePath || (this.framePath = this.data.name ? this.data.name + "/" : ""),
    this.atlas ? this._ready() : (a = "",
    a = this.data.noAtlas ? "" : this.data.atlas ? (this.basePath || canvas.Config.imgPath) + this.data.atlas : this.url,
    (this.atlasUrl = a) && !canvas.ResourceLoader.get(a + ".json") ? (canvas.ResourceLoader.add([a + ".json"]),
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this._ready, this)) : this._ready())
}
,
canvas.px.MovieClip.prototype._ready = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this._ready, this),
    !this.atlas && this.atlasUrl && (this.atlas = canvas.ResourceLoader.get(this.atlasUrl + ".json").textures),
    this.ready = !0,
    this.render(),
    this.currentFrame = 1,
    canvas.EventManager.dispatchEvent(canvas.px.MovieClipEvent.EVENT_READY, this)
}
,
canvas.px.MovieClip.prototype._render = function() {
    this.stopped || this.render()
}
,
canvas.px.MovieClip.prototype.render = function() {
    if (!this.locked && (canvas.px.MovieClip.debugEnable && (1e3 <= Date.now() - canvas.px.MovieClip.debugTime && (console.log("Renders per second: " + canvas.px.MovieClip.debugRenderCount),
    canvas.px.MovieClip.debugRenderCount = 0,
    canvas.px.MovieClip.debugTime = Date.now()),
    canvas.px.MovieClip.debugRenderCount++),
    this.ready)) {
        this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.label] && (this.currentLabel = this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.label].name);
        var t = this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.actions];
        if (t)
            for (var e in t) {
                var a = t[e];
                this[a.name] && ("gotoAndPlay" === a.name ? this.gotoAndPlay(parseInt(a.params[0]) + 1) : this[a.name].apply(this, a.params || null))
            }
        for (e in this.container.removeChildren(),
        this.mcChildsCache)
            this.mcChildsCache[e].wasActive = !1;
        var s, i = {};
        for (e in this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.children]) {
            var n, o, r = this.data.frames[this.currentFrame - 1][canvas.px.MovieClipProps.children][e];
            r[canvas.px.MovieClipProps.masking] || (r.name || r.mc) && (r.mc ? (this.mcChildsCache[r.mc] ? (n = this.mcChildsCache[r.mc]).gotoAndStop(n.currentFrame) : (n = new canvas.px.MovieClipChild(this.mcChilds[r.mc],this.atlas,this.framePath,this.mcChilds,this.smoothing),
            this.mcChildsCache[r.mc] = n),
            n.name = r.mc,
            n.wasActive = !0) : (n = this.getImage(r.name, i)).name = r.name,
            this.clearImage(n),
            (s = r[canvas.px.MovieClipProps.matrix]).set || (r[canvas.px.MovieClipProps.matrix] = s = new canvas.px.Matrix(s.a,s.b,s.c,s.d,s.tx,s.ty)),
            n.transform.localTransform = s,
            n.alpha = null == r[canvas.px.MovieClipProps.alpha] ? 1 : r[canvas.px.MovieClipProps.alpha],
            (o = r[canvas.px.MovieClipProps.colorTransform]) && ("string" == typeof o ? n.filters = [canvas.Functions.colorMatrixCache[o]] : (r[canvas.px.MovieClipProps.colorTransform] = canvas.Functions.getColorMatrixHash.apply(this, o),
            n.filters = [canvas.Functions.getColorMatrixFilter.apply(this, o)])),
            this.container.addChild(n),
            !this.skipMasks && r[canvas.px.MovieClipProps.mask] && (o = r[canvas.px.MovieClipProps.mask],
            r = this.getImage(o.name, i),
            this.clearImage(r),
            (s = o[canvas.px.MovieClipProps.matrix]).set || (o[canvas.px.MovieClipProps.matrix] = s = new canvas.px.Matrix(s.a,s.b,s.c,s.d,s.tx,s.ty)),
            r.transform.localTransform = s,
            this.container.addChild(r),
            n.mask = r))
        }
        for (e in this.mcChildsCache) {
            var c = this.mcChildsCache[e];
            c.wasActive || (c.currentFrame = c.totalFrames)
        }
        canvas.EventManager.dispatchEvent(canvas.px.MovieClipEvent.EVENT_UPDATE, this),
        this.currentFrame++
    }
}
,
canvas.px.MovieClip.prototype.getImage = function(t, e) {
    var a;
    null == e[t] ? e[t] = 0 : e[t]++;
    e = t + "__" + e[t];
    return this.spriteHash[e] ? a = this.spriteHash[e] : (t = this.atlas ? this.atlas[this.framePath + t + ".png"] : canvas.px.TextureEmpty,
    !this.smoothing && t && (t.baseTexture.scaleMode = canvas.px.ScaleMode.NEAREST),
    a = new canvas.px.Sprite(t),
    this.spriteHash[e] = a),
    a
}
,
canvas.px.MovieClip.prototype.clearImage = function(t) {
    t.mask = null,
    t.filters = null
}
,
canvas.px.MovieClip.prototype.gotoAndPlay = function(t) {
    this.currentFrame = "string" == typeof t ? this.labels[t] || 1 : t,
    this.stopped = !1
}
,
canvas.px.MovieClip.prototype.gotoAndStop = function(t) {
    this.currentFrame = "string" == typeof t ? this.labels[t] || 1 : t,
    this.stopped = !0,
    this.render()
}
,
canvas.px.MovieClip.prototype.stop = function() {
    this.stopped = !0
}
,
canvas.px.MovieClip.prototype.play = function() {
    this.stopped = !1
}
,
canvas.px.MovieClip.prototype.stopChildren = function() {
    if (this.mcChildsCache)
        for (var t in this.mcChildsCache)
            this.mcChildsCache[t].frameEvent = this.frameEvent,
            this.mcChildsCache[t].stop()
}
,
canvas.px.MovieClip.prototype.playChildren = function() {
    if (this.mcChildsCache)
        for (var t in this.mcChildsCache)
            this.mcChildsCache[t].frameEvent = this.frameEvent,
            this.mcChildsCache[t].play()
}
,
canvas.px.MovieClip.prototype.updateFrameEvent = function() {}
,
canvas.px.MovieClip.prototype.destroy = function() {
    for (var t in this.stop(),
    this.frameEvent = null,
    this.parent && this.parent.removeChild(this),
    canvas.px.Container.prototype.destroy.call(this, {
        children: !0
    }),
    this.spriteHash)
        this.spriteHash[t].destroy();
    for (t in this.mcChildsCache)
        this.mcChildsCache[t].destroy()
}
,
canvas.px.MovieClip.debugEnable = !1,
canvas.px.MovieClip.debugTime = Date.now(),
canvas.px.MovieClip.debugRenderCount = 0,
canvas.px.MovieClipChild = function(t, e, a, s, i) {
    this.data = t,
    this.atlas = e,
    this.framePath = a,
    this.mcChilds = s,
    canvas.px.MovieClip.call(this, null, null, i),
    this.loop = !0,
    this.gotoAndStop(1)
}
,
canvas.px.MovieClipChild.prototype = Object.create(canvas.px.MovieClip.prototype),
canvas.px.WindowEvent = {
    EVENT_OPEN: "WindowEvent.EVENT_OPEN",
    EVENT_CLOSE: "WindowEvent.EVENT_CLOSE",
    EVENT_DRAG: "WindowEvent.EVENT_DRAG",
    EVENT_DRAG_FINISH: "WindowEvent.EVENT_DRAG_FINISH"
},
canvas.px.Window = function() {
    canvas.px.Container.call(this),
    this.closeButton = null,
    this.header = null,
    this.added = this.addedHandler.bind(this),
    this.removed = this.removedHandler.bind(this),
    this.click = this.clickHandler.bind(this),
    this.mousedown = this.downHandler.bind(this),
    this.interactive = !0,
    this.dragAvailable = !0
}
,
canvas.px.Window.prototype = Object.create(canvas.px.Container.prototype),
canvas.px.Window.prototype.clickHandler = function(t) {
    canvas.Functions.findParent(this.closeButton, t.target) && canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this)
}
,
canvas.px.Window.prototype.downHandler = function(t) {
    canvas.Functions.findParent(this.header, t.target) && canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_DRAG, this, t)
}
,
canvas.px.Window.prototype.addedHandler = function(t) {}
,
canvas.px.Window.prototype.removedHandler = function(t) {}
,
canvas.px.Window.prototype.resize = function(t) {}
,
canvas.px.Window.prototype.startDrag = function(t, e) {
    this.dragAvailable && (this.dragRect = t,
    this.startDragMousePoint = new canvas.px.Point(e.x - this.x,e.y - this.y),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.dragHandler, this))
}
,
canvas.px.Window.prototype.dragHandler = function(t) {
    var e = t.params.mouseData.offsetX - this.startDragMousePoint.x
      , t = t.params.mouseData.offsetY - this.startDragMousePoint.y
      , e = e < this.dragRect.x ? this.dragRect.x : e > this.dragRect.x + this.dragRect.width ? this.dragRect.x + this.dragRect.width : e
      , t = t < this.dragRect.y ? this.dragRect.y : t > this.dragRect.y + this.dragRect.height ? this.dragRect.y + this.dragRect.height : t;
    this.position.set(Math.max(0, Math.round(e)), Math.max(0, Math.round(t)))
}
,
canvas.px.Window.prototype.stopDrag = function() {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.dragHandler, this),
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_DRAG_FINISH, this)
}
,
canvas.px.Window.prototype.destroy = function() {
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.px.Mask = function(t, e, a, s) {
    this._active = !0,
    Object.defineProperty(this, "active", {
        get: function() {
            return this._active
        },
        set: function(t) {
            this._active = t,
            this.update()
        }
    }),
    canvas.px.Graphics.call(this),
    null == t && (t = 100),
    null == e && (e = 100),
    this.color = null == a ? 0 : a,
    this.alpha = null == s ? 0 : s,
    this.setSize(t, e)
}
,
canvas.px.Mask.prototype = Object.create(canvas.px.Graphics.prototype),
canvas.px.Mask.prototype.setSize = function(t, e) {
    null == t && (t = -1),
    null == e && (e = -1),
    0 <= t && (this._width = t),
    0 <= e && (this._height = e),
    this.update()
}
,
canvas.px.Mask.prototype.update = function() {
    this.clear(),
    this.active && (this.beginFill(this.color, this.alpha),
    this.drawRect(0, 0, this._width, this._height),
    this.endFill())
}
,
canvas.px.RoundRect = function(t, e, a, s, i, n, o, r, c, p) {
    this._myColor = 0,
    Object.defineProperty(this, "myColor", {
        get: function() {
            return this._myColor
        },
        set: function(t) {
            this._myColor = t,
            this.update()
        }
    }),
    this._myAlpha = 1,
    Object.defineProperty(this, "myAlpha", {
        get: function() {
            return this._myAlpha
        },
        set: function(t) {
            this._myAlpha = t,
            this.update()
        }
    }),
    this._borderColor = 0,
    Object.defineProperty(this, "borderColor", {
        get: function() {
            return this._borderColor
        },
        set: function(t) {
            this._borderColor = t,
            this.update()
        }
    }),
    this._borderAlpha = 1,
    Object.defineProperty(this, "borderAlpha", {
        get: function() {
            return this._borderAlpha
        },
        set: function(t) {
            this._borderAlpha = t,
            this.update()
        }
    }),
    this._w = 0,
    Object.defineProperty(this, "w", {
        get: function() {
            return this._w
        },
        set: function(t) {
            t != this._w && (this._w = t,
            this.update())
        }
    }),
    this._h = 0,
    Object.defineProperty(this, "h", {
        get: function() {
            return this._h
        },
        set: function(t) {
            t != this._h && (this._h = t,
            this.update())
        }
    }),
    this._ellipseWidth = 0,
    Object.defineProperty(this, "ellipseWidth", {
        get: function() {
            return this._ellipseWidth
        },
        set: function(t) {
            t != this._ellipseWidth && (this._ellipseWidth = t,
            this.update())
        }
    }),
    canvas.px.Graphics.call(this),
    null == t && (t = 0),
    null == e && (e = 1),
    null == a && (a = 100),
    null == s && (s = 100),
    null == i && (i = 30),
    null == o && (o = !1),
    null == r && (r = !0),
    null == c && (c = 0),
    null == p && (p = 0),
    this._myColor = t,
    this._myAlpha = e,
    this._fill = r,
    this._borderAlpha = p,
    this._borderColor = c,
    this._w = a,
    this._h = s,
    this._ellipseWidth = i,
    this._centered = o,
    this.update()
}
,
canvas.px.RoundRect.prototype = Object.create(canvas.px.Graphics.prototype),
canvas.px.RoundRect.prototype.update = function() {
    this.clear(),
    this.lineStyle(1, this._borderColor, this._borderAlpha),
    this._fill && this.beginFill(this._myColor, this._myAlpha),
    this.drawRoundedRect(this._centered ? -this._w / 2 : 0, this._centered ? -this._h / 2 : 0, this._w, this._h, this._ellipseWidth),
    this.endFill()
}
,
canvas.px.RoundRect.prototype.setSize = function(t, e) {
    this._w = t,
    this._h = e,
    this.update()
}
,
canvas.px.Polygon = function(t, e, a) {
    if (canvas.px.Graphics.call(this),
    null == e && (e = 0),
    null == a && (a = 0),
    t) {
        this.beginFill(e, a);
        for (var s = t.length, i = 0; i < s; i += 4)
            this.drawRect(t[i], t[i + 1], 1, t[i + 3] - t[i + 1]);
        this.endFill()
    }
}
,
canvas.px.Polygon.prototype = Object.create(canvas.px.Graphics.prototype),
canvas.px.PolygonData = function(t) {
    for (var e = [], a = t.length, s = 0; s < a; s += 2)
        e.push(t[s], t[s + 1]);
    PIXI.Polygon.call(this, e)
}
,
canvas.px.PolygonData.prototype = Object.create(PIXI.Polygon.prototype),
canvas.px.Matrix = function(t, e, a, s, i, n) {
    return new PIXI.Matrix(null == t ? 1 : t,null == e ? 0 : e,null == a ? 0 : a,null == s ? 1 : s,i,n)
}
,
canvas.px.RoundProgress = function(t, e, a) {
    this._progress = 0,
    Object.defineProperty(this, "progress", {
        get: function() {
            return this._progress
        },
        set: function(t) {
            this._progress = t < 0 ? 0 : 1 < t ? 1 : t,
            this.update()
        }
    }),
    canvas.px.Container.call(this),
    this.color = e,
    this.alpha = a,
    this.radius = t,
    this.r1 = new canvas.px.Graphics,
    this.r2 = new canvas.px.Graphics,
    this.addChild(this.r1),
    this.addChild(this.r2);
    t = new canvas.px.Mask(this.radius,2 * this.radius);
    this.addChild(t),
    t.position.set(0, -this.radius),
    this.r1.mask = t,
    t = new canvas.px.Mask(this.radius,2 * this.radius),
    this.addChild(t),
    t.position.set(-this.radius, -this.radius),
    this.r2.mask = t,
    this.r1.clear(),
    this.r1.beginFill(this.color, this.alpha),
    this.r1.arc(0, 0, this.radius, canvas.Functions.degToRad(0), canvas.Functions.degToRad(180)),
    this.r1.endFill(),
    this.r2.clear(),
    this.r2.beginFill(this.color, this.alpha),
    this.r2.arc(0, 0, this.radius, canvas.Functions.degToRad(0), canvas.Functions.degToRad(180)),
    this.r2.endFill()
}
,
canvas.px.RoundProgress.prototype = Object.create(canvas.px.Container.prototype),
canvas.px.RoundProgress.prototype.update = function() {
    this.r1.rotation = canvas.Functions.degToRad(90 + (.5 <= this.progress ? 180 : Math.round(360 * this.progress))),
    this.r2.rotation = canvas.Functions.degToRad(-90 + (this.progress <= .5 ? 0 : Math.round(360 * (this.progress - .5))))
}
,
canvas.utils.LocalStorage = function(t) {
    this.name = t,
    "undefined" != typeof Storage && (this.isSupported = !0)
}
,
canvas.utils.LocalStorage.prototype.get = function(t) {
    if (this.isSupported)
        return localStorage.getItem(this.name + "_" + t)
}
,
canvas.utils.LocalStorage.prototype.set = function(t, e) {
    this.isSupported && localStorage.setItem(this.name + "_" + t, e)
}
,
canvas.utils.URLRequestEvent = {
    EVENT_COMPLETE: "URLRequestEvent.EVENT_COMPLETE",
    EVENT_ERROR: "URLRequestEvent.EVENT_ERROR"
},
canvas.utils.URLRequest = function(t, e, a, s) {
    return this.stack = [],
    this.request = new XMLHttpRequest,
    this.request.onreadystatechange = this.onLoad.bind(this),
    this.url = t || "",
    this.method = e || "GET",
    this.params = a || {},
    this.responseType = s || "text",
    this.request.responseType = this.responseType,
    this
}
,
canvas.utils.URLRequest.prototype.load = function(t, e, a) {
    if (this.busy)
        this.stack.push(arguments);
    else if (this.busy = !0,
    this.info = a,
    void 0 !== t && t && (this.url = t),
    void 0 !== e && e && (this.params = e),
    this.request.open(this.method, this.url, !0),
    "POST" == this.method) {
        this.request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        var s = this.params;
        if ("object" == typeof s)
            for (var i in s = "",
            this.params)
                s && (s += "&"),
                s += i + "=" + this.params[i];
        this.request.send(s)
    } else
        this.request.send()
}
,
canvas.utils.URLRequest.prototype.onLoad = function() {
    4 == this.request.readyState && (200 == this.request.status ? canvas.EventManager.dispatchEvent(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this) : (canvas.Log.add(canvas.Log.ALL, "URL not found <b>" + this.url + "</b>", "#FF0000"),
    canvas.EventManager.dispatchEvent(canvas.utils.URLRequestEvent.EVENT_ERROR, this)),
    this.busy = !1,
    this.stack.length && this.load.apply(this, this.stack.shift()))
}
,
canvas.utils.URLRequest.prototype.abort = function() {
    this.request && this.request.abort()
}
,
canvas.utils.HintParams = function(t, e, a) {
    this.view = t,
    this.light = e || !1,
    this.pos = null == a ? canvas.utils.HintPos.RIGHT_BOTTOM : a
}
,
canvas.utils.HintPos = {
    RIGHT_BOTTOM: "rb",
    RIGHT_TOP: "rt",
    LEFT_BOTTOM: "lb",
    LEFT_TOP: "lt"
},
canvas.utils.HintManager = function() {
    canvas.utils.HintManager.instance = this
}
,
canvas.utils.HintManager.prototype.init = function(t, e, a) {
    this.view = t,
    this.resize(e, a),
    null == this.interval && (this.interval = setInterval(this.handlerTimer.bind(this), 200))
}
,
canvas.utils.HintManager.prototype.resize = function(t, e) {
    this.width = t,
    this.height = e
}
,
canvas.utils.HintManager.prototype.add = function(t, e) {
    t.hintParams = e,
    t.mouseover = this.handlerOver.bind(this),
    t.mouseout = this.handlerOut.bind(this)
}
,
canvas.utils.HintManager.prototype.remove = function(t) {
    this.hide(t),
    t.mouseover = null,
    t.mouseout = null
}
,
canvas.utils.HintManager.prototype.show = function(t) {
    var e;
    t && (null != this.currentTarget && this.hide(this.currentTarget),
    (e = t.hintParams) && e.view && (this.view.addChild(e.view),
    this.currentTarget = t,
    this.view.mousemove = this.handlerMove.bind(this),
    e.light && (this.currentTarget.filters = [canvas.Functions.getBrightness()])))
}
,
canvas.utils.HintManager.prototype.hideAndRemove = function(t) {
    null == t && (t = this.currentTarget),
    this.remove(t),
    this.hide(t)
}
,
canvas.utils.HintManager.prototype.hide = function(t) {
    null == t && (t = this.currentTarget),
    t && (this.currentTarget != t || (t = t.hintParams) && (t.light && (this.currentTarget.filters = []),
    this.view.removeChildren(),
    this.currentTarget = null,
    this.view.mousemove = null))
}
,
canvas.utils.HintManager.prototype.handlerOver = function(t) {
    this.show(t.currentTarget),
    this.handlerMove(t)
}
,
canvas.utils.HintManager.prototype.handlerOut = function(t) {
    this.hide(t.currentTarget)
}
,
canvas.utils.HintManager.prototype.handlerMove = function(t) {
    if (this.currentTarget.worldVisible) {
        if (this.currentTarget) {
            var e, a;
            switch (this.currentTarget.hintParams.pos) {
            case canvas.utils.HintPos.RIGHT_BOTTOM:
                e = 15 + t.data.global.x,
                a = 20 + t.data.global.y;
                break;
            case canvas.utils.HintPos.RIGHT_TOP:
                e = 15 + t.data.global.x,
                a = t.data.global.y - this.currentTarget.hintParams.view.height - 2;
                break;
            case canvas.utils.HintPos.LEFT_BOTTOM:
                e = t.data.global.x - this.currentTarget.hintParams.view.width - 2,
                a = 20 + t.data.global.y;
                break;
            case canvas.utils.HintPos.LEFT_TOP:
                e = t.data.global.x - this.currentTarget.hintParams.view.width - 2,
                a = t.data.global.y - this.currentTarget.hintParams.view.height - 2
            }
            var s = e + this.currentTarget.hintParams.view.width - this.width;
            0 < s && (e -= s),
            0 < (s = a + this.currentTarget.hintParams.view.height - this.height) && (a -= s),
            e < 0 && (e = 0),
            a < 0 && (a = 0),
            this.currentTarget.hintParams.view.position.set(Math.round(e), Math.round(a))
        }
    } else
        this.hide(this.currentTarget)
}
,
canvas.utils.HintManager.prototype.handlerTimer = function() {
    this.currentTarget && !this.currentTarget.worldVisible && this.hide(this.currentTarget)
}
,
canvas.utils.ServerTime = function(t, e) {
    this._serverDiff = 0,
    this._timezoneOffset = 180,
    null != t && this.init(t, e)
}
,
canvas.utils.ServerTime.prototype.init = function(t, e) {
    null == e && (e = 180),
    this._serverDiff = Math.round(.001 * Date.now()) - t,
    this._timezoneOffset = e
}
,
canvas.utils.ServerTime.prototype.getTime = function() {
    return Math.round(.001 * Date.now()) - this._serverDiff
}
,
canvas.utils.ServerTime.prototype.getDate = function() {
    var t = new Date;
    return t.setTime(t.getTime() - 1e3 * this._serverDiff + 6e4 * (this._timezoneOffset + t.getTimezoneOffset())),
    t
}
,
canvas.utils.WindowsManager = function(t) {
    Object.defineProperty(this, "haveActiveWindows", {
        get: function() {
            return 0 < this.activeWindows.length
        }
    }),
    (canvas.utils.WindowsManager.instance = this).activeWindows = [],
    this.container = null,
    this.dragingWindow = null,
    this.bottomContainer = null,
    this.w = 0,
    this.h = 0,
    this.dx = 0,
    this.dy = 0,
    this.currentWindow = null,
    t && (this.wall = t),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.closeHandler, this),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_DRAG, null, this.dragHandler, this)
}
,
canvas.utils.WindowsManager.prototype.init = function(t, e, a, s) {
    this.bottomContainer = s,
    this.container = t,
    this.w = e,
    this.h = a,
    this.resizeWindows()
}
,
canvas.utils.WindowsManager.prototype.openWindow = function(t, e, a, s, i) {
    null == e && (e = !0),
    null == a && (a = !0),
    null == s && (s = !0),
    null == i && (i = !1),
    t.__centered = s,
    this.activeWindows.indexOf(t) < 0 && this.activeWindows.push(t),
    t.parent != this.container && (this.container.addChild(t),
    this.resizeWindow(t)),
    null != this.bottomContainer && (a && (this.bottomContainer.interactive = !1,
    this.bottomContainer.interactiveChildren = !1),
    e && (this.wall ? this.wall.active = !0 : this.bottomContainer.filters = [canvas.Functions.getGreyScale(.3)]),
    i && (t.__wall = new canvas.px.Mask(this.bottomContainer.width,this.bottomContainer.height,0,.7),
    this.bottomContainer.addChild(t.__wall)),
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_OPEN, this, t))
}
,
canvas.utils.WindowsManager.prototype.resizeWindows = function() {
    for (var t, e = this.activeWindows.length, a = 0; a < e; a++)
        t = this.activeWindows[a],
        this.resizeWindow(t)
}
,
canvas.utils.WindowsManager.prototype.resizeWindow = function(t) {
    t.__centered && (t.x = Math.max(0, Math.round(.5 * (this.w - t.width))),
    t.y = Math.max(0, Math.round(.5 * (this.h - t.height))))
}
,
canvas.utils.WindowsManager.prototype.closeWindow = function(t) {
    var e = this.activeWindows.indexOf(t);
    0 <= e && (this.activeWindows.splice(e, 1),
    t.parent == this.container && this.container.removeChild(t),
    t.__wall && this.bottomContainer && (t.__wall.parent == this.bottomContainer && this.bottomContainer.removeChild(t.__wall),
    t.__wall.destroy(),
    t.__wall = null),
    null != this.bottomContainer && 0 == this.activeWindows.length && (this.bottomContainer.interactive = !0,
    this.bottomContainer.interactiveChildren = !0,
    this.bottomContainer.filters = [],
    this.wall && (this.wall.active = !1)),
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this, t))
}
,
canvas.utils.WindowsManager.prototype.windowIsActive = function(t) {
    return 0 <= this.activeWindows.indexOf(t)
}
,
canvas.utils.WindowsManager.prototype.closeAllWindows = function() {
    for (var t, e = [], a = this.activeWindows.length, s = 0; s < a; s++)
        t = this.activeWindows[s],
        e.push(t);
    for (a = e.length,
    s = 0; s < a; s++)
        t = e[s],
        this.closeWindow(t)
}
,
canvas.utils.WindowsManager.prototype.closeHandler = function(t) {
    this.windowIsActive(t.target) && (this.currentWindow = t.target,
    this.closeWindow(t.target))
}
,
canvas.utils.WindowsManager.prototype.dragHandler = function(t) {
    this.dragingWindow = t.target,
    null != this.dragingWindow && this.windowIsActive(this.dragingWindow) && (this.container.setChildIndex(this.dragingWindow, this.container.numChildren - 1),
    this.dragingWindow.startDrag(new canvas.px.Rectangle(0,0,this.w - this.dragingWindow.width,this.h - this.dragingWindow.height), new canvas.px.Point(t.params.data.global.x + this.dx,t.params.data.global.y + this.dy)),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this))
}
,
canvas.utils.WindowsManager.prototype.upHandler = function(t) {
    null != this.container && null != this.dragingWindow && (canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this),
    this.dragingWindow.stopDrag(),
    this.dragingWindow = null)
}
,
canvas.utils.ABCAbout = {
    VERSION: 1,
    REQUEST_URL_DWAR: "entry_point.php?object=common&action=action&json_mode_on=1"
},
canvas.utils.ABCEvent = {},
canvas.utils.ABCPointTypes = {
    END: 0,
    MOVE: 1,
    CLICK: 2,
    LEAVE: 3,
    TAB: 4,
    SPACE: 5,
    KEY: 6,
    MOUSE_DOWN: 7,
    MOUSE_UP: 8,
    toString: function(t) {
        switch (t) {
        case this.START:
            return "start";
        case this.END:
            return "end";
        case this.MOVE:
            return "move";
        case this.CLICK:
            return "click";
        case this.LEAVE:
            return "leave";
        case this.TAB:
            return "tab";
        case this.SPACE:
            return "space";
        case this.KEY:
            return "key";
        case this.MOUSE_DOWN:
            return "down";
        case this.MOUSE_UP:
            return "up"
        }
        return "unknow#" + t
    }
},
canvas.utils.ABCMouseEventTypes = {
    DOWN: 1,
    UP: 2,
    CLICK: 3,
    DCLICK: 4,
    toString: function(t) {
        switch (t) {
        case this.DOWN:
            return "down";
        case this.UP:
            return "up";
        case this.CLICK:
            return "click";
        case this.DCLICK:
            return "double-click"
        }
        return "none"
    }
},
canvas.utils.ABCKeyboardEventTypes = {
    DOWN: 1,
    UP: 2
},
canvas.utils.ABCPointData = function(t, e, a, s, i) {
    this.x = a,
    this.y = s,
    this.frame = 0,
    this.endType = -1,
    this.parent = t,
    this.status = e,
    this.time = i,
    this.uxIndex = canvas.utils.ABCPointData.uxIndexCount++
}
,
canvas.utils.ABCPointData.prototype.toObject = function() {
    if (this.object)
        return this.object;
    var t = {};
    return t.s = this.status,
    t.x = Math.round(1e3 * this.x) / 1e3,
    t.y = Math.round(1e3 * this.y) / 1e3,
    t.t = this.time,
    -1 != this.endType && (t.e = this.endType),
    this.keyInfo && (t.k = this.keyInfo.toObject()),
    this.sendInfo && (t.i = this.sendInfo),
    this.object = t
}
,
canvas.utils.ABCPointData.uxIndexCount = 1,
canvas.utils.ABCMouseData = function(t, e, a, s) {
    this.event = t,
    this.time = e,
    this.x = a,
    this.y = s
}
,
canvas.utils.ABCMouseData.prototype.toObject = function() {
    if (this.object)
        return this.object;
    var t = new Object;
    return t.e = this.event,
    t.t = this.time,
    t.x = this.x,
    t.y = this.y,
    this.object = t
}
,
canvas.utils.ABCKeyboardData = function(t, e, a) {
    this.event = t,
    this.code = e,
    this.time = a
}
,
canvas.utils.ABCKeyboardData.prototype.toObject = function() {
    if (this.object)
        return this.object;
    var t = new Object;
    return t.e = this.event,
    t.c = this.code,
    t.t = this.time,
    this.object = t
}
,
canvas.utils.ABCKeyInfo = function(t, e) {
    this.keyCode = t,
    this.deltaTime = e
}
,
canvas.utils.ABCKeyInfo.prototype.toObject = function() {
    var t = {};
    return t.c = this.keyCode,
    t.t = this.deltaTime,
    t
}
,
canvas.utils.ABCParameters = function(t) {
    this.userId = t.user_id,
    t.abc_cfcs ? this.countForClearSession = parseInt(t.abc_cfcs) : this.countForClearSession = 20,
    this.keyboardLog = "1" == t.abc_keyboard,
    this.mouseLog = "1" == t.abc_mouse,
    this.maxPointsCount = t.abc_max_points ? parseInt(t.abc_max_points) : 0
}
,
canvas.utils.ABController = {
    init: function(t, e) {
        this.pointTime = 0,
        Object.defineProperty(this, "diffPointTime", {
            get: function() {
                if (0 == this.pointTime)
                    return this.pointTime = Date.now(),
                    0;
                var t = Date.now() - this.pointTime;
                return this.pointTime = Date.now(),
                t
            }
        }),
        this.keyboardTime = 0,
        Object.defineProperty(this, "diffKeyboardTime", {
            get: function() {
                if (0 == this.keyboardTime)
                    return this.keyboardTime = Date.now(),
                    0;
                var t = Date.now() - this.keyboardTime;
                return this.keyboardTime = Date.now(),
                t
            }
        }),
        this.mouseTime = 0,
        Object.defineProperty(this, "diffMouseTime", {
            get: function() {
                if (0 == this.mouseTime)
                    return this.mouseTime = Date.now(),
                    0;
                var t = Date.now() - this.mouseTime;
                return this.mouseTime = Date.now(),
                t
            }
        }),
        this.stage = t.stage,
        this.fromType = e,
        this.fromData = null,
        this.alc = null,
        this.tstjs = -1,
        this.tstcl = -1,
        this.app = t,
        this.isStageMove = !1,
        this.stageMoveIsListening = !1,
        this.clickTime = Date.now(),
        this.leaveTime = Date.now(),
        this.keyDowns = {},
        this._parameters = new canvas.utils.ABCParameters(t.par),
        this.reset(!0);
        t = is_touch_device();
        this.tstjs = parseInt(t) ? 1 : 0,
        this.stage.tstcl = this.tstclCallback.bind(this),
        this.stage.mousemove = this.moveHandler.bind(this),
        this.stage.click = this.clickHandler.bind(this),
        this.stage.mousedown = this.downHandler.bind(this),
        this.stage.mouseup = this.upHandler.bind(this),
        document.addEventListener("keydown", this.keyDownHandler.bind(this)),
        document.addEventListener("keyup", this.keyUpHandler.bind(this)),
        document.addEventListener("mouseout", this.leaveHandler.bind(this))
    },
    tstclCallback: function(t) {
        this.tstcl = t ? 1 : 0
    },
    reset: function(t) {
        this.focusedObject = null,
        t || this._points.length > this._parameters.countForClearSession ? (this.resetIndex = 0,
        this._points = new Array,
        this._keyboardEventsList = new Array,
        this._mouseEventsList = new Array,
        this.pointTime = 0,
        this.keyboardTime = 0,
        this.mouseTime = 0) : this.resetIndex = this._points.length
    },
    addPoint: function(t) {
        this._points.push(t),
        0 < this._parameters.maxPointsCount && this._points.length > this._parameters.maxPointsCount && this._points.shift()
    },
    addKey: function(t) {
        this._keyboardEventsList.push(t)
    },
    addMouse: function(t) {
        this._mouseEventsList.push(t)
    },
    getMousePosition: function() {
        return this.app.app.renderer.plugins.interaction.mouse.global
    },
    moveHandler: function(t) {
        var e = this.getMousePosition();
        this.addPoint(new canvas.utils.ABCPointData(null,canvas.utils.ABCPointTypes.MOVE,e.x,e.y,this.diffPointTime)),
        this.stageMoveIsListening && (this.isStageMove = !0)
    },
    clickHandler: function(t) {
        var e;
        this.isStageMove || (this._parameters.mouseLog && (e = this.getMousePosition(),
        this.addMouse(new canvas.utils.ABCMouseData(canvas.utils.ABCMouseEventTypes.CLICK,this.diffMouseTime,e.x,e.y))),
        Date.now() - this.clickTime < 500 && this.doubleClickHandler(),
        this.clickTime = Date.now())
    },
    downHandler: function(t) {
        var e = this.getMousePosition();
        this.addPoint(new canvas.utils.ABCPointData(null,canvas.utils.ABCPointTypes.MOUSE_DOWN,e.x,e.y,this.diffPointTime)),
        this.stageMoveIsListening = !0,
        this.isStageMove = !1,
        this._parameters.mouseLog && this.addMouse(new canvas.utils.ABCMouseData(canvas.utils.ABCMouseEventTypes.DOWN,this.diffMouseTime,e.x,e.y))
    },
    upHandler: function(t) {
        var e;
        this.isStageMove || (e = this.getMousePosition(),
        this.addPoint(new canvas.utils.ABCPointData(null,canvas.utils.ABCPointTypes.MOUSE_UP,e.x,e.y,this.diffPointTime)),
        this._parameters.mouseLog && this.addMouse(new canvas.utils.ABCMouseData(canvas.utils.ABCMouseEventTypes.UP,this.diffMouseTime,e.x,e.y)))
    },
    doubleClickHandler: function() {
        var t;
        this._parameters.mouseLog && (t = this.getMousePosition(),
        this.addMouse(new canvas.utils.ABCMouseData(canvas.utils.ABCMouseEventTypes.DCLICK,this.diffMouseTime,t.x,t.y)))
    },
    leaveHandler: function(t) {
        var e;
        Date.now() - this.leaveTime < 500 || ((e = this._points[this._points.length - 1]) && this.addPoint(new canvas.utils.ABCPointData(null,canvas.utils.ABCPointTypes.LEAVE,e.x,e.y,this.diffPointTime)),
        this.leaveTime = Date.now())
    },
    keyDownHandler: function(t) {
        this.keyDowns[t.code] = Date.now(),
        this._parameters.keyboardLog && this.addKey(new canvas.utils.ABCKeyboardData(canvas.utils.ABCKeyboardEventTypes.DOWN,t.code,this.diffKeyboardTime))
    },
    keyUpHandler: function(t) {
        var e = this.keyDowns[t.code]
          , a = Date.now() - e
          , e = new canvas.utils.ABCKeyInfo(t.code,a)
          , a = new canvas.utils.ABCPointData(null,canvas.utils.ABCPointTypes.KEY,0,0,this.diffPointTime);
        a.keyInfo = e,
        this.addPoint(a),
        this._parameters.keyboardLog && this.addKey(new canvas.utils.ABCKeyboardData(canvas.utils.ABCKeyboardEventTypes.UP,t.code,this.diffKeyboardTime))
    },
    toString: function(t) {
        var e = this.getMousePosition()
          , a = new canvas.utils.ABCPointData(null,canvas.utils.ABCPointTypes.END,e.x,e.y,this.diffPointTime);
        a.endType = t && t.et ? t.et : -1,
        this._points.push(a);
        for (var s, i, n, o, r, c, p = [], h = 0, l = 0; l < this._points.length; l++)
            c = this._points[l],
            p.push(c.toObject()),
            l > this.resetIndex && (o = s.x - c.x,
            r = s.y - c.y,
            r = Math.sqrt(o * o + r * r),
            i = null != i ? Math.min(i, r) : r,
            n = null != n ? Math.max(n, r) : r,
            h += r),
            s = c;
        var d, v = [];
        for (l = 0; l < this._keyboardEventsList.length; l++)
            d = this._keyboardEventsList[l],
            v.push(d.toObject());
        var u, m = [];
        for (l = 0; l < this._mouseEventsList.length; l++)
            u = this._mouseEventsList[l],
            m.push(u.toObject());
        e = {};
        e.sum = h,
        e.count = p.length - 1 - this.resetIndex,
        e.min = i,
        e.max = n;
        a = {};
        a.from = this.fromType,
        a.fromData = this.fromData,
        a.length = e,
        a.width = this.app.width,
        a.height = this.app.height,
        window.get_client_width && (a.ex_width = get_client_width()),
        window.get_client_height && (a.ex_height = get_client_height()),
        a.ai = t,
        a.cap = navigator.userAgent,
        a.tst = {},
        a.tst.js = this.tstjs,
        a.tst.cl = this.tstcl,
        a.st = this.resetIndex,
        a.id = this._parameters.userId,
        a.fps = 30,
        a.v = canvas.utils.ABCAbout.VERSION;
        t = {};
        t.points = p,
        t.kb = v,
        t.ms = m,
        t.info = a;
        t = JSON.stringify(t),
        t = btoa(t);
        return this.reset(!1),
        t
    },
    sendRequest: function(t, e) {
        var a = {};
        a.m = this.toString(e);
        a = new canvas.utils.URLRequest(t,"POST",a);
        return a.load(),
        a
    }
},
canvas.utils.RGB = function(t) {
    null == t && (t = 0),
    this.color = t,
    this.a = t >>> 24 & 255,
    this.r = t >>> 16 & 255,
    this.g = t >>> 8 & 255,
    this.b = 255 & t
}
,
canvas.utils.RGB.prototype.toHex = function() {
    return this.a << 24 | this.r << 16 | this.g << 8 | this.b
}
,
canvas.utils.TimeLog = {
    start: Date.now(),
    last: Date.now(),
    log: function(t) {
        null == t && (t = ""),
        console.log("TimeLog (" + t + "): " + (Date.now() - this.last) + "/" + (Date.now() - this.start) + " ms."),
        this.last = Date.now()
    }
},
canvas.utils.ServerRandomizer = function() {
    this.LCG_A = 0,
    this.LCG_C = 0,
    this.LCG_M = 0
}
,
canvas.utils.ServerRandomizer.prototype.init = function(t, e, a, s) {
    this.seed = t,
    this.LCG_A = e,
    this.LCG_C = a,
    this.LCG_M = s
}
,
canvas.utils.ServerRandomizer.prototype.lcg = function(t, e, a, s) {
    return (e * t + a) % s
}
,
canvas.utils.ServerRandomizer.prototype.lcgRand = function(t, e) {
    return this.seed = this.lcg(this.seed, this.LCG_A, this.LCG_C, this.LCG_M),
    Math.round(Math.abs(this.seed) / this.LCG_M * (e - t) + t)
}
,
canvas.utils.ServerRandomizer.prototype.lcgShuffle = function(t) {
    for (var e, a = new Array; 0 < (e = t.length); )
        a.push(t.splice(this.lcgRand(0, e - 1), 1)[0]);
    return a
}
;
var WSProxy = function(t) {
    this.options = t || {},
    this.options.onConnect = this.options.onConnect || function() {
        console.warn("onConnect event", arguments)
    }
    ,
    this.options.onMessage = this.options.onMessage || function() {
        console.warn("onMessage event", arguments)
    }
    ,
    this.onOpenWs = this.onOpenWs.bind(this),
    this.onMessageWs = this.onMessageWs.bind(this),
    this.curPackSize = 0,
    this.curPack = ""
};
WSProxy.prototype.log = function() {
    this.options.logEnabled && console.log.apply(console, arguments)
}
,
WSProxy.prototype._connect = function() {
    var t = this.ws = new WebSocket("wss://" + this.connectOptions.ws.host);
    t.onopen = this.onOpenWs,
    t.onmessage = this.onMessageWs;
    var e = this;
    t.onclose = function(t) {
        console.warn("WSProxy:onclose", t),
        e.reconnect()
    }
    ,
    t.onerror = function(t) {
        console.error("WSProxy:onerror", t),
        e.reconnect()
    }
}
,
WSProxy.prototype._parseMessage = function(t) {
    this.storedMessage && (t = this.storedMessage + t,
    this.storedMessage = "");
    for (var e = t.split("\0"), a = e.length, s = 0; s < a; s++)
        e[s] && (null == e[s + 1] ? this.storedMessage = e[s] : this.options.onMessage(e[s]))
}
,
WSProxy.prototype.onOpenWs = function() {
    this.log("WSProxy:onOpenWs"),
    this.ws.send(JSON.stringify({
        event: "connect",
        host: this.connectOptions.fs.host,
        port: this.connectOptions.fs.port
    }))
}
,
WSProxy.prototype.onMessageWs = function(e) {
    var a;
    try {
        a = JSON.parse(e.data)
    } catch (t) {
        console.error("parse json data", e.data, t),
        a = {}
    }
    switch (a.event) {
    case "connected":
        this.connected = !0,
        this._tryCount = 0,
        this.sourcePool = "",
        this.options.onConnect();
        break;
    case "message":
        this._parseMessage(a.data)
    }
}
,
WSProxy.prototype.connect = function(t) {
    this.log("WSProxy:connect", t),
    this.connectOptions = t,
    this.ws ? console.error("Connection already exists. Call destroy method") : this._connect()
}
,
WSProxy.prototype.reconnect = function() {
    this._tryCount || (this._tryCount = 0),
    this._tryCount++,
    this.log("WSProxy:reconnectWs", this._tryCount),
    this.destroy();
    var t = this;
    this._reconnectTimeout = setTimeout(function() {
        t._connect()
    }, 1e3 * Math.pow(2, this._tryCount))
}
,
WSProxy.prototype.destroy = function() {
    this.log("WSProxy:destroy"),
    this.connected = !1,
    this.ws && (this.ws.onopen = null,
    this.ws.onmessage = null,
    this.ws.onclose = null,
    this.ws.onerror = null,
    this.ws.close(),
    this.ws = null),
    clearTimeout(this._reconnectTimeout)
}
,
WSProxy.prototype.send = function(t) {
    this.connected ? this.ws.send(JSON.stringify({
        event: "message",
        data: t
    })) : console.error("WSProxy is not connected")
}
,
canvas.animation.Bot = function(t, e, a) {
    e && (this.preloader = new canvas.px.MovieClip(canvas.Config.effectsPath + "hourglass"),
    this.preloader.frameEvent = canvas.app.battle.Event.ENTER_FRAME,
    this.preloader.loop = !0,
    this.preloader.position.set(e.x, e.y),
    a && a.addChild(this.preloader)),
    this.kick_array_all = {
        kick_up: {
            a_up_1: {
                die: ["die_1"],
                dodge: ["dodge_1"],
                wound: ["wound_1"],
                crit: ["wound_1"],
                block: ["b_up_1"]
            },
            a_up_2: {
                die: ["die_1"],
                dodge: ["dodge_1"],
                wound: ["wound_1"],
                crit: ["wound_1"],
                block: ["b_up_1"]
            }
        },
        kick_mid: {
            a_mid_1: {
                die: ["die_2"],
                dodge: ["dodge_1"],
                wound: ["wound_2"],
                crit: ["wound_2"],
                block: ["b_up_1", "b_mid_1"]
            },
            a_mid_2: {
                die: ["die_2"],
                dodge: ["dodge_1"],
                wound: ["wound_2"],
                crit: ["wound_2"],
                block: ["b_up_1", "b_mid_1"]
            }
        },
        kick_bot: {
            a_bot_1: {
                die: ["die_2"],
                dodge: ["dodge_1"],
                wound: ["wound_2"],
                crit: ["wound_2"],
                block: ["b_up_1"]
            },
            a_bot_2: {
                die: ["die_2"],
                dodge: ["dodge_1"],
                wound: ["wound_2"],
                crit: ["wound_2"],
                block: ["b_mid_1"]
            }
        },
        combo: {
            combo_1: {
                die: ["die_1"],
                wound: ["wound_1"],
                crit: ["wound_1"]
            },
            combo_2: {
                die: ["die_1"],
                wound: ["wound_1"],
                crit: ["wound_1"]
            },
            combo_3: {
                die: ["die_1"],
                wound: ["wound_1"],
                crit: ["wound_1"]
            },
            combo_4: {
                die: ["die_1"],
                wound: ["wound_1"],
                crit: ["wound_1"]
            },
            combo_5: {
                die: ["die_1"],
                wound: ["wound_1"],
                crit: ["wound_1"]
            }
        }
    },
    this.action_array_all = {
        kick_up: ["a_up_1"],
        kick_mid: ["a_mid_1"],
        kick_bot: ["a_bot_1"],
        combo: ["combo_1", "combo_2", "combo_3", "combo_4", "combo_5"]
    },
    this.ActionConf = {
        a_up_1: 11,
        a_mid_1: 11,
        a_bot_1: 14,
        combo_1: 9,
        combo_2: 6,
        combo_3: 8,
        combo_4: 20
    },
    this.ReactionConf = {
        b_up_1: 6,
        b_mid_1: 6,
        dodge_1: 8,
        wound_1: 2,
        wound_2: 2,
        die_1: 2,
        die_2: 2
    },
    this.ActionSound = {
        a_up_1: {
            std: !0
        },
        a_mid_1: {
            std: !0
        },
        a_bot_1: {
            std: !0
        },
        combo_1: {
            std: !0
        },
        combo_2: {
            std: !0
        },
        combo_3: {
            std: !0
        },
        combo_4: {
            std: !0
        },
        b_up_1: {
            std: !0
        },
        b_mid_1: {
            std: !0
        },
        dodge_1: {
            std: !0
        },
        wound_1: {
            std: !0
        },
        wound_2: {
            std: !0
        },
        die_1: {
            std: !0
        },
        die_2: {
            std: !0
        }
    },
    canvas.px.MovieClip.call(this, t)
}
,
canvas.animation.Bot.prototype = Object.create(canvas.px.MovieClip.prototype),
canvas.animation.Bot.prototype._init = function() {
    canvas.px.MovieClip.prototype._init.call(this),
    this.data && (this.kick_array_all = this.data.properties.kick_array_all,
    this.action_array_all = this.data.properties.action_array_all,
    this.ActionConf = this.data.properties.ActionConf,
    this.ReactionConf = this.data.properties.ReactionConf,
    this.ActionSound = this.data.properties.ActionSound)
}
,
canvas.animation.Bot.prototype._ready = function() {
    canvas.px.MovieClip.prototype._ready.call(this),
    this.preloader && this.preloader.destroy()
}
,
canvas.animation.Bot.prototype.render = function() {
    canvas.px.MovieClip.prototype.render.call(this)
}
,
canvas.animation.Bot.prototype.getChildByName = function(t) {
    for (var e = this.container.children.length, a = 0; a < e; a++)
        if (this.container.children[a].shortName == t)
            return this.container.children[a];
    return null
}
,
canvas.animation.Bot.prototype.updateFrameEvent = function() {
    canvas.px.MovieClip.prototype.updateFrameEvent.call(this),
    this.preloader && (this.preloader.frameEvent = this.frameEvent)
}
,
canvas.animation.Skeleton = function(t, e, a) {
    this._skeletonData = null,
    Object.defineProperty(this, "skeletonData", {
        get: function() {
            return this._skeletonData
        },
        set: function(t) {
            if (this._skeletonData = t)
                for (var e in t.slots) {
                    var a = t.slots[e];
                    if ("BANNER" != e)
                        for (var s = 0; s < a.length; s++) {
                            var i = a[s];
                            i.url && canvas.ResourceLoader.add([i.url])
                        }
                }
        }
    }),
    canvas.animation.Bot.call(this, t, e, a),
    this.animations = {},
    this.renderSlots = null
}
,
canvas.animation.Skeleton.prototype = Object.create(canvas.animation.Bot.prototype),
canvas.animation.Skeleton.prototype.render = function() {
    if (canvas.animation.Bot.prototype.render.call(this),
    null != this.skeletonData)
        for (var t, e, a, s, i, n, o, r = this.container.children.length, c = 0; c < r; c++)
            if (t = (n = (s = this.container.children[c]).name).substr(0, 4),
            e = n.substr(5),
            o = s.shortName && s.prefix ? s.shortName : (a = n.split("_"),
            s.prefix = a[1],
            s.shortName = a[0]),
            this.skeletonData.slots[o] && (!this.renderSlots || 0 <= this.renderSlots.indexOf(o)))
                for (var p = 0; p < this.skeletonData.slots[o].length; p++) {
                    (i = s.children[p]) && (i.texture = canvas.px.TextureEmpty,
                    i.filters = null);
                    var h = this.skeletonData.slots[o][p];
                    if (h.url) {
                        var l = canvas.ResourceLoader.get(h.url);
                        if (l && l.textures) {
                            var d = n;
                            "FOOT" != t && "HAND" != t || (d = t + e);
                            var v, d = l.textures[d + ".png"];
                            if (i ? d && (i.texture = d) : i = s.addChild(new canvas.px.Sprite(d || canvas.px.TextureEmpty)),
                            h.colors[1] && i && (i.filters = [canvas.Functions.getGlow(10, 2, 0, parseInt(h.colors[1], 16), .1)]),
                            h.animation && i) {
                                if (this.animations[h.animation] || ((v = new canvas.px.MovieClip(canvas.Config.packsAnimsPath + h.animation + "/" + h.animation)).frameEvent = this.frameEvent,
                                v.loop = !0,
                                v.name = h.animation,
                                this.animations[h.animation] = v),
                                this.destroyAnimations(i, h.animation),
                                !(v = i.addChild(this.animations[h.animation])).customFlag && v.ready && 1 == v.totalFrames)
                                    for (var u = 1; v.mcChildsCache["mc" + u]; )
                                        v.customFlag = !0,
                                        v.mcChildsCache["mc" + u].loop = !0,
                                        v.mcChildsCache["mc" + u].play(),
                                        v.mcChildsCache["mc" + u].frameEvent || (v.mcChildsCache["mc" + u].frameEvent = this.frameEvent),
                                        u++
                            } else
                                this.destroyAnimations(i)
                        }
                    }
                }
}
,
canvas.animation.Skeleton.prototype.destroyAnimations = function(t, e) {
    if (t && 0 < t.numChildren)
        for (; 0 < t.children.length; ) {
            var a = t.removeChildAt(0);
            e && a.name == e || (this.animations[a.name] && (this.animations[a.name] = null),
            a.destroy({
                children: !0
            }))
        }
}
,
canvas.animation.SkeletonInfo = function(t, e, a, s) {
    var i;
    this.mount = 0,
    null != s && s && (this.mount = parseInt(s),
    0 < this.mount && (i = "mount_" + canvas.Functions.setNumberLen(this.mount, 2) + "_bot",
    s = "mount_" + canvas.Functions.setNumberLen(this.mount, 2) + "_top",
    this.mountBottom = new canvas.px.MovieClip(canvas.Config.mountsPath + i + "/" + i,null,!0),
    this.mountTop = new canvas.px.MovieClip(canvas.Config.mountsPath + s + "/" + s,null,!0),
    this.mountTop.loop = !0,
    this.mountBottom.loop = !0)),
    canvas.animation.Skeleton.call(this, t, e, a),
    0 < this.mount && (this.mountTop.position.set(-65, -85),
    this.mountBottom.position.set(-65, -85),
    this.container.position.set(-65, -85),
    this.addChildAt(this.mountBottom, 0),
    this.addChild(this.mountTop))
}
,
canvas.animation.SkeletonInfo.prototype = Object.create(canvas.animation.Skeleton.prototype),
canvas.animation.SkeletonInfo.prototype.render = function() {
    var t;
    canvas.animation.Skeleton.prototype.render.call(this),
    0 < this.mount && (this.mountBottom.stopped,
    this.mountTop.stopped,
    t = this.currentFrame / this.totalFrames,
    this.mountTop.mcChildsCache.mc1 && this.mountTop.mcChildsCache.mc1.gotoAndStop(Math.round(this.mountTop.mcChildsCache.mc1.totalFrames * t)),
    this.mountBottom.mcChildsCache.mc1 && this.mountBottom.mcChildsCache.mc1.gotoAndStop(Math.round(this.mountBottom.mcChildsCache.mc1.totalFrames * t)))
}
,
canvas.animation.SkeletonInfo.prototype.updateFrameEvent = function() {
    canvas.animation.Skeleton.prototype.updateFrameEvent.call(this),
    this.mountTop && (this.mountTop.frameEvent = this.frameEvent),
    this.mountBottom && (this.mountBottom.frameEvent = this.frameEvent)
}
,
canvas.animation.SkeletonAvatar = function(t, e) {
    this.gender = null == t ? "M" : t,
    canvas.animation.SkeletonInfo.call(this, canvas.Config.skPath + this.gender + "/sk01_UI"),
    this.loop = !0,
    this.container.x = "M" == this.gender ? 0 : -5,
    this.renderSlots = canvas.Const.AVATAR_SLOT_NAMES,
    null != e && (this.skeletonData = new canvas.data.battle.SkeletonData(e,this.gender))
}
,
canvas.animation.SkeletonAvatar.prototype = Object.create(canvas.animation.SkeletonInfo.prototype),
canvas.animation.Pet = function(t, e) {
    canvas.px.Container.call(this),
    this.frameEvent = e,
    this.main = this.addChild(new canvas.px.Container),
    this.back = new canvas.ui.Image("images/pets_back.gif"),
    this.back.visible = !1,
    this.back.x = 2,
    this.main.addChild(this.back);
    e = new canvas.px.Graphics;
    e.beginFill(16777215, 1),
    e.drawCircle(94, 88, 80),
    e.endFill(),
    this.addChild(e),
    this.main.mask = e,
    this.petSrc = "",
    this.waiting = !1,
    t && this.update(t),
    canvas.EventManager.addEventListener(this.frameEvent, null, this.frameHandler, this)
}
,
canvas.animation.Pet.prototype = Object.create(canvas.px.Container.prototype),
canvas.animation.Pet.prototype.update = function(t) {
    if (this.main) {
        if (null == t || !t.src)
            return this.pet && this.pet.destroy(),
            void (this.petSrc = "");
        t.src = canvas.Functions.extractSwfName(t.src),
        this.petSrc != t.src && (this.petSrc = t.src,
        this.pet && this.pet.destroy(),
        this.pet = new canvas.animation.Bot(canvas.Config.petsPath + this.petSrc + "/" + this.petSrc),
        this.main.addChild(this.pet),
        this.pet.frameEvent = this.frameEvent,
        this.waiting = !0)
    }
}
,
canvas.animation.Pet.prototype.frameHandler = function() {
    var t;
    this.waiting && this.pet.ready && (t = this.pet.getLocalBounds(),
    (0 == parseInt(this.pet.data.properties.type) ? t.y < 100 : 2 == parseInt(this.pet.data.properties.type)) ? (this.back.y = 0,
    this.pet.position.set(30, -10)) : (this.back.y = -100,
    this.pet.position.set(-60, -205)),
    this.pet.data.properties.xCorrection && (this.pet.x += parseInt(this.pet.data.properties.xCorrection)),
    this.pet.data.properties.yCorrection && (this.pet.y += parseInt(this.pet.data.properties.yCorrection)),
    this.pet.data.properties.xAdd && (this.pet.x += parseInt(this.pet.data.properties.xAdd)),
    this.pet.data.properties.yAdd && (this.pet.y += parseInt(this.pet.data.properties.yAdd)),
    this.back.visible = !0,
    this.waiting = !1)
}
,
canvas.ui.Event = {
    EVENT_CHANGE: "canvas.ui.Event.CHANGE"
},
canvas.ui.Component = function() {
    this._enabled = !0,
    this.interactive = !0,
    canvas.px.Container.call(this)
}
,
canvas.ui.Component.prototype = Object.create(canvas.px.Container.prototype),
canvas.ui.Component.prototype.setSize = function(t, e) {
    0 < t && (this._width = t),
    0 < e && (this._height = e),
    this.update()
}
,
canvas.ui.Component.prototype.update = function() {}
,
canvas.ui.Component.prototype.destroy = function() {
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.ui.ButtonEvent = {
    EVENT_CLICK: "ButtonEvent.CLICK",
    EVENT_SELECT: "ButtonEvent.SELECT",
    EVENT_DOWN: "ButtonEvent.DOWN",
    EVENT_OVER: "ButtonEvent.OVER",
    EVENT_OUT: "ButtonEvent.OUT"
},
canvas.ui.Button = function(t, e, a, s, i, n, o) {
    canvas.ui.Component.call(this),
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t,
            this.disabledTexture ? this.sprite.texture = t ? this.baseTexture : this.disabledTexture : this.filters = t ? null : [canvas.Functions.getBlackAndWhite()],
            this.buttonMode = this.sprite.interactive = t,
            this.update()
        },
        configurable: !0
    }),
    Object.defineProperty(this, "checked", {
        get: function() {
            return this._checked
        },
        set: function(t) {
            this._checked = t,
            this.checkSprite && (this._checked ? this.checkSprite.parent != this && this.addChild(this.checkSprite) : this.checkSprite.parent == this && this.removeChild(this.checkSprite))
        }
    }),
    canvas.ui.Component.call(this),
    this.baseTexture = t,
    this.overTexture = e,
    this.downTexture = a,
    this.disabledTexture = s,
    this.checkSprite = n,
    this.radioArray = o,
    this.sprite = i ? new canvas.px.SlicedSprite(t,i[0],i[1],i[2],i[3]) : new canvas.px.Sprite(this.baseTexture),
    this.sprite.interactive = !0,
    this.buttonMode = !0,
    this.addChild(this.sprite),
    this.sprite.mouseover = this.handlerOver.bind(this),
    this.sprite.mouseout = this.handlerOut.bind(this),
    this.sprite.mousedown = this.handlerDown.bind(this),
    this.sprite.click = this.handlerUp.bind(this)
}
,
canvas.ui.Button.prototype = Object.create(canvas.ui.Component.prototype),
canvas.ui.Button.prototype.setSize = function(t, e) {
    canvas.ui.Component.prototype.setSize.apply(this, [t, e]),
    0 < t && (this.sprite.width = t),
    0 < e && (this.sprite.height = e)
}
,
canvas.ui.Button.prototype.handlerOver = function(t) {
    this.overTexture && (this.sprite.texture = this.overTexture),
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_OVER, this, t)
}
,
canvas.ui.Button.prototype.handlerOut = function(t) {
    this.baseTexture && (this.sprite.texture = this.baseTexture),
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_OUT, this, t)
}
,
canvas.ui.Button.prototype.handlerDown = function(t) {
    this.downTexture && (this.sprite.texture = this.downTexture),
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_DOWN, this, t)
}
,
canvas.ui.Button.prototype.handlerUp = function(t) {
    !canvas.Config.isMobile && this.overTexture ? this.sprite.texture = this.overTexture : this.sprite.texture = this.baseTexture,
    this.checkSprite && (this.radioArray ? this.select() : this.checked = !this.checked),
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_CLICK, this, t)
}
,
canvas.ui.Button.prototype.select = function() {
    if (this.radioArray) {
        for (var t = this.radioArray.length, e = 0; e < t; e++)
            this.radioArray[e].checked = this.radioArray[e] == this;
        canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_SELECT, this)
    }
}
,
canvas.ui.SimpleButton = function(t, e, a, s) {
    canvas.ui.Button.call(this, t, null, null, null, e, a, s),
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t,
            this.buttonMode = this.sprite.interactive = t,
            this.filters = t ? null : [canvas.Functions.getBlackAndWhite()]
        },
        configurable: !0
    })
}
,
canvas.ui.SimpleButton.prototype = Object.create(canvas.ui.Button.prototype),
canvas.ui.SimpleButton.prototype.handlerOver = function(t) {
    this.filters = [canvas.Functions.getBrightness(1.2)],
    canvas.ui.Button.prototype.handlerOver.apply(this, t)
}
,
canvas.ui.SimpleButton.prototype.handlerOut = function(t) {
    this.filters = null,
    canvas.ui.Button.prototype.handlerOut.apply(this, t)
}
,
canvas.ui.SimpleButton.prototype.handlerDown = function(t) {
    this.filters = [canvas.Functions.getSaturation(-.2)],
    canvas.ui.Button.prototype.handlerDown.apply(this, t)
}
,
canvas.ui.SimpleButton.prototype.handlerUp = function(t) {
    canvas.Config.isMobile ? this.filters = null : this.filters = [canvas.Functions.getBrightness(1.2)],
    canvas.ui.Button.prototype.handlerUp.apply(this, t)
}
,
canvas.ui.Text = function(t, e, a, s, i, n, o, r, c) {
    this._color = 0,
    Object.defineProperty(this, "color", {
        get: function() {
            return this._color
        },
        set: function(t) {
            this._color = t,
            this.field.tint = this._color
        }
    }),
    this._font = "",
    Object.defineProperty(this, "font", {
        get: function() {
            return this._font
        },
        set: function(t) {
            this._font !== t && (this._font = t,
            this.field.font = this._font)
        }
    }),
    this._hAlign = "left",
    Object.defineProperty(this, "hAlign", {
        get: function() {
            return this._hAlign
        },
        set: function(t) {
            this._hAlign = t,
            this.field.align = this._hAlign,
            this.update()
        }
    }),
    this._vAlign = "top",
    Object.defineProperty(this, "vAlign", {
        get: function() {
            return this._vAlign
        },
        set: function(t) {
            this._vAlign = t,
            this.update()
        }
    }),
    this._text = "",
    Object.defineProperty(this, "text", {
        get: function() {
            return this._text
        },
        set: function(t) {
            this._text = t,
            this.field.text = this._text,
            this.update()
        }
    }),
    this._border = !1,
    Object.defineProperty(this, "border", {
        get: function() {
            return this._border
        },
        set: function(t) {
            this._border = t,
            this._border && !this.borderImage && (this.borderImage = new canvas.px.Graphics,
            this.addChild(this.borderImage)),
            this.update()
        }
    }),
    this._backColor = 0,
    Object.defineProperty(this, "backColor", {
        get: function() {
            return this._backColor
        },
        set: function(t) {
            this._backColor = t,
            this.back || this.createBack(),
            this.update()
        }
    }),
    this._backAlpha = 0,
    Object.defineProperty(this, "backAlpha", {
        get: function() {
            return this._backAlpha
        },
        set: function(t) {
            this._backAlpha = t,
            this.back || this.createBack(),
            this.update()
        }
    }),
    Object.defineProperty(this, "textWidth", {
        get: function() {
            return Math.round(this.field.textWidth)
        },
        set: function(t) {}
    }),
    Object.defineProperty(this, "textHeight", {
        get: function() {
            return Math.round(this.field.textHeight)
        },
        set: function(t) {}
    }),
    canvas.ui.Component.call(this),
    this._font = t,
    null != e && (this._color = e),
    this._width = null != a ? a : 100,
    this._height = null != s ? s : 100,
    null != n && (this._vAlign = n),
    null != i && (this._hAlign = i),
    null != o && (this.createBack(),
    this._backColor = o),
    r && (this._backAlpha = r),
    null != c && c && this.createMask(),
    this.field = new canvas.px.BitmapText("",{
        font: t,
        align: this._hAlign
    }),
    0 <= e && (this.field.tint = e),
    this.addChild(this.field),
    this.interactive = !1
}
,
canvas.ui.Text.prototype = Object.create(canvas.ui.Component.prototype),
canvas.ui.Text.prototype.update = function() {
    this.field.maxWidth = this._width;
    var t = this.field.textHeight;
    switch (this._height < t && (t = this._height),
    this.hAlign) {
    case "left":
        this.field.x = 0;
        break;
    case "center":
        this.field.x = Math.round(.5 * (this._width - this.field.textWidth));
        break;
    case "right":
        this.field.x = Math.round(this._width - this.field.textWidth)
    }
    switch (this.vAlign) {
    case "top":
        this.field.y = 0;
        break;
    case "middle":
        this.field.y = Math.round(.5 * (this._height - t));
        break;
    case "bottom":
        this.field.y = Math.round(this._height - t)
    }
    this.border && (this.borderImage.clear(),
    this.borderImage.beginFill(0, 0),
    this.borderImage.lineStyle(2, 16711680, 1),
    this.borderImage.drawRect(0, 0, this._width, this._height),
    this.borderImage.endFill()),
    this.back && (this.back.clear(),
    this.back.beginFill(this.backColor, this.backAlpha),
    this.back.drawRect(0, 0, this._width, this._height),
    this.back.endFill()),
    this.msk && (this.msk.clear(),
    this.msk.beginFill(0, 1),
    this.msk.drawRect(0, 0, this._width, this._height),
    this.msk.endFill())
}
,
canvas.ui.Text.prototype.createBack = function() {
    this.back = new canvas.px.Graphics,
    this.addChildAt(this.back, 0)
}
,
canvas.ui.Text.prototype.createMask = function() {
    this.msk = new canvas.px.Graphics,
    this.addChildAt(this.msk, 0),
    this.mask = this.msk
}
,
canvas.ui.Text.prototype.clone = function() {
    return new canvas.ui.Text(this._font,this._color,this._width,this._height,this._hAlign,this._vAlign,this._backColor,this._backAlpha)
}
,
canvas.ui.ProgressEvent = {
    EVENT_PROGRESS: "ProgressEvent.EVENT_PROGRESS"
},
canvas.ui.ProgressType = {
    HORIZONTAL: "h",
    VERTICAL: "v"
},
canvas.ui.Progress = function(t, e, a) {
    this._selectable = !1,
    Object.defineProperty(this, "selectable", {
        get: function() {
            return this._selectable
        },
        set: function(t) {
            (this._selectable = t) ? (this.back || (this.back = new canvas.px.Graphics,
            this.addChildAt(this.back),
            this.back.interactive = !0,
            this.back.mousedown = this.handlerBackDown.bind(this)),
            this.back.interactive = !0) : this.back && (this.back.interactive = !1),
            this.update()
        }
    }),
    this._progress = 1,
    Object.defineProperty(this, "progress", {
        get: function() {
            return this._progress
        },
        set: function(t) {
            this._progress = 1 < t ? 1 : t < 0 ? 0 : t,
            this.update()
        }
    }),
    canvas.ui.Component.call(this),
    null == a && (a = canvas.ui.ProgressType.HORIZONTAL),
    this.type = a,
    t ? (this.backImage = e ? this.addChild(new canvas.px.SlicedSprite(t,e[0],e[1],e[2],e[3])) : this.addChild(new canvas.px.Sprite(t)),
    this.sprite = new canvas.px.Mask(this.backImage.width,this.backImage.height),
    this.addChild(this.sprite),
    this.backImage.mask = this.sprite,
    this.setSize(this.backImage.width, this.backImage.height)) : (this.sprite = new canvas.px.Graphics,
    this.sprite.beginFill(0, 1),
    this.sprite.lineStyle(0, 0, 0),
    this.sprite.drawRect(0, 0, 1, 1),
    this.sprite.endFill()),
    this.addChild(this.sprite)
}
,
canvas.ui.Progress.prototype = Object.create(canvas.ui.Component.prototype),
canvas.ui.Progress.prototype.update = function() {
    this.back && (this.back.clear(),
    this.back.beginFill(0, 0),
    this.back.lineStyle(0, 0, 0),
    this.back.drawRect(0, 0, this._width, this._height),
    this.back.endFill()),
    this.type == canvas.ui.ProgressType.HORIZONTAL ? this.backImage ? (this.backImage.width = this._width,
    this.sprite.setSize(this._width * this.progress, this._height)) : (this.sprite.width = this._width * this.progress,
    this._height && (this.sprite.height = this._height)) : this.backImage ? (this.backImage.height = this._height,
    this.sprite.setSize(this._width, this._height * this.progress)) : (this.sprite.height = this._height * this.progress,
    this._width && (this.sprite.width = this._width))
}
,
canvas.ui.Progress.prototype.handlerBackDown = function(t) {
    this.back.mousemove = this.handlerBackMove.bind(this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.handlerStageMouseUp, this),
    this.handlerBackMove(t)
}
,
canvas.ui.Progress.prototype.handlerBackMove = function(t) {
    t = this.back.toLocal(new canvas.px.Point(t.data.global.x,t.data.global.y));
    this.type == canvas.ui.ProgressType.HORIZONTAL ? this.progress = t.x / this._width : this.progress = t.y / this._height,
    canvas.EventManager.dispatchEvent(canvas.ui.ProgressEvent.EVENT_PROGRESS, this)
}
,
canvas.ui.Progress.prototype.handlerStageMouseUp = function(t) {
    this.back && (this.back.mousemove = null),
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.handlerStageMouseUp, this)
}
,
canvas.ui.Progress.prototype.destroy = function() {
    this.back && (this.back.mousedown = null),
    this.handlerStageMouseUp(),
    canvas.ui.Component.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.ui.ImageEvent = {
    EVENT_LOADED: "ImageEvent.LOADED"
},
canvas.ui.Image = function(t, e, a, s) {
    canvas.ui.Component.call(this),
    this.smoothing = null == s || s,
    this.ready = !1,
    e && a && (this.wall = new canvas.px.Mask(e,a,0,0),
    this.addChild(this.wall)),
    t && this.setImage(t)
}
,
canvas.ui.Image.prototype = Object.create(canvas.ui.Component.prototype),
canvas.ui.Image.prototype.setImage = function(t) {
    var e;
    this.url !== t && (this.url = t,
    e = canvas.ResourceLoader.getTexture(t),
    this.sprite || (this.sprite = new canvas.px.Sprite,
    this.addChild(this.sprite)),
    e == canvas.px.TextureEmpty ? (canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerLoaded, this),
    canvas.ResourceLoader.add([t])) : (this.setTexture(e),
    this._ready()))
}
,
canvas.ui.Image.prototype.setTexture = function(t) {
    this.smoothing || (t.baseTexture.scaleMode = canvas.px.ScaleMode.NEAREST),
    this.sprite.texture = t
}
,
canvas.ui.Image.prototype.clear = function() {
    this.url = "",
    this.sprite && (this.sprite.texture = canvas.px.TextureEmpty)
}
,
canvas.ui.Image.prototype.handlerLoaded = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerLoaded, this),
    this.setTexture(canvas.ResourceLoader.getTexture(this.url)),
    this._ready()
}
,
canvas.ui.Image.prototype._ready = function() {
    this.ready = !0,
    canvas.EventManager.dispatchEvent(canvas.ui.ImageEvent.EVENT_LOADED, this),
    this.wall && (this.removeChild(this.wall),
    this.wall.graphicsData && this.wall.destroy({
        children: !0
    }),
    delete this.wall)
}
,
canvas.ui.ScrollEvent = {
    EVENT_SCROLL: "ScrollEvent.EVENT_SCROLL"
},
canvas.ui.ScrollType = {
    HORIZONTAL: "h",
    VERTICAL: "v"
},
canvas.ui.Scroll = function(t, e, a, s, i, n, o, r, c, p, h) {
    this._min = 0,
    Object.defineProperty(this, "min", {
        get: function() {
            return this._min
        },
        set: function(t) {
            t = t || 0,
            this._min = t > this.max ? this.max : t,
            this.current = this.current
        }
    }),
    this._max = 100,
    Object.defineProperty(this, "max", {
        get: function() {
            return this._max
        },
        set: function(t) {
            t = t || 0,
            this._max = t < this.min ? this.min : t,
            this.current = this.current
        }
    }),
    this._step = 1,
    Object.defineProperty(this, "step", {
        get: function() {
            return this._step
        },
        set: function(t) {
            this._step = t
        }
    }),
    this._current = 0,
    Object.defineProperty(this, "current", {
        get: function() {
            return this._current
        },
        set: function(t) {
            t = t || 0,
            this._current = t < this.min ? this.min : t > this.max ? this.max : t,
            this.update()
        }
    }),
    this._backPadding = 0,
    Object.defineProperty(this, "backPadding", {
        get: function() {
            return this._backPadding
        },
        set: function(t) {
            this._backPadding = t,
            this.update()
        }
    }),
    this._padding = 0,
    Object.defineProperty(this, "padding", {
        get: function() {
            return this._padding
        },
        set: function(t) {
            this._padding = t,
            this.update()
        }
    }),
    canvas.ui.Component.call(this),
    null == o && (o = !1),
    null == r && (r = !0),
    null == c && (c = !0),
    this.type = t,
    this.useDrag = o,
    this.useWheel = r,
    this.minusView = e,
    this.plusView = a,
    this.backView = s,
    this.dragView = i,
    this.wheelTarget = n,
    this.dragTarget = h || this.wheelTarget,
    this.hidePlusMinus = p || !1,
    this.backView && (this.addChild(this.backView),
    this.backView.interactive = !0),
    this.dragDirection = !0,
    this.wasDragged = !1,
    this.shape = new canvas.px.Graphics,
    this.addChild(this.shape),
    this.shape.interactive = !!this.backView,
    this.shape.click = this.shapeClickHandler.bind(this),
    this.dragView && (this.addChild(this.dragView),
    this.dragView.interactive = !0,
    this.dragView.buttonMode = !0,
    this.dragView.mousedown = this.handlerDragDown.bind(this)),
    this.minusView && (this.addChild(this.minusView),
    this.minusView.interactive = !0,
    this.minusView.buttonMode = !0,
    this.minusView.click = this.minusClickHandler.bind(this)),
    this.plusView && (this.addChild(this.plusView),
    this.plusView.interactive = !0,
    this.plusView.buttonMode = !0,
    this.plusView.click = this.plusClickHandler.bind(this)),
    this.wheelTarget && (this.wheelTarget.interactive = !0,
    this.wheelTarget.mouseover = this.handlerWheelTargetOver.bind(this),
    this.wheelTarget.mouseout = this.handlerWheelTargetOut.bind(this),
    o && (this.dragTarget.interactive = !0,
    this.dragTarget.mousedown = this.handlerDragDown.bind(this))),
    c && canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.stageOutHandler, this)
}
,
canvas.ui.Scroll.prototype = Object.create(canvas.ui.Component.prototype),
canvas.ui.Scroll.prototype.update = function() {
    this.type == canvas.ui.ScrollType.VERTICAL ? (this.backView && (this.backView.width = this._width,
    this.backView.height = this._height - 2 * this._backPadding,
    this.backView.y = this._backPadding),
    this.shape.clear(),
    this.shape.beginFill(0, 0),
    this.shape.lineStyle(0, 0, 0),
    this.shape.drawRect(0, 0, this._width, this._height - 2 * this._padding),
    this.shape.endFill(),
    this.shape.y = this._padding,
    this.minusView && (this.minusView.x = Math.round(.5 * (this._width - this.minusView.width))),
    this.plusView && (this.plusView.x = Math.round(.5 * (this._width - this.plusView.width)),
    this.plusView.y = this._height - this.plusView.height),
    this.dragView && this.dragView.position.set(Math.round(.5 * (this._width - this.dragView.width)), this._padding + Math.round((this.shape.height - this.dragView.height) * ((this.current - this.min) / (this.max - this.min))))) : (this.backView && (this.backView.height = this._height,
    this.backView.width = this._width - 2 * this._backPadding,
    this.backView.x = this._backPadding),
    this.shape.clear(),
    this.shape.beginFill(0, 0),
    this.shape.lineStyle(0, 0, 0),
    this.shape.drawRect(0, 0, this._width - 2 * this._padding, this._height),
    this.shape.endFill(),
    this.shape.x = this._padding,
    this.minusView && (this.minusView.y = Math.round(.5 * (this._height - this.minusView.height))),
    this.plusView && (this.plusView.y = Math.round(.5 * (this._height - this.plusView.height)),
    this.plusView.x = this._width - this.plusView.width),
    this.dragView && this.dragView.position.set(this._padding + Math.round((this.shape.width - this.dragView.width) * ((this.current - this.min) / (this.max - this.min))), Math.round(.5 * (this._height - this.dragView.height)))),
    this.minusView && (2 == this.hidePlusMinus ? this.minusView.enabled = !this.hidePlusMinus || this.current != this.min : this.minusView.visible = !this.hidePlusMinus || this.current != this.min),
    this.plusView && (2 == this.hidePlusMinus ? this.plusView.enabled = !this.hidePlusMinus || this.current != this.max : this.plusView.visible = !this.hidePlusMinus || this.current != this.max),
    this.dragView && (this.dragView.visible = !this.isDisabled(),
    this.dragView.__height = this.dragView.height,
    this.dragView.__width = this.dragView.width)
}
,
canvas.ui.Scroll.prototype.minusClickHandler = function() {
    this.current -= this.step,
    canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this)
}
,
canvas.ui.Scroll.prototype.plusClickHandler = function() {
    this.current += this.step,
    canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this)
}
,
canvas.ui.Scroll.prototype.shapeClickHandler = function(t) {
    t = this.shape.toLocal(new canvas.px.Point(t.data.global.x,t.data.global.y));
    this.type == canvas.ui.ScrollType.VERTICAL ? this.current = this.min + Math.round(t.y / this.shape.height * (this.max - this.min)) : this.current = this.min + Math.round(t.x / this.shape.width * (this.max - this.min)),
    canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this)
}
,
canvas.ui.Scroll.prototype.handlerDragDown = function(t) {
    this.isDraggingContent = t.currentTarget != this.dragView,
    this.dragDirection = t.currentTarget == this.dragView,
    this.type == canvas.ui.ScrollType.VERTICAL ? (this.startDragPosition = t.data.global.y,
    this.startDragViewPosition = this.dragView.y) : (this.startDragPosition = t.data.global.x,
    this.startDragViewPosition = this.dragView.x),
    this.startCurrent = this.current,
    this.shape.mousemove = this.handlerDragMove.bind(this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.handlerStageMouseUp, this),
    this.wasDragged = !1
}
,
canvas.ui.Scroll.prototype.handlerDragMove = function(t) {
    var e, a = this.type == canvas.ui.ScrollType.VERTICAL ? (a = this.startDragPosition - t.data.global.y,
    e = this.dragDirection ? this.startDragViewPosition - a : this.startDragViewPosition + a,
    this.isDraggingContent ? this.startCurrent + a : Math.round((e - this.padding) / (this.shape.height - this.dragView.__height) * (this.max - this.min))) : (a = this.startDragPosition - t.data.global.x,
    e = this.dragDirection ? this.startDragViewPosition - a : this.startDragViewPosition + a,
    this.isDraggingContent ? this.startCurrent + a : Math.round((e - this.padding) / (this.shape.width - this.dragView.__width) * (this.max - this.min)));
    !this.wasDragged && 2 < Math.abs(e - this.startDragViewPosition) && (this.wasDragged = !0),
    this.current != a && (this.current = a,
    canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this))
}
,
canvas.ui.Scroll.prototype.handlerStageMouseUp = function(t) {
    this.isDraggingContent = !1,
    this.shape.mousemove = null,
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.handlerStageMouseUp, this),
    this.wasDragged = !1
}
,
canvas.ui.Scroll.prototype.handlerWheelTargetOver = function() {
    this.useWheel && canvas.EventManager.addEventListener(canvas.Event.STAGE_WHEEL, null, this.mouseWheelHandler, this)
}
,
canvas.ui.Scroll.prototype.handlerWheelTargetOut = function() {
    this.useWheel && canvas.EventManager.removeEventListener(canvas.Event.STAGE_WHEEL, null, this.mouseWheelHandler, this)
}
,
canvas.ui.Scroll.prototype.mouseWheelHandler = function(t) {
    this.wheelTarget.parent && (0 < t.params.wheelDelta ? this.minusClickHandler() : this.plusClickHandler())
}
,
canvas.ui.Scroll.prototype.stageOutHandler = function(t) {
    this.handlerStageMouseUp()
}
,
canvas.ui.Scroll.prototype.isDisabled = function() {
    return this.min == this.max
}
,
canvas.ui.Scroll.prototype.destroy = function() {
    this.minusView && (this.minusView.click = null),
    this.plusView && (this.plusView.click = null),
    this.dragView && (this.dragView.mousedown = null),
    this.wheelTarget && (this.wheelTarget.mouseover = null,
    this.wheelTarget.mouseout = null,
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_WHEEL, null, this.mouseWheelHandler, this)),
    this.dragTarget && (this.dragTarget.mousedown = null),
    this.shape.click = null,
    this.shape.mousemove = null,
    this.handlerStageMouseUp(),
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.stageOutHandler, this),
    canvas.ui.Component.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.ui.HtmlTextEvent = {
    EVENT_LINK: "HtmlTextEvent.EVENT_LINK"
},
canvas.ui.HtmlText = function(t, e, a, s, i, n, o, r, c, p) {
    this._hAlign = "left",
    Object.defineProperty(this, "hAlign", {
        get: function() {
            return this._hAlign
        },
        set: function(t) {
            this._hAlign = t,
            this.update()
        }
    }),
    this._vAlign = "top",
    Object.defineProperty(this, "vAlign", {
        get: function() {
            return this._vAlign
        },
        set: function(t) {
            this._vAlign = t,
            this.update()
        }
    }),
    this._lineSpace = 2,
    Object.defineProperty(this, "lineSpace", {
        get: function() {
            return this._lineSpace
        },
        set: function(t) {
            this._lineSpace = t,
            this.update()
        }
    }),
    this._text = "",
    Object.defineProperty(this, "text", {
        get: function() {
            return this._text
        },
        set: function(t) {
            this._text = t.replace(/<br>/gi, "<br/>"),
            this.make()
        }
    }),
    Object.defineProperty(this, "color", {
        get: function() {
            return this._color
        },
        set: function(t) {
            this._color = t,
            this.make()
        }
    }),
    this._border = !1,
    Object.defineProperty(this, "border", {
        get: function() {
            return this._border
        },
        set: function(t) {
            this._border = t,
            this._border && !this.borderImage && (this.borderImage = new canvas.px.Graphics,
            this.addChild(this.borderImage)),
            this.update()
        }
    }),
    this._backColor = 0,
    Object.defineProperty(this, "backColor", {
        get: function() {
            return this._backColor
        },
        set: function(t) {
            this._backColor = t,
            this.back || this.createBack(),
            this.update()
        }
    }),
    this._backAlpha = 0,
    Object.defineProperty(this, "backAlpha", {
        get: function() {
            return this._backAlpha
        },
        set: function(t) {
            this._backAlpha = t,
            this.back || this.createBack(),
            this.update()
        }
    }),
    Object.defineProperty(this, "textWidth", {
        get: function() {
            return Math.round(this.container.width)
        },
        set: function(t) {}
    }),
    Object.defineProperty(this, "textHeight", {
        get: function() {
            return Math.round(this.container.height)
        },
        set: function(t) {}
    }),
    canvas.ui.Component.call(this),
    null == t && (t = canvas.Const.FONT_TAHOMA_12),
    null == e && (e = t + "_BOLD"),
    null == a && (a = 16777215),
    this.font = t,
    this.boldFont = e,
    this._color = a,
    this._width = null != s ? s : 100,
    this._height = null != i ? i : 100,
    null != o && (this._vAlign = o),
    null != n && (this._hAlign = n),
    null != r && (this.createBack(),
    this._backColor = r),
    c && (this._backAlpha = c),
    null != p && p && this.createMask(),
    this.lineHeight = canvas.px.BitmapText.fonts[this.font].lineHeight,
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.click = this.clickHandler.bind(this)
}
,
canvas.ui.HtmlText.prototype = Object.create(canvas.ui.Component.prototype),
canvas.ui.HtmlText.prototype.make = function() {
    canvas.Functions.destroyChildren(this.container),
    this.style = {},
    this.style.font = this.font,
    this.style.color = this.color;
    var t = (new DOMParser).parseFromString("<root>" + this.text + "</root>", "text/xml");
    this.parseList(t.children[0].childNodes, this.style),
    this.update()
}
,
canvas.ui.HtmlText.prototype.parseList = function(t, e) {
    for (var a, s, i, n, o, r, c, p, h = t.length, l = 0; l < h; l++) {
        switch ((s = t[l]).nodeName) {
        case "font":
            c = canvas.Functions.cloneSimpleObject(e),
            s.attributes.color && (c.color = parseInt(s.attributes.color.value.substr(1), 16)),
            s.attributes.face && (c.font = s.attributes.face.value),
            this.parseList(s.childNodes, c);
            break;
        case "b":
            (c = canvas.Functions.cloneSimpleObject(e)).font = this.boldFont,
            this.parseList(s.childNodes, c);
            break;
        case "img":
            s.attributes.src && ((n = s.attributes.atlas ? new canvas.px.Sprite(canvas.ResourceLoader.getImage(s.attributes.atlas.value, s.attributes.src.value)) : new canvas.ui.Image(s.attributes.src.value,s.attributes.width ? parseInt(s.attributes.width.value) : 20,s.attributes.height ? parseInt(s.attributes.height.value) : 20)).image = !0,
            n.xOffset = s.attributes.xOffset ? parseInt(s.attributes.xOffset.value) : 0,
            n.yOffset = s.attributes.yOffset ? parseInt(s.attributes.yOffset.value) : 0,
            n.xyScale = s.attributes.scale ? parseFloat(s.attributes.scale.value) : 1,
            e.href ? (n.href = e.href,
            n.target = e.target,
            n.interactive = !0,
            n.buttonMode = !0) : n.interactive = !1,
            this.container.addChild(n));
            break;
        case "a":
            (c = canvas.Functions.cloneSimpleObject(e)).normal = s.attributes.normal && parseInt(s.attributes.normal.value),
            s.attributes.href ? c.href = s.attributes.href.value : c.href = "#",
            s.attributes.target && (c.target = s.attributes.target.value),
            this.parseList(s.childNodes, c);
            break;
        case "br":
            (n = new canvas.px.Sprite(canvas.px.TextureEmpty)).br = !0,
            n.charCode = 32,
            this.container.addChild(n)
        }
        if (s.nodeValue) {
            a = (i = s.nodeValue).length,
            o = canvas.px.BitmapText.fonts[e.font];
            for (var d = 0; d < a; d++)
                p = i.charCodeAt(d),
                (r = o.chars[p]) && ((n = new canvas.px.Sprite(r.texture)).xOffset = r.xOffset,
                n.yOffset = r.yOffset,
                n.xAdvance = r.xAdvance,
                n.tint = e.color,
                n.charCode = p,
                e.href && (n.href = e.href,
                n.target = e.target,
                e.normal || ((p = new canvas.px.Graphics).lineStyle(1, e.color, 1),
                p.beginFill(),
                p.moveTo(0, o.lineHeight - n.yOffset),
                p.lineTo(this.getWidth(n) + 1, o.lineHeight - n.yOffset),
                p.endFill(),
                n.addChildAt(p, 0)),
                "#" != e.href && (n.interactive = !0,
                n.buttonMode = !0)),
                this.container.addChild(n))
        }
    }
    (n = this.container.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty))).charCode = 32
}
,
canvas.ui.HtmlText.prototype.update = function() {
    var t, e, a, s, i, n, o = this.container.children.length, r = 0, c = 0, p = 0, h = [], l = [], d = [], v = 0, u = 0;
    for (h.push(l),
    a = 0; a < o; a++)
        (e = this.container.children[a]).visible = !0,
        32 == e.charCode && (c >= this._width && (h[h.length - 1] = l,
        l = [],
        h.push(l),
        c = v),
        l = l.concat(d),
        d = [],
        v = 0),
        e.br && (l = l.concat(d),
        d = [],
        v = 0,
        h[h.length - 1] = l,
        l = [],
        h.push(l),
        c = v),
        d.push(e),
        c += this.getWidth(e),
        v += this.getWidth(e);
    for (h[h.length - 1] = l.concat(d),
    o = h.length,
    a = p = c = 0; a < o; a++) {
        for (t = (l = h[a]).length,
        1 == l.length && l[0].br && (p += this.lineHeight),
        s = 0; s < t; s++)
            e = l[s],
            0 != s || 32 != e.charCode ? (e.position.set(c + e.xOffset, p + e.yOffset),
            e.xyScale && e.scale.set(e.xyScale, e.xyScale),
            c += this.getWidth(e),
            r = Math.max(r, e.height),
            e.image || (u = Math.max(u, e.height))) : e.visible = !1;
        switch (n = Math.round(.5 * (r - u)),
        this.hAlign) {
        case "center":
            i = Math.round(.5 * (this._width - c));
            break;
        case "right":
            i = Math.round(this._width - c);
            break;
        default:
            i = 0
        }
        for (s = 0; s < t; s++)
            (e = l[s]).x += i,
            e.image ? e.y += Math.round(.5 * (r - e.height)) : e.y += n;
        c = 0,
        p += r + this.lineSpace,
        u = r = 0
    }
    switch (this.vAlign) {
    case "top":
        this.container.y = 0;
        break;
    case "middle":
        this.container.y = Math.round(.5 * (this._height - this.container.height));
        break;
    case "bottom":
        this.container.y = Math.round(this._height - this.container.height)
    }
    this.border && (this.borderImage.clear(),
    this.borderImage.beginFill(0, 0),
    this.borderImage.lineStyle(2, 16711680, 1),
    this.borderImage.drawRect(-2, -2, this._width + 4, this._height + 4),
    this.borderImage.endFill()),
    this.back && (this.back.clear(),
    this.back.beginFill(this.backColor, this.backAlpha),
    this.back.drawRect(0, 0, this._width, this._height),
    this.back.endFill()),
    this.msk && (this.msk.clear(),
    this.msk.beginFill(0, 1),
    this.msk.drawRect(0, 0, this._width, this._height),
    this.msk.endFill())
}
,
canvas.ui.HtmlText.prototype.createBack = function() {
    this.back = new canvas.px.Graphics,
    this.addChildAt(this.back, 0)
}
,
canvas.ui.HtmlText.prototype.getWidth = function(t) {
    return Math.round(t.xAdvance || t.width)
}
,
canvas.ui.HtmlText.prototype.clickHandler = function(t) {
    t.target.href && ("event:" == t.target.href.substr(0, 6) ? canvas.EventManager.dispatchEvent(canvas.ui.HtmlTextEvent.EVENT_LINK, this, t.target.href.substr(6)) : canvas.Functions.navigateToURL(t.target.href, t.target.target || "_blank"))
}
,
canvas.ui.HtmlText.prototype.createMask = function() {
    this.msk = new canvas.px.Graphics,
    this.addChildAt(this.msk, 0),
    this.mask = this.msk
}
,
canvas.ui.PagerEvent = {
    EVENT_CHANGE: "PagerEvent.CHANGE"
},
canvas.ui.Pager = function(t, e, a, s, i, n) {
    Object.defineProperty(this, "startIndex", {
        get: function() {
            return this.currentPage * this.onPage
        }
    }),
    Object.defineProperty(this, "endIndex", {
        get: function() {
            return this.currentPage * this.onPage + this.onPage
        }
    }),
    this._paddingNumbersLeft = 5,
    Object.defineProperty(this, "paddingNumbersLeft", {
        get: function() {
            return this._paddingNumbersLeft
        },
        set: function(t) {
            this._paddingNumbersLeft = t,
            this.update()
        }
    }),
    this._paddingNumbersRight = 5,
    Object.defineProperty(this, "paddingNumbersRight", {
        get: function() {
            return this._paddingNumbersRight
        },
        set: function(t) {
            this._paddingNumbersRight = t,
            this.update()
        }
    }),
    this._padding = 2,
    Object.defineProperty(this, "padding", {
        get: function() {
            return this._padding
        },
        set: function(t) {
            this._padding = t,
            this.update()
        }
    }),
    this._showCount = 5,
    Object.defineProperty(this, "showCount", {
        get: function() {
            return this._showCount
        },
        set: function(t) {
            this._showCount = t;
            for (var e, a = this.numbersContainer.numChildren, s = Math.max(this._showCount, a - 1), i = 0; i < s; i++)
                i < this._showCount && a <= i && ((e = this.fieldTemplate.clone()).name = "field" + i,
                e.interactive = !0,
                e.buttonMode = !0,
                e.text = "",
                this.numbersContainer.addChild(e)),
                i >= this._showCount && i < a && (e = this.numbersContainer.removeChildAt(i)).destroy();
            this.update()
        }
    }),
    this._currentPage = 0,
    Object.defineProperty(this, "currentPage", {
        get: function() {
            return this._currentPage
        },
        set: function(t) {
            this._currentPage = t < 0 ? 0 : t >= this.numPages ? this.numPages - 1 : t,
            this.update()
        }
    }),
    canvas.ui.Component.call(this),
    this.fieldTemplate = i,
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.buttonsContainer = new canvas.px.Container,
    this.container.addChild(this.buttonsContainer),
    this.buttonHome = new canvas.ui.SimpleButton(t),
    this.buttonEnd = new canvas.ui.SimpleButton(e),
    this.buttonMinus = new canvas.ui.SimpleButton(a),
    this.buttonPlus = new canvas.ui.SimpleButton(s),
    this.buttonsContainer.addChild(this.buttonHome),
    this.buttonsContainer.addChild(this.buttonEnd),
    this.buttonsContainer.addChild(this.buttonMinus),
    this.buttonsContainer.addChild(this.buttonPlus),
    this.buttonsContainer.visible = !1,
    this.numbersContainer = new canvas.px.Container,
    this.container.addChild(this.numbersContainer),
    this.showCount = null == n ? 5 : n,
    this.container.addChild(this.numbersContainer),
    this.click = this._clickHandler.bind(this)
}
,
canvas.ui.Pager.prototype = Object.create(canvas.ui.Component.prototype),
canvas.ui.Pager.prototype.init = function(t, e) {
    this.numPages = Math.ceil(t / e),
    this.currentPage = 0,
    this.onPage = e,
    this.update()
}
,
canvas.ui.Pager.prototype.update = function() {
    var t, e;
    0 == this._currentPage ? (this.buttonHome.interactive = !1,
    this.buttonHome.alpha = .5,
    this.buttonMinus.interactive = !1,
    this.buttonMinus.alpha = .5) : (this.buttonHome.interactive = !0,
    this.buttonHome.alpha = 1,
    this.buttonMinus.interactive = !0,
    this.buttonMinus.alpha = 1),
    this._currentPage == this.numPages - 1 ? (this.buttonEnd.interactive = !1,
    this.buttonEnd.alpha = .5,
    this.buttonPlus.interactive = !1,
    this.buttonPlus.alpha = .5) : (this.buttonEnd.interactive = !0,
    this.buttonEnd.alpha = 1,
    this.buttonPlus.interactive = !0,
    this.buttonPlus.alpha = 1);
    var a, s = 0;
    for (this.numPages > this._showCount ? (this.buttonsContainer.visible = !0,
    t = this._currentPage - Math.round(.5 * (this._showCount - 1))) : (t = 0,
    this.numPages,
    this.buttonsContainer.visible = !1),
    t < 0 && (t = 0),
    this._showCount,
    e = 0; e < this._showCount; e++)
        (a = this.numbersContainer.getChildAt(e)).visible = !1,
        t + e >= this.numPages || (a.visible = !0,
        a.text = (t + e + 1).toString(),
        a.x = s,
        s += a.width + this._padding,
        t + e == this._currentPage ? (a.color = 7026733,
        a.interactive = !1) : (a.color = 12713984,
        a.interactive = !0));
    this.buttonMinus.x = this.buttonHome.width + this._padding,
    this.numbersContainer.x = Math.round(this.buttonMinus.x + this.buttonMinus.width + this.paddingNumbersLeft),
    this.buttonPlus.x = this.numbersContainer.x + this.numbersContainer.width + this.paddingNumbersRight,
    this.buttonEnd.x = this.buttonPlus.x + this.buttonPlus.width + this._padding,
    this.numbersContainer.y = Math.round(.5 * (Math.max(this.buttonsContainer.height, this.numbersContainer.height) - this.numbersContainer.height)),
    this.container.x = -Math.round(.5 * this.buttonsContainer.width)
}
,
canvas.ui.Pager.prototype._clickHandler = function(t) {
    var e;
    this.buttonHome.interactive && canvas.Functions.findParent(this.buttonHome, t.target) ? (this.currentPage = 0,
    canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage)) : this.buttonMinus.interactive && canvas.Functions.findParent(this.buttonMinus, t.target) ? (this.currentPage--,
    canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage)) : this.buttonEnd.interactive && canvas.Functions.findParent(this.buttonEnd, t.target) ? (this.currentPage = this.numPages - 1,
    canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage)) : this.buttonPlus.interactive && canvas.Functions.findParent(this.buttonPlus, t.target) ? (this.currentPage++,
    canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage)) : t.target.name && "field" == t.target.name.substr(0, 5) && ((e = this._currentPage - Math.round(.5 * (this._showCount - 1))) < 0 && (e = 0),
    this.currentPage = parseInt(t.target.name.substr(5)) + e,
    canvas.EventManager.dispatchEvent(canvas.ui.PagerEvent.EVENT_CHANGE, this, this.currentPage))
}
,
canvas.ui.Pager.prototype.destroy = function() {
    this.click = null,
    canvas.ui.Component.prototype.destroy.call(this)
}
,
canvas.ui.InputEvent = {
    EVENT_CHANGE: "InputEvent.CHANGE"
},
canvas.ui.Input = function(t, e, a, s, i) {
    this._color = 5191459,
    Object.defineProperty(this, "color", {
        get: function() {
            return this._color
        },
        set: function(t) {
            this._color = t,
            this.input.style.color = t
        }
    }),
    this._parent = null,
    Object.defineProperty(this, "parent", {
        get: function() {
            return this._parent
        },
        set: function(t) {
            this._parent = t,
            this._parent ? (this.interval = setInterval(this.handlerEnterFrame.bind(this), 10),
            this.input.style.display = "block",
            this.handlerEnterFrame(),
            this.lastPoint.x = void 0,
            this.lastPoint.y = void 0) : (this.interval && clearInterval(this.interval),
            this.input.style.display = "none")
        }
    }),
    Object.defineProperty(this, "text", {
        get: function() {
            return this.input.value
        },
        set: function(t) {
            this.input.value = t
        }
    }),
    Object.defineProperty(this, "align", {
        get: function() {
            return this.input.style["text-align"]
        },
        set: function(t) {
            this.input.style["text-align"] = t
        }
    }),
    this._width = 0,
    Object.defineProperty(this, "width", {
        get: function() {
            return this._width
        },
        set: function(t) {
            this._width = t,
            this.input.style.width = this._width * this.scale
        }
    }),
    Object.defineProperty(this, "bold", {
        set: function(t) {
            this.input.style["font-weight"] = t ? "bold" : "normal"
        }
    }),
    this._scale = 1,
    Object.defineProperty(this, "scale", {
        get: function() {
            return this._scale
        },
        set: function(t) {
            this._scale = t,
            this.lastPoint.x = void 0,
            this.lastPoint.y = void 0,
            this.input && (this.width = this.width,
            this.input.style.fontSize = Math.floor(12 * this.scale))
        }
    }),
    null == e && (e = "left"),
    null == a && (a = 100),
    this.x = 0,
    this.y = 0,
    this.dx = s || 0,
    this.dy = i || 0,
    this.input = document.createElement("input"),
    this.input.type = "text",
    this.input.style = "border: none;background-color: transparent; height:14px; position:absolute;font-size: 12px;font-family: Tahoma;color:#ffffff;text-align: " + e + ";outline: none;overflow: hidden;",
    this.width = a,
    this.input.value = "",
    this.input.oninput = this.changeHandler.bind(this),
    t.appendChild(this.input),
    this.lastPoint = new canvas.px.Point(-1e3,-1e3)
}
,
canvas.ui.Input.prototype.changeHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this, this.input.value)
}
,
canvas.ui.Input.prototype.handlerEnterFrame = function(t) {
    var e;
    this.parent && (e = this.parent.toGlobal(new canvas.px.Point(0,0)),
    this.lastPoint.x == e.x && this.lastPoint.y == e.y && !t || (this.lastPoint.x = e.x,
    this.lastPoint.y = e.y,
    this.input.style.left = e.x + this.x * this.scale + this.dx,
    this.stageHeight && (this.input.style.bottom = this.stageHeight - e.y - this.y * this.scale + this.dy)))
}
,
canvas.ui.ListEvent = {
    EVENT_SELECT: "ListEvent.SELECT"
},
canvas.ui.ListType = {
    VERTICAL: "ListType.VERTICAL",
    HORIZONTAL: "ListType.HORIZONTAL"
},
canvas.ui.List = function(t, e) {
    this._scrollMaxAdd = 0,
    Object.defineProperty(this, "scrollMaxAdd", {
        get: function() {
            return this._scrollMaxAdd
        },
        set: function(t) {
            this._scrollMaxAdd = t,
            this.update()
        }
    }),
    this._paddingV = 5,
    Object.defineProperty(this, "paddingV", {
        get: function() {
            return this._paddingV
        },
        set: function(t) {
            this._paddingV = t,
            this.update()
        }
    }),
    this._paddingH = 5,
    Object.defineProperty(this, "paddingH", {
        get: function() {
            return this._paddingH
        },
        set: function(t) {
            this._paddingH = t,
            this.update()
        }
    }),
    this._scrollPadding = 0,
    Object.defineProperty(this, "scrollPadding", {
        get: function() {
            return this._scrollPadding
        },
        set: function(t) {
            this._scrollPadding = t,
            this.update()
        }
    }),
    this._cellsCount = 2,
    Object.defineProperty(this, "cellsCount", {
        get: function() {
            return this._cellsCount
        },
        set: function(t) {
            this._cellsCount = t,
            this.update()
        }
    }),
    this._scroll = null,
    Object.defineProperty(this, "scroll", {
        get: function() {
            return this._scroll
        },
        set: function(t) {
            this._scroll && canvas.EventManager.removeEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this._scroll, this.scrollHandler, this),
            this._scroll = t,
            this._scroll && canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this._scroll, this.scrollHandler, this)
        }
    }),
    canvas.ui.Component.call(this),
    this._cellsCount = e || 2,
    this.type = t || canvas.ui.ListType.VERTICAL,
    this.multiSelect = !1,
    this.virtual = !0,
    this.reverseLayers = !1,
    this.autoDestroy = !0,
    this.items = [],
    this.mainContainer = new canvas.px.Container,
    this.wall = new canvas.px.Mask,
    this.mainContainer.addChild(this.wall),
    this.container = new canvas.px.Container,
    this.mainContainer.addChild(this.container),
    this.msk = new canvas.px.Mask,
    this.mainContainer.addChild(this.msk),
    this.mainContainer.mask = this.msk,
    this.addChild(this.mainContainer)
}
,
canvas.ui.List.prototype = Object.create(canvas.ui.Component.prototype),
canvas.ui.List.prototype.add = function(t, e) {
    null == e && (e = !0),
    this.items.push(t),
    e && this.update()
}
,
canvas.ui.List.prototype.remove = function(t, e) {
    null == e && (e = !0);
    var a = this.items.indexOf(t);
    0 <= a && this.items.splice(a, 1),
    e && this.update(),
    autoDestroy && t.destroy()
}
,
canvas.ui.List.prototype.addAt = function(t, e, a) {
    null == a && (a = !0),
    this.items[t] = e,
    a && this.update()
}
,
canvas.ui.List.prototype.removeAt = function(t, e) {
    null == e && (e = !0);
    var a = this.items[t];
    this.items.splice(t, 1),
    e && this.update(),
    autoDestroy && a.destroy()
}
,
canvas.ui.List.prototype.clear = function(t) {
    if (null == t && (t = !0),
    this.autoDestroy)
        for (var e = this.items.length, a = 0; a < e; a++)
            this.items[a].destroy();
    this.items = [],
    t && this.update()
}
,
canvas.ui.List.prototype.update = function() {
    this.wall.setSize(this._width, this._height),
    this.msk.setSize(this._width, this._height);
    var t, e = this.items.length;
    this.container.removeChildren();
    for (var a = 0, s = 0, i = 0, n = 0; n < e; n++)
        a == this.cellsCount && (s += i,
        i = a = 0,
        0),
        t = this.items[n],
        this.reverseLayers ? this.container.addChildAt(t, 0) : this.container.addChild(t),
        i = this.type == canvas.ui.ListType.VERTICAL ? (t.position.set(a * (t._width + this.paddingH), s),
        Math.max(i, t._height + this.paddingV)) : (t.position.set(s, a * (t._height + this.paddingV)),
        Math.max(i, t._width + this.paddingH)),
        a++;
    this._scroll && (this.type == canvas.ui.ListType.VERTICAL ? this.container.height > this._height ? (this.addChild(this.scroll),
    this.scroll.setSize(0, this._height),
    this.scroll.position.set(this._width - this.scroll._width + this.scrollPadding, 0),
    this.scroll.max = this.container.height - this._height + this.scrollMaxAdd,
    this.scroll.dragView.setSize(0, Math.max(16, Math.round((this._height - 32) * (this._height / this.container.height)))),
    this.scroll.current = this.scroll.current) : (this.scroll.max = 0,
    this.contains(this.scroll) && this.removeChild(this.scroll)) : this.container.width > this._width ? (this.addChild(this.scroll),
    this.scroll.setSize(this._width, 0),
    this.scroll.position.set(0, this._height - this.scroll._height + this.scrollPadding),
    this.scroll.max = this.container.width - this._width + this.scrollMaxAdd,
    this.scroll.dragView.setSize(Math.max(16, Math.round((this._width - 32) * (this._width / this.container.width))), 0),
    this.scroll.current = this.scroll.current) : (this.scroll.max = 0,
    this.contains(this.scroll) && this.removeChild(this.scroll)),
    this.scrollHandler())
}
,
canvas.ui.List.prototype.scrollHandler = function(t) {
    this.type == canvas.ui.ListType.VERTICAL ? this.container.y = -this.scroll.current : this.container.x = -this.scroll.current;
    for (var e, a = this.items.length, s = 0; s < a; s++)
        e = this.items[s],
        this.type == canvas.ui.ListType.VERTICAL ? e.y >= this.scroll.current - e._height && e.y <= this.scroll.current + this._height ? this.reverseLayers ? this.container.addChildAt(e, 0) : this.container.addChild(e) : this.container.contains(e) && this.container.removeChild(e) : e.x >= this.scroll.current - e._width && e.x <= this.scroll.current + this._width ? this.reverseLayers ? this.container.addChildAt(e, 0) : this.container.addChild(e) : this.container.contains(e) && this.container.removeChild(e)
}
,
canvas.ui.List.prototype.select = function(t) {
    if (!this.scroll || !this.scroll.wasDragged) {
        if (this.multiSelect)
            t.selected = !t.selected;
        else
            for (var e = this.items.length, a = 0; a < e; a++)
                this.items[a].selected = this.items[a] === t;
        canvas.EventManager.dispatchEvent(canvas.ui.ListEvent.EVENT_SELECT, this, t)
    }
}
,
canvas.ui.List.prototype.getSelectedItems = function() {
    for (var t = [], e = this.items.length, a = 0; a < e; a++)
        this.items[a].selected && t.push(this.items[a]);
    return t
}
,
canvas.ui.List.prototype.destroy = function() {
    this.scroll = null,
    this.container.click = null,
    this.autoDestroy = !0,
    this.clear(),
    canvas.ui.Component.prototype.destroy.apply(this)
}
,
canvas.ui.ListRenderer = function(t, e, a) {
    this.oldData = null,
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this.oldData = this._data,
            this._data = t,
            this.update()
        }
    }),
    this._selected = !1,
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            this._selected = t,
            this.updateSelection()
        }
    }),
    canvas.ui.Component.call(this),
    this.click = this.clickHandler.bind(this),
    this.mouseover = this.overHandler.bind(this),
    this.mouseout = this.outHandler.bind(this),
    null != e && (this._width = e),
    null != a && (this._height = a),
    null != t && (this.data = t)
}
,
canvas.ui.ListRenderer.prototype = Object.create(canvas.ui.Component.prototype),
canvas.ui.ListRenderer.prototype.updateSelection = function() {}
,
canvas.ui.ListRenderer.prototype.clickHandler = function() {
    this.parent && this.parent.parent.parent && this.parent.parent.parent.select && this.parent.parent.parent.select(this)
}
,
canvas.ui.ListRenderer.prototype.overHandler = function() {}
,
canvas.ui.ListRenderer.prototype.outHandler = function() {}
,
canvas.ui.ListRenderer.prototype.destroy = function() {
    this.click = null,
    this.mouseover = null,
    this.mouseout = null,
    canvas.ui.Component.prototype.destroy.apply(this)
}
,
canvas.ui.ComboBoxEvent = {
    EVENT_SELECT: "ComboBoxEvent.SELECT",
    EVENT_OPEN: "ComboBoxEvent.OPEN",
    EVENT_CLOSE: "ComboBoxEvent.CLOSE"
},
canvas.ui.ComboBoxType = {
    UP: "UP",
    DOWN: "DOWN"
},
canvas.ui.ComboBox = function(t, e, a, s, i) {
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t,
            this.filters = t ? null : [canvas.Functions.getBlackAndWhite()],
            this.interactive = this.interactiveChildren = t,
            this.close()
        },
        configurable: !0
    }),
    this._selectedIndex = 0,
    Object.defineProperty(this, "selectedIndex", {
        get: function() {
            return this._selectedIndex
        },
        set: function(t) {
            this._selectedIndex = t,
            this.selectedItem = this.list.items[this._selectedIndex].data,
            this.update()
        }
    }),
    canvas.ui.Component.call(this),
    null == i && (i = canvas.ui.ComboBoxType.DOWN),
    this.type = i,
    this.headerBack = t,
    this.listBack = a,
    this.listRenderer = s,
    this.headerRenderer = e,
    this.addChild(this.headerBack),
    this.addChild(this.headerRenderer),
    this.list = new canvas.ui.List(canvas.ui.ListType.VERTICAL,1),
    this.listBack.addChild(this.list),
    this.headerBack.click = this.headerClickHandler.bind(this),
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.listSelectHandler, this),
    this.interactive = !0,
    this.mouseover = this.overHandler.bind(this),
    this.mouseout = this.outHandler.bind(this)
}
,
canvas.ui.ComboBox.prototype = Object.create(canvas.ui.Component.prototype),
canvas.ui.ComboBox.prototype.init = function(t) {
    this.list.clear();
    var e = t.length;
    if (0 < e)
        for (var a = 0; a < e; a++)
            this.list.add(new this.listRenderer(t[a]), !1);
    this.setSize(this._width, this._height),
    this.selectedIndex = 0
}
,
canvas.ui.ComboBox.prototype.update = function() {
    this.headerRenderer.data = this.selectedItem
}
,
canvas.ui.ComboBox.prototype.setSize = function(t, e) {
    canvas.ui.Component.prototype.setSize.apply(this, [t, e]),
    0 < t && (this.headerBack.setSize(t, 0),
    this.headerRenderer.setSize(t, 0)),
    this.list.setSize(t, e - this.headerBack.height);
    for (var a = this.list.items.length, s = 0; s < a; s++)
        this.list.items[s].setSize(this._width, 0);
    this.listBack.setSize(t, Math.min(this.list.container.height + this.list.paddingV + 4, e - this.headerBack.height)),
    this.type == canvas.ui.ComboBoxType.UP ? this.listBack.y = -this.listBack._height : this.listBack.y = this.headerBack.height
}
,
canvas.ui.ComboBox.prototype.headerClickHandler = function(t) {
    this.listBack.parent ? this.close() : this.open()
}
,
canvas.ui.ComboBox.prototype.open = function() {
    this.addChild(this.listBack),
    this.setSize(this._width, this._height),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.stageMouseUpHandler, this),
    canvas.EventManager.dispatchEvent(canvas.ui.ComboBoxEvent.EVENT_OPEN, this)
}
,
canvas.ui.ComboBox.prototype.isOpened = function() {
    return null != this.listBack.parent
}
,
canvas.ui.ComboBox.prototype.stageMouseUpHandler = function(t) {
    this.isOver || this.close()
}
,
canvas.ui.ComboBox.prototype.close = function(t) {
    this.listBack.parent && this.removeChild(this.listBack),
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.stageMouseUpHandler, this),
    canvas.EventManager.dispatchEvent(canvas.ui.ComboBoxEvent.EVENT_CLOSE, this)
}
,
canvas.ui.ComboBox.prototype.listSelectHandler = function(t) {
    t.params && (this.selectedIndex = this.list.items.indexOf(t.params),
    canvas.EventManager.dispatchEvent(canvas.ui.ComboBoxEvent.EVENT_SELECT, this, this.selectedItem),
    this.close())
}
,
canvas.ui.ComboBox.prototype.outHandler = function(t) {
    this.isOver = !1
}
,
canvas.ui.ComboBox.prototype.overHandler = function(t) {
    this.isOver = !0
}
,
canvas.ui.ComboBox.prototype.setSelectedItem = function(t, e) {
    for (var a = this.list.items.length, s = 0; s < a; s++)
        if (null != e) {
            if (this.list.items[s].data[t] === e)
                return void (this.selectedIndex = s)
        } else if (this.list.items[s].data === t)
            return void (this.selectedIndex = s)
}
,
canvas.ui.ComboBox.prototype.destroy = function() {
    this.headerBack.click = null,
    this.mouseover = null,
    this.mouseout = null,
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.stageMouseUpHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.listSelectHandler, this),
    canvas.ui.Component.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.data.Artikuls = {
    loadingCount: 0,
    get: function(t) {
        if (null == get_art_alt)
            return console.log("Warning! get_art_alt is not defined, can't get artikul info."),
            !1;
        var e = !1;
        "object" != typeof t && (t = [t],
        e = !0);
        for (var a, s = t.length, i = {}, n = 0; n < s; n++) {
            if (!(a = get_art_alt("AA_" + t[n])))
                return this.loadingCount++,
                loadArtifactArtikulsData(t, this.complete.bind(this)),
                !1;
            i[t[n]] = a
        }
        return e ? i[t[0]] : i
    },
    complete: function() {
        this.loadingCount--,
        this.loadingCount < 1 && canvas.EventManager.dispatchEvent(canvas.Event.ARTIKULS_LOADED)
    }
},
canvas.data.ItemPrototypeData = {
    EVENT_COMPLETE: "ItemPrototypeData.EVENT_COMPLETE",
    QUALITY_GREY: 0,
    QUALITY_GREEN: 1,
    QUALITY_BLUE: 2,
    QUALITY_VIOLET: 3,
    QUALITY_RED: 4,
    QUALITY_TURQUOISE: 5,
    prototypes: {},
    unParsedData: {},
    loadPrototype: function(t) {
        for (var e = (100 * Math.floor(.01 * parseInt(t))).toString(); e.length < 5; )
            e = "0" + e;
        this.unParsedData[e] || (t = canvas.Config.amfPath + "artifact_artikul_" + e + ".amf",
        this.unParsedData[t] = !0,
        canvas.ResourceLoader.add([t]),
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this))
    },
    completeHandler: function() {
        for (var t in canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this),
        this.unParsedData)
            this.parse(canvas.ResourceLoader.get(t));
        this.unParsedData = new Object,
        canvas.EventManager.dispatchEvent(this.EVENT_COMPLETE)
    },
    parse: function(t) {
        var e, a, s;
        for (s in t)
            e = t[s],
            (a = new Object).id = e.id,
            a.title = e.title,
            a.description = e.description,
            a.quality = e.quality,
            a.picture = e.picture,
            this.prototypes[a.id] = a
    },
    getItemPrototype: function(t) {
        var e = this.prototypes[t];
        return e || this.loadPrototype(t),
        e
    },
    getColorByQuality: function(t) {
        switch (parseInt(t)) {
        case this.QUALITY_GREY:
            return 6710886;
        case this.QUALITY_GREEN:
            return 3381504;
        case this.QUALITY_BLUE:
            return 3342591;
        case this.QUALITY_VIOLET:
            return 10027161;
        case this.QUALITY_RED:
            return 16711680;
        case this.QUALITY_TURQUOISE:
            return 93809;
        default:
            return 0
        }
    }
},
canvas.data.battle.AuraData = function(t, e, a) {
    this.id = t,
    this.title = e,
    this.image = a
}
,
canvas.data.battle.ComboData = function(t, e, a, s, i) {
    this.id = t,
    this.description = e,
    this.level = a,
    this.seq = s,
    this.title = i,
    this.size = this.seq.length
}
,
canvas.data.battle.EffectData = function(t, e, a) {
    this.type = t,
    this.image = e,
    this.ids = a
}
,
canvas.data.battle.EffectInfoData = function(t, e, a, s, i, n) {
    this.id = t,
    this.image = e,
    this.count = a,
    this.title = s,
    this.finishTime = i,
    this.turnsLeft = n
}
,
canvas.data.battle.EffectInfoData.prototype.equals = function(t) {
    return this.id == t.id && this.image == t.image && this.count == t.count && this.title == t.title && this.finishTime == t.finishTime && this.turnsLeft == t.turnsLeft
}
,
canvas.data.battle.EffectInfoData.prototype.add = function(t) {
    this.count += t.count,
    t.finishTime > this.finishTime && (this.finishTime = t.finishTime),
    t.turnsLeft > this.turnsLeft && (this.turnsLeft = t.turnsLeft)
}
,
canvas.data.battle.EffectInfoData.prototype.toString = function() {
    return "id=" + this.id + ", image=" + this.image + ", count=" + this.count + ", title=" + this.title + ", timeLeft=" + Math.floor(this.finishTime - Date.now() / 1e3 - canvas.app.mem.model.effectsDeltaTime) + ", turnsLeft=" + this.turnsLeft
}
,
canvas.data.battle.PersData = function() {
    this.wasChanged = !0,
    this._id = 0,
    Object.defineProperty(this, "id", {
        get: function() {
            return this._id
        },
        set: function(t) {
            this._id != t && (this._id = t,
            this.wasChanged = !0)
        }
    }),
    this._nick = "",
    Object.defineProperty(this, "nick", {
        get: function() {
            return this._nick
        },
        set: function(t) {
            this._nick != t && (this._nick = t,
            this.wasChanged = !0)
        }
    }),
    this._level = 0,
    Object.defineProperty(this, "level", {
        get: function() {
            return this._level
        },
        set: function(t) {
            this._level != t && (this._level = t,
            this.wasChanged = !0)
        }
    }),
    this._team = 0,
    Object.defineProperty(this, "team", {
        get: function() {
            return this._team
        },
        set: function(t) {
            this._team != t && (this._team = t,
            this.wasChanged = !0)
        }
    }),
    this._status = -1,
    Object.defineProperty(this, "status", {
        get: function() {
            return this._status
        },
        set: function(t) {
            this._status != t && (this._status = t,
            this.wasChanged = !0)
        }
    }),
    this._hpRatio = 1,
    Object.defineProperty(this, "hpRatio", {
        get: function() {
            return this._hpRatio
        },
        set: function(t) {
            this._hpRatio != t && (this._hpRatio = t,
            this.wasChanged = !0)
        }
    }),
    this._mpRatio = 0,
    Object.defineProperty(this, "mpRatio", {
        get: function() {
            return this._mpRatio
        },
        set: function(t) {
            this._mpRatio != t && (this._mpRatio = t,
            this.wasChanged = !0)
        }
    }),
    this._clanImage = "",
    Object.defineProperty(this, "clanImage", {
        get: function() {
            return this._clanImage
        },
        set: function(t) {
            this._clanImage != t && (this._clanImage = t,
            this.wasChanged = !0)
        }
    }),
    this._isBot = !1,
    Object.defineProperty(this, "isBot", {
        get: function() {
            return this._isBot
        },
        set: function(t) {
            this._isBot != t && (this._isBot = t,
            this.wasChanged = !0)
        }
    }),
    this._isShadow = !1,
    Object.defineProperty(this, "isShadow", {
        get: function() {
            return this._isShadow
        },
        set: function(t) {
            this._isShadow != t && (this._isShadow = t,
            this.wasChanged = !0)
        }
    }),
    this._flags = 0,
    Object.defineProperty(this, "flags", {
        get: function() {
            return this._flags
        },
        set: function(t) {
            this._flags != t && (this._flags = t,
            this.wasChanged = !0)
        }
    }),
    this._fightId = 0,
    Object.defineProperty(this, "fightId", {
        get: function() {
            return this._fightId
        },
        set: function(t) {
            this._fightId != t && (this._fightId = t,
            this.wasChanged = !0)
        }
    })
}
,
canvas.data.battle.PersData.prototype.setRatios = function(t, e, a, s) {
    this.hpRatio = e ? Math.max(0, Math.min(1, t / e)) : 0,
    this.mpRatio = s ? Math.max(0, Math.min(1, a / s)) : 0
}
,
canvas.data.battle.SkeletonData = function(t, e) {
    this.source = t,
    this.slots = {};
    for (var a = t.split(","), s = a.length, i = 0, n = 0, o = 0; o < s; o++) {
        var r = canvas.Const.SK_SLOT_NAMES[n];
        this.slots[r] || (this.slots[r] = []),
        this.slots[r].push(new canvas.data.battle.SkeletonLayerData(a[o],canvas.Const.SK_WPN_SLOT_NAMES.indexOf(r) < 0 ? e : "WPN")),
        3 <= ++i && (i = 0,
        n++)
    }
}
,
canvas.data.battle.SkeletonLayerData = function(t, e) {
    var a = t.split(";")
      , t = 65535 & a[0];
    this.colors = [0, a[1], a[2]],
    this.animation = a[3] ? canvas.Functions.extractSwfName(a[3]) : "",
    0 == t ? this.url = "" : (this.colors[0] = a[0] >> 16,
    t = "p" + canvas.Functions.setNumberLen(t, 4) + (0 < this.colors[0] ? "_" + this.colors[0] : ""),
    this.url = canvas.Config.packsPath + e + "/" + t + "/" + t + ".json")
}
,
canvas.data.clanWar.UserData = function(t, e, a, s, i, n, o, r, c) {
    this.login = t,
    this.ready = null == e || e,
    this.online = null == a || a,
    this.id = null == s ? "0" : s,
    this.hp = null == i ? -1 : i,
    this.mp = null == n ? -1 : n,
    this.voivoda = null != o && o,
    this.room = null == r ? 0 : r,
    this.delayed = null != c && c
}
,
canvas.data.cube.ItemData = function(t, e, a, s) {
    null == s && (s = 1),
    this.id = t,
    this.image = canvas.Config.artifactsPath + e,
    this.title = a,
    this.count = parseInt(s)
}
,
canvas.data.leftMenu.ItemData = function(t) {
    null != t && (this.slot = parseInt(t[0]),
    this.id = t[1],
    this.count = parseInt(t[2]),
    this.image = t[3],
    this.variant = !1,
    this.disable = !1,
    4 < t.length && (t[8] = "0" == t[8] ? "1" : t[8],
    this.cdTime = Math.max(parseInt(t[4]), canvas.app.leftMenu.Const.MIN_COOLDOWN),
    this.cdGroupId = parseInt(t[5]),
    this.cdLeft = parseInt(t[6]),
    this.disable = "1" == String(t[7]),
    this.cdType = parseInt(t[9]),
    this.variant = 1 != parseInt(t[8]),
    this.variantNum = parseInt(t[8])))
}
,
canvas.data.location.DCampaign = function() {
    this.title = "",
    this.picture = "",
    this.finishTime = 0
}
,
canvas.data.location.DEvent = function() {
    this.title = "",
    this.url = "",
    this.picture = "",
    this.description = "",
    this.finishTime = 0
}
,
canvas.data.location.DFronts = function() {
    this.frontsEnabled = !1,
    this.frontsPanelEnabled = !1,
    this.humLocs = 0,
    this.magLocs = 0,
    this.frontTitle = "",
    this.locationsData = [],
    this.currentLocationData = new canvas.data.location.DFrontsLoc,
    this.availableLocationData = null
}
,
canvas.data.location.DFrontsLoc = function() {
    this.id = "0",
    this.title = "Location",
    this.image = "images/data/areas/zg_ruin_plosh.jpg",
    this.owner = 0,
    this.status = 2,
    this.description = "Description",
    this.cooldown = 0,
    this.cooldownStart = 0,
    this.fightAvail = !0,
    this.fightID = "",
    this.weight = 0
}
,
canvas.data.location.DResurrect = function() {
    this.id = 0,
    this.title = "",
    this.enabled = !1,
    this.error = "",
    this.picture = ""
}
,
canvas.data.manor.DBuilding = function() {
    this.type = 0,
    this.level = 0,
    this.name = "",
    this.title = "",
    this.desc = "",
    this.image = "",
    this.picture = "",
    this.cost = 0,
    this.enabled = !0,
    this.destroyEnabled = !0,
    this.ownDichIndex = 0,
    this.dx = 0,
    this.dy = 0
}
,
canvas.data.manor.DBuilding.TYPE_MAIN = 1,
canvas.data.manor.DBuilding.TYPE_EXP = 2,
canvas.data.manor.DBuilding.TYPE_OBELISK = 3,
canvas.data.manor.DBuilding.TYPE_PETS = 4,
canvas.data.manor.DBuilding.TYPE_STORAGE = 5,
canvas.data.manor.DBuilding.TYPE_WORKSHOP = 6,
canvas.data.manor.DBuilding.TYPE_MAIL = 7,
canvas.data.manor.DBuilding.TYPE_HOSPITAL = 8,
canvas.data.manor.DBuilding.TYPE_MARKET = 9,
canvas.data.manor.DBuilding.TYPE_WALL = 10,
canvas.data.manor.DBuilding.TYPE_TREE = 11,
canvas.data.manor.DBuilding.TYPE_MINE1 = 12,
canvas.data.manor.DBuilding.TYPE_MINE2 = 13,
canvas.data.manor.DBuilding.TYPE_MINE3 = 14,
canvas.data.manor.DBuilding.TYPE_MAKE1 = 15,
canvas.data.manor.DBuilding.TYPE_MAKE2 = 16,
canvas.data.manor.DBuilding.TYPE_MAKE3 = 17,
canvas.data.manor.DBuilding.TYPE_PORTAL = 18,
canvas.data.manor.DBuilding.TYPE_HALLOWEEN = 19,
canvas.data.manor.DBuilding.typeIsMultiBuild = function(t) {
    return 0 <= canvas.app.manor.model.multiBuildingTypes.indexOf(t)
}
,
canvas.data.manor.DCampActiveMission = function() {
    this.id = 0,
    this.missionId = 0,
    this.type = 0,
    this.objectId = 0,
    this.pet1 = 0,
    this.pet2 = 0,
    this.pet3 = 0,
    this.stime = 0,
    this.dtime = 0
}
,
canvas.data.manor.DCampActiveMission.prototype.isResource = function() {
    return 1 <= this.type && this.type <= 3
}
,
canvas.data.manor.DCampActiveMission.prototype.isArtifact = function() {
    return 4 <= this.type && this.type <= 6
}
,
canvas.data.manor.DCampData = function() {
    this.missions,
    this.pets,
    this.resourceSlots = 1,
    this.artifactSlots = 1,
    this.selectedSlot = 1,
    this.selectedType = 0,
    this.artifacts,
    this.forgeItems,
    this.forgeLevels,
    this.fragmentItem,
    this.currentDestructItemAid = "",
    this.currentForgeLevel = 0,
    this.currentActiveMission,
    this.activeMissions,
    this.waitChangeCountArtifacts
}
,
canvas.data.manor.DCampData.TYPE_COUNT = 6,
canvas.data.manor.DCampData.ARTIFACT_TYPE_COUNT = 3,
canvas.data.manor.DCampData.ARTIFACT_PETS_MAX = 3,
canvas.data.manor.DCampData.PET_A_DISCIPLINE = "PET_A_DISCIPLINE",
canvas.data.manor.DCampData.PET_S_GEMS = "PET_S_GEMS",
canvas.data.manor.DCampData.PET_S_FISH = "PET_S_FISH",
canvas.data.manor.DCampData.PET_S_GRASS = "PET_S_GRASS",
canvas.data.manor.DCampData.PET_S_ITEMS = "PET_S_ITEMS",
canvas.data.manor.DCampData.PET_S_TALISMANS = "PET_S_TALISMANS",
canvas.data.manor.DCampData.PET_S_VALUE = "PET_S_VALUE",
canvas.data.manor.DCampData.PET_A_STEALTH = "PET_A_STEALTH",
canvas.data.manor.DCampData.prototype.parse = function(t) {
    var e, a, s, i, n, o, r, c;
    if (t.settings && (this.resourceSlots = parseInt(t.settings.FARM_SLOTS),
    this.artifactSlots = parseInt(t.settings.SEARCH_SLOTS)),
    t.artifacts)
        for (a in this.artifacts || (this.artifacts = new Object),
        t.artifacts)
            i = t.artifacts[a],
            (n = new canvas.data.manor.DItem).canBeZeroCount = !0,
            n.aid = n.id = i.id,
            n.image = i.image,
            n.count = i.count,
            n.title = i.title,
            this.applyAlt(i.alt),
            this.artifacts[n.aid] = n;
    if (t.missions)
        for (a in this.missions || (this.missions = new Object),
        t.missions) {
            if (s = t.missions[a],
            (e = new canvas.data.manor.DCampMission).bonusDifficulty = s.bonus_difficulty,
            e.bonusId = s.bonus_id,
            e.duration = s.duration,
            e.exp = s.exp,
            e.id = s.id,
            e.injury = s.injury,
            e.price1Amount = s.price1_amount,
            e.price1Id = s.price1_id,
            e.price2Amount = s.price2_amount,
            e.price2Id = s.price2_id,
            e.type = parseInt(s.type),
            e.title = s.title,
            s.rewards)
                for (e.rewards = new Array,
                o = s.rewards.length,
                r = 0; r < o; r++)
                    (c = new canvas.data.manor.DCampReward).bonusDifficulty = s.rewards[r].difficulty,
                    c.skillValue = s.rewards[r].skill_value,
                    c.item = this.artifacts[s.rewards[r].reward],
                    e.rewards.push(c);
            e.objects = s.objects,
            this.missions[e.type] = e
        }
    if (t.pets && this.parsePets(t.pets),
    t.forge) {
        var p = t.forge;
        for (a in this.forgeItems = [],
        o = p.items.length,
        p.items)
            "function" != typeof (i = p.items[a]) && this.addForgeItem(i);
        for (this.forgeLevels = [],
        o = p.builds.length,
        r = 0; r < o; r++)
            this.forgeLevels.push(parseInt(p.builds[r]));
        this.fragmentItem = this.artifacts[p.fragment]
    }
    t.missions_active && this.parseActiveMissions(t.missions_active)
}
,
canvas.data.manor.DCampData.prototype.addForgeItem = function(t, e) {
    var a;
    if (e)
        for (var s = this.forgeItems.length, i = 0; i < s; i++)
            if ((a = this.forgeItems[i]).id == t.id)
                return void a.count++;
    (a = new canvas.data.manor.DItem).canBeZeroCount = !0,
    a.aid = a.id = t.id,
    a.image = t.image,
    a.title = t.title,
    a.count = t.count,
    this.applyAlt(t.alt),
    this.forgeItems.push(a)
}
,
canvas.data.manor.DCampData.prototype.parseActiveMissions = function(t) {
    var e, a;
    this.activeMissions || (this.activeMissions = new Array);
    for (var s = t.length, i = 0; i < s; i++)
        e = t[i],
        (a = new canvas.data.manor.DCampActiveMission).id = parseInt(e.id),
        a.missionId = parseInt(e.mission_id),
        a.type = parseInt(e.mission_type),
        a.objectId = parseInt(e.farm_id),
        a.pet1 = parseInt(e.pet1),
        a.pet2 = parseInt(e.pet2),
        a.pet3 = parseInt(e.pet3),
        a.stime = parseInt(e.stime),
        a.dtime = parseInt(e.dtime),
        this.removeActiveMission(a),
        this.addActiveMission(a)
}
,
canvas.data.manor.DCampData.prototype.applyMissionToPets = function(t) {
    0 < t.pet1 && this.pets[t.pet1] && (this.pets[t.pet1].mission = t),
    0 < t.pet2 && this.pets[t.pet2] && (this.pets[t.pet2].mission = t),
    0 < t.pet3 && this.pets[t.pet3] && (this.pets[t.pet3].mission = t)
}
,
canvas.data.manor.DCampData.prototype.freeMissionPets = function(t) {
    0 < t.pet1 && this.pets[t.pet1] && (this.pets[t.pet1].mission = null),
    0 < t.pet2 && this.pets[t.pet2] && (this.pets[t.pet2].mission = null),
    0 < t.pet3 && this.pets[t.pet3] && (this.pets[t.pet3].mission = null)
}
,
canvas.data.manor.DCampData.prototype.addActiveMission = function(t) {
    this.activeMissions.push(t),
    this.applyMissionToPets(t)
}
,
canvas.data.manor.DCampData.prototype.removeActiveMission = function(t) {
    for (var e, a = this.activeMissions.length, s = 0; s < a; s++)
        if ((e = this.activeMissions[s]).id == t.id) {
            this.activeMissions.splice(s, 1),
            this.freeMissionPets(e);
            break
        }
}
,
canvas.data.manor.DCampData.prototype.parsePets = function(t) {
    var e, a, s, i, n, o;
    for (a in this.pets || (this.pets = new Object),
    t) {
        i = t[a],
        (e = new canvas.data.manor.DCampPet).id = i.id,
        e.title = i.title,
        e.image = canvas.Config.dataPath + "pets/" + i.image,
        e.skills = i.skills,
        e.mission = 0 < i.mission_id ? this.missions[i.mission_id] : null,
        e.canQuest = i.can_quest,
        e.item = new canvas.data.manor.DItem,
        e.item.title = e.title,
        e.item.image = e.image,
        o = [],
        i.abilities.family && o.push(i.abilities.family),
        i.abilities.ability1 && o.push(i.abilities.ability1),
        i.abilities.ability2 && o.push(i.abilities.ability2),
        i.abilities.ability3 && o.push(i.abilities.ability3);
        for (var r = o.length, c = 0; c < r; c++)
            s = o[c],
            n = i.artifacts[s],
            (s = new canvas.data.manor.DItem).aid = s.id = n.id,
            s.title = n.title,
            s.image = n.image,
            e.artifacts.push(s),
            this.applyAlt(n.alt);
        this.pets[e.id] && (e.mission = this.pets[e.id].mission),
        this.pets[e.id] = e
    }
}
,
canvas.data.manor.DCampData.prototype.getTypeByIndex = function(t) {
    switch (t) {
    case 1:
        return canvas.data.manor.DCampData.PET_S_GRASS;
    case 2:
        return canvas.data.manor.DCampData.PET_S_GEMS;
    case 3:
        return canvas.data.manor.DCampData.PET_S_FISH;
    case 4:
        return canvas.data.manor.DCampData.PET_S_ITEMS;
    case 5:
        return canvas.data.manor.DCampData.PET_S_TALISMANS;
    case 6:
        return canvas.data.manor.DCampData.PET_S_VALUE
    }
    return ""
}
,
canvas.data.manor.DCampData.prototype.getTitleByIndex = function(t) {
    switch (t) {
    case 1:
        return canvas.Translator.getText(335);
    case 2:
        return canvas.Translator.getText(336);
    case 3:
        return canvas.Translator.getText(337);
    case 4:
        return canvas.Translator.getText(333);
    case 5:
        return canvas.Translator.getText(331);
    case 6:
        return canvas.Translator.getText(332)
    }
    return ""
}
,
canvas.data.manor.DCampData.prototype.parseDestructResult = function(t) {
    for (var e, a = this.forgeItems.length, s = 0; s < a; s++)
        if ((e = this.forgeItems[s]).aid == this.currentDestructItemAid) {
            1 == e.count && this.forgeItems.splice(s, 1),
            e.count--;
            break
        }
    this.fragmentItem.count += t.talisman_amount
}
,
canvas.data.manor.DCampData.prototype.deltaFragment = function(t) {
    null == t && (t = 0),
    this.fragmentItem.count -= this.forgeLevels[t]
}
,
canvas.data.manor.DCampData.prototype.getActiveMissionsByTypes = function(t) {
    for (var e, a = [], s = this.activeMissions.length, i = 0; i < s; i++)
        e = this.activeMissions[i],
        0 <= t.indexOf(e.type) && a.push(e);
    return a
}
,
canvas.data.manor.DCampData.prototype.applyAlt = function(alt) {
    var str, str;
    alt && (str = alt.replace('<script type="text/javascript">', ""),
    str = str.replace("<\/script>", ""),
    eval(str))
}
,
canvas.data.manor.DCampData.prototype.changeArtifactsCount = function() {
    if (this.waitChangeCountArtifacts) {
        for (var t in this.waitChangeCountArtifacts)
            this.artifacts[t] && (this.artifacts[t].count -= this.waitChangeCountArtifacts[t]);
        this.waitChangeCountArtifacts = null
    }
}
,
canvas.data.manor.DCampData.prototype.haveResourceMission = function() {
    if (!this.missions)
        return !1;
    for (var t in this.missions)
        if (this.missions[t].isResource())
            return !0;
    return !1
}
,
canvas.data.manor.DCampData.prototype.haveArtifactMission = function() {
    if (!this.missions)
        return !1;
    for (var t in this.missions)
        if (this.missions[t].isArtifact())
            return !0;
    return !1
}
,
canvas.data.manor.DCampMission = function() {
    this.id = 1,
    this.type = 1,
    this.title = "",
    this.bonusDifficulty = 3e3,
    this.bonusId = 3,
    this.duration = 1800,
    this.exp = 50,
    this.injury = 100,
    this.price1Amount = 3,
    this.price1Id = 1,
    this.price2Amount = 3,
    this.price2Id = 1,
    this.item,
    this.rewards,
    this.objects
}
,
canvas.data.manor.DCampMission.prototype.isResource = function() {
    return 1 <= this.type && this.type <= 3
}
,
canvas.data.manor.DCampMission.prototype.isArtifact = function() {
    return 4 <= this.type && this.type <= 6
}
,
canvas.data.manor.DCampMission.prototype.getRewardBySkill = function(t) {
    for (var e, a = this.rewards ? this.rewards[0] : null, s = this.rewards.length, i = 0; i < s; i++)
        t >= (e = this.rewards[i]).skillValue && (!a || a.skillValue < e.skillValue) && (a = e);
    return a
}
,
canvas.data.manor.DCampPet = function() {
    this.id = 0,
    this.title = "",
    this.image = "",
    this.skills = {},
    this.artifacts = [],
    this.mission,
    this.item,
    this.canQuest = !0
}
,
canvas.data.manor.DCampPet.prototype.getSkill = function(t) {
    return this.skills[t] || 0
}
,
canvas.data.manor.DCampPet.prototype.getSkillByIndex = function(t) {
    return this.getSkill(canvas.app.manor.model.campData.getTypeByIndex(t))
}
,
canvas.data.manor.DCampPet.prototype.missionIsComplete = function() {
    return canvas.app.manor.model.serverTime.getTime() >= this.mission.dtime
}
,
canvas.data.manor.DCampReward = function() {
    this.bonusDifficulty = 3e3,
    this.item,
    this.skillValue = 0
}
,
canvas.data.manor.DCraftData = function() {
    this.queueSizeMax = 0,
    this.price = 0,
    this.requests,
    this.requestsCompleted,
    this.item,
    this.item2,
    this.materialCount = 0
}
,
canvas.data.manor.DCraftRequest = function() {
    this.id = "",
    this.recipe = "",
    this.count = 1,
    this.duration = 0,
    this.durationMax = 0,
    this.item
}
,
canvas.data.manor.DItem = function(t) {
    this._count = 1,
    Object.defineProperty(this, "count", {
        get: function() {
            return this._count
        },
        set: function(t) {
            this.stackable = 0 < t,
            this.canBeZeroCount ? this._count = t < 0 ? 0 : t : this._count = t < 1 ? 1 : t
        }
    }),
    this._count2 = 1,
    Object.defineProperty(this, "count2", {
        get: function() {
            return this._count2
        },
        set: function(t) {
            this._count2 = t
        }
    }),
    this.id = "",
    this.aid = "",
    this.image = "",
    this.title = "None",
    this.time = 0,
    this.timeFull = 0,
    this.stackable = !1,
    this.area = "",
    this.flags = new Object,
    this.enchantQuality = 0,
    this.enchantParam = 0,
    this.enchant2 = 0,
    this.enchant3 = 0,
    this.type = 0,
    this.color = 0,
    this.itemFlags = 0,
    this.canBeZeroCount = !1,
    t && (this.id = t.id,
    this.image = t.picture,
    this.title = t.title,
    this.count = parseInt(t.cnt),
    this.aid = t.artikul_id,
    this.flags.cell = "1" == t.cell,
    this.flags.storage = "1" == t.storage,
    this.itemFlags = t.flags || 0,
    this.time = t.time_expire ? parseInt(t.time_expire) : 0,
    this.type = parseInt(t.type_id),
    this.color = parseInt(t.quality),
    t.enchant_quality && (this.enchantQuality = parseInt(t.enchant_quality)),
    t.enchant_param && (this.enchantParam = parseInt(t.enchant_param)),
    t.enchant2 && (this.enchant2 = t.enchant2),
    t.enchant3 && (this.enchant3 = t.enchant3))
}
,
canvas.data.manor.DItem.prototype.clone = function() {
    var t = new canvas.data.manor.DItem;
    return t.area = this.area,
    t.count = this.count,
    t.id = this.id,
    t.aid = this.aid,
    t.image = this.image,
    t.time = this.time,
    t.timeFull = this.timeFull,
    t.title = this.title,
    t
}
,
canvas.data.manor.DItem.prototype.equals = function(t) {
    return this.aid == t.aid && this.isNonTransferable() == t.isNonTransferable() && this.stackable == t.stackable
}
,
canvas.data.manor.DItem.prototype.isNonTransferable = function() {
    return canvas.Functions.testFlag(this.itemFlags, 32)
}
,
canvas.data.manor.DItemCell = function() {
    this.area = "",
    this.title = "",
    this.size = 0,
    this.items = new Array
}
,
canvas.data.manor.DKennel = function() {
    this.canKill = 0,
    this.canKillTotal = 0,
    this.killPriceExt = 0,
    this.killColldown = 0,
    this.killBigCooldown = 0,
    this.killTime = 0,
    this.killBigTime = 0,
    this.bots
}
,
canvas.data.manor.DKennel.prototype.getBotById = function(t) {
    for (var e, a = this.bots.length, s = 0; s < a; s++)
        if ((e = this.bots[s]).id == t)
            return e;
    return null
}
,
canvas.data.manor.DKennel.prototype.getStartTime = function() {
    return Math.max(this.killTime, this.killBigTime)
}
,
canvas.data.manor.DKennel.prototype.getFinishTime = function() {
    return this.getStartTime() + this.getCoolDown()
}
,
canvas.data.manor.DKennel.prototype.getCoolDown = function() {
    return this.killTime > this.killBigTime ? this.killColldown : this.killBigCooldown
}
,
canvas.data.manor.DKennelBot = function() {
    this.id = 0,
    this.nick = "",
    this.picture = "",
    this.moneyMin = 0,
    this.moneyMax = 0,
    this.price = 0,
    this.exp = 0
}
,
canvas.data.manor.DLabourRequest = function() {
    this.user,
    this.labour = 0,
    this.price = 0,
    this.id = ""
}
,
canvas.data.manor.DLocation = function() {
    this.id = 0,
    this.areaID = 0,
    this.picture = "",
    this.title = "",
    this.error = ""
}
,
canvas.data.manor.DPet = function() {
    this.id = "",
    this.title = "",
    this.image = "",
    this.swf = "",
    this.exp = 0,
    this.expUp = 0,
    this.time = 0,
    this.timeFull = 0,
    this.level = 0,
    this.error = "",
    this.color = 0
}
,
canvas.data.manor.DPetTrainingType = function() {
    this.id = "",
    this.duration = 0,
    this.feedCost = 0,
    this.exp = 0
}
,
canvas.data.manor.DPortal = function() {
    this.level = 0,
    this.status = 0,
    this.locationID = 0
}
,
canvas.data.manor.DRecipe = function() {
    this.id = "",
    this.title = "",
    this.duration = 0,
    this.items,
    this.image = "",
    this.resultCount = 1,
    this.resultAid = "",
    this.favorite = !1
}
,
canvas.data.manor.DSellRequest = function() {
    this.user,
    this.price = 0,
    this.id = ""
}
,
canvas.data.manor.DSortData = function(t, e, a) {
    this.type = t,
    this.title = e
}
,
canvas.data.manor.DSortData.TYPE_DEFAULT = "typeDefault",
canvas.data.manor.DSortData.TYPE_TYPE = "typeType",
canvas.data.manor.DSortData.TYPE_TITLE = "typeTitle",
canvas.data.manor.DSortData.TYPE_COLOR = "typeColor",
canvas.data.manor.DSortData.TYPE_TIME = "typeTime",
canvas.data.manor.DSortData.TYPE_LEVEL = "typeLevel",
canvas.data.manor.DThroneRoomData = function(t) {
    if (this._currentType = 0,
    Object.defineProperty(this, "currentType", {
        get: function() {
            return this._currentType
        },
        set: function(t) {
            this._currentType = t,
            this.userData.redressItemID = 0
        }
    }),
    this.typesPath = null != t.typesPath ? t.typesPath : "images/data/locale/ru/amf/throne_room_types.amf",
    this.itemsPath = null != t.itemsPath ? t.itemsPath : "images/data/locale/ru/amf/throne_room_items.amf",
    this.watchMode = this.guestMode = null != t.Guest && "1" == t.Guest,
    canvas.data.manor.throne.Prototypes.init(),
    this.userData = new canvas.data.manor.throne.UserData,
    this.guestMode && t.ThroneRoomItems) {
        t.throne_room_background && (this.userData.throneRoomBack = t.throne_room_background),
        t.throne_picture && (this.userData.throneRoomFront = t.throne_picture),
        t.throne_room_throne_layer && (this.userData.throneRoomFrontLayerIndex = t.throne_room_throne_layer),
        this.shopItems = new Array,
        this.userData.items = new Array;
        var e = JSON.parse(t.ThroneRoomItems);
        if (e.push(canvas.data.manor.throne.Prototypes.THRONE_ITEM_ID),
        e && e.length) {
            var a, s, i = e.length;
            for (a = 0; a < i; a++)
                s = e[a],
                (s = new canvas.data.manor.throne.ItemData(s)).isActive = !0,
                s.mode = canvas.data.manor.throne.ItemData.MODE_MY,
                this.userData.items.push(s)
        }
    }
}
,
canvas.data.manor.DThroneRoomData.prototype.init = function() {
    canvas.data.manor.throne.Prototypes.storeTypePrototypes(canvas.ResourceLoader.get("throne_room_types")),
    canvas.data.manor.throne.Prototypes.storeItemPrototypes(canvas.ResourceLoader.get("throne_room_items"))
}
,
canvas.data.manor.DThroneRoomData.prototype.parseShopItems = function(t) {
    var e, a;
    for (a in canvas.data.manor.throne.Prototypes.storeArtifactPrototypes(t.artikul_hash),
    canvas.data.manor.throne.Prototypes.storeArtifactPrototypes(t.badges_artikuls),
    this.shopItems = new Array,
    t.artikul_hash)
        (e = t.artikul_hash[a]) && this.shopItems.push(canvas.data.manor.throne.Serializer.deserializeShopItem(e));
    this.updateActiveShopItems()
}
,
canvas.data.manor.DThroneRoomData.prototype.parseConf = function(t) {
    var e, a;
    this.userData.throneRoomBack = t.throne_room_background,
    canvas.data.manor.throne.Prototypes.getItemPrototype(canvas.data.manor.throne.Prototypes.THRONE_ITEM_ID).picture = canvas.data.manor.throne.Prototypes.getTypePrototype(canvas.data.manor.throne.Prototypes.THRONE_TYPE_ID).imageURL = t.throne_picture,
    canvas.data.manor.throne.Prototypes.getTypePrototype(canvas.data.manor.throne.Prototypes.THRONE_TYPE_ID).layerIndex = t.throne_room_throne_layer,
    this.userData.items = new Array;
    for (var s = t.items.length, i = 0; i < s; i++)
        e = t.items[i],
        (a = canvas.data.manor.throne.Serializer.deserializeItem(e)).isExpired() || this.userData.items.push(a);
    (a = new canvas.data.manor.throne.ItemData(canvas.data.manor.throne.Prototypes.THRONE_ITEM_ID)).isActive = !0,
    a.id = 0,
    a.mode = canvas.data.manor.throne.ItemData.MODE_MY,
    this.userData.items.push(a),
    this.updateActiveShopItems()
}
,
canvas.data.manor.DThroneRoomData.prototype.mergeItems = function(t) {
    for (var e, a, s, i, n, o = t.length, r = 0; r < o; r++) {
        for (e = t[r],
        s = 0,
        n = this.userData.items.length,
        i = 0; i < n; i++) {
            if (a = this.userData.items[i],
            parseInt(a.id) == parseInt(e.id)) {
                this.userData.items[i] = canvas.data.manor.throne.Serializer.deserializeItem(e),
                s = -1;
                break
            }
            s++
        }
        0 <= s && this.userData.items.push(canvas.data.manor.throne.Serializer.deserializeItem(e))
    }
    this.updateActiveShopItems()
}
,
canvas.data.manor.DThroneRoomData.prototype.updateActiveShopItems = function() {
    if (this.shopItems) {
        for (var t, e = new Array, a = this.userData.items.length, s = 0; s < a; s++)
            (t = this.userData.items[s]).artifact && e.push(t.artifact.id);
        for (a = this.shopItems.length,
        s = 0; s < a; s++)
            (t = this.shopItems[s]).artifact && (t.isActive = 0 <= e.indexOf(t.artifact.id))
    }
}
,
canvas.data.manor.DThroneRoomData.prototype.parseState = function(t) {
    t && canvas.app.manor.model.serverTime.init(t.server_time)
}
,
canvas.data.manor.DThroneRoomData.prototype.testExpiredItems = function(t) {
    var e, a = new Array;
    if (this.userData.items) {
        for (var s = this.userData.items.length, i = 0; i < s; i++)
            (e = this.userData.items[i]).isExpired() && a.push(e);
        if (0 < (s = a.length)) {
            for (i = 0; i < s; i++)
                e = a[i],
                this.userData.items.splice(this.userData.items.indexOf(e), 1);
            return this.updateActiveShopItems(),
            !0
        }
        return !1
    }
}
,
canvas.data.manor.DThroneRoomData.prototype.filterActiveItems = function(t) {
    return t.isActive
}
,
canvas.data.manor.DThroneRoomData.prototype.filterTypeItems = function(t) {
    return t.proto.type == this.currentType
}
,
canvas.data.manor.DThroneRoomData.prototype.loadHints = function() {
    var t, e = new Array;
    for (t in canvas.data.manor.throne.Prototypes.artifactPrototypes)
        e.push(canvas.data.manor.throne.Prototypes.artifactPrototypes[t].id);
    loadArtifactArtikulsData(e)
}
,
canvas.data.manor.DThroneRoomData.prototype.compareItemDataIndex = function(t, e) {
    t = 0 < t.artikulID ? canvas.data.manor.throne.Prototypes.getTypePrototype(t.proto.type) : canvas.data.manor.throne.Prototypes.getTypePrototype(t.id),
    e = 0 < e.artikulID ? canvas.data.manor.throne.Prototypes.getTypePrototype(e.proto.type) : canvas.data.manor.throne.Prototypes.getTypePrototype(e.id);
    return t && e ? t.layerIndex < e.layerIndex ? -1 : t.layerIndex > e.layerIndex ? 1 : 0 : 0
}
,
canvas.data.manor.DUser = function() {
    this.race = 0,
    this.labour = 0,
    this.labourMax = 0,
    this.cement = 0,
    this.buildings = new Object,
    this.buildingsById = new Object,
    this.buildingsByIndex = new Array,
    this.requests,
    this.money = 0,
    this.ghost = !1,
    this.workRefreshTime = 0
}
,
canvas.data.manor.DUser.prototype.getRequestById = function(t) {
    for (var e, a = this.requests.length, s = 0; s < a; s++)
        if ((e = this.requests[s]).id == t)
            return e;
    return null
}
,
canvas.data.manor.DUserBuilding = function() {
    this.id = 0,
    this.type = 1,
    this.level = 0,
    this.name = "main",
    this.labour = 0,
    this.hirePrice = 0,
    this.hireTimeLeft = 0,
    this.params = "",
    this.dichIndex = 0
}
,
canvas.data.manor.DUserBuilding.prototype.getLevel = function() {
    return 0 == this.level ? 1 : this.level
}
,
canvas.data.manor.DUserBuilding.prototype.getLevelMin = function() {
    return 0 == this.level && 0 < this.labour ? 1 : this.level
}
,
canvas.data.manor.DUserBuilding.prototype.isUnknownDich = function() {
    return 0 == this.level && canvas.data.manor.DBuilding.typeIsMultiBuild(this.type) && 0 == this.labour
}
,
canvas.data.manor.DUserGame = function() {
    this.id = "",
    this.login = "",
    this.level = 0
}
,
canvas.data.manor.DWorkRequest = function() {
    this.id = "",
    this.building = "",
    this.price = 0,
    this.labour = 0
}
,
canvas.data.manor.throne.ItemData = function(t) {
    this.id,
    this.artikulID = t,
    this.expiry,
    this.isActive,
    this.mode,
    this.money,
    Object.defineProperty(this, "proto", {
        get: function() {
            return canvas.data.manor.throne.Prototypes.itemPrototypes[this.artikulID] || canvas.data.manor.throne.Prototypes.defaultItemPrototypeData
        }
    }),
    Object.defineProperty(this, "artifact", {
        get: function() {
            return canvas.data.manor.throne.Prototypes.artifactPrototypes[this.proto.artifactArtikul]
        }
    })
}
,
canvas.data.manor.throne.ItemData.MODE_MY = 0,
canvas.data.manor.throne.ItemData.MODE_SHOP = 1,
canvas.data.manor.throne.ItemData.prototype.isExpired = function() {
    return this.expiry && this.expiry <= canvas.app.manor.model.serverTime.getTime()
}
,
canvas.data.manor.throne.MoneyData = function() {
    this.price,
    this.priceType,
    this.bages
}
,
canvas.data.manor.throne.ItemData.TYPE_MONEY = 1,
canvas.data.manor.throne.ItemData.TYPE_GEMS = 2,
canvas.data.manor.throne.ItemData.TYPE_DIAMONDS = 3,
canvas.data.manor.throne.MoneyData.prototype.getMoney = function() {
    return this.priceType == canvas.data.manor.throne.ItemData.TYPE_MONEY ? price : 0
}
,
canvas.data.manor.throne.MoneyData.prototype.getDiamonds = function() {
    return this.priceType == canvas.data.manor.throne.ItemData.TYPE_DIAMONDS ? price : 0
}
,
canvas.data.manor.throne.MoneyData.prototype.getBageArtikul = function() {
    for (var t, e = this.bages.length, a = 0; a < e; a++)
        if ("artifact" == (t = this.bages[a]).type)
            return t.artikul_id;
    return 0
}
,
canvas.data.manor.throne.MoneyData.prototype.getBageCount = function() {
    for (var t, e = this.bages.length, a = 0; a < e; a++)
        if ("artifact" == (t = this.bages[a]).type)
            return t.cnt;
    return 0
}
,
canvas.data.manor.throne.Prototypes = {
    THRONE_TYPE_ID: 1e3,
    THRONE_ITEM_ID: 1e4,
    artifactPrototypes: {},
    itemPrototypes: {},
    typePrototypes: {},
    defaultItemPrototypeData: {},
    init: function() {
        this.defaultItemPrototypeData.id = 0,
        this.defaultItemPrototypeData.picture = "images/table.jpg"
    },
    storeTypePrototypes: function(t) {
        for (var e, a, s = t.length, i = 0; i < s; i++)
            e = t[i],
            (a = new Object).id = parseInt(e.id),
            a.title = e.title,
            a.posX = parseInt(e.position_x),
            a.posY = parseInt(e.position_y),
            a.layerIndex = e.layer_index,
            a.imageURL = e.default_picture,
            a.disabled = 0 != (1 & parseInt(e.flags)),
            this.typePrototypes[a.id] = a;
        (a = new Object).id = this.THRONE_TYPE_ID,
        a.title = "Throne",
        a.posX = 0,
        a.posY = 0,
        a.layerIndex = canvas.app.manor.model.throneRoomData.userData.throneRoomFrontLayerIndex,
        a.imageURL = canvas.app.manor.model.throneRoomData.userData.throneRoomFront,
        a.disabled = !0,
        this.typePrototypes[a.id] = a
    },
    storeItemPrototypes: function(t) {
        for (var e, a, s = t.length, i = 0; i < s; i++)
            e = t[i],
            (a = new Object).id = parseInt(e.id),
            a.type = parseInt(e.type_id),
            a.picture = e.picture,
            a.artifactArtikul = e.artifact_artikul_id || 11764,
            this.itemPrototypes[a.id] = a;
        (a = new Object).id = this.THRONE_ITEM_ID,
        a.type = this.THRONE_TYPE_ID,
        a.picture = canvas.app.manor.model.throneRoomData.userData.throneRoomFront,
        this.itemPrototypes[a.id] = a
    },
    storeArtifactPrototypes: function(t) {
        var e, a, s;
        for (s in t)
            "function" != typeof t[s] && (e = t[s],
            (a = new Object).id = parseInt(e.id),
            a.title = e.title,
            a.picture = e.picture,
            this.artifactPrototypes[a.id] = a)
    },
    getTypePrototype: function(t) {
        return this.typePrototypes[t]
    },
    getItemPrototype: function(t) {
        return this.itemPrototypes[t]
    },
    getArtifactPrototype: function(t) {
        return this.artifactPrototypes[t]
    }
},
canvas.data.manor.throne.Serializer = {
    deserializeItem: function(t) {
        var e = new canvas.data.manor.throne.ItemData(parseInt(t.artikul_id));
        return e.isActive = 1 == parseInt(t.is_installed),
        e.id = parseInt(t.id),
        e.mode = canvas.data.manor.throne.ItemData.MODE_MY,
        e.expiry = parseInt(t.expire_time),
        e
    },
    deserializeShopItem: function(t) {
        var e, a = parseInt(t.id);
        for (str in canvas.data.manor.throne.Prototypes.itemPrototypes)
            if ((e = canvas.data.manor.throne.Prototypes.itemPrototypes[str]).artifactArtikul == a)
                break;
        var s, i = new canvas.data.manor.throne.ItemData(e ? e.id : 1);
        if (i.id = parseInt(t.store_artikul_id),
        i.mode = canvas.data.manor.throne.ItemData.MODE_SHOP,
        i.money = new canvas.data.manor.throne.MoneyData,
        i.money.price = parseFloat(t.price),
        i.money.priceType = parseInt(t.price_type),
        i.expiry = parseInt(t.validity),
        i.money.bages = new Array,
        t.badge_data)
            for (var n = t.badge_data.badges.length, o = 0; o < n; o++)
                s = t.badge_data.badges[o],
                i.money.bages.push(s);
        return i
    }
},
canvas.data.manor.throne.UserData = function() {
    this.throneRoomBack,
    this.throneRoomFront,
    this.throneRoomFrontLayerIndex,
    this.items,
    this.restrictions,
    this.redressItemID
}
,
canvas.app.CanvasApp = function(t, e, a, s, i, n, o, r) {
    null == a && (a = !0),
    null == n && (n = !1),
    this.topWindow = null == o ? window : o,
    this._fpsInterval,
    this._fps = 0,
    Object.defineProperty(this, "fps", {
        get: function() {
            return this._fps
        },
        set: function(t) {
            this._fps = t,
            clearInterval(this._fpsInterval),
            0 < this._fps && (this._fpsInterval = setInterval(this.handlerEnterFrame.bind(this), 1e3 / this._fps))
        }
    }),
    this.par = "string" == typeof t ? canvas.Functions.decodeUrlParams(t.replace(/\+/g, "%20")) : t,
    this.par.width = parseInt(this.par.width) || this.defaultWidth,
    this.par.height = parseInt(this.par.height) || this.defaultHeight,
    this.par.parent = e || {
        style: {},
        setAttribute: function() {},
        addEventListener: function() {}
    },
    this.par.parent.style.userSelect = "none",
    canvas.px.utils.skipHello(),
    n || (this.app = new canvas.px.Application(this.par.width || 100,this.par.height || 100,{
        transparent: !0,
        antialias: null != r && r
    }),
    this.par.parent.appendChild(this.app.view),
    null != o && (this.app.renderer.plugins.interaction.removeEvents(),
    this.app.renderer.plugins.interaction.topWindow = o,
    this.app.renderer.plugins.interaction.interactionDOMElement = this.app.view,
    this.app.renderer.plugins.interaction.addEvents())),
    this.par.parent.setAttribute("tabindex", 0),
    this.par.parent.style.outline = "none",
    this.width = this.par.width,
    this.height = this.par.height,
    this.widthOffset = s || 0,
    this.heightOffset = i || 0,
    this.stage = this.app ? this.app.stage : new canvas.px.Container,
    this.root = new canvas.px.Container,
    this.stage.addChild(this.root);
    i = canvas.isMobile();
    this.topWindow.document.addEventListener(i ? "pointermove" : "mousemove", this.handlerStageMouseMove),
    this.topWindow.addEventListener(i ? "pointerup" : "mouseup", this.handlerStageMouseUp),
    this.topWindow.document.addEventListener("mousewheel", this.handlerWheelHandler),
    this.destroy = this.destroy.bind(this),
    window.addEventListener("unload", this.destroy),
    this.stage.interactive = !0,
    canvas.ResourceLoader.init(),
    canvas.Config.init(),
    a ? (this.preloader = new canvas.px.MovieClip(canvas.Config.effectsPath + "preloader"),
    this.preloader.gotoAndStop(1),
    this.preloader.ready ? this.preloaderReady() : canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.preloader, this.preloaderReady, this)) : this.preInit(),
    this.handlerMouseDownBinded = this.handlerMouseDown.bind(this),
    this.handlerMouseOutBinded = this.handlerMouseOut.bind(this),
    this.handlerDragStartBinded = this.handlerDragStart.bind(this),
    this.resizeBinded = this.resize.bind(this),
    this.par.parent.addEventListener(i ? "pointerdown" : "mousedown", this.handlerMouseDownBinded),
    this.par.parent.addEventListener(i ? "pointerout" : "mouseout", this.handlerMouseOutBinded),
    this.par.parent.addEventListener("dragstart", this.handlerDragStartBinded),
    this.topWindow.addEventListener("resize", this.resizeBinded),
    this.render = this.render.bind(this),
    this.resize()
}
,
canvas.app.CanvasApp.prototype.preloaderReady = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.preloader, this.preloaderReady, this),
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.handlerProgress, this),
    this.stage.addChild(this.preloader),
    this.preInit()
}
,
canvas.app.CanvasApp.prototype.preInit = function() {
    if (this.par.ux_conf) {
        for (var t = this.par.ux_conf.split(","), e = [], a = 0; a < t.length; a++)
            e.push(["ux" + a, canvas.Config.wwwPath + t[a]]);
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preInitReady, this),
        canvas.ResourceLoader.add(e)
    } else
        this.init()
}
,
canvas.app.CanvasApp.prototype.preInitReady = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preInitReady, this),
    canvas.ResourceLoader.uxReady ? this.uxReady() : canvas.ResourceLoader.ux ? canvas.EventManager.addEventListener(canvas.Event.UX_READY, null, this.uxReady, this) : (canvas.Functions.parseUx(),
    this.uxReady())
}
,
canvas.app.CanvasApp.prototype.uxReady = function() {
    canvas.EventManager.removeEventListener(canvas.Event.UX_READY, null, this.uxReady, this),
    this.init()
}
,
canvas.app.CanvasApp.prototype.init = function(t) {
    null == t && (t = []),
    !canvas.Translator.isInited && this.par.locale_file && (canvas.Translator.lang = this.par.locale_file.match(/locale\/([a-z]{2})\//i)[1],
    t.push(["translate", canvas.Config.wwwPath + this.par.locale_file])),
    canvas.Config.initLang(canvas.Translator.lang);
    for (var e = 0; e < t.length; e++)
        for (var a = 0; a < t[e].length; a++)
            t[e][a] = t[e][a].replace("{canvas.Config.langPath}", canvas.Config.langPath);
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.ready, this),
    canvas.ResourceLoader.add(t)
}
,
canvas.app.CanvasApp.prototype.ready = function(t) {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.ready, this),
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.handlerProgress, this);
    var e = canvas.ResourceLoader.get("translate");
    canvas.Translator.isInited || canvas.Translator.init(e && e.data ? e.data : null),
    this.preloader && (this.preloader.destroy(),
    delete this.preloader),
    this.app && this.app.ticker.stop()
}
,
canvas.app.CanvasApp.prototype.handlerProgress = function(t) {
    this.preloader.gotoAndStop(Math.round(t.params.progress))
}
,
canvas.app.CanvasApp.prototype.handlerStageMouseMove = function(t) {
    canvas.EventManager.dispatchEvent(canvas.Event.STAGE_MOUSE_MOVE, null, {
        x: t.clientX,
        y: t.clientY,
        mouseData: t
    })
}
,
canvas.app.CanvasApp.prototype.handlerStageMouseUp = function(t) {
    canvas.EventManager.dispatchEvent(canvas.Event.STAGE_MOUSE_UP, null, {
        x: t.clientX,
        y: t.clientY,
        mouseData: t
    })
}
,
canvas.app.CanvasApp.prototype.handlerWheelHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.Event.STAGE_WHEEL, null, {
        wheelDelta: t.wheelDelta
    })
}
,
canvas.app.CanvasApp.prototype.handlerEnterFrame = function() {
    this.app && !this.animationRequested && (this.animationRequested = !0,
    requestAnimationFrame(this.render))
}
,
canvas.app.CanvasApp.prototype.render = function() {
    this.app && this.app.render(),
    this.animationRequested = !1
}
,
canvas.app.CanvasApp.prototype.handlerMouseDown = function(t) {}
,
canvas.app.CanvasApp.prototype.handlerMouseOut = function(t) {
    canvas.EventManager.dispatchEvent(canvas.Event.STAGE_MOUSE_OUT)
}
,
canvas.app.CanvasApp.prototype.handlerDragStart = function(t) {
    t.preventDefault(),
    t.stopPropagation()
}
,
canvas.app.CanvasApp.prototype.focus = function() {
    this.par.parent.focus()
}
,
canvas.app.CanvasApp.prototype.externalKey = function(t) {
    canvas.InputManager.externalKey(t)
}
,
canvas.app.CanvasApp.prototype.resize = function() {
    this.app && this.app.renderer.resize(0, 0),
    this.width = (this.par.width || this.par.parent.clientWidth) + this.widthOffset,
    this.height = (this.par.height || this.par.parent.clientHeight) + this.heightOffset,
    this.preloader && this.preloader.position.set(Math.round(.5 * this.width), Math.round(.5 * this.height)),
    this.app && this.app.renderer.resize(this.width, this.height)
}
,
canvas.app.CanvasApp.prototype.destroy = function(t, e) {
    null == t && (t = !0),
    null == e && (e = !0),
    this.fps = 0,
    this.topWindow.document.removeEventListener("mousemove", this.handlerStageMouseMove),
    this.topWindow.removeEventListener("mouseup", this.handlerStageMouseUp),
    this.topWindow.document.removeEventListener("mousewheel", this.handlerWheelHandler),
    this.par.parent && this.par.parent.removeEventListener && (this.par.parent.removeEventListener("mousedown", this.handlerMouseDownBinded),
    this.par.parent.removeEventListener("mouseout", this.handlerMouseOutBinded),
    this.par.parent.removeEventListener("dragstart", this.handlerDragStartBinded)),
    this.topWindow.removeEventListener("resize", this.resizeBinded),
    window.removeEventListener("unload", this.destroy),
    t && this.destroyResources(),
    this.app && (this.par.parent && this.par.parent.removeChild(this.app.view),
    t = this.app,
    this.app = null,
    t.destroy(!0, !0)),
    delete this.par.parent,
    delete this.par,
    e && canvas.EventManager.destroy(),
    canvas.Functions.destroy(),
    canvas.px.Container.prototype.destroy.apply(this.stage, [!0])
}
,
canvas.app.CanvasApp.prototype.destroyResources = function() {
    canvas.px.Loader.destroy(),
    canvas.ResourceLoader.destroy(),
    canvas.px.utils.destroyTextureCache()
}
,
canvas.app.CanvasAvatar = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !1, 0, 0)
}
,
canvas.app.CanvasAvatar.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasAvatar.prototype.init = function() {
    this.model = new canvas.app.avatar.Model(this.par),
    canvas.app.avatar.model = this.model,
    this.model.width = this.par.width,
    this.model.height = this.par.height;
    for (var t = [canvas.Const.FONT_IFLASH, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE_BEVEL_SHARP, canvas.Const.FONT_TAHOMA_10_STROKE, canvas.Const.FONT_TAHOMA_10_BOLD_SHARP], e = [["ui", canvas.Config.ui + "main.json"]], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasAvatar.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.hintManager = new canvas.utils.HintManager,
    this.main = new canvas.app.avatar.Main(this.model,this.hintManager),
    this.model.main = this.main,
    this.root.addChild(this.main),
    this.fps = 20
}
,
canvas.app.CanvasAvatar.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasAvatar.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
,
canvas.app.CanvasAvatar.prototype.swfObject = function(t) {
    this.main && this.main.swfObject(t)
}
,
canvas.app.CanvasAvatar.prototype.swfData = function(t, e) {
    this.main && this.main.swfData(e)
}
,
canvas.app.avatar.log = function(t, e) {
    canvas.Log.add(canvas.Log.AVATAR, t, e)
}
,
canvas.app.CanvasBalance = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !1, 0, 0)
}
,
canvas.app.CanvasBalance.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasBalance.prototype.init = function() {
    var t = [["ui", canvas.Config.ui + "balance.json"], canvas.Config.fontsPath + canvas.Const.FONT_IFLASH + ".fnt", canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_10_STROKE + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, t)
}
,
canvas.app.CanvasBalance.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.useTahoma = canvas.Translator.getLang() != canvas.Const.LANG_RU,
    this.main = new canvas.px.Container,
    this.root.addChild(this.main),
    this.start()
}
,
canvas.app.CanvasBalance.prototype.start = function() {
    var t = new canvas.px.Container
      , e = 0 < this.par.scale;
    this.main.addChild(t),
    t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", e ? "bar_empty" : "bar_full")));
    var a = this.par.labels.split("|")
      , s = parseInt(this.par.val) / 100
      , i = (parseInt(this.par.val),
    parseInt(this.par.diff))
      , n = Math.max(0, Math.min(1, s))
      , o = new canvas.ui.Progress;
    o.setSize(200, 40),
    o.position.set(14, 0);
    s = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", e ? "bar_full" : "bar_empty"));
    t.addChild(s),
    t.addChild(o),
    s.mask = o.sprite,
    0 < (o.progress = n) && n < 1 && ((r = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "center"))).position.set(o.sprite.width + 7, 7),
    t.addChild(r)),
    this.hintContainer = new canvas.px.Container;
    var o = this.useTahoma ? 13 : 15
      , r = this.hintContainer.addChild(new canvas.ui.Text(this.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,100,12,"left"));
    r.text = e ? a[1] : a[0],
    r.position.set(20, o);
    r = this.hintContainer.addChild(new canvas.ui.Text(this.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,100,12,"right"));
    r.text = e ? a[0] : a[1],
    r.position.set(this.width - 120, o);
    r = this.hintContainer.addChild(new canvas.ui.Text(this.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,100,12,"center"));
    r.text = 0 < i ? "+" + i : i,
    r.position.set(Math.round(.5 * (this.width - 100)), o),
    t.interactive = !0,
    t.mouseover = this.overHandler.bind(this),
    t.mouseout = this.outHandler.bind(this),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasBalance.prototype.overHandler = function() {
    this.main.addChild(this.hintContainer),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasBalance.prototype.outHandler = function() {
    this.main.removeIfExist(this.hintContainer),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasBarber = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !1, 0, 0)
}
,
canvas.app.CanvasBarber.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasBarber.prototype.init = function() {
    var t = [["ui", "{canvas.Config.langPath}barber/barber.json"], canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_11_BOLD + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, t)
}
,
canvas.app.CanvasBarber.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.main = new canvas.px.Container,
    this.root.addChild(this.main),
    this.start(),
    this.fps = 30
}
,
canvas.app.CanvasBarber.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasBarber.prototype.start = function() {
    this.main.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back"))),
    this.barber = this.main.addChild(new canvas.app.barber.Barber(this.par,this)),
    this.barber.y = 54,
    this.title = this.main.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16769465,130,16,"center")),
    this.title.text = canvas.Translator.getText(3027),
    this.title.position.set(180, 26)
}
,
canvas.app.CanvasBattle = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0, 0, 0),
    this.createLogTitle()
}
,
canvas.app.CanvasBattle.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasBattle.prototype.init = function() {
    this.model = new canvas.app.battle.Model(this.par),
    canvas.app.battle.model = this.model;
    for (var t = [canvas.Const.FONT_IFLASH, canvas.Const.FONT_TAHOMA_9_STROKE, canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_9_BOLD, canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_ARIAL_11, canvas.Const.FONT_ARIAL_11_BOLD, canvas.Const.FONT_TAHOMA_14_NUMBERS_BOLD_STROKE_BEVEL, canvas.Const.FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE, canvas.Const.FONT_TAHOMA_20_BOLD_STROKE], e = [["locale", "{canvas.Config.langPath}locale.json"], ["ui", canvas.Config.ui + "battle.json"], ["bg", this.model.bgLink], ["eff_conf", this.model.effConfLink], canvas.Config.effects, canvas.Config.effectsPath + "hourglass.mci"], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasBattle.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this);
    var t = canvas.ResourceLoader.get("eff_conf");
    this.model.parseEffectsConf(t ? t.data : ""),
    this.hintManager = new canvas.utils.HintManager,
    this.main = new canvas.app.battle.Main(this.model,this.hintManager),
    this.root.addChild(this.main),
    this.main.resize(this.width, this.height),
    this.fps = this.model.fps
}
,
canvas.app.CanvasBattle.prototype.swfData = function(t, e) {
    this.main.swfData(t, e)
}
,
canvas.app.CanvasBattle.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasBattle.prototype.handlerMouseDown = function() {
    canvas.app.CanvasApp.prototype.handlerMouseDown.call(this),
    this.focus()
}
,
canvas.app.CanvasBattle.prototype.focus = function() {
    canvas.app.CanvasApp.prototype.focus.call(this)
}
,
canvas.app.CanvasBattle.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
,
canvas.app.CanvasBattle.prototype.createLogTitle = function() {
    var t, e = this.app.view.getContext("webgl") || this.app.view.getContext("experimental-webgl");
    e ? (t = e.getExtension("WEBGL_debug_renderer_info"),
    canvas.Log.title += e.getParameter(t.UNMASKED_RENDERER_WEBGL)) : canvas.Log.title += "WEBGL not available"
}
,
canvas.app.battle.log = function(t, e) {
    canvas.Log.add(canvas.Log.BATTLE, t, e)
}
,
canvas.app.CanvasBirthday = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0, 0, 0, !1, _top().window)
}
,
canvas.app.CanvasBirthday.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasBirthday.prototype.preInit = function() {
    null == this.par.ux_conf && (this.par.ux_conf = canvas.Config.uxPath),
    canvas.app.CanvasApp.prototype.preInit.call(this)
}
,
canvas.app.CanvasBirthday.prototype.init = function() {
    this.model = new canvas.app.birthday.Model(this.par),
    this.model.width = this.par.width,
    this.model.height = this.par.height,
    canvas.app.birthday.model = this.model;
    for (var t = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_14_BOLD, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD], e = [["locale", "{canvas.Config.langPath}locale.json"], ["birthday", canvas.Config.ui + "birthday.json"], ["birthday_conf", canvas.app.birthday.Const.configUrl]], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasBirthday.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    canvas.ResourceLoader.get("ui") || canvas.ResourceLoader.addSubAlias("birthday", "ui"),
    this.main = new canvas.app.birthday.Main(this.model),
    this.root.addChild(this.main),
    this.fps = 20
}
,
canvas.app.CanvasBirthday.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.birthday.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasBirthday.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
,
canvas.app.birthday.log = function(t, e) {
    canvas.Log.add(canvas.Log.BIRTHDAY, t, e)
}
,
canvas.app.CanvasCasino = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e)
}
,
canvas.app.CanvasCasino.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasCasino.prototype.init = function() {
    this.model = new canvas.app.casino.Model(this.par),
    canvas.app.casino.model = this.model,
    this.model.width = this.par.width,
    this.model.height = this.par.height;
    for (var t = [canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_ARIAL_11, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD], e = [["ui", canvas.Config.ui + "casino/casino.json"], ["title_jackpot", "{canvas.Config.langPath}casino/title_jackpot.png"], ["title_prize", "{canvas.Config.langPath}casino/title_prize.png"], ["locale", "{canvas.Config.langPath}casino/casino.json"], ["front_mask", canvas.Config.ui + "casino/front_mask.png"], ["dragon_mask", canvas.Config.ui + "casino/dragon_mask.png"], ["play_button_mask", canvas.Config.ui + "casino/play_button_mask.png"], canvas.Config.effects], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasCasino.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.main = new canvas.app.casino.Main(this.model),
    this.model.main = this.main,
    this.root.addChild(this.main),
    this.fps = 30
}
,
canvas.app.CanvasCasino.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasCasino.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
,
canvas.app.CanvasCasino.prototype.swfObject = function(t) {
    this.main && this.main.swfObject(t)
}
,
canvas.app.casino.log = function(t, e) {
    canvas.Log.add(canvas.Log.CASINO, t, e)
}
,
canvas.app.CanvasClanCitadel = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0, -4, -4)
}
,
canvas.app.CanvasClanCitadel.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasClanCitadel.prototype.init = function() {
    this.model = new canvas.app.clanCitadel.Model(this.par),
    canvas.app.clanCitadel.model = this.model;
    for (var t = [canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_12_BOLD_STROKE, canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD], e = [["ui", canvas.Config.ui + "clan_citadel.json"], ["buildings", this.model.clanBuildingsAmf], ["resources", this.model.clanResourcesAmf], ["sanctuary", this.model.sanctuaryAmf], ["config", this.model.configUrl], ["configSanctuary", this.model.configSanctuaryUrl], canvas.Config.effectsAtlasPath + "citadel_back.json", canvas.Config.effectsPath + "citadel_back.mci"], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasClanCitadel.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.model.init(),
    this.main = new canvas.app.clanCitadel.Main(this.model),
    this.root.addChild(this.main),
    this.fps = 30,
    this.resize()
}
,
canvas.app.CanvasClanCitadel.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(this.model.paused ? canvas.app.clanCitadel.Event.ENTER_FRAME_WIN : canvas.app.clanCitadel.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasClanCitadel.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this),
    this.model && (this.model.width = this.width > canvas.app.clanCitadel.Const.MAP_WIDTH ? canvas.app.clanCitadel.Const.MAP_WIDTH : this.width,
    this.model.height = this.height > canvas.app.clanCitadel.Const.MAP_HEIGHT ? canvas.app.clanCitadel.Const.MAP_HEIGHT : this.height,
    this.main && this.main.resize(this.width, this.height))
}
,
canvas.app.clanCitadel.log = function(t, e) {
    canvas.Log.add(canvas.Log.CLAN_CITADEL, t, e)
}
,
canvas.app.CanvasClanWar = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0, -2),
    canvas.app.CanvasClanWar.App = this.app
}
,
canvas.app.CanvasClanWar.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasClanWar.prototype.init = function() {
    this.model = new canvas.app.clanWar.Model(this.par),
    canvas.app.clanWar.model = this.model,
    this.model.width = this.par.width,
    this.model.height = this.par.height;
    for (var t = [canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD], e = [["ui", canvas.Config.ui + "clan_war.json"]], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasClanWar.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.main = new canvas.app.clanWar.Main(this.model),
    this.model.main = this.main,
    this.root.addChild(this.main),
    this.fps = 30,
    this.resize()
}
,
canvas.app.CanvasClanWar.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasClanWar.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this),
    this.model && (this.model.w = this.model.width = this.width < canvas.app.clanWar.Const.WIDTH ? canvas.app.clanWar.Const.WIDTH : this.width,
    this.model.h = this.model.height = this.height < canvas.app.clanWar.Const.HEIGHT ? canvas.app.clanWar.Const.HEIGHT : this.height,
    this.main.resize())
}
,
canvas.app.CanvasClanWar.prototype.swfObject = function(t) {
    this.main && this.main.swfObject(t)
}
,
canvas.app.clanWar.log = function(t, e) {
    canvas.Log.add(canvas.Log.CLAN_WAR, t, e)
}
,
canvas.app.CanvasCompass = function(t, e, a) {
    canvas.app.CanvasApp.call(this, t, e, !1, 0, 0, !0),
    document.onkeydown = null,
    document.onkeyup = null,
    this.onlyModel = null != a && a
}
,
canvas.app.CanvasCompass.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasCompass.prototype.init = function() {
    this.model = new canvas.app.compass.Model(this.par),
    canvas.app.compass.model = canvas.app.world.model = this.model;
    var t = [["config", this.model.CfgLink], ["config_world", this.model.CfgWorldLink]];
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this),
    canvas.ResourceLoader.add(t)
}
,
canvas.app.CanvasCompass.prototype.preReady = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this),
    this.model.parse_world_confing(canvas.ResourceLoader.get("config_world").data),
    canvas.app.CanvasApp.prototype.init.call(this, this.model.areas_xml)
}
,
canvas.app.CanvasCompass.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.model.initConfig(),
    this.model.parse_areas(),
    this.onlyModel || (this.main = new canvas.app.compass.Main(this.model,this.par.parent)),
    this.fps = 0,
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.READY)
}
,
canvas.app.CanvasCompass.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasCompass.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this),
    this.model && this.model.saveWindowSize(window.outerWidth, window.outerHeight)
}
,
canvas.app.compass.log = function(t, e) {
    canvas.Log.add(canvas.Log.COMPASS, t, e)
}
,
canvas.app.CanvasCube = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0)
}
,
canvas.app.CanvasCube.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasCube.prototype.init = function() {
    this.model = new canvas.app.cube.Model(this.par),
    canvas.app.cube.model = this.model,
    this.model.width = this.par.width,
    this.model.height = this.par.height;
    for (var t = [canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12], e = [["locale", "{canvas.Config.langPath}locale.json"], ["ui", canvas.Config.ui + "cube.json"], canvas.Config.effectsPath + "cube.mci", canvas.Config.effectsAtlasPath + "cube.json"], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasCube.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.main = new canvas.app.cube.Main(this.model),
    this.model.main = this.main,
    this.root.addChild(this.main),
    this.fps = 30
}
,
canvas.app.CanvasCube.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.cube.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasCube.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
,
canvas.app.CanvasCube.prototype.swfObject = function(t) {
    this.main && this.main.swfObject(t)
}
,
canvas.app.cube.log = function(t, e) {
    canvas.Log.add(canvas.Log.CUBE, t, e)
}
,
canvas.app.CanvasDiceGame = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0, 0, 0, !1, _top().window)
}
,
canvas.app.CanvasDiceGame.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasDiceGame.prototype.preInit = function() {
    null == this.par.ux_conf && (this.par.ux_conf = canvas.Config.uxPath),
    canvas.app.CanvasApp.prototype.preInit.call(this)
}
,
canvas.app.CanvasDiceGame.prototype.init = function() {
    this.model = new canvas.app.diceGame.Model(this.par),
    this.model.width = this.par.width,
    this.model.height = this.par.height,
    canvas.app.diceGame.model = this.model;
    for (var t = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12_BOLD_STROKE, canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_15_BOLD_STROKE], e = [["diceGame", canvas.Config.ui + "dice_game.json"], ["conf", this.model.entryPoint + "?object=" + canvas.app.diceGame.Const.REQUEST_OBJECT + "&action=" + canvas.app.diceGame.Const.REQUEST_INIT + "&json_mode_on=1"], canvas.Config.effectsPath + "dice1.mci", canvas.Config.effectsPath + "dice2.mci", canvas.Config.effectsPath + "dice3.mci", canvas.Config.effectsPath + "dice4.mci", canvas.Config.effectsPath + "dice5.mci", canvas.Config.effectsPath + "dice6.mci"], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasDiceGame.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    canvas.ResourceLoader.get("ui") || canvas.ResourceLoader.addSubAlias("diceGame", "ui"),
    this.model.parse(JSON.parse(canvas.ResourceLoader.get("conf").data)[canvas.app.diceGame.Const.REQUEST_OBJECT + "|" + canvas.app.diceGame.Const.REQUEST_INIT]),
    this.main = new canvas.app.diceGame.Main(this.model),
    this.root.addChild(this.main),
    this.fps = 30
}
,
canvas.app.CanvasDiceGame.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.diceGame.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this),
    null === this.par.parent.offsetParent && (this.fps = 0)
}
,
canvas.app.CanvasDiceGame.prototype.destroy = function() {
    canvas.app.CanvasApp.prototype.destroy.call(this, !1, !1)
}
,
canvas.app.CanvasDiceGame.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
,
canvas.app.diceGame.log = function(t, e) {
    canvas.Log.add(canvas.Log.DICE_GAME, t, e)
}
,
canvas.app.CanvasEventProgress = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !1, 0, 0)
}
,
canvas.app.CanvasEventProgress.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasEventProgress.prototype.init = function() {
    this.smallSize = this.height < 32;
    var t = [["ui", canvas.Config.ui + "event_progress.json"], canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_11_BOLD + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, t)
}
,
canvas.app.CanvasEventProgress.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.main = new canvas.px.Container,
    this.root.addChild(this.main),
    setTimeout(this.start.bind(this), 10)
}
,
canvas.app.CanvasEventProgress.prototype.start = function() {
    var t = new canvas.px.Container;
    this.main.addChild(t),
    t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    var e = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16771494,213,17,"center");
    t.addChild(e),
    e.position.set(112, 3);
    var a = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,0,396,17,"center");
    t.addChild(a),
    a.position.set(20, 22);
    var s = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,0,396,17,"center");
    t.addChild(s),
    s.position.set(20, 75);
    var i = parseInt(this.par.type1)
      , n = parseInt(this.par.type2);
    null != this.par.labels && (o = (c = this.par.labels.split("|"))[0],
    r = c[1],
    c = c[2]),
    e.text = o,
    a.text = 0 < i ? r : "",
    s.text = 0 < n ? c : "";
    var o = a.y + ("" == a.text ? 15 : a.textHeight + 2)
      , r = t.addChild(this.createLine(i));
    r.position.set(38, o),
    r.setProgress(this.par.cur_val1, this.par.max_val1),
    o += r.getHeight() + 5,
    s.y = o + 2,
    o += s.textHeight + 4;
    var c = t.addChild(this.createLine(n));
    c.position.set(38, o),
    c.setProgress(this.par.cur_val2, this.par.max_val2),
    i <= 0 && (t.removeIfExist(r),
    t.removeIfExist(a)),
    n <= 0 && (t.removeIfExist(c),
    t.removeIfExist(s)),
    0 == n && 0 < i && (r.y = 60,
    a.y = 42),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasEventProgress.prototype.createLine = function(t) {
    switch (t) {
    case 1:
        return this.createLine1();
    case 2:
        return this.createLine2();
    case 3:
        return this.createLine3();
    default:
        return this.createLine0()
    }
}
,
canvas.app.CanvasEventProgress.prototype.createLine0 = function() {
    var t = new canvas.px.Container;
    return t.setProgress = function(t, e) {}
    ,
    t.getHeight = function() {
        return 0
    }
    ,
    t
}
,
canvas.app.CanvasEventProgress.prototype.createLine1 = function() {
    var t = new canvas.px.Container
      , e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_white")));
    return e.position.set(1, 30),
    (e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right_red")))).position.set(285, 30),
    t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line1"))),
    e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line1_mask"))),
    t.msk = t.addChild(new canvas.px.Mask(348,28)),
    t.msk.position.set(6, 1),
    e.mask = t.msk,
    t.currentField = t.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,11468800,57,17,"center")),
    t.currentField.position.set(6, 30),
    t.maxField = t.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16771494,57,17,"center")),
    t.maxField.position.set(296, 30),
    t.cursor = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pointer"))),
    t.cursor.position.set(12, 0),
    t.setProgress = function(t, e) {
        this.currentField.text = t,
        this.maxField.text = e,
        this.msk.scale.x = t / e,
        this.cursor.x = this.msk.x + this.msk.width - 5
    }
    ,
    t.getHeight = function() {
        return this.msk._height + 3
    }
    ,
    t
}
,
canvas.app.CanvasEventProgress.prototype.createLine2 = function() {
    var t = new canvas.px.Container
      , e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_white")));
    return e.position.set(1, 30),
    (e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_white")))).scale.set(-1, 1),
    e.position.set(360, 30),
    t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line2"))),
    e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line2_mask"))),
    t.msk = t.addChild(new canvas.px.Mask(348,28)),
    t.msk.position.set(6, 1),
    e.mask = t.msk,
    t.currentField = t.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,15716,57,17,"center")),
    t.currentField.position.set(6, 30),
    t.maxField = t.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,11468800,57,17,"center")),
    t.maxField.position.set(296, 30),
    t.cursor = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pointer"))),
    t.cursor.position.set(12, 0),
    (e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "hum_icon")))).position.set(5, 6),
    (e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "mag_icon")))).position.set(336, 6),
    t.setProgress = function(t, e) {
        this.currentField.text = t + "%",
        this.maxField.text = (100 - t).toString() + "%",
        this.msk.scale.x = t / 100,
        this.cursor.x = this.msk.x + this.msk.width - 5
    }
    ,
    t.getHeight = function() {
        return this.msk._height + 3
    }
    ,
    t
}
,
canvas.app.CanvasEventProgress.prototype.createLine3 = function() {
    var t = new canvas.px.Container
      , e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line3")));
    return e.position.set(-7, 0),
    (e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line3_mask")))).position.set(-7, 0),
    t.msk_hum = t.addChild(new canvas.px.Mask(358,19)),
    t.msk_hum.position.set(-1, 1),
    e.mask = t.msk_hum,
    (e = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line3_mask")))).position.set(-7, 0),
    t.msk_mag = t.addChild(new canvas.px.Mask(358,19)),
    t.msk_mag.position.set(-1, 21),
    e.mask = t.msk_mag,
    t.cursor_hum = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "hum_icon"))),
    t.cursor_hum.position.set(78, 1),
    t.cursor_mag = t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "mag_icon"))),
    t.cursor_mag.position.set(219, 20),
    t.setProgress = function(t, e) {
        this.msk_hum.scale.x = t / 100,
        this.msk_mag.scale.x = e / 100,
        this.cursor_hum.x = this.msk_hum.x + this.msk_hum.width - 5,
        this.cursor_mag.x = this.msk_mag.x + this.msk_mag.width - 5
    }
    ,
    t.getHeight = function() {
        return this.msk_hum._height + this.msk_mag._height - 5
    }
    ,
    t
}
,
canvas.app.CanvasFirstBattle = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0, 0, 0)
}
,
canvas.app.CanvasFirstBattle.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasFirstBattle.prototype.init = function() {
    this.model = new canvas.app.firstBattle.Model(this.par),
    canvas.app.firstBattle.model = this.model,
    this.model.width = this.par.width,
    this.model.height = this.par.height;
    for (var t = [canvas.Const.FONT_IFLASH, canvas.Const.FONT_TAHOMA_9_STROKE, canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_9_BOLD, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE, canvas.Const.FONT_TAHOMA_20_BOLD_STROKE], e = [["locale", "{canvas.Config.langPath}locale.json"], ["ui", canvas.Config.ui + "first_battle.json"], canvas.Config.spellsPath + "_SP1.mci", canvas.Config.spellsPath + "_SP2.mci", canvas.Config.spellsPath + "_SP4.mci", canvas.Config.spellsPath + "_SP5.mci", canvas.Config.spellsPath + "_SP6.mci", canvas.Config.spellsAtlasPath + "spells2.json", canvas.Config.spellsAtlasPath + "spells4.json", canvas.Config.spellsAtlasPath + "spells7.json", canvas.Config.botsPath + "img" + this.model.enemyParams.sk + "/img" + this.model.enemyParams.sk + ".mci", canvas.Config.botsPath + "img" + this.model.enemyParams.sk + "/img" + this.model.enemyParams.sk + ".json", canvas.Config.skPath + "sk.json"], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasFirstBattle.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.hintManager = new canvas.utils.HintManager,
    this.main = new canvas.app.firstBattle.Main(this.model,this.hintManager),
    this.model.main = this.main,
    this.root.addChild(this.main),
    this.fps = 20
}
,
canvas.app.CanvasFirstBattle.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasFirstBattle.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
,
canvas.app.firstBattle.log = function(t, e) {
    canvas.Log.add(canvas.Log.FIRST_BATTLE, t, e)
}
,
canvas.app.CanvasHunt = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0, 0, 0, void 0, void 0, !0),
    canvas.app.CanvasHunt.App = this.app,
    document.body.style.overflow = "hidden"
}
,
canvas.app.CanvasHunt.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasHunt.prototype.init = function() {
    this.model = new canvas.app.hunt.Model(this.par),
    canvas.app.hunt.model = canvas.app.location.model = this.model;
    for (var t, e = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_10_BOLD_STROKE, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD], a = [["ui", canvas.Config.ui + "hunt.json"]], s = 0; s < e.length; s++)
        a.push(canvas.Config.fontsPath + e[s] + ".fnt");
    this.model.mapFile && (t = this.model.mapFile.split(".swf")[0],
    a.push(["map_bot", t + "_mask.dat"]),
    a.push(["map_plant", t + "_mask_farm01.dat"]),
    a.push(["map_stone", t + "_mask_farm02.dat"]),
    a.push(["map_fish", t + "_mask_farm04.dat"]),
    a.push(["map_mci", canvas.Config.huntMapsPath + this.model.mapName + "/" + this.model.mapName + ".mci"]),
    a.push(["map", canvas.Config.huntMapsPath + this.model.mapName + "/" + this.model.mapName + ".json"]),
    a.push(["first_data", this.model.reqConfURL])),
    canvas.app.CanvasApp.prototype.init.call(this, a)
}
,
canvas.app.CanvasHunt.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    canvas.InputManager.init(),
    this.model.prep_language(),
    this.hintManager = new canvas.utils.HintManager,
    this.windowsManager = new canvas.utils.WindowsManager,
    this.main = new canvas.app.hunt.Main(this.model,this.hintManager,this.windowsManager),
    this.model.init(this.main),
    this.root.addChild(this.main),
    this.main.view.init(),
    this.fps = 30,
    this.resize(),
    canvas.utils.ABController.init(this, "hunt")
}
,
canvas.app.CanvasHunt.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasHunt.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this),
    this.main && this.main.resize(this.width, this.height)
}
,
canvas.app.CanvasHunt.prototype.handlerMouseDown = function() {
    canvas.app.CanvasApp.prototype.handlerMouseDown.call(this),
    this.focus()
}
,
canvas.app.CanvasHunt.prototype.focus = function() {
    canvas.app.CanvasApp.prototype.focus.call(this)
}
,
canvas.app.CanvasHunt.prototype.swfObject = function(t) {
    this.main && this.main.swfObject(t)
}
,
canvas.app.hunt.log = function(t, e) {
    canvas.Log.add(canvas.Log.HUNT, t, e)
}
,
canvas.app.CanvasInst = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0, 0, 0)
}
,
canvas.app.CanvasInst.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasInst.prototype.init = function() {
    this.model = new canvas.app.inst.Model(this.par),
    canvas.app.inst.model = this.model,
    canvas.app.world.model = canvas.app.inst.model,
    canvas.Config.worldPath = canvas.Config.instPath,
    canvas.app.world.Event.ENTER_FRAME = canvas.app.inst.Event.ENTER_FRAME;
    for (var t = [canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD], e = [["ui", canvas.Config.ui + "inst.json"], ["config", this.model.ListLink]], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    document.body.style.overflow = "hidden",
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this),
    canvas.ResourceLoader.add(e)
}
,
canvas.app.CanvasInst.prototype.preReady = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this),
    this.model.initConfig();
    var t = canvas.app.inst.model
      , e = t.INS_LIST[t.ActiveIns];
    e && canvas.app.CanvasApp.prototype.init.call(this, [["map" + e.id, t.LOCALE + "/ins_" + e.id + ".xml"]])
}
,
canvas.app.CanvasInst.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    canvas.ResourceLoader.addSubAlias("ui", "world"),
    this.model.init(),
    canvas.InputManager.init(),
    this.hintManager = new canvas.utils.HintManager,
    this.main = new canvas.app.inst.Main(this.model,this.hintManager),
    this.model.main = this.main,
    this.root.addChild(this.main),
    this.fps = 30,
    this.resize()
}
,
canvas.app.CanvasInst.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.inst.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasInst.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this),
    this.main && this.main.resize(this.width, this.height)
}
,
canvas.app.CanvasInst.prototype.swfObject = function(t) {
    this.main && this.main.swfObject(t)
}
,
canvas.app.inst.log = function(t, e) {
    canvas.Log.add(canvas.Log.INST, t, e)
}
,
canvas.app.CanvasLeftMenu = function(t, e) {
    var a = "string" == typeof t ? canvas.Functions.decodeUrlParams(t.replace(/\+/g, "%20")) : t;
    canvas.app.leftMenu.Const.ON_PAGE = parseInt(a.slotsOnPage) || canvas.app.leftMenu.Const.ON_PAGE,
    canvas.app.leftMenu.Const.ON_PAGE < canvas.app.leftMenu.Const.ON_PAGE_MIN || canvas.app.leftMenu.Const.ON_PAGE > canvas.app.leftMenu.Const.ON_PAGE_MAX ? (this.autoSlots = !0,
    this.defaultHeight = 565) : this.defaultHeight = canvas.app.leftMenu.Const.ON_PAGE * canvas.app.leftMenu.Const.SLOT_HEIGHT + 25,
    canvas.app.CanvasApp.call(this, t, e, !1, 0, 0),
    e.style.overflow = "hidden"
}
,
canvas.app.CanvasLeftMenu.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasLeftMenu.prototype.init = function() {
    this.model = new canvas.app.leftMenu.Model(this.par),
    canvas.app.leftMenu.model = this.model,
    this.resize();
    for (var t = [canvas.Const.FONT_TAHOMA_9_STROKE, canvas.Const.FONT_TAHOMA_9_BOLD_STROKE, canvas.Const.FONT_TAHOMA_11_BOLD], e = [["ui", canvas.Config.ui + "main.json"]], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasLeftMenu.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.main = new canvas.app.leftMenu.Main(this.model),
    this.model.main = this.main,
    this.root.addChild(this.main),
    this.fps = 20
}
,
canvas.app.CanvasLeftMenu.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasLeftMenu.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this),
    this.autoSlots && this.model && (canvas.app.leftMenu.Const.ON_PAGE = Math.min(canvas.app.leftMenu.Const.ON_PAGE_MAX, Math.max(canvas.app.leftMenu.Const.ON_PAGE_MIN, Math.floor(($(document).height() - 115) / canvas.app.leftMenu.Const.SLOT_HEIGHT)), this.model && this.model.slotsCount ? this.model.slotsCount : canvas.app.leftMenu.Const.ON_PAGE_MAX),
    this.main && this.main.view && this.model.lastOnPageCount != canvas.app.leftMenu.Const.ON_PAGE && (this.model.lastOnPageCount = canvas.app.leftMenu.Const.ON_PAGE,
    this.main.view.initList(),
    this.main.view.update()))
}
,
canvas.app.CanvasLeftMenu.prototype.swfObject = function(t) {
    var e;
    this.main && (e = this.model.slotsCount,
    this.main.swfObject(t),
    this.model.slotsCount != e && this.resize())
}
,
canvas.app.CanvasLeftMenu.prototype.swfData = function(t, e) {
    this.main && this.main.swfData(e)
}
,
canvas.app.leftMenu.log = function(t, e) {
    canvas.Log.add(canvas.Log.LEFT_MENU, t, e)
}
,
canvas.app.CanvasLocation = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0, -2, -17)
}
,
canvas.app.CanvasLocation.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasLocation.prototype.init = function() {
    this.model = new canvas.app.location.Model(this.par),
    canvas.app.location.model = this.model;
    for (var t = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_16_BOLD_STROKE], e = [["ui", canvas.Config.ui + "location.json"], ["navigate", canvas.Config.wwwPath + this.model.CfgNav]], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasLocation.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    canvas.InputManager.init(),
    this.hintManager = new canvas.utils.HintManager,
    this.windowsManager = new canvas.utils.WindowsManager,
    this.main = new canvas.app.location.Main(this.model,this.hintManager,this.windowsManager),
    this.blinkButton = this.main.view.blinkButton,
    this.root.addChild(this.main),
    this.fps = 30,
    this.resize()
}
,
canvas.app.CanvasLocation.prototype.swfObject = function(t) {
    this.main.swfObject(t)
}
,
canvas.app.CanvasLocation.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ENTER_FRAME),
    canvas.px.Tween.update(),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasLocation.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this),
    this.main && this.main.resize(this.width, this.height)
}
,
canvas.app.location.log = function(t, e) {
    canvas.Log.add(canvas.Log.LOCATION, t, e)
}
,
canvas.app.CanvasMagic = function(t, e, a) {
    canvas.app.CanvasApp.call(this, t, e, !1, 0, 0),
    this.type = a
}
,
canvas.app.CanvasMagic.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasMagic.prototype.init = function() {
    switch (this.model = new canvas.app.magic.Model(this.par),
    this.model.width = this.par.width,
    this.model.height = this.par.height,
    this.model.type = this.type,
    canvas.app.magic.model = this.model,
    this.model.type) {
    case canvas.app.magic.Const.TYPE_AURA:
        canvas.app.magic.modelAura = this.model;
        break;
    case canvas.app.magic.Const.TYPE_SHADOW:
        canvas.app.magic.modelShadow = this.model;
        break;
    default:
        canvas.app.magic.modelMagic = this.model
    }
    for (var t = [canvas.Const.FONT_IFLASH, canvas.Const.FONT_TAHOMA_9_STROKE], e = [["ui", canvas.Config.ui + "magic.json"]], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasMagic.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.hintManager = new canvas.utils.HintManager,
    this.main = new canvas.app.magic.Main(this.model,this.hintManager),
    this.root.addChild(this.main),
    this.fps = 20
}
,
canvas.app.CanvasMagic.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.magic.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasMagic.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
,
canvas.app.magic.log = function(t, e) {
    canvas.Log.add(canvas.Log.MAGIC, t, e)
}
,
canvas.app.CanvasManor = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0, -4, -4),
    "1" == this.par.Guest && (this.widthOffset = 0,
    this.heightOffset = 0),
    canvas.app.CanvasManor.App = this.app
}
,
canvas.app.CanvasManor.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasManor.prototype.init = function() {
    this.model = new canvas.app.manor.Model(this.par),
    canvas.app.manor.model = this.model;
    var t = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_9_BOLD, canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_12_BOLD_STROKE, canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, canvas.Const.FONT_TAHOMA_13_BOLD_STROKE, canvas.Const.FONT_TAHOMA_14_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD, canvas.Const.FONT_TAHOMA_16_BOLD]
      , e = [["ui", canvas.Config.ui + "manor.json"], ["dic", this.model.dicURL], canvas.Config.effectsAtlasPath + this.model.backImage + ".json", canvas.Config.effectsPath + this.model.backImage + ".mci", ["throne_room_items", this.model.throneRoomData.itemsPath], ["throne_room_types", this.model.throneRoomData.typesPath], canvas.Config.effectsPath + "hourglass.mci"];
    this.model.guestMode || e.push(["conf", canvas.Config.entryPoint + "?object=estate&json_mode_on=1&action=conf"]);
    for (var a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasManor.prototype.ready = function() {
    var t;
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.model.parseDic(),
    this.model.throneRoomData.init(),
    this.main = new canvas.app.manor.Main(this.model),
    this.inputCount = 12;
    for (var e = 0; e < this.inputCount; e++)
        t = "input" + (e || ""),
        canvas.app.manor.view[t] = new canvas.ui.Input(this.par.parent),
        canvas.app.manor.view[t].parent = null;
    this.root.addChild(this.main),
    this.fps = 30,
    this.__resize()
}
,
canvas.app.CanvasManor.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.ENTER_FRAME),
    this.model.paused || canvas.EventManager.dispatchEvent(canvas.app.manor.Event.ENTER_FRAME_ANIM),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this),
    canvas.px.Tween.update()
}
,
canvas.app.CanvasManor.prototype.resize = function() {
    this.model && this.model.guestMode ? setTimeout(this.__resize.bind(this), 50) : this.__resize()
}
,
canvas.app.CanvasManor.prototype.__resize = function() {
    if (canvas.app.CanvasApp.prototype.resize.call(this),
    this.model) {
        var t;
        this.model.width = Math.max(Math.min(this.width, canvas.app.manor.Const.WIDTH_MAX), canvas.app.manor.Const.WIDTH_MIN),
        this.model.height = Math.min(this.height, canvas.app.manor.Const.HEIGHT_MAX),
        this.model.guestMode && (this.model.width += 50,
        this.model.height += 60),
        this.main && this.main.resize(this.width, this.height);
        for (var e = 0; e < this.inputCount; e++)
            t = "input" + (e || ""),
            canvas.app.manor.view[t] && (canvas.app.manor.view[t].stageHeight = this.model.height,
            canvas.app.manor.view[t].scale = this.model.winScale,
            canvas.app.manor.view[t].handlerEnterFrame(!0))
    }
}
,
canvas.app.CanvasManor.prototype.updateCurrentBuilding = function() {
    this.main && this.main.controller.updateCurrentBuilding()
}
,
canvas.app.CanvasManor.prototype.ScrollMove = function(t, e) {
    this.main.view.manor.scrollMove(t, e)
}
,
canvas.app.manor.log = function(t, e) {
    canvas.Log.add(canvas.Log.MANOR, t, e)
}
,
canvas.app.CanvasMem = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0, 0, -20, !0),
    document.onkeydown = null,
    document.onkeyup = null
}
,
canvas.app.CanvasMem.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasMem.prototype.init = function() {
    this.model = new canvas.app.mem.Model(this.par),
    canvas.app.mem.model = this.model,
    canvas.app.CanvasApp.prototype.init.call(this)
}
,
canvas.app.CanvasMem.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.main = new canvas.app.mem.Main(this.model,this.par.parent),
    this.fps = 0
}
,
canvas.app.CanvasMem.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this),
    this.main && this.main.resize()
}
,
canvas.app.CanvasMem.prototype.swfData = function(t, e) {
    this.main.swfData(t, e)
}
,
canvas.app.mem.log = function(t, e) {
    canvas.Log.add(canvas.Log.MEM, t, e)
}
,
canvas.app.CanvasMirror = function(t, e) {
    canvas.app.mirror.instance && this.par && canvas.app.mirror.instance.destroy(),
    canvas.app.mirror.instance = this,
    canvas.app.CanvasApp.call(this, t, e, !0, 0, 0, !1, _top().window)
}
,
canvas.app.CanvasMirror.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasMirror.prototype.preInit = function() {
    null == this.par.ux_conf && (this.par.ux_conf = canvas.Config.uxPath),
    canvas.app.CanvasApp.prototype.preInit.call(this)
}
,
canvas.app.CanvasMirror.prototype.init = function() {
    this.model = new canvas.app.mirror.Model(this.par),
    this.model.width = this.par.width,
    this.model.height = this.par.height,
    canvas.app.mirror.model = this.model;
    for (var t = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_14_BOLD_STROKE, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD, canvas.Const.FONT_TAHOMA_15_BOLD_STROKE, canvas.Const.FONT_TAHOMA_16_BOLD_STROKE, canvas.Const.FONT_TAHOMA_18, canvas.Const.FONT_AMERICAN_TEXT_40_SHADOW_GRADIENT], e = [["mirror", canvas.Config.ui + "mirror.json"]], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasMirror.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    canvas.ResourceLoader.get("ui") || canvas.ResourceLoader.addSubAlias("mirror", "ui"),
    this.main = new canvas.app.mirror.Main(this.model),
    this.root.addChild(this.main),
    this.fps = 30
}
,
canvas.app.CanvasMirror.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this),
    null === this.par.parent.offsetParent && this.destroy()
}
,
canvas.app.CanvasMirror.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
,
canvas.app.CanvasMirror.prototype.destroy = function() {
    this.main.destroy(),
    canvas.app.CanvasApp.prototype.destroy.call(this, !1, !1)
}
,
canvas.app.mirror.log = function(t, e) {
    canvas.Log.add(canvas.Log.MIRROR, t, e)
}
,
canvas.app.CanvasPets = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !1, 0, 0),
    this.ENTER_FRAME = "Pets.ENTER_FRAME"
}
,
canvas.app.CanvasPets.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasPets.prototype.init = function() {
    canvas.app.CanvasApp.prototype.init.call(this, [])
}
,
canvas.app.CanvasPets.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.fps = 20,
    this.pet = this.root.addChild(new canvas.animation.Pet(this.par,this.ENTER_FRAME))
}
,
canvas.app.CanvasPets.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(this.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasPets.prototype.updatePet = function(t) {
    this.pet && this.pet.update(t)
}
,
canvas.app.CanvasProgress = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !1, 0, 0)
}
,
canvas.app.CanvasProgress.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasProgress.prototype.init = function() {
    this.smallSize = this.height < 32;
    var t = [["ui", canvas.Config.ui + "progress.json"], canvas.Config.fontsPath + (this.smallSize ? canvas.Const.FONT_TAHOMA_11_BOLD_STROKE : canvas.Const.FONT_TAHOMA_16_BOLD_GLOW_NUMBERS) + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, t)
}
,
canvas.app.CanvasProgress.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.main = new canvas.px.Container,
    this.root.addChild(this.main),
    this.start()
}
,
canvas.app.CanvasProgress.prototype.start = function() {
    var t = new canvas.px.Container;
    this.main.addChild(t),
    t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bar_full")));
    var e = null != this.par.current ? parseFloat(this.par.current) : 123.36
      , a = null != this.par.total ? parseFloat(this.par.total) : 1234.51
      , s = (null != this.par.moneyFormat && parseInt(this.par.moneyFormat),
    e / a)
      , i = new canvas.ui.Progress;
    i.setSize(466, 47),
    i.position.set(5, -9);
    var n = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bar_empty"));
    t.addChild(n),
    t.addChild(i),
    n.mask = i.sprite,
    0 < (i.progress = s) && s < 1 && ((o = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "center"))).position.set(i.sprite.width, -1),
    t.addChild(o));
    var o = new canvas.ui.Text(this.smallSize ? canvas.Const.FONT_TAHOMA_11_BOLD_STROKE : canvas.Const.FONT_TAHOMA_16_BOLD_GLOW_NUMBERS,16771494,this.smallSize ? this.width : 459,23,"center");
    this.main.addChild(o),
    this.smallSize ? o.position.set(0, 1) : o.position.set(7, 6),
    o.text = e + " / " + a,
    this.height < this.main.height && t.scale.set(this.width / this.main.width, this.height / this.main.height),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasPuzzle = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0, 0, 0, !1, _top().window)
}
,
canvas.app.CanvasPuzzle.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasPuzzle.prototype.preInit = function() {
    null == this.par.ux_conf && (this.par.ux_conf = canvas.Config.uxPath),
    canvas.app.CanvasApp.prototype.preInit.call(this)
}
,
canvas.app.CanvasPuzzle.prototype.init = function() {
    this.model = new canvas.app.puzzle.Model(this.par),
    canvas.app.puzzle.model = this.model,
    this.model.width = this.par.width,
    this.model.height = this.par.height;
    for (var t = [canvas.Const.FONT_TAHOMA_S_15_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD], e = [["puzzle", canvas.Config.ui + "puzzle.json"], ["puzzleImage", this.model.pictureUrl]], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasPuzzle.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    canvas.ResourceLoader.get("ui") || canvas.ResourceLoader.addSubAlias("puzzle", "ui"),
    this.main = new canvas.app.puzzle.Main(this.model),
    this.model.main = this.main,
    this.root.addChild(this.main),
    this.fps = 30
}
,
canvas.app.CanvasPuzzle.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.ENTER_FRAME),
    canvas.px.Tween.update(),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this),
    null === this.par.parent.offsetParent && (this.fps = 0)
}
,
canvas.app.CanvasPuzzle.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
,
canvas.app.CanvasPuzzle.prototype.destroy = function() {
    this.main.destroy(),
    canvas.app.CanvasApp.prototype.destroy.call(this, !1, !1)
}
,
canvas.app.puzzle.log = function(t, e) {
    canvas.Log.add(canvas.Log.puzzle, t, e)
}
,
canvas.app.CanvasReg = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !1, 0, 0)
}
,
canvas.app.CanvasReg.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasReg.prototype.init = function() {
    var t = [["ui", "{canvas.Config.langPath}reg/reg.json"], canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_12 + ".fnt", canvas.Config.fontsPath + canvas.Const.FONT_TAHOMA_11_BOLD + ".fnt"];
    canvas.app.CanvasApp.prototype.init.call(this, t)
}
,
canvas.app.CanvasReg.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.main = new canvas.px.Container,
    this.root.addChild(this.main),
    this.start(),
    this.fps = 30
}
,
canvas.app.CanvasReg.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasReg.prototype.start = function() {
    this.main.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back"))),
    this.barber = this.main.addChild(new canvas.app.barber.Barber(this.par,this)),
    this.barber.y = 232;
    var t = this.main.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16769465,130,16,"center"));
    t.text = canvas.Translator.getText(3028),
    t.position.set(180, 201),
    (t = this.main.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16769465,130,16,"center"))).text = canvas.Translator.getText(3029),
    t.position.set(180, 53),
    this.genderImage = this.main.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
    this.genderImage.position.set(295, 229),
    this.humImage = this.main.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
    this.humImage.position.set(5, 20),
    this.magImage = this.main.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
    this.magImage.position.set(242, 24),
    this.humButton = this.main.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "button_hum"))),
    this.humButton.position.set(56, 153),
    this.humButton.sprite.hitArea = new canvas.px.Rectangle(-40,-120,230,160),
    this.magButton = this.main.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "button_mag"))),
    this.magButton.position.set(261, 153),
    this.magButton.sprite.hitArea = new canvas.px.Rectangle(-20,-120,230,160),
    this.par.kind_bonus && (this.bonus = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bonus")),
    this.bonus.position.set(0, -28),
    ("1" == this.par.kind_bonus ? this.humButton : this.magButton).sprite.addChild(this.bonus)),
    this.descriptionField = this.main.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,6500627,196,96,"left")),
    this.descriptionField.position.set(255, 394),
    this.setGenderImage(this.barber.model.mySexVal),
    this.setRaceImage(this.barber.model.myRaceVal),
    canvas.EventManager.addEventListener(canvas.app.barber.Event.GENDER_CHANGE, null, this.genderChangeHandler, this),
    canvas.EventManager.addEventListener(canvas.app.barber.Event.RACE_CHANGE, null, this.raceChangeHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.humButton, this.barber.bb11Action, this.barber),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.magButton, this.barber.bb12Action, this.barber)
}
,
canvas.app.CanvasReg.prototype.genderChangeHandler = function(t) {
    this.setGenderImage(t.params)
}
,
canvas.app.CanvasReg.prototype.raceChangeHandler = function(t) {
    this.setRaceImage(t.params)
}
,
canvas.app.CanvasReg.prototype.setGenderImage = function(t) {
    this.genderImage.texture = canvas.ResourceLoader.getImage("ui", "1" == t ? "gender_m" : "gender_f")
}
,
canvas.app.CanvasReg.prototype.setRaceImage = function(t) {
    this.humImage.texture = canvas.ResourceLoader.getImage("ui", "1" == t ? "race_hum" : "race_hum_grey"),
    this.magImage.texture = canvas.ResourceLoader.getImage("ui", "1" != t ? "race_mag" : "race_mag_grey"),
    this.humButton.sprite.interactive = this.humButton.buttonMode = "1" != t,
    this.magButton.sprite.interactive = this.magButton.buttonMode = "1" == t,
    this.humButton.handlerOut(),
    this.magButton.handlerOut(),
    this.descriptionField.text = canvas.Translator.getText("1" == t ? 3030 : 3031)
}
,
canvas.app.CanvasRightMenu = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !1, 0, 0),
    e.style.overflow = "hidden"
}
,
canvas.app.CanvasRightMenu.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasRightMenu.prototype.init = function() {
    this.model = new canvas.app.rightMenu.Model(this.par),
    canvas.app.rightMenu.model = this.model;
    for (var t = [canvas.Const.FONT_ARIAL_9_BOLD_STROKE, canvas.Const.FONT_TAHOMA_9_STROKE], e = [["ui", canvas.Config.ui + "main.json"]], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasRightMenu.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.main = new canvas.app.rightMenu.Main(this.model),
    this.model.main = this.main,
    this.root.addChild(this.main),
    this.fps = 20,
    this.resize()
}
,
canvas.app.CanvasRightMenu.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.rightMenu.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasRightMenu.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
,
canvas.app.CanvasRightMenu.prototype.swfObject = function(t) {
    this.main && this.main.swfObject(t)
}
,
canvas.app.CanvasRightMenu.prototype.swfData = function(t) {}
,
canvas.app.CanvasRightMenu.prototype.blinkButton = function(t, e) {
    this.main && this.main.blinkButton(t, e)
}
,
canvas.app.rightMenu.log = function(t, e) {
    canvas.Log.add(canvas.Log.RIGHT_MENU, t, e)
}
,
canvas.app.CanvasTest = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e)
}
,
canvas.app.CanvasTest.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasTest.prototype.init = function() {
    var t = [["ui", canvas.Config.ui], canvas.Config.imgPath + "spells/spells.json", canvas.Config.imgPath + "spells/spells2.json"];
    canvas.app.CanvasApp.prototype.init.call(this, t)
}
,
canvas.app.CanvasTest.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.fps = 30;
    var t = new canvas.px.MovieClip(canvas.Config.spellsPath + "_SP1164");
    t.frameEvent = "ENTER_FRAME_TEST",
    this.root.addChild(t),
    t.position.set(100, 100),
    canvas.EventManager.addEventListener(null, canvas.ResourceLoader.EVENT_PROGRESS, function(t) {})
}
,
canvas.app.CanvasTest.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent("ENTER_FRAME_TEST"),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasTest.prototype.completeHandler = function() {
    this.goFrame(2)
}
,
canvas.app.CanvasTest.prototype.SND = function(t) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "bots/" + this.mcName + "/" + arguments[1])
}
,
canvas.app.CanvasTest.prototype.goFrame = function(t) {
    this.mc.gotoAndStop(t),
    this.mc.mcChildsCache["mc" + t] && (this.mc.mcChildsCache["mc" + t].loop = !0,
    this.mc.mcChildsCache["mc" + t].play(),
    this.mc.mcChildsCache["mc" + t].frameEvent || (this.mc.mcChildsCache["mc" + t].frameEvent = "ENTER_FRAME_TEST"))
}
,
canvas.app.CanvasTopMenu = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !1, 0, 0),
    this.app.view.id = "top_mnu"
}
,
canvas.app.CanvasTopMenu.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasTopMenu.prototype.init = function() {
    this.model = new canvas.app.topMenu.Model(this.par),
    canvas.app.topMenu.model = this.model;
    for (var t = [canvas.Const.FONT_TAHOMA_11_BOLD_STROKE], e = [["ui", canvas.Config.ui + "main.json"]], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    this.par.configXml && e.push(["configMenu", this.par.configXml]),
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasTopMenu.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.model.parseConfig(canvas.ResourceLoader.get("configMenu")),
    this.main = new canvas.app.topMenu.Main(this.model),
    this.model.main = this.main,
    this.root.addChild(this.main),
    this.fps = 20,
    this.resize()
}
,
canvas.app.CanvasTopMenu.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasTopMenu.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
,
canvas.app.CanvasTopMenu.prototype.swfObject = function(t) {
    this.main && this.main.swfObject(t)
}
,
canvas.app.CanvasTopMenu.prototype.blinkButton = function(t, e) {
    this.main && this.main.blinkButton(parseInt(t), e)
}
,
canvas.app.CanvasTopMenu.prototype.executeMenuId = function(t) {
    this.main.executeMenuId(t)
}
,
canvas.app.topMenu.log = function(t, e) {
    canvas.Log.add(canvas.Log.TOP_MENU, t, e)
}
,
canvas.app.CanvasTreasure = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e, !0, 0, 0, !1, _top().window)
}
,
canvas.app.CanvasTreasure.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasTreasure.prototype.preInit = function() {
    null == this.par.ux_conf && (this.par.ux_conf = canvas.Config.uxPath),
    canvas.app.CanvasApp.prototype.preInit.call(this)
}
,
canvas.app.CanvasTreasure.prototype.init = function() {
    this.model = new canvas.app.treasure.Model(this.par),
    this.model.width = this.par.width,
    this.model.height = this.par.height,
    canvas.app.treasure.model = this.model;
    for (var t = [canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_14_STROKE, canvas.Const.FONT_TAHOMA_14_BOLD_STROKE, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD], e = [["treasure", canvas.Config.ui + "treasure.json"]], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasTreasure.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    canvas.ResourceLoader.get("ui") || canvas.ResourceLoader.addSubAlias("treasure", "ui"),
    this.main = new canvas.app.treasure.Main(this.model),
    this.root.addChild(this.main),
    this.fps = 30
}
,
canvas.app.CanvasTreasure.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.treasure.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this),
    null === this.par.parent.offsetParent && (this.fps = 0)
}
,
canvas.app.CanvasTreasure.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this)
}
,
canvas.app.CanvasTreasure.prototype.destroy = function() {
    this.main.destroy(),
    canvas.app.CanvasApp.prototype.destroy.call(this, !1, !1)
}
,
canvas.app.treasure.log = function(t, e) {
    canvas.Log.add(canvas.Log.TREASURE, t, e)
}
,
canvas.app.CanvasUser = function(t, e, a, s) {
    canvas.app.CanvasApp.call(this, t, e, !0, 0, 0),
    canvas.app.user.Const.TOP = a || 0,
    canvas.app.user.Const.LEFT = s || 0
}
,
canvas.app.CanvasUser.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasUser.prototype.init = function() {
    this.model = new canvas.app.user.Model(this.par),
    canvas.app.user.model = this.model;
    for (var t = [canvas.Const.FONT_TAHOMA_9, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_14_BOLD_STROKE, canvas.Const.FONT_TAHOMA_S_15_BOLD, canvas.Const.FONT_TAHOMA_18_BOLD_STROKE, canvas.Const.FONT_RADA_18, canvas.Const.FONT_ARIAL_10_BOLD_STROKE, canvas.Const.FONT_ARIAL_11_BOLD_STROKE], e = [["ui", canvas.Config.ui + "user.json"], ["user_mask", canvas.Config.ui + "user_mask.png"], canvas.Config.effects, canvas.Config.effectsPath + "hourglass.mci"], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasUser.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    canvas.InputManager.init(),
    this.hintManager = new canvas.utils.HintManager,
    this.windowsManager = new canvas.utils.WindowsManager,
    this.main = new canvas.app.user.Main(this.model,this.hintManager,this.windowsManager),
    this.model.main = this.main,
    this.root.addChild(this.main),
    this.fps = 30,
    this.app.view.style.top = 34,
    this.createHtmlElements(this.par.parent),
    this.resize()
}
,
canvas.app.CanvasUser.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasUser.prototype.createHtmlElements = function(t) {
    var e, a = document.createElement("video");
    t.style.minWidth = this.par.width,
    t.style.height = this.par.height,
    this.app.view.style.position = "absolute",
    "0" == this.model.canputoff && (this.app.view.style.left = 0 + canvas.app.user.Const.LEFT,
    this.app.view.style.top = 54 + canvas.app.user.Const.TOP),
    a.style = "border: none;background-color: transparent; position:absolute;top:108;left:78;outline: none;overflow: hidden;",
    "0" == this.model.canputoff && (a.style.left = 58 + canvas.app.user.Const.LEFT,
    a.style.top = 128 + canvas.app.user.Const.TOP),
    a.autoplay = "1",
    a.loop = "1",
    t.insertBefore(a, this.app.view),
    this.main.view.background.video = a,
    this.main.view.background.update();
    for (var s = 0; s < this.model.SLOTS_COUNT; s++)
        this.main.view.slots[s] && ((e = document.createElement("img")).style = "border: none;background-color: transparent; position:absolute;outline: none;overflow: hidden;",
        t.insertBefore(e, this.app.view),
        this.main.view.slots[s].img = e)
}
,
canvas.app.CanvasUser.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this),
    this.main && this.main.resize(this.width, this.height)
}
,
canvas.app.CanvasUser.prototype.swfObject = function(t) {
    this.main && this.main.swfObject(t)
}
,
canvas.app.CanvasUser.prototype.setBackground = function(t) {
    this.model.backImage = t,
    this.main.view.background.update()
}
,
canvas.app.user.log = function(t, e) {
    canvas.Log.add(canvas.Log.USER, t, e)
}
,
canvas.app.CanvasWheel = function(t, e) {
    canvas.app.CanvasApp.call(this, t, e)
}
,
canvas.app.CanvasWheel.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasWheel.prototype.init = function() {
    this.model = new canvas.app.wheel.Model(this.par),
    this.model.width = this.par.width,
    this.model.height = this.par.height,
    canvas.app.wheel.model = this.model;
    for (var t = [canvas.Const.FONT_CUPRUM_12_BOLD, canvas.Const.FONT_CUPRUM_16_BOLD, canvas.Const.FONT_CUPRUM_22_BOLD, canvas.Const.FONT_CUPRUM_22_BOLD_STROKE, canvas.Const.FONT_CUPRUM_24_BOLD_STROKE_BROWN, canvas.Const.FONT_CUPRUM_34_BOLD_STROKE, canvas.Const.FONT_CUPRUM_40_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD], e = [["wheel", canvas.Config.ui + "wheel.json"], canvas.Config.effectsPath + "wheel_bonus.mci"], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.app.CanvasApp.prototype.init.call(this, e)
}
,
canvas.app.CanvasWheel.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    canvas.ResourceLoader.get("ui") || canvas.ResourceLoader.addSubAlias("wheel", "ui"),
    this.main = new canvas.app.wheel.Main(this.model),
    this.root.addChild(this.main),
    this.fps = 30,
    this.resize()
}
,
canvas.app.CanvasWheel.prototype.handlerEnterFrame = function() {
    canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this)
}
,
canvas.app.CanvasWheel.prototype.swfObject = function(t) {
    this.main && this.main.swfObject(t)
}
,
canvas.app.CanvasWheel.prototype.resize = function() {
    canvas.app.CanvasApp.prototype.resize.call(this),
    this.model && (this.model.width = this.width,
    this.model.height = this.height,
    this.main && this.main.resize())
}
,
canvas.app.wheel.log = function(t, e) {
    canvas.Log.add(canvas.Log.WHEEL, t, e)
}
,
canvas.app.CanvasWorld = function(t, e, a) {
    null == a && (a = !1),
    (this.isModule = a) ? (this.par = t,
    this.root = new canvas.px.Container,
    this.stage = e,
    this.stage.addChild(this.root),
    this.preloader = new canvas.px.MovieClip(canvas.Config.effectsPath + "preloader"),
    this.preloader.gotoAndStop(1),
    this.preloader.ready ? this.preloaderReady() : canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.preloader, this.preloaderReady, this),
    canvas.app.world.Event.ENTER_FRAME = canvas.app.location.Event.ENTER_FRAME) : canvas.app.CanvasApp.call(this, t, e, !0, 0, 0)
}
,
canvas.app.CanvasWorld.prototype = Object.create(canvas.app.CanvasApp.prototype),
canvas.app.CanvasWorld.prototype.init = function() {
    this.model = new canvas.app.world.Model(this.par),
    this.model.initModule(this.isModule, this.stage),
    canvas.app.world.model = this.model,
    canvas.app.manor.model = new canvas.app.manor.Model({}),
    canvas.app.manor.model.mapMode = !0;
    for (var t = [canvas.Const.FONT_TAHOMA_10_BOLD_STROKE, canvas.Const.FONT_TAHOMA_10, canvas.Const.FONT_TAHOMA_10_BOLD, canvas.Const.FONT_TAHOMA_11, canvas.Const.FONT_TAHOMA_11_BOLD, canvas.Const.FONT_TAHOMA_11_BOLD_STROKE, canvas.Const.FONT_TAHOMA_12, canvas.Const.FONT_TAHOMA_12_BOLD, canvas.Const.FONT_TAHOMA_13, canvas.Const.FONT_TAHOMA_13_BOLD, canvas.Const.FONT_TAHOMA_15_BOLD, canvas.Const.FONT_TAHOMA_S_15_BOLD], e = [["world", canvas.Config.ui + "world.json"], ["ways", canvas.Config.ui + "ways.json"], ["config", this.model.CfgLink], ["navigate", this.model.NavLink]], a = 0; a < t.length; a++)
        e.push(canvas.Config.fontsPath + t[a] + ".fnt");
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this),
    canvas.ResourceLoader.add(e),
    this.isModule || (document.body.style.overflow = "hidden",
    canvas.ResourceLoader.addSubAlias("world", "ui"))
}
,
canvas.app.CanvasWorld.prototype.preReady = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.preReady, this),
    this.model.initConfig(),
    canvas.app.CanvasApp.prototype.init.call(this, this.model.areas_xml)
}
,
canvas.app.CanvasWorld.prototype.ready = function() {
    canvas.app.CanvasApp.prototype.ready.call(this),
    this.model.initAreas(),
    this.model.parse_compass_config(canvas.ResourceLoader.get("navigate").data),
    canvas.InputManager.init(),
    this.hintManager = new canvas.utils.HintManager,
    this.windowsManager = this.isModule ? null : new canvas.utils.WindowsManager,
    this.isModule || (canvas.app.manor.view.input = new canvas.ui.Input(this.par.parent,null,null,0,-3)),
    this.main = new canvas.app.world.Main(this.model,this.hintManager,this.windowsManager),
    this.model.main = this.main,
    this.root.addChild(this.main),
    this.fps = 30,
    this.resize()
}
,
canvas.app.CanvasWorld.prototype.handlerEnterFrame = function() {
    this.isModule || (canvas.EventManager.dispatchEvent(canvas.app.world.Event.ENTER_FRAME),
    canvas.app.CanvasApp.prototype.handlerEnterFrame.call(this))
}
,
canvas.app.CanvasWorld.prototype.resize = function() {
    this.isModule ? (this.width = canvas.app.location.model.MAP_WIDTH,
    this.height = canvas.app.location.model.hh,
    this.preloader && this.preloader.position.set(Math.round(.5 * this.width), Math.round(.5 * this.height)),
    this.model && (this.model.width = this.width,
    this.model.height = this.height)) : canvas.app.CanvasApp.prototype.resize.call(this),
    this.main && this.main.resize(this.width, this.height),
    this.model && canvas.app.manor.view.input && (canvas.app.manor.view.input.stageHeight = this.model.height)
}
,
canvas.app.CanvasWorld.prototype.handlerMouseDown = function(t) {
    t.target != canvas.app.manor.view.input && canvas.app.CanvasApp.prototype.handlerMouseDown.call(this, t)
}
,
canvas.app.CanvasWorld.prototype.refreshFlag = function() {
    this.main && this.main.view.refresh_my_flag()
}
,
canvas.app.CanvasWorld.prototype.zoomIn = function() {
    this.main && this.main.view.zoom.zoomMode(2)
}
,
canvas.app.CanvasWorld.prototype.zoomOut = function() {
    this.main && this.main.view.zoom.zoomMode(1)
}
,
canvas.app.CanvasWorld.prototype.fastUpdateFlag = function() {
    this.main && this.main.fastUpdateFlag()
}
,
canvas.app.CanvasWorld.prototype.swfObject = function(t) {
    this.main && this.main.swfObject(t)
}
,
canvas.app.world.log = function(t, e) {
    canvas.Log.add(canvas.Log.WORLD, t, e)
}
,
canvas.app.view.MappingHint = function(t, e, a, s) {
    canvas.px.Container.call(this),
    null == t && (t = "No title"),
    null == a && (a = !0),
    null == e && (e = 6770493),
    null == s && (s = !1),
    this.color = e,
    s ? (this.tf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,e,1e3,16,"left","middle"),
    this.tf.position.set(16, 8)) : (this.tf = new canvas.ui.Text(a ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,e,1e3,16,"left"),
    this.tf.position.set(16, 11)),
    this.bg = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "alt"),33,0,33,0),
    this.addChild(this.bg),
    this.addChild(this.tf),
    this.update(t),
    this.interactiveChildren = !1
}
,
canvas.app.view.MappingHint.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.view.MappingHint.prototype.update = function(t, e) {
    null == e && (e = this.color),
    this.tf.text = t,
    this.tf.color = e,
    this.bg.width = Math.max(77, this.tf.textWidth + 35),
    this.tf.x = Math.round(.5 * (this.bg.width - this.tf.textWidth))
}
,
canvas.app.view.PxHint = function(t) {
    this._text = "",
    Object.defineProperty(this, "text", {
        get: function() {
            return this._text
        },
        set: function(t) {
            this._text = t,
            this.visible = "" != this._text,
            this.title.text = this._text,
            this.back.clear(),
            this.back.beginFill(3237463432),
            this.back.lineStyle(1, 4289953873, 1),
            this.back.drawRect(0, 0, this.title.width + 2, 15 < this.title.height ? this.title.height + 2 : 12),
            this.back.endFill()
        }
    }),
    canvas.px.Container.call(this),
    null == t && (t = "");
    var e = canvas.Translator.getLang() == canvas.Const.LANG_RU;
    this.title = new canvas.ui.Text(e ? canvas.Const.FONT_IFLASH : canvas.Const.FONT_TAHOMA_9_STROKE),
    this.title.setSize(300, 20),
    this.title.position.set(2, e ? 2 : 0),
    this.back = new canvas.px.Graphics,
    this.addChild(this.back),
    this.addChild(this.title),
    this.text = t
}
,
canvas.app.view.PxHint.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.view.MainButton = function(t, e, a, s, i, n) {
    e = canvas.ResourceLoader.getImage("ui", null == e ? "main_button" : e),
    a = canvas.ResourceLoader.getImage("ui", null == a ? "main_button_over" : a),
    s = canvas.ResourceLoader.getImage("ui", null == s ? "main_button_down" : s),
    i = canvas.ResourceLoader.getImage("ui", null == i ? "main_button_disabled" : i);
    canvas.ui.Button.call(this, e, a, s, i, [33, 0, 33, 0]),
    this.field = null != n && n ? new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD,canvas.Const.FONT_TAHOMA_11_BOLD,null == t ? 16375713 : t,100,20,"center") : new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,null == t ? 16375713 : t,100,20,"center"),
    this.field.interactive = !1,
    this.field.position.set(25, 10),
    this.addChild(this.field),
    this.setSize(150, 35)
}
,
canvas.app.view.MainButton.prototype = Object.create(canvas.ui.Button.prototype),
canvas.app.view.MainButton.prototype.setSize = function(t, e) {
    canvas.ui.Button.prototype.setSize.apply(this, [t, e]),
    this.field.setSize(t - 50),
    this.sprite.hitArea = new canvas.px.Rectangle(25,6,t - 50,this._height - 12)
}
,
canvas.app.view.MainButton.prototype.setTitle = function(t) {
    this.field.text = t
}
,
canvas.app.view.MainButtonWhite = function(t) {
    canvas.app.view.MainButton.call(this, null == t ? 8278832 : t, "main_button_white", "main_button_white_over", "main_button_white", "main_button_white_disabled")
}
,
canvas.app.view.MainButtonWhite.prototype = Object.create(canvas.app.view.MainButton.prototype),
canvas.app.view.BigHint = function(t, e) {
    canvas.px.Container.call(this),
    null == t && (t = ""),
    null == e && (e = ""),
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "alt2"),14,24,14,4),
    this.addChild(this.back),
    this.back.width = 289,
    this.back.height = 80,
    this.headerField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,4010799,this.back.width,20,"center"),
    this.headerField.position.set(0, 5),
    this.addChild(this.headerField),
    this.headerField.text = t,
    this.infoField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12,4010799,this.back.width - 45,1e3,"left"),
    this.infoField.position.set(22, 32),
    this.addChild(this.infoField),
    this.update(e)
}
,
canvas.app.view.BigHint.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.view.BigHint.prototype.update = function(t, e) {
    this.infoField.text = t,
    this.back.height = this.infoField.textHeight + 45,
    null != e && (this.headerField.text = e)
}
,
canvas.app.view.BigHint2 = function(t, e) {
    canvas.px.Container.call(this),
    null == e && (e = ""),
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "alt3"),12,12,12,12)),
    this.back.width = t || 200,
    this.back.height = 80,
    this.infoField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,6770493,this.back.width - 45,1e3,"left")),
    this.infoField.position.set(22, 8),
    this.update(e)
}
,
canvas.app.view.BigHint2.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.view.BigHint2.prototype.update = function(t) {
    this.infoField.text = t || "",
    this.back.height = this.infoField.textHeight + 20
}
,
canvas.app.view.OldButton = function(t) {
    null == t && (t = 12124160),
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "old_button"), [42, 0, 42, 0]),
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,t,100,20,"center"),
    this.field.position.set(25, 6),
    this.addChild(this.field),
    this.setSize(171, 25)
}
,
canvas.app.view.OldButton.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.view.OldButton.prototype.setSize = function(t, e) {
    canvas.ui.Button.prototype.setSize.apply(this, [t, e]),
    this.field.setSize(t - 50, 20),
    this.sprite.hitArea = new canvas.px.Rectangle(25,5,t - 50,e ? e - 10 : 15)
}
,
canvas.app.view.OldButton.prototype.setTitle = function(t) {
    this.field.text = t
}
,
canvas.app.view.Money = function(t, e, a, s, i, n, o, r, c, p, h) {
    this.multiColors = null != a && a,
    this.iconSide = null == r || r,
    this.displayGold = !0,
    this.displaySilver = !0,
    this.displayBronze = !0,
    this.showIfZero = !1,
    this._money = 0,
    Object.defineProperty(this, "money", {
        get: function() {
            return this._money
        },
        set: function(t) {
            this._money = t,
            this.update()
        }
    }),
    Object.defineProperty(this, "gold", {
        get: function() {
            return Math.floor(1e-4 * this._money)
        },
        set: function(t) {
            this.money = 1e4 * t
        }
    }),
    this._gems = 0,
    Object.defineProperty(this, "gems", {
        get: function() {
            return this._gems
        },
        set: function(t) {
            this._gems = canvas.Functions.getGems(t),
            this.update()
        }
    }),
    this._rubins = 0,
    Object.defineProperty(this, "rubins", {
        get: function() {
            return this._rubins
        },
        set: function(t) {
            this._rubins = canvas.Functions.getGems(t),
            this.update()
        }
    }),
    this._color = 0,
    Object.defineProperty(this, "color", {
        get: function() {
            return this._color
        },
        set: function(t) {
            this._color = t,
            this.field.color = this._color,
            this.update()
        }
    }),
    this._image = "",
    Object.defineProperty(this, "image", {
        get: function() {
            return this._image
        },
        set: function(t) {
            this._image = t,
            this.update()
        }
    }),
    this._imageCount = 0,
    Object.defineProperty(this, "imageCount", {
        get: function() {
            return this._imageCount
        },
        set: function(t) {
            this._imageCount = t,
            this.update()
        }
    }),
    canvas.px.Container.call(this),
    null == t && (t = 7026733),
    this.field = new canvas.ui.HtmlText(null == e ? canvas.Const.FONT_TAHOMA_11 : e,null == e ? canvas.Const.FONT_TAHOMA_11_BOLD : e,t,null == s ? 300 : s,null == i ? 20 : i,null == n ? "left" : n,null == o ? "top" : o,c,p,h),
    this.addChild(this.field)
}
,
canvas.app.view.Money.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.view.Money.prototype.update = function() {
    var t = ""
      , e = this.money
      , a = Math.floor(e % 100)
      , e = Math.floor(.01 * e)
      , s = Math.floor(e % 100);
    e = Math.floor(.01 * e);
    var i = Math.floor(e);
    0 != i && this.displayGold && (this.iconSide ? t += ("" == t ? "" : " ") + "<img src='money_gold' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#fed200'>" + i + "</font>" : i) : t += ("" == t ? "" : " ") + (this.multiColors ? "<font color='#fed200'>" + i + "</font>" : i) + " <img src='money_gold' yOffset='2' atlas='ui'/>"),
    (0 != s || this.showIfZero && 0 < Math.abs(i)) && this.displaySilver && (this.iconSide ? t += ("" == t ? "" : " ") + "<img src='money_silver' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#dadada'>" + s + "</font>" : s) : t += ("" == t ? "" : " ") + (this.multiColors ? "<font color='#dadada'>" + s + "</font>" : s) + " <img src='money_silver' yOffset='2' atlas='ui'/>"),
    (0 != a || this.showIfZero && 100 <= Math.abs(this.money)) && this.displayBronze && (this.iconSide ? t += ("" == t ? "" : " ") + "<img src='money_bronze' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#f29f72'>" + a + "</font>" : a) : t += ("" == t ? "" : " ") + (this.multiColors ? "<font color='#f29f72'>" + a + "</font>" : a) + " <img src='money_bronze' yOffset='2' atlas='ui'/>"),
    0 != this.gems && (e = this.showIfZero ? this.gems.toFixed(2) : this.gems,
    this.iconSide ? t += ("" == t ? "" : " ") + "<img src='money_crystal' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#72bdf2'>" + e + "</font>" : e) : t += ("" == t ? "" : " ") + (this.multiColors ? "<font color='#72bdf2'>" + e + "</font>" : e) + " <img src='money_crystal' yOffset='2' atlas='ui'/>"),
    0 != this.rubins && (e = this.showIfZero ? this.rubins.toFixed(2) : this.rubins,
    this.iconSide ? t += ("" == t ? "" : " ") + "<img src='money_rubin' yOffset='2' atlas='ui'/> " + (this.multiColors ? "<font color='#ef5b5b'>" + e + "</font>" : e) : t += ("" == t ? "" : " ") + (this.multiColors ? "<font color='#ef5b5b'>" + e + "</font>" : e) + " <img src='money_rubin' yOffset='2' atlas='ui'/>"),
    this.image && (e = this.imageCount,
    this.iconSide ? t += ("" == t ? "" : " ") + "<img src='" + this.image + "' width='60' height='60' yOffset='1' scale='0.33'/> " + (this.multiColors ? "<font color='#ef5b5b'>" + e + "</font>" : e) : t += ("" == t ? "" : " ") + (this.multiColors ? "<font color='#ef5b5b'>" + e + "</font>" : e) + " <img src='" + this.image + "' width='60' height='60' yOffset='1' scale='0.33'/>"),
    this.field.text = t
}
,
canvas.app.view.Money.prototype.animateToValue = function(t, e, a, s) {
    null == s && (s = 10),
    this.timer && clearInterval(this.timer),
    this.targetMoney = null == t ? this.money : t,
    this.targetGems = null == e ? this.gems : canvas.Functions.getGems(e),
    this.targetRubins = null == a ? this.rubins : canvas.Functions.getGems(a),
    this.stepMoney = Math.max(Math.ceil(Math.abs(this.money - this.targetMoney) / s), .01),
    this.stepGems = Math.max(Math.abs(this.gems - this.targetGems) / s, .01),
    this.stepRubins = Math.max(Math.abs(this.rubins - this.targetRubins) / s, .01),
    this.timer = setInterval(this.timerHandler.bind(this), 50)
}
,
canvas.app.view.Money.prototype.timerHandler = function() {
    var t;
    this.targetMoney > this.money ? ((t = this.money + this.stepMoney) >= this.targetMoney ? (this.showIfZero = !1,
    this.money = t = this.targetMoney) : (this.showIfZero = !0,
    this.money = t),
    this._money = t) : this.targetMoney < this.money ? ((t = this.money - this.stepMoney) <= this.targetMoney ? (this.showIfZero = !1,
    this.money = t = this.targetMoney) : (this.showIfZero = !0,
    this.money = t),
    this._money = t) : this.targetGems > this.gems ? (t = this.gems + this.stepGems) >= this.targetGems ? (this.showIfZero = !1,
    this.gems = this.targetGems) : (this.showIfZero = !0,
    this.gems = t) : this.targetGems < this.gems ? (t = this.gems - this.stepGems) <= this.targetGems ? (this.showIfZero = !1,
    this.gems = this.targetGems) : (this.showIfZero = !0,
    this.gems = t) : this.targetRubins > this.rubins ? (t = this.rubins + this.stepRubins) >= this.targetRubins ? (this.showIfZero = !1,
    this.rubins = this.targetRubins) : (this.showIfZero = !0,
    this.rubins = t) : this.targetRubins < this.rubins ? (t = this.rubins - this.stepRubins) <= this.targetRubins ? (this.showIfZero = !1,
    this.rubins = this.targetRubins) : (this.showIfZero = !0,
    this.rubins = t) : clearInterval(this.timer)
}
,
canvas.app.view.Money.prototype.makeOneCoin = function(t) {
    return t < 100 ? t : t < 1e4 ? 100 * Math.floor(.01 * t) : 1e4 * Math.floor(1e-4 * t)
}
,
canvas.app.view.Money.prototype.reset = function() {
    this.money = this.gems = this.rubins = 0,
    this.image = ""
}
,
canvas.app.view.SmallButton = function(t, e) {
    var a = canvas.ResourceLoader.getImage("ui", "small_button")
      , s = canvas.ResourceLoader.getImage("ui", "small_button_over")
      , i = canvas.ResourceLoader.getImage("ui", "small_button_down")
      , n = canvas.ResourceLoader.getImage("ui", "small_button_disabled");
    canvas.ui.Button.call(this, a, s, i, n, [8, 0, 8, 0]),
    this.field = null != e && e ? new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_10_BOLD,canvas.Const.FONT_TAHOMA_10_BOLD,null == t ? 2954752 : t,100,20,"center") : new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,null == t ? 2954752 : t,100,20,"center"),
    this.field.interactive = !1,
    this.field.position.set(8, 1),
    this.addChild(this.field),
    this.setSize(60, 15)
}
,
canvas.app.view.SmallButton.prototype = Object.create(canvas.ui.Button.prototype),
canvas.app.view.SmallButton.prototype.setSize = function(t, e) {
    canvas.ui.Button.prototype.setSize.apply(this, [t, e]),
    this.field.setSize(t - 16)
}
,
canvas.app.view.SmallButton.prototype.setTitle = function(t) {
    this.field.text = t
}
,
canvas.app.view.MacroHtmlText = function() {
    this.M_ARTIFACT = "ARTIFACT",
    canvas.ui.HtmlText.apply(this, arguments)
}
,
canvas.app.view.MacroHtmlText.prototype = Object.create(canvas.ui.HtmlText.prototype),
canvas.app.view.MacroHtmlText.prototype.make = function() {
    this.applyMacro(),
    canvas.ui.HtmlText.prototype.make.call(this)
}
,
canvas.app.view.MacroHtmlText.prototype.applyMacro = function() {
    for (var t, e, a, s = this._text, i = new RegExp(/#[A-Z_]+\[[^#\]]+\]#/gi), n = !1, o = i.exec(s); null != o; )
        e = (t = o[0].split("["))[0].substr(1),
        a = t[1].substr(0, t[1].length - 2),
        e === this.M_ARTIFACT && (t = a.split(","),
        (a = canvas.data.ItemPrototypeData.getItemPrototype(t[0])) || (n = !0),
        n || (t = "<b><font color='#" + canvas.data.ItemPrototypeData.getColorByQuality(a.quality).toString(16) + "'><a href='artifact_info.php?artikul_id=" + a.id + "' target='_blank'>" + (t[1] || a.title) + "</a></font>" + (t[2] ? " <font color='#ba0000'>" + t[2] + " " + canvas.Translator.getText(2022) + "</font>" : "") + "</b>",
        i.lastIndex = o.index + t.length,
        s = s.substr(0, o.index) + t + s.substr(o.index + o[0].length))),
        o = i.exec(s);
    n ? canvas.EventManager.addEventListener(canvas.data.ItemPrototypeData.EVENT_COMPLETE, null, this.completeProtoHandler, this) : this._text = s
}
,
canvas.app.view.MacroHtmlText.prototype.completeProtoHandler = function() {
    canvas.EventManager.removeEventListener(canvas.data.ItemPrototypeData.EVENT_COMPLETE, null, this.completeProtoHandler, this),
    this.make()
}
,
canvas.app.view.window.ConfirmWindowOld = function() {
    canvas.px.Window.call(this),
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "confirm_back"))),
    this.header = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"),31,0,31,0),
    this.header.y = -10,
    this.addChild(this.header),
    this.header.interactive = !0,
    this.headerField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16577975,this.back.width,20,"center","top",0,0),
    this.headerField.y = -7,
    this.addChild(this.headerField),
    this.infoField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,5324857,this.back.width - 40,85,"center","middle"),
    this.addChild(this.infoField),
    this.infoField.position.set(18, 20),
    this.yesButton = new canvas.app.view.MainButton,
    this.yesButton.setSize(190, 0),
    this.addChild(this.yesButton),
    this.yesButton.setTitle(canvas.Translator.getText(805)),
    this.yesButton.position.set(Math.round(.5 * (this.back.width - this.yesButton.width)), this.back.height - 95),
    this.noButton = new canvas.app.view.MainButton,
    this.noButton.setSize(190, 0),
    this.addChild(this.noButton),
    this.noButton.setTitle(canvas.Translator.getText(806)),
    this.noButton.position.set(this.yesButton.x, this.back.height - 60),
    this.closeButton = this.noButton
}
,
canvas.app.view.window.ConfirmWindowOld.prototype = Object.create(canvas.px.Window.prototype),
canvas.app.view.window.ConfirmWindowOld.prototype.update = function(t, e, a, s, i, n, o) {
    this.headerField.text = t,
    this.header.width = this.headerField.textWidth + 80,
    this.header.x = Math.round(.5 * (this.back.width - this.header.width)),
    null != a && this.yesButton.setTitle(a),
    null != s && this.noButton.setTitle(s),
    this.infoField.text = e,
    this.yesButton.visible = "" != a,
    this.actionFunc = i,
    this.actionFuncParams = n,
    this.context = o
}
,
canvas.app.view.window.ConfirmWindowOld.prototype.clickHandler = function(t) {
    canvas.px.Window.prototype.clickHandler.call(this, t),
    canvas.Functions.findParent(this.yesButton, t.target) && (null != this.actionFunc && this.actionFunc.apply(this.context, this.actionFuncParams),
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this))
}
,
canvas.app.battle.Main = function(t, e) {
    canvas.px.Container.call(this),
    this.model = t,
    canvas.app.battle.log("frameRate = " + this.model.fps),
    this.hintManager = e,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    this.view = new canvas.app.battle.View(this),
    this.view.x = 10,
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    this.addChild(this.view),
    this.addChild(this.hintContainer),
    this.view.soundView.init(this.model.soundMute, this.model.soundVolume),
    this.players = {},
    this.playersQueue = [],
    this.skeletons = {},
    this.mFunc = new canvas.app.battle.engine.MFunc(this),
    this.mEve = new canvas.app.battle.engine.MEve(this),
    this.mCmd = new canvas.app.battle.engine.MCmd(this),
    this.conn = new canvas.app.battle.engine.Connection(this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.OPP_ID_CHANGE, null, this.handlerOppChange, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SKIP_TURN, null, this.handlerSkipTurn, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.CENTER_VISIBLE, null, this.handlerCenterVisible, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SOUND_VOLUME_CHANGE, null, this.handlerVolumeChange, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SOUND_MUTE_CHANGE, null, this.handlerMuteChange, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EFFECT_AFTER_SPELL, null, this.handlerEffectAfterSpell, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.flagButton, this.handlerFlagClick, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ATTACK, null, this.handlerAttack, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.BLOCK_SWITCH, null, this.handlerBlockSwitch, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.CENTER_CHANGE_MODE, null, this.handlerChangeCenterMode, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.RESET, null, this.handlerReset, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.TRY_RECONNECT, null, this.handlerTryReconnect, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.REPAIR, null, this.handlerRepair, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.OPEN_COMBO_LIST, null, this.handlerOpenComboList, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.CHOOSE_COMBO, null, this.handlerChooseCombo, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SHOW_BOW_PANEL, null, this.handlerShowBowPanel, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.USE_EFFECT, null, this.handlerUseEffect, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SHOW_ERROR, null, this.handlerShowError, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.SHOW_MESSAGE, null, this.handlerShowMessage, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.CLEAR_SYNC_TIMEOUT, null, this.clearSyncTimeout, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ADD_EVENT, null, this.handlerAddEvent, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ADD_COMMAND, null, this.handlerAddCommand, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.UPDATE_PERS_HP_LVL, null, this.updPersHPLvl, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.UPDATE_PERS_MP_LVL, null, this.updPersMPLvl, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EVENT_EVE, null, this.handlerEvent, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EVENT_CMD, null, this.handlerCmd, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EVENT_CMD_ERROR, null, this.handlerCmdError, this),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.EVENT_MY_FUNC, null, this.handlerMyFunc, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.persLevel.button, this.handlerPersLevelClick, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.oppLevel.button, this.handlerOppLevelClick, this),
    this.centerVisible(!1),
    canvas.Config.isLocal || new canvas.utils.URLRequest(canvas.Config.domain + "/fight.php?sig=" + md5(canvas.app.battle.Const.MAX_ANIMATION_SIZE) + "&check=1").load(),
    setInterval(this.handlerTimer.bind(this), 1e3),
    this.handlerTimer(),
    canvas.Config.isLocal || this.conn.tryConnect()
}
,
canvas.app.battle.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.Main.prototype.resize = function(t, e) {
    this.hintManager.init(this.hintContainer, t, e),
    this.model.width = t,
    this.model.height = e
}
,
canvas.app.battle.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.battle.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.battle.Main.prototype.handlerPersLevelClick = function(t) {
    this.sendData("mem", "pers_focus@" + this.model.persId)
}
,
canvas.app.battle.Main.prototype.handlerOppLevelClick = function(t) {
    this.sendData("mem", "pers_focus@" + this.model.oppId)
}
,
canvas.app.battle.Main.prototype.handlerResetFocus = function(t) {
    this.sendData("mem", "pers_focus@0")
}
,
canvas.app.battle.Main.prototype.handlerKey = function(t) {
    if (!document.activeElement || "HTMLInputElement" != document.activeElement.constructor.name) {
        var e, a = t.params.globalKeyCode, s = (t.params.altKey,
        t.params.ctrlKey,
        t.params.shiftKey);
        if (this.model.isUseHotkeys || a == canvas.Const.KEYS.L)
            switch (a) {
            case canvas.Const.KEYS.L:
                s && canvas.Log.show(canvas.Log.BATTLE);
                break;
            case canvas.Const.KEYS.Q:
                this.view.centerView.visible && (this.isInAttackMode() ? this.handlerAttack({
                    params: canvas.app.battle.Const.TOP_ATTACK_ID
                }) : this.model.hasSpells && (e = this.view.centerView.cSpells.slots[1]) && e.handlerClick());
                break;
            case canvas.Const.KEYS.W:
                this.view.centerView.visible && (this.isInAttackMode() ? this.handlerAttack({
                    params: canvas.app.battle.Const.MIDDLE_ATTACK_ID
                }) : this.model.hasSpells && (e = this.view.centerView.cSpells.slots[2]) && e.handlerClick());
                break;
            case canvas.Const.KEYS.E:
                this.view.centerView.visible && (this.isInAttackMode() ? this.handlerAttack({
                    params: canvas.app.battle.Const.BOTTOM_ATTACK_ID
                }) : this.model.hasSpells && (e = this.view.centerView.cSpells.slots[3]) && e.handlerClick());
                break;
            case canvas.Const.KEYS.R:
                this.view.centerView.visible && (this.isInAttackMode() ? this.handlerBlockSwitch() : this.model.hasSpells && (e = this.view.centerView.cSpells.slots[4]) && e.handlerClick());
                break;
            case canvas.Const.KEYS.A:
                this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells && (e = this.view.centerView.cSpells.slots[6]) && e.handlerClick();
                break;
            case canvas.Const.KEYS.S:
                this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells && (e = this.view.centerView.cSpells.slots[7]) && e.handlerClick();
                break;
            case canvas.Const.KEYS.D:
                this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells && (e = this.view.centerView.cSpells.slots[8]) && e.handlerClick();
                break;
            case canvas.Const.KEYS.F:
                this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells && (e = this.view.centerView.cSpells.slots[9]) && e.handlerClick();
                break;
            case canvas.Const.KEYS.G:
                this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells && (e = this.view.centerView.cSpells.slots[10]) && e.handlerClick();
                break;
            case canvas.Const.KEYS.UP_ARROW:
                this.view.centerView.visible && this.isInAttackMode() && this.handlerAttack({
                    params: canvas.app.battle.Const.TOP_ATTACK_ID
                });
                break;
            case canvas.Const.KEYS.RIGHT_ARROW:
                this.view.centerView.visible && this.isInAttackMode() && this.handlerAttack({
                    params: canvas.app.battle.Const.MIDDLE_ATTACK_ID
                });
                break;
            case canvas.Const.KEYS.DOWN_ARROW:
                this.view.centerView.visible && this.isInAttackMode() && this.handlerAttack({
                    params: canvas.app.battle.Const.BOTTOM_ATTACK_ID
                });
                break;
            case canvas.Const.KEYS.LEFT_ARROW:
                this.view.centerView.visible && this.isInAttackMode() && this.handlerBlockSwitch();
                break;
            case canvas.Const.KEYS.KEY_1:
            case canvas.Const.KEYS.NUM_1:
                !s && this.mCmd.myEffectsGetted && this.sendData("items", "HotKey@1");
                break;
            case canvas.Const.KEYS.KEY_2:
            case canvas.Const.KEYS.NUM_2:
                !s && this.mCmd.myEffectsGetted && this.sendData("items", "HotKey@2");
                break;
            case canvas.Const.KEYS.KEY_3:
            case canvas.Const.KEYS.NUM_3:
                !s && this.mCmd.myEffectsGetted && this.sendData("items", "HotKey@3");
                break;
            case canvas.Const.KEYS.KEY_4:
            case canvas.Const.KEYS.NUM_4:
                !s && this.mCmd.myEffectsGetted && this.sendData("items", "HotKey@4");
                break;
            case canvas.Const.KEYS.KEY_5:
            case canvas.Const.KEYS.NUM_5:
                !s && this.mCmd.myEffectsGetted && this.sendData("items", "HotKey@5");
                break;
            case canvas.Const.KEYS.KEY_6:
            case canvas.Const.KEYS.NUM_6:
                !s && this.mCmd.myEffectsGetted && this.sendData("items", "HotKey@6");
                break;
            case canvas.Const.KEYS.KEY_7:
            case canvas.Const.KEYS.NUM_7:
                !s && this.mCmd.myEffectsGetted && this.sendData("items", "HotKey@7");
                break;
            case canvas.Const.KEYS.KEY_8:
            case canvas.Const.KEYS.NUM_8:
                !s && this.mCmd.myEffectsGetted && this.sendData("items", "HotKey@8");
                break;
            case canvas.Const.KEYS.KEY_9:
            case canvas.Const.KEYS.NUM_9:
                !s && this.mCmd.myEffectsGetted && this.sendData("items", "HotKey@9");
                break;
            case canvas.Const.KEYS.KEY_0:
            case canvas.Const.KEYS.NUM_0:
                !s && this.mCmd.myEffectsGetted && this.sendData("items", "HotKey@10");
                break;
            case canvas.Const.KEYS.MINUS:
                !s && this.mCmd.myEffectsGetted && this.sendData("items", "HotKey@11");
                break;
            case canvas.Const.KEYS.EQUAL:
                !s && this.mCmd.myEffectsGetted && this.sendData("items", "HotKey@12");
                break;
            case canvas.Const.KEYS.RIGHT_SQUARE_BRACKET:
                this.sendData("items", "NextPage@ ");
                break;
            case canvas.Const.KEYS.LEFT_SQUARE_BRACKET:
                this.sendData("items", "PrevPage@ ");
                break;
            case canvas.Const.KEYS.B:
                this.sendData("items_right", "OpenBag@ ");
                break;
            case canvas.Const.KEYS.M:
                this.sendData("items_right", "OpenMount@ ");
                break;
            case canvas.Const.KEYS.T:
                this.view.centerView.visible && !this.isInAttackMode() && this.model.hasSpells ? (e = this.view.centerView.cSpells.slots[5]) && e.handlerClick() : this.useAura(0);
                break;
            case canvas.Const.KEYS.Y:
                this.useAura(1);
                break;
            case canvas.Const.KEYS.U:
                this.useAura(2);
                break;
            case canvas.Const.KEYS.I:
                this.useAura(3);
                break;
            case canvas.Const.KEYS.SPACEBAR:
                this.handlerSkipTurn();
                break;
            case canvas.Const.KEYS.Z:
                this.sendData("mem", "pers_focus@" + this.model.persId);
                break;
            case canvas.Const.KEYS.X:
                this.sendData("mem", "pers_focus@" + this.model.oppId);
                break;
            case canvas.Const.KEYS.ESC:
                this.sendData("mem", "pers_focus@0"),
                this.persFocus(0);
                break;
            case canvas.Const.KEYS.POINT:
                this.handlerFlagClick();
                break;
            case canvas.Const.KEYS.TAB:
                t.params.preventDefault(),
                this.view.centerView.cDot.btIsOn && this.model.hasSpells && this.view.centerView.cDot.handlerBtnClick()
            }
    }
}
,
canvas.app.battle.Main.prototype.handlerMyFunc = function(t) {
    var e = t.params;
    switch (e.shift()) {
    case canvas.app.battle.Const.MY_FUNC_CHANGE_MODE:
        this.mFunc.changeMode.apply(this.mFunc, e);
        break;
    case canvas.app.battle.Const.MY_FUNC_USE_EFFECT:
        this.mFunc.useEffect.apply(this.mFunc, e);
        break;
    case canvas.app.battle.Const.MY_FUNC_UNSET_AURA:
        this.mFunc.unsetAura.apply(this.mFunc, e);
        break;
    case canvas.app.battle.Const.MY_FUNC_SEND_MESSAGE:
        this.mFunc.sendMsg.apply(this.mFunc, e);
        break;
    default:
        canvas.app.battle.log("handlerMyFunc error: unknown cmd type", 16711680)
    }
}
,
canvas.app.battle.Main.prototype.handlerTimer = function() {
    this.view.flagHint.text = 0 < this.model.flagTime ? canvas.Functions.formatDate(1e3 * this.model.flagTime, "00", 1, !1, !0) : "",
    0 < this.model.flagTime && 0 != this.model.flagTimeCd && (this.model.flagTime--,
    this.view.drawFlagCd(this.model.flagTime / this.model.flagTimeCd)),
    0 < this.model.skipTurnTime && !this.model.skipTurnIsCooldown() && canvas.app.battle.model.persStatus == canvas.app.battle.Const.STATUS_ACTIVE && (this.centerVisible(!0),
    this.model.skipTurnTime = 0)
}
,
canvas.app.battle.Main.prototype.handlerOppChange = function(t) {
    this.sendData("mem", "opp_id@" + this.model.oppId),
    this.view.updateFocus()
}
,
canvas.app.battle.Main.prototype.handlerMuteChange = function(t) {
    this.model.soundMute = t.params
}
,
canvas.app.battle.Main.prototype.handlerVolumeChange = function(t) {
    this.model.soundVolume = t.params
}
,
canvas.app.battle.Main.prototype.handlerSkipTurn = function(t) {
    this.view.centerView.skipButton.visible && this.view.centerView.visible && this.mFunc.skipTurn()
}
,
canvas.app.battle.Main.prototype.handlerAttack = function(t) {
    t = t.params;
    this.checkIsCanAttack(t) && (this.mFunc.attack(t),
    this.centerVisible(!1),
    canvas.app.battle.model.attackTime = Date.now())
}
,
canvas.app.battle.Main.prototype.checkIsCanAttack = function(t) {
    var e = !0
      , a = canvas.app.battle.model.oppMask;
    if (this.isInAttackMode())
        if (this.view.centerView.cAttack.isCooldown)
            e = !1;
        else
            switch (t) {
            case canvas.app.battle.Const.TOP_ATTACK_ID:
                e = 1 == (1 & a);
                break;
            case canvas.app.battle.Const.MIDDLE_ATTACK_ID:
                e = (2 & a) >> 1 == 1;
                break;
            case canvas.app.battle.Const.BOTTOM_ATTACK_ID:
                e = (4 & a) >> 2 == 1
            }
    else
        e = !1;
    return e
}
,
canvas.app.battle.Main.prototype.isInAttackMode = function() {
    return this.view.centerView.mode == canvas.app.battle.Const.MODE_ATTACK
}
,
canvas.app.battle.Main.prototype.handlerBlockSwitch = function(t) {
    var e, a = canvas.app.battle.model;
    this.isInAttackMode() && ((e = Date.now()) - a.blockTime < 5e3 || (a.blockTime = e,
    e = a.memDat[a.persId].persFlags,
    a.testFlag(e, canvas.app.battle.Const.FS_PF_STUNNED) || (a.testFlag(e, canvas.app.battle.Const.FS_PF_DEFENDED) ? (e &= 4294967039,
    this.view.centerView.activeBlock(!1)) : (e |= canvas.app.battle.Const.FS_PF_DEFENDED,
    this.view.centerView.activeBlock(!0)),
    this.mFunc.changeMode(a.testFlag(e, canvas.app.battle.Const.FS_PF_DEFENDED) ? 1 : 0, canvas.app.battle.Const.TO_FS_PF_DEFENDED))))
}
,
canvas.app.battle.Main.prototype.handlerChangeCenterMode = function(t) {
    this.model.centerMode = t.params
}
,
canvas.app.battle.Main.prototype.handlerCenterVisible = function(t) {
    this.centerVisible(t.params)
}
,
canvas.app.battle.Main.prototype.handlerEffectAfterSpell = function(t) {
    this.model.animationLock = !1,
    this.mCmd.paksReadyAndParse()
}
,
canvas.app.battle.Main.prototype.handlerEffectAfterDrink = function(t) {
    this.mCmd.paksReadyAndParse()
}
,
canvas.app.battle.Main.prototype.handlerFlagClick = function(t) {
    canvas.app.battle.model.flagTime <= 0 && (this.mFunc.useEffect(canvas.app.battle.model.flagEffId),
    this.mCmd.paksReadyAndParse())
}
,
canvas.app.battle.Main.prototype.handlerReset = function(t) {
    this.model.reset(),
    this.view.topTimer.deactivate(),
    this.centerVisible(!1)
}
,
canvas.app.battle.Main.prototype.handlerTryReconnect = function(t) {
    this.conn.tryConnect()
}
,
canvas.app.battle.Main.prototype.handlerRepair = function(t) {
    this.view.mainPopup.deactivate(),
    canvas.app.battle.model.repair(),
    this.handlerTryReconnect()
}
,
canvas.app.battle.Main.prototype.handlerOpenComboList = function(t) {
    this.view.openComboList()
}
,
canvas.app.battle.Main.prototype.handlerChooseCombo = function(t) {
    this.view.comboView.chooseCombo(t.params)
}
,
canvas.app.battle.Main.prototype.handlerShowBowPanel = function(t) {
    this.view.showBowPanel(t.params)
}
,
canvas.app.battle.Main.prototype.handlerUseEffect = function(t) {
    this.view.centerView.useEffect(t.params)
}
,
canvas.app.battle.Main.prototype.handlerShowError = function(t) {
    this.view.showErrorPopup(t.params)
}
,
canvas.app.battle.Main.prototype.handlerShowMessage = function(t) {
    this.view.showMessagePopup(t.params.mode, t.params.headerLabel, t.params.bodyLabel, t.params.yesFunc, t.params.yesFuncParams, t.params.acceptLabel, t.params.banLabel, t.params.cancelLabel, t.params.num)
}
,
canvas.app.battle.Main.prototype.setSyncTimeout = function() {
    this.syncTimeout && clearTimeout(this.syncTimeout),
    this.syncTimeout = setTimeout(this.mFunc.persState.bind(this.mFunc), canvas.app.battle.Const.STATE_SYNC_INTERVAL, "SYNC")
}
,
canvas.app.battle.Main.prototype.clearSyncTimeout = function() {
    this.syncTimeout && (clearTimeout(this.syncTimeout),
    this.syncTimeout = 0),
    0 != this.mCmd.myEffectsListIV && (clearTimeout(this.mCmd.myEffectsListIV),
    this.mCmd.myEffectsListIV = 0),
    this.evMonClear(),
    this.model.mlInterval = 1e3
}
,
canvas.app.battle.Main.prototype.evMonInit = function() {
    this.evMonClear(),
    this.evMonInterval = setInterval(this.evMonApply.bind(this), 3e3)
}
,
canvas.app.battle.Main.prototype.evMonClear = function() {
    this.evMonInterval && clearInterval(this.evMonInterval)
}
,
canvas.app.battle.Main.prototype.evMonApply = function() {
    this.model.evActivity = Math.floor(this.model.evActivityTmp / 3),
    this.model.evActivityTmp = 0,
    this.model.evActivity < 10 ? this.model.mlInterval = 1e3 : this.model.evActivity < 30 ? this.model.mlInterval = 3e3 : this.model.evActivity < 60 ? this.model.mlInterval = 5e3 : this.model.evActivity < 100 ? this.model.mlInterval = 7e3 : this.model.evActivity < 150 ? this.model.mlInterval = 1e4 : this.model.mlInterval = 15e3
}
,
canvas.app.battle.Main.prototype.mlRepInit = function() {
    this.mlRepInterval && clearTimeout(this.mlRepInterval),
    setTimeout(this.mlSend.bind(this), canvas.app.battle.model.mlInterval)
}
,
canvas.app.battle.Main.prototype.mlSend = function() {
    var t = canvas.app.battle.model;
    t.mlBuffer = "";
    for (var e = 0; e < t.mlBufferQueue.length; e++)
        t.mlBuffer += (0 < t.mlBuffer.length ? t.ch2 : "") + t.mlBufferHash[t.mlBufferQueue[e]];
    if (0 < t.mlBuffer.length) {
        if (t.memStreamBool)
            if (t.mlBuffer.length < 20480)
                this.sendData("mem", "pak2@" + t.mlBuffer);
            else {
                for (var a = t.mlBuffer; 0 < a.length; )
                    this.sendData("mem", "pak2s@" + a.substr(0, 15360)),
                    a = a.substr(15360);
                this.sendData("mem", "pak1s@done")
            }
        t.mlBuffer = "",
        t.mlBufferHash = {},
        t.mlBufferQueue = []
    }
    this.mlRepInit()
}
,
canvas.app.battle.Main.prototype.handlerAddEvent = function(t) {
    canvas.app.battle.model.addEvent(t.params.params, t.params.code)
}
,
canvas.app.battle.Main.prototype.handlerAddCommand = function(t) {
    canvas.app.battle.model.addCommand(t.params.params, t.params.code)
}
,
canvas.app.battle.Main.prototype.handlerEvent = function(e) {
    try {
        var t = e.params.rid
          , a = e.params.code
          , s = this.model.serverParser;
        switch (a) {
        case s.FS_PE_OPPWAIT:
            this.mEve.oppWait();
            break;
        case s.FS_PE_OPPNEW:
            this.mEve.oppNew();
            break;
        case s.FS_PE_FIGHTSTATE:
            this.mEve.fightState();
            break;
        case s.FS_PE_NEWPERS:
            this.mEve.newPers();
            break;
        case s.FS_PE_ATTACKWAIT:
            this.mEve.attackWait();
            break;
        case s.FS_PE_ATTACKNOW:
            this.mEve.attackNow();
            break;
        case s.FS_PE_ATTACK:
            this.mFunc.effectList(this.model.persId),
            this.mFunc.effectList(this.model.oppId),
            this.mEve.attack();
            break;
        case s.FS_PE_FIGHTLOG:
            this.mEve.fightLog();
            break;
        case s.FS_PE_ATTACKTIMEOUT:
            this.mEve.attackTimeout();
            break;
        case s.FS_PE_FIGHTOVER:
            this.mEve.fightOver();
            break;
        case s.FS_PE_SRVSHUTDOWN:
            this.mEve.srvShutdown();
            break;
        case s.FS_PE_EFFECTAPPLY:
            this.mEve.effectApply(t);
            break;
        case s.FS_PE_EFFECTUSE:
            this.mEve.effectUse();
            break;
        case s.FS_PE_DAMAGE:
            this.mEve.damage();
            break;
        case s.FS_PE_DEATH:
            this.mEve.death();
            break;
        case s.FS_PE_MYFIGHTRETURN:
            this.mEve.fightReturn();
            break;
        case s.FS_PE_MSG:
            this.mEve.msg();
            break;
        case s.FS_PE_MANNACONSUM:
            this.mEve.manaConsum();
            break;
        case s.FS_PE_ENERGYCONSUM:
            this.mEve.energyConsum();
            break;
        case s.FS_PE_ENERGYREGEN:
            this.mEve.energyRegen();
            break;
        case s.FS_PE_ARROWCONSUM:
            this.mEve.arrowConsum();
            break;
        case s.FS_PE_EFFUPDATE:
            this.mEve.updateItems();
            break;
        case s.FS_PE_EFFSWAP:
            this.mEve.effectSwap();
            break;
        case s.FS_PE_RESETCOMBO:
            this.mEve.resetCombo();
            break;
        case s.FS_PE_DEADCNT:
            this.mEve.deadCnt();
            break;
        case s.FS_PE_FIGHTLAUNCH:
            this.mEve.fightLaunch();
            break;
        case s.FS_PE_CDDEC:
            this.mEve.cdDec();
            break;
        case -1:
            this.mEve.socOnClose();
            break;
        default:
            s.strEve[a] ? canvas.app.battle.log("WARN: unhandled event " + s.strEve[a] + " code=" + String(a), 16711680) : canvas.app.battle.log("WARN: unknown event code=" + String(a), 16711680),
            this.mCmd.paksReadyAndParse()
        }
    } catch (t) {
        canvas.app.battle.log("ERROR IN EVE EXECUTION: id=" + e.params.event[0] + ", params=" + JSON.stringify(e.params.event[1]) + ", rid=" + e.params.event[2], 16711680),
        canvas.app.battle.log(t.toString(), 16711680),
        this.mCmd.paksReadyAndParse()
    }
}
,
canvas.app.battle.Main.prototype.handlerCmd = function(e) {
    try {
        var t, a = e.params.code, s = this.model.serverParser;
        if (canvas.app.battle.log("handlerCmd " + s.strCmd[a], 170),
        canvas.app.battle.log("   * code=" + a),
        canvas.app.battle.log("   * main_teration=" + this.model.mainStep),
        this.model.watchFight && this.model.wfCnt != this.model.wfGet && a != s.FS_SCCL_WATCH_FIGHT)
            return canvas.app.battle.log("   * handle command was skipped, because  new_pers_id was changed", 16711680),
            void this.mCmd.paksReadyAndParse();
        switch (a) {
        case s.FS_SCCL_INIT:
            this.conn.inited = !0,
            this.model.mainStep = canvas.app.battle.Const.MAIN_STEP_STATE,
            this.model.paksReady = !0,
            this.mainIteration();
            break;
        case s.FS_SCCL_STATE:
            this.mCmd.state();
            break;
        case s.FS_SCCL_PERS_INFO:
            this.mFunc.defferedEffects[s.params[2].val] ? (t = this.mFunc.defferedEffects[s.params[2].val],
            delete this.mFunc.defferedEffects[s.params[2].val],
            this.mCmd.cmdAnyPersInfo(),
            this.mFunc.useEffect(t.effId, t.tarId, t.tarTeam),
            this.mCmd.paksReadyAndParse()) : this.mCmd.persInfo();
            break;
        case s.FS_SCCL_PERS_PARTS:
            this.mCmd.persParts();
            break;
        case s.FS_SCCL_EFFECTS:
            this.mCmd.effects(),
            this.mCmd.paksReadyAndParse();
            break;
        case s.FS_SCCL_PERS_ACT_EFFECTS:
            this.mCmd.persActEffects(),
            this.mCmd.paksReadyAndParse();
            break;
        case s.FS_SCCL_ATTACK:
            this.mCmd.paksReadyAndParse();
            break;
        case s.FS_SCCL_CHANGE_MODE:
            this.mCmd.changeMode(),
            this.mCmd.paksReadyAndParse();
            break;
        case s.FS_SCCL_FIGHT_STATE:
            this.mCmd.fightState(),
            this.mCmd.paksReadyAndParse();
            break;
        case s.FS_SCCL_PERS_SUBSCRIBE:
            this.mCmd.paksReadyAndParse();
            break;
        case s.FS_SCCL_USE_EFFECT:
            this.mCmd.useEffect(),
            this.mCmd.paksReadyAndParse();
            break;
        case s.FS_SCCL_SEND_MSG:
            this.mCmd.paksReadyAndParse();
            break;
        case s.FS_SCCL_WATCH_FIGHT:
            this.mCmd.watchFight();
            break;
        case s.FS_SCCL_EFFECT_SWAP_SUBSLOT:
            this.mCmd.paksReadyAndParse();
            break;
        case s.FS_SCCL_DROP_EFFECT:
            this.mCmd.unsetAura(),
            this.mCmd.paksReadyAndParse();
            break;
        case s.FS_SCCL_SKIP_TURN:
            this.mCmd.skipTurn(),
            this.mCmd.paksReadyAndParse();
            break;
        default:
            canvas.app.battle.log("WARN: unknown cmd=" + String(a), 16711680)
        }
    } catch (t) {
        canvas.app.battle.log("ERROR IN CMD EXECUTION: id=" + e.params.command[0] + ", params=" + JSON.stringify(e.params.command[1]), 16711680),
        canvas.app.battle.log(t.toString(), 16711680),
        this.mCmd.paksReadyAndParse()
    }
}
,
canvas.app.battle.Main.prototype.handlerCmdError = function(t) {
    var e = t.params.code
      , a = this.model.serverParser;
    switch (this.model.fightStateExecuting = !1,
    e) {
    case a.FS_SCCL_INIT:
        canvas.app.battle.log("ERR: authorization failed", 16711680),
        a.params[1].val == a.FS_SS_WRONG_DATA ? this.view.showMainPopup(canvas.app.battle.Const.POP_ST_ERROR, canvas.app.battle.Const.POP_ER_AUTH_FAIL) : this.view.showMainPopup(canvas.app.battle.Const.POP_ST_ERROR, canvas.app.battle.Const.POP_ER_FIGHT_ENDED),
        this.clearSyncTimeout(),
        this.conn.stopTransfers();
        break;
    case a.FS_SCCL_USE_EFFECT:
        canvas.app.battle.log("WARN: cant use effect", 10027008),
        this.view.showErrorPopup(canvas.Translator.getText(19)),
        0 != this.model.oppId && this.view.centerView.cDot.switchDot(!0);
        var s = 4 < a.params.length ? a.params[4].val : 0;
        switch (canvas.app.battle.log("usageStatus=" + s, 10027008),
        s) {
        case -10:
            this.view.showErrorPopup(canvas.Translator.getText(21));
            break;
        case -20:
            this.view.showErrorPopup(canvas.Translator.getText(23));
            break;
        case -30:
            this.view.showErrorPopup(canvas.Translator.getText(25));
            break;
        case -35:
            this.view.showErrorPopup(canvas.Translator.getText(70));
            break;
        case -40:
            this.view.showErrorPopup(canvas.Translator.getText(24));
            break;
        case -44:
            this.view.showErrorPopup(canvas.Translator.getText(26));
            break;
        case -46:
            this.view.showErrorPopup(canvas.Translator.getText(27));
            break;
        case -45:
            this.view.showErrorPopup(canvas.Translator.getText(28));
            break;
        default:
            this.view.showErrorPopup(canvas.Translator.getText(19))
        }
        this.view.centerView.spellsUnlockOnError(a.params[2].val),
        this.model.persStatus == canvas.app.battle.Const.STATUS_ACTIVE && (this.view.centerView.visible || this.centerVisible(!0)),
        0 == this.model.oppId && this.showSpellBookInWaitOpponent(),
        this.mCmd.paksReadyAndParse();
        break;
    case a.FS_SCCL_ATTACK:
        canvas.app.battle.log("WARN: cant attack", 10027008),
        this.centerVisible(!0),
        this.mCmd.paksReadyAndParse();
        break;
    case a.FS_SCCL_CHANGE_MODE:
        canvas.app.battle.log("WARN: cant change mode", 10027008),
        this.mCmd.paksReadyAndParse();
        break;
    case a.FS_SCCL_PERS_ACT_EFFECTS:
        canvas.app.battle.log("WARN: cant get act effects", 10027008),
        this.mCmd.paksReadyAndParse();
        break;
    default:
        canvas.app.battle.log("FATAL ERROR code=" + String(e), 16711680);
        s = "Неизвестная ошибка\ncode=" + String(e) + " cmd=" + a.strCmd[e];
        this.view.showMainPopup(canvas.app.battle.Const.POP_ST_UNKNOWN, canvas.app.battle.Const.POP_ER_NO_CODE, canvas.Translator.getText(4), s),
        this.clearSyncTimeout(),
        this.conn.stopTransfers(),
        this.view.topTimer.deactivate(),
        this.centerVisible(!1)
    }
}
,
canvas.app.battle.Main.prototype.centerVisible = function(t) {
    var e = canvas.app.battle.model;
    e.skipTurnIsCooldown() || (t && !e.watchFight ? (e.testFlag(e.memDat[e.persId].persFlags, canvas.app.battle.Const.FS_PF_MAGIC) && this.view.centerView.cDot.setIcon(canvas.app.battle.Const.MODE_SPELLS),
    this.testCenterMode(),
    this.view.centerView.setVisible(!0),
    this.model.centerVisible = !0,
    this.view.bowPanel && (this.view.bowPanel.locked = !1),
    this.view.centerView.cDot.switchDot(!0),
    e.testFlag(e.memDat[e.persId].persFlags, canvas.app.battle.Const.FS_PF_DEFENDED) && this.view.centerView.activeBlock(!0)) : (this.view.centerView.setVisible(!1),
    this.model.centerVisible = !1,
    this.view.bowPanel && (this.view.bowPanel.locked = !0)))
}
,
canvas.app.battle.Main.prototype.testCenterMode = function() {
    var t = canvas.app.battle.model;
    t.watchFight || (this.view.centerView.mode != canvas.app.battle.Const.MODE_SPELLS || t.testFlag(t.memDat[t.persId].persFlags, canvas.app.battle.Const.FS_PF_MAGIC) ? this.view.centerView.mode == canvas.app.battle.Const.MODE_ATTACK && t.testFlag(t.memDat[t.persId].persFlags, canvas.app.battle.Const.FS_PF_MAGIC) && this.view.centerView.changeControlMode(!0) : (canvas.Functions.destroyChildren(this.players[t.persId].magicStandBase),
    this.view.centerView.changeControlMode(!0)))
}
,
canvas.app.battle.Main.prototype.swfData = function(t, e) {
    canvas.Log.add(canvas.Log.BATTLE, "swf_transfer:swfData " + t + " " + e);
    var a = e.split("@");
    if (2 == a.length)
        switch (a[0]) {
        case "ping":
            break;
        case "useEffect":
            this.mFunc.useEffect(parseInt(a[1]));
            break;
        case "swapSubSlot":
            this.mFunc.swapSubSlot(parseInt(a[1]));
            break;
        case "FullReq":
            this.fullReq();
            break;
        case "persFocus":
            this.persFocus(parseInt(a[1]));
            break;
        case "showHPMP":
            this.showHpMp(a[1]);
            break;
        case "watchFightPID":
            this.watchFightStart(a[1]);
            break;
        case "persVisible":
            this.model.persVisible = a[1].split(",");
            break;
        default:
            canvas.app.battle.log('WARN: unhandled event "' + a[0] + '"', 16711680)
        }
    else
        canvas.Log.add(canvas.Log.BATTLE, "WARN: invalid data", 16711680)
}
,
canvas.app.battle.Main.prototype.sendData = function(t, e) {
    if (canvas.Log.add(canvas.Log.BATTLE, "swf_transfer:sendData " + t + " " + e),
    "undefined" != typeof swfTransfer)
        return swfTransfer("game", t, e)
}
,
canvas.app.battle.Main.prototype.setBowsInfo = function(t, e, a) {
    this.model.arrowsCount = t,
    this.model.bowEnergyValue = e,
    this.model.bowEnergyMax = a,
    this.view.bowPanel.setProgress(e, a)
}
,
canvas.app.battle.Main.prototype.updateAuras = function(t) {
    this.view.centerView.cAttack.auraControl.visible = 0 < this.model.auras.length,
    t == this.model.persId && this.view.centerView.cAttack.auraControl.update(),
    this.testAuraCircleAnim(t)
}
,
canvas.app.battle.Main.prototype.testAuraCircleAnim = function(t) {
    var e, a, s;
    this.players[t] && (e = (s = canvas.app.battle.model).memDat[t].persFlags,
    a = t == s.persId ? "" != s.currentAura : "" != s.currentAuraOpp,
    canvas.Functions.destroyChildren(this.players[t].magicStandBase),
    !s.testFlag(e, canvas.app.battle.Const.FS_PF_MAGIC) && a && 0 != s.memClsMage[t].cls && (s = "spell" + s.memClsMage[t].cls + "base_aura",
    (s = new canvas.px.MovieClip(canvas.Config.spellsPath + s)).frameEvent = canvas.app.battle.Event.ENTER_FRAME,
    s.loop = !0,
    this.players[t].magicStandBase.addChild(new canvas.app.battle.view.AddSpell(this,168,475,!0,s,!0))))
}
,
canvas.app.battle.Main.prototype.mainIteration = function() {
    if (this.model.online)
        switch (canvas.app.battle.log("mainIteration: " + this.model.mainStep),
        this.model.mainStep) {
        case canvas.app.battle.Const.MAIN_STEP_INIT:
            this.mFunc.authorization();
            break;
        case canvas.app.battle.Const.MAIN_STEP_STATE:
            this.mFunc.persState();
            break;
        case canvas.app.battle.Const.MAIN_STEP_INFO:
            this.model.watchFight && this.mFunc.watchFight(),
            this.mFunc.persInfo(this.model.newPersId),
            this.mFunc.persEffects();
            break;
        case canvas.app.battle.Const.MAIN_STEP_DONE:
            if (this.model.newPersId != this.model.persId)
                return void this.mCmd.paksReadyAndParse();
            this.model.watchFight && (this.setupWatchFightBts(!0),
            this.centerVisible(!1),
            this.view.mainPopup.deactivate(),
            this.model.myPersId == this.model.newPersId && this.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT_BT),
            this.view.comboView.visible = !1),
            0 != this.model.oppId ? this.mFunc.persInfo(this.model.oppId) : (this.showSpellBookInWaitOpponent(),
            this.mCmd.paksReadyAndParse());
            try {
                canvas.Config.isLocal || new canvas.utils.URLRequest(canvas.Config.domain + "/fight.php?sig=" + md5(canvas.app.battle.Const.MAX_ANIMATION_SIZE) + "&check=1").load()
            } catch (t) {
                canvas.app.battle.log("mainIteration: ERR: loading check 1", 16711680)
            }
            break;
        default:
            canvas.app.battle.log("mainIteration: WARN: unknown main_step = " + this.model.mainStep, 16711680)
        }
}
,
canvas.app.battle.Main.prototype.setupWatchFightBts = function(t, e) {
    void 0 === t && (t = !1),
    void 0 === e && (e = !1),
    e ? this.sendData("mem", "watchFightActive@" + t.toString() + this.model.ch1 + this.model.persTeam.toString() + this.model.ch1 + this.model.persId.toString()) : this.sendData("mem", "watchFightActive@" + t.toString() + this.model.ch1 + this.model.persTeam.toString())
}
,
canvas.app.battle.Main.prototype.showSpellBookInWaitOpponent = function() {
    var t, e = canvas.app.battle.model;
    e.watchFight ? canvas.app.battle.log("Main: showSpellBookInWaitOpponent: WATCH_FIGHT mode is true", 16711680) : (this.view.mainPopup.deactivate(),
    e.hasSpells && e.persStatus != canvas.app.battle.Const.STATUS_DEAD && e.fightRunning ? (canvas.app.battle.log("Main: showSpellBookInWaitOpponent: pers has spells && pers status != STATUS_DEAD, fight visible"),
    this.view.centerView.setVisible(!0),
    this.view.centerView.mode == canvas.app.battle.Const.MODE_ATTACK ? (canvas.app.battle.log("Main: showSpellBookInWaitOpponent: Fight mode is attack, change control mode"),
    this.view.centerView.changeControlMode(!0),
    0 != e.memClsMage[e.persId].cls && (t = "spell" + e.memClsMage[e.persId].cls + "base_stand",
    (t = new canvas.px.MovieClip(canvas.Config.spellsPath + t)).frameEvent = canvas.app.battle.Event.ENTER_FRAME,
    t.loop = !0,
    0 == this.players[e.persId].magicStandBase.children.length && this.players[e.persId].magicStandBase.addChild(new canvas.app.battle.view.AddSpell(this,168,475,!0,t,!0)))) : this.view.centerView.cDot.setIcon(canvas.app.battle.Const.MODE_SPELLS, !0),
    this.view.centerView.addSpellCoolDown(1, !0),
    this.view.centerView.cDot.switchDot(!1)) : e.persStatus != canvas.app.battle.Const.STATUS_DEAD ? (canvas.app.battle.log("Main: showSpellBookInWaitOpponent: pers !has_spells || pers status == STATUS_DEAD, fight unvisible, top_popup set POP_ST_WAIT"),
    this.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT),
    this.view.centerView.setVisible(!1)) : e.persStatus == canvas.app.battle.Const.STATUS_DEAD && this.view.centerView.setVisible(!1),
    this.updateKeyCallbacks())
}
,
canvas.app.battle.Main.prototype.updateKeyCallbacks = function() {
    this.view.centerView.visible ? this.view.centerView.turnOnKeyCallbacks() : this.view.centerView.turnOffKeyCallbacks()
}
,
canvas.app.battle.Main.prototype.updPersHPLvl = function() {
    this.model.watchFight || this.sendData("lvl", "updHP@" + this.model.persHp.toString() + "," + this.model.persHpMax.toString())
}
,
canvas.app.battle.Main.prototype.updPersMPLvl = function() {
    this.model.watchFight || this.sendData("lvl", "updMP@" + this.model.persMp.toString() + "," + this.model.persMpMax.toString())
}
,
canvas.app.battle.Main.prototype.checkPlayersQueue = function(t) {
    this.playersQueue.push(t),
    this.playersQueue.length > canvas.app.battle.Const.PLAYERS_QUEUE_MAXLEN && (t = this.playersQueue.shift(),
    this.view.player2.removeChild(this.players[t]),
    this.players[t].destroy(),
    this.players[t] = null)
}
,
canvas.app.battle.Main.prototype.loadPers = function(t) {
    var e, a, s;
    canvas.app.battle.log("Main:loadPers(" + t + ")");
    this.players[t] || (this.players[t] = new canvas.app.battle.view.Pers(this),
    t != this.model.persId && this.checkPlayersQueue(t)),
    t == this.model.persId ? (e = this.model.persSk < canvas.app.battle.Const.BOTID1 ? canvas.Config.skPath + this.model.persGender + "/sk" + canvas.Functions.setNumberLen(String(this.model.persSk), 2) : canvas.Config.botsPath + "img" + canvas.Functions.setNumberLen(String(this.model.persSk), 4) + "/img" + canvas.Functions.setNumberLen(String(this.model.persSk), 4),
    a = this.model.persSk,
    s = this.model.persGender,
    this.view.player1.addChild(this.players[t])) : (e = this.model.oppSk < canvas.app.battle.Const.BOTID1 ? canvas.Config.skPath + this.model.oppGender + "/sk" + canvas.Functions.setNumberLen(String(this.model.oppSk), 2) : canvas.Config.botsPath + "img" + canvas.Functions.setNumberLen(String(this.model.oppSk), 4) + "/img" + canvas.Functions.setNumberLen(String(this.model.oppSk), 4),
    a = this.model.oppSk,
    s = this.model.oppGender,
    this.view.player2.addChild(this.players[t])),
    (a < canvas.app.battle.Const.BOTID1 || a >= canvas.app.battle.Const.BOTID2) && this.players[t].scale.set(.8, .8),
    this.players[t].addFuncShow = this.loadPersDone.bind(this);
    var i = this.model.memDat[t]
      , n = i.persFlags
      , n = this.model.testFlag(n, canvas.app.battle.Const.FS_PF_PET);
    this.players[t].pet && (t == this.model.persId && this.model.persStatus == canvas.app.battle.Const.STATUS_DEAD || t == this.model.oppId && this.model.oppStatus == canvas.app.battle.Const.STATUS_DEAD) && (this.players[t].pet.dieFlag = !0),
    this.players[t].showPet(n, i.petSrc),
    this.players[t].config({
        pers_id: t,
        pers_sk: a,
        pers_sk_link: e,
        pers_gender: s
    }),
    this.players[t].loadBegin()
}
,
canvas.app.battle.Main.prototype.showLoadedPers = function() {
    this.loadPersDone({
        pers_id: this.model.persId
    })
}
,
canvas.app.battle.Main.prototype.eveOppNewNoSh = function() {
    this.model.persStatus == canvas.app.battle.Const.STATUS_ACTIVE && (this.view.topTimer.activate(),
    this.centerVisible(!0)),
    this.mCmd.paksReadyAndParse()
}
,
canvas.app.battle.Main.prototype.loadPersDone = function(t) {
    t.pers_id == this.model.persId ? (this.model.mainStep = canvas.app.battle.Const.MAIN_STEP_DONE,
    this.model.paksReady = !0,
    this.mainIteration()) : (this.model.persStatus == canvas.app.battle.Const.STATUS_ACTIVE && (this.view.topTimer.activate(),
    this.centerVisible(!0)),
    this.mCmd.paksReadyAndParse())
}
,
canvas.app.battle.Main.prototype.chekStatusForResurection = function() {
    var t = canvas.app.battle.model;
    t.persStatus == canvas.app.battle.Const.STATUS_DEAD && (t.persDown = !1,
    this.players[t.persId].gotoAndPlay(this.getPostLabel(t.persId)),
    this.view.mainPopup.deactivate())
}
,
canvas.app.battle.Main.prototype.flagLoadPers = function(t) {
    t && "0" != t ? ((t = new canvas.px.MovieClip(canvas.Config.flagsPath + "f" + t + "/f" + t)).frameEvent = canvas.app.battle.Event.ENTER_FRAME,
    t.loop = !0,
    this.view.flagPers.addChild(t),
    this.view.flagButton.visible = !0,
    this.model.flagTime = this.model.flagTimeLeft,
    this.view.flagPers.visible = !0) : canvas.Functions.destroyChildren(this.view.flagPers)
}
,
canvas.app.battle.Main.prototype.flagLoadOpp = function(t) {
    t && "0" != t && ((t = new canvas.px.MovieClip(canvas.Config.flagsPath + "f" + t + "/f" + t)).frameEvent = canvas.app.battle.Event.ENTER_FRAME,
    t.loop = !0,
    this.view.flagOpp.addChild(t),
    this.view.flagOpp.visible = !0)
}
,
canvas.app.battle.Main.prototype.getPostLabel = function(t) {
    var e, a = this.model, s = a.memDat[t].persFlags, i = canvas.app.battle.Const.FS_PF_IDLE_STR;
    if (a.persStatus == canvas.app.battle.Const.STATUS_WAIT && a.hasSpells && this.view.centerView.mode == canvas.app.battle.Const.MODE_SPELLS && !a.testFlag(s, canvas.app.battle.Const.FS_PF_MAGIC)) {
        if (0 != a.memClsMage[t].cls && (e = "spell" + a.memClsMage[t].cls + "base_stand",
        (e = new canvas.px.MovieClip(canvas.Config.spellsPath + e)).frameEvent = canvas.app.battle.Event.ENTER_FRAME,
        e.loop = !0,
        0 == this.players[t].magicStandBase.children.length && this.players[t].magicStandBase.addChild(new canvas.app.battle.view.AddSpell(this,168,475,!0,e,!0))),
        a.testFlag(s, canvas.app.battle.Const.FS_PF_DEFENDED))
            return canvas.app.battle.Const.FS_PF_DEFENDED_STR
    } else if (this.testAuraCircleAnim(t),
    a.testFlag(s, canvas.app.battle.Const.FS_PF_STUNNED))
        i = canvas.app.battle.Const.FS_PF_STUNNED_STR;
    else if (a.testFlag(s, canvas.app.battle.Const.FS_PF_DEFENDED))
        i = canvas.app.battle.Const.FS_PF_DEFENDED_STR;
    else {
        if (!a.testFlag(s, canvas.app.battle.Const.FS_PF_MAGIC))
            return i;
        0 != a.memClsMage[t].cls && (a = "spell" + a.memClsMage[t].cls + "base_stand",
        (a = new canvas.px.MovieClip(canvas.Config.spellsPath + a)).frameEvent = canvas.app.battle.Event.ENTER_FRAME,
        a.loop = !0,
        0 == this.players[t].magicStandBase.children.length && this.players[t].magicStandBase.addChild(new canvas.app.battle.view.AddSpell(this,168,475,!0,a,!0)))
    }
    return this.players[t].allLabels[i] ? i : canvas.app.battle.Const.FS_PF_IDLE_STR
}
,
canvas.app.battle.Main.prototype.persesHide = function() {
    var t = this.model;
    this.cntHided = 0,
    this.curCntHided = 0;
    var e = this.players[t.persId];
    e && e.visible && (this.cntHided++,
    e.addFuncHide = this.handlerHideOver.bind(this),
    e.hideBody()),
    0 == t.oppId || (t = this.players[t.oppId]) && t.visible && (this.cntHided++,
    t.addFuncHide = this.handlerHideOver.bind(this),
    t.hideBody()),
    0 == this.cntHided && canvas.EventManager.dispatchEvent(canvas.app.battle.Event.PERSES_HIDED)
}
,
canvas.app.battle.Main.prototype.handlerHideOver = function(t) {
    this.curCntHided++,
    this.curCntHided == this.cntHided && (this.view.effectsP2.initEffects([]),
    this.view.oppNick.unshow(),
    this.view.oppLevel.setLevel(""),
    this.view.effectsP1.initEffects([]),
    this.view.persNick.unshow(),
    this.view.persLevel.setLevel(""),
    this.view.hpmp.setHpOpp(0, 0),
    this.view.hpmp.setMpOpp(0, 0),
    this.view.hpmp.setHpPers(0, 0),
    this.view.hpmp.setMpPers(0, 0),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.PERSES_HIDED))
}
,
canvas.app.battle.Main.prototype.sndPlay = function(t) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "default/" + t + ".mp3")
}
,
canvas.app.battle.Main.prototype.sndPlayInternal = function(t, e) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "bots/img" + canvas.Functions.setNumberLen(e, 4) + "/" + t)
}
,
canvas.app.battle.Main.prototype.watchFightStart = function(t, e) {
    void 0 === e && (e = !1);
    var a = canvas.app.battle.model;
    if (a.newPersId != t) {
        for (; a.paksEveCache[0]; ) {
            if (a.paksEveCache[0][1][1].val == a.serverParser.FS_PE_MYFIGHTRETURN)
                return void this.setupWatchFightBts(!1);
            a.paksEveCache.shift()
        }
        a.newPersId = parseInt(t),
        a.wfCnt++,
        a.watchFight = !0,
        this.view.comboView.visible = !1,
        this.view.topTimer.deactivate(),
        this.centerVisible(!1),
        a.mainStep = canvas.app.battle.Const.MAIN_STEP_INFO,
        this.mainIteration()
    }
}
,
canvas.app.battle.Main.prototype.persFocus = function(t) {
    var e = canvas.app.battle.model
      , a = Date.now();
    e.persInFocus = t,
    (!e.persBafsTimes[t] || a - e.persBafsTimes[t] > e.persBafsCooldown) && (e.persBafsFlag = !0,
    e.persBafsTimes[t] = a,
    this.mFunc.effectList(t)),
    this.view.updateFocus()
}
,
canvas.app.battle.Main.prototype.fullReq = function() {
    canvas.app.battle.model.mainStep == canvas.app.battle.Const.MAIN_STEP_DONE && (this.mFunc.fightState(0, 0),
    this.mlRepInit(),
    this.evMonInit(),
    this.sendData("mem", "stopReq@null")),
    this.persStateInterval = setInterval(this.mFunc.persStateRequest.bind(this.mFunc), canvas.app.battle.Const.PERS_STATE_INTERVAL),
    this.mFunc.persStateRequest()
}
,
canvas.app.battle.Main.prototype.showHpMp = function(t) {
    this.mFunc.changeMode(parseInt(t), 2),
    canvas.app.battle.model.updateHpMp = "1" == t
}
,
canvas.app.battle.Main.prototype.afterWound = function(t) {
    this.model.animationLock || (this.players[this.model.persId].inMotion = !1,
    this.players[this.model.oppId] && (this.players[this.model.oppId].inMotion = !1),
    this.mCmd.paksReadyAndParse())
}
,
canvas.app.battle.Main.prototype.persMotionDone = function(t) {
    var e = this.model;
    t == e.persId || t == e.oppId ? (this.players[t].inMotion = !1,
    this.players[e.persId].inMotion || !this.players[e.oppId] || this.players[e.oppId].inMotion || (0 == e.oppHp ? (this.players[e.oppId].addFuncDie = this.persMotionDoneOnDead.bind(this),
    this.players[e.oppId].dieBody()) : this.mCmd.paksReadyAndParse())) : canvas.app.battle.log("Main.persMotionDone WARN: this pers is not active", 16711680)
}
,
canvas.app.battle.Main.prototype.persMotionDoneOnDead = function() {
    this.view.effectsP2.initEffects([]),
    this.mCmd.paksReadyAndParse()
}
,
canvas.app.battle.Main.prototype.useAura = function(t) {
    this.view.centerView.visible && this.view.centerView.mode == canvas.app.battle.Const.MODE_ATTACK && this.view.centerView.cAttack.auraControl.useAura(t)
}
,
canvas.app.battle.Model = function(t) {
    if (this.parser = new canvas.app.battle.Parser(this),
    this.serverParser = new canvas.app.battle.engine.ServerParser,
    this._soundVolume = 1,
    Object.defineProperty(this, "soundVolume", {
        get: function() {
            return this._soundVolume
        },
        set: function(t) {
            this._soundVolume = t,
            this.localStorage.set("soundVolume", t),
            canvas.SoundManager.volume = this._soundMute ? 0 : this._soundVolume,
            this.updateSoundVolume()
        }
    }),
    this._soundMute = !1,
    Object.defineProperty(this, "soundMute", {
        get: function() {
            return this._soundMute
        },
        set: function(t) {
            this._soundMute = t,
            this.localStorage.set("soundMute", t),
            this.updateSoundVolume()
        }
    }),
    this._oppId = 0,
    Object.defineProperty(this, "oppId", {
        get: function() {
            return this._oppId
        },
        set: function(t) {
            this._oppId = t,
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.OPP_ID_CHANGE)
        }
    }),
    this._animationLockTimeout,
    this._animationLock = !1,
    Object.defineProperty(this, "animationLock", {
        get: function() {
            return this._animationLock
        },
        set: function(t) {
            this._animationLock = t,
            clearTimeout(this._animationLockTimeout),
            this._animationLock && (this._animationLockTimeout = setTimeout(this.handlerAnimationLockTimeout.bind(this), canvas.app.battle.Const.MAX_ANIMATION_LOCK_DELAY))
        }
    }),
    this._paksReady = !0,
    Object.defineProperty(this, "paksReady", {
        get: function() {
            return this._paksReady
        },
        set: function(t) {
            this._paksReady = t,
            canvas.app.battle.log("paksReady: " + this._paksReady)
        }
    }),
    this._popupPos = null,
    Object.defineProperty(this, "popupPos", {
        get: function() {
            return this._popupPos
        },
        set: function(t) {
            this._popupPos = t,
            this.localStorage.set("popupPos", t.x + "," + t.y)
        }
    }),
    this.width = t.width || 464,
    this.height = t.height || 464,
    this.codePage = !1,
    this.bgLink = t.bg ? canvas.Config.wwwPath + t.bg : canvas.Config.wwwPath + "canvas/img/odelvays_town.jpg",
    this.effConfLink = t.eff_conf || canvas.Config.dataPath + "effect/cache.ui",
    this.isBold = !t.nobold || 1 != t.nobold,
    this.isNub = !!t.nub && 1 == t.nub,
    this.islp3 = !!t.lp3 && "1" == t.lp3,
    this.showComboRender = !t.showcombos || 0 != parseInt(t.showcombos) && !this.islp3,
    this.defaultSoundOn = !t.soundOn || "1" == t.soundOn,
    this.frameRateKoeff = t.speedx ? parseFloat(t.speedx) : 1,
    this.invisibleInfoUrl = t.invisible_info_url || "",
    this.host = t.host || "192.168.1.6",
    this.port = t.port || "5432",
    this.wsHost = t.wsHost || "",
    this.proxyHost = t.proxyHost || this.host + ":5433",
    this.sid = t.sid || "",
    this.proxy = !t.wsHost || !!t.proxy && "1" == t.proxy,
    this.akey = t.akey ? parseInt(t.akey) : 0,
    this.urlFinish = t.url_finish || "finish.htm",
    this.urlFinish2 = t.url_finish2 || "",
    this.urlFinish2Text = t.url_finish2_text || "",
    this.urlError = t.url_error || "error.htm",
    this.fightId = t.fight_id ? parseInt(t.fight_id) : 9999,
    this.allowBowPanel = !1,
    this.fightRunning = !1,
    this.resurect = !1,
    this.online = !1,
    this.persIsBotFlag = !1,
    this.persId = t.pers_id ? parseInt(t.pers_id) : 100,
    this.persNick = "",
    this.persRace = 0,
    this.persStatus = 0,
    this.myPersId = this.persId,
    this.newPersId = this.persId,
    this.tempDead = !1,
    this.oppStatus = 0,
    this.newOppId = 0,
    this.persTeam = 0,
    this.persHp = 0,
    this.persHpMax = 0,
    this.persMp = 0,
    this.persMpMax = 0,
    this.persSk = 0,
    this.persSkTime = 0,
    this.persGender = "M",
    this.persDown = !1,
    this.oppHp = 0,
    this.oppHpMax = 0,
    this.oppMp = 0,
    this.oppMpMax = 0,
    this.oppSk = 0,
    this.oppSkTime = 0,
    this.oppMask = 0,
    this.oppGender = "M",
    this.persInFocus = 0,
    this.auras = [],
    this.currentAura = "",
    this.currentAuraOpp = "",
    this.fightStateExecuting = !1,
    this.persDmgCnt = 0,
    this.oppDmgCnt = 0,
    this.dmgEve = [],
    this.persAnimFlag = !1,
    this.oppAnimFlag = !1,
    this.attackTime = 0,
    this.abilityTemp = "",
    this.mainStep = "",
    this.roundTimeBase = 3e4,
    this.roundTime = 3e4,
    this.effectsMinCooldown = 3,
    this.myAllDataArray = {},
    this.memDat = {},
    this.memGenders = {},
    this.memClsMage = {},
    this.fullMlLoaded = !1,
    this.mlInterval = 1e3,
    this.evActivity = 0,
    this.evActivityTmp = 0,
    this.serverTimestamp = 0,
    this.clientTimestamp = 0,
    this.flagEffId = 0,
    this.flagTimeCd = 0,
    this.flagTimeLeft = 0,
    this.flagTime = 0,
    this.fightServerId = t.fight_server_id || "",
    this.team1ServerUrl = t.team1_server_url || "",
    this.team2ServerUrl = t.team2_server_url || "",
    this.abils = {},
    this.hasSpells = !1,
    this.spells = {},
    this.spellsBow = {},
    this.abilsFlags = {},
    this.updateHpMp = !0,
    this.watchFight = !1,
    this.wfCnt = 0,
    this.wfGet = 0,
    this.defaultCombo = 0,
    this.skipTurnTime = 0,
    this.clanFlag = t.clan_banner ? parseInt(t.clan_banner) : 0,
    this.arrowsCount = 0,
    this.bowEnergyValue = 0,
    this.bowEnergyMax = 0,
    this.persVisible = [],
    this.persVisiblePrev = [],
    this.persBafsFlag = !1,
    this.persBafsTimes = {},
    this.persBafsCooldown = 0,
    this.isPvp = !1,
    this.fightResult = 0,
    this.shadowSummonable = !!t.shadowSummonable && "1" == t.shadowSummonable,
    this.shadowSummonUrl = t.shadowSummonUrl || "",
    this.shadowAvailable = !!t.shadowAvailable && "1" == t.shadowAvailable,
    this.fightFlags = t.fight_flags ? parseInt(t.fight_flags) : 0,
    this.fps = Math.round(canvas.app.battle.Const.BASE_FRAMERATE * this.frameRateKoeff),
    5 <= canvas.getClientVersion() && (this.fps += canvas.app.battle.Const.ADD_FRAMERATE),
    this.isUseHotkeys = !t.use_hotkeys || 1 == t.use_hotkeys,
    this.answersWait = 0,
    this.totalDamage = 0,
    this.waitingDamageCnt = -1,
    this.centerVisible = !1,
    this.canLeaveFight = "1" == t.can_leave_fight,
    this.blockTime = 0,
    this.ch1 = String.fromCharCode(1),
    this.ch2 = String.fromCharCode(2),
    this.paksEveCache = [],
    this.paksCmdCache = [],
    this.mlBufferHash = {},
    this.mlBufferQueue = [],
    this.mlBuffer = "",
    this.combos = [],
    this.relevantCmdId = 0,
    this.relevantCmdHash = {},
    this.memStreamBool = !0,
    this.delayedAttackData = null,
    this.fullReqLoaded = !1,
    this.persLastEffectsUpdateIndex = 0,
    this.oppLastEffectsUpdateIndex = 0,
    this.centerMode = canvas.app.battle.Const.MODE_ATTACK,
    t.combos) {
        for (var e = (new DOMParser).parseFromString("<root>" + t.combos + "</root>", "text/xml").getElementsByTagName("combo"), a = 0; a < e.length; a++)
            this.combos.push(new canvas.data.battle.ComboData(parseInt(e[a].attributes.id.value),e[a].attributes.description.value,parseInt(e[a].attributes.level.value),e[a].attributes.seq.value,e[a].attributes.title.value));
        0 < this.combos.length && (this.defaultCombo = t.by_default ? parseInt(t.by_default) : this.combos[0].id,
        this.activeComboId = this.combos[0].id)
    }
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.BATTLE),
    this._soundVolume = this.localStorage.get("soundVolume") ? parseFloat(this.localStorage.get("soundVolume")) : 1,
    this._soundMute = !this.defaultSoundOn || "true" == this.localStorage.get("soundMute"),
    this.updateSoundVolume();
    var t = this.localStorage.get("popupPos");
    t && (t = t.split(","),
    this._popupPos = new canvas.px.Point(parseInt(t[0]),parseInt(t[1]))),
    this.repair()
}
,
canvas.app.battle.Model.prototype.parseEffectsConf = function(t) {
    var e, a, s = t.split("\n"), i = s.length;
    for (this.effects = [],
    e = 0; e < i; e++)
        s[e] && ((a = s[e].split(";")).length < 3 || this.effects.push(new canvas.data.battle.EffectData(a[0],a[1],a[2].split(","))))
}
,
canvas.app.battle.Model.prototype.getEffectLogImage = function(t, e) {
    for (var a, s = this.effects.length, i = 0; i < s; i++)
        if ((a = this.effects[i]).type == t && 0 <= a.ids.indexOf(e.toString()))
            return a.image
}
,
canvas.app.battle.Model.prototype.repair = function() {
    this.paksEveId = 0,
    this.paksEveCache = [],
    this.paksEveTimes = {},
    this.paksCmdId = 0,
    this.paksCmdCache = [],
    this.answersWait = 0,
    this.paksReady = !0,
    this.online = !1,
    this.persStatus = canvas.app.battle.Const.STATUS_CREATED,
    this.oppId = 0,
    this.oppStatus = canvas.app.battle.Const.STATUS_CREATED,
    this.newOppId = 0,
    this.persTeam = 0,
    this.mainStep = canvas.app.battle.Const.MAIN_STEP_INIT
}
,
canvas.app.battle.Model.prototype.reset = function() {
    this.paksReady = !0,
    this.paksEveId = 0,
    this.paksEveCache = [],
    this.paksEveTimes = {},
    this.paksCmdId = 0,
    this.paksCmdCache = [],
    this.answersWait = 0,
    this.mainStep = canvas.app.battle.Const.MAIN_STEP_INIT
}
,
canvas.app.battle.Model.prototype.testFlag = function(t, e) {
    return (t & e) == e
}
,
canvas.app.battle.Model.prototype.resetString = function(t) {
    for (var e, a = "", s = 0; s < t.length; s++)
        192 <= (e = t.charCodeAt(s)) && e <= 255 && (e += 848),
        184 == e && (e = "е".charCodeAt(0)),
        168 == e && (e = "Е".charCodeAt(0)),
        a += String.fromCharCode(e);
    return a
}
,
canvas.app.battle.Model.prototype.parsePersStatus = function(t, e) {
    var a = canvas.app.battle.Const;
    switch (t) {
    case a.STATUS_CREATED:
    case a.STATUS_DEAD:
        return t;
    default:
        switch (e) {
        case a.FS_PLS_ACTIVE:
            return a.STATUS_ACTIVE;
        case a.FS_PLS_PASSIVE:
            return a.STATUS_PASSIVE;
        case a.FS_PLS_PENDING:
            return a.STATUS_WAIT
        }
    }
    return 0
}
,
canvas.app.battle.Model.prototype.testPvpStatus = function(t, e) {
    this.isPvp || t == this.persTeam || e || (this.isPvp = !0)
}
,
canvas.app.battle.Model.prototype.skipTurnIsCooldown = function() {
    return Date.now() < this.skipTurnTime
}
,
canvas.app.battle.Model.prototype.handlerAnimationLockTimeout = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EFFECT_AFTER_SPELL)
}
,
canvas.app.battle.Model.prototype.getHintTextWithHotkey = function(t, e) {
    return this.isUseHotkeys && e ? t + " (" + e + ")" : t
}
,
canvas.app.battle.Model.prototype.clearEventsCache = function() {
    this.paksEveCache = []
}
,
canvas.app.battle.Model.prototype.testCurrentAura = function(t, e, a) {
    var s;
    void 0 === a && (a = !1);
    for (var i = e == this.persId ? this.currentAura : this.currentAuraOpp, n = !1, o = 0; o < this.auras.length; o++)
        if ((s = this.auras[o]).id == t.toString()) {
            i = a ? "" : s.id,
            n = !0;
            break
        }
    return e == this.persId ? this.currentAura = i : this.currentAuraOpp = i,
    n
}
,
canvas.app.battle.Model.prototype.useFlag = function(t) {
    t == this.flagEffId && (this.flagTime = this.flagTimeCd)
}
,
canvas.app.battle.Model.prototype.getLostTime = function() {
    var t;
    return this.paksEveTimes[this.currentEveId] && (t = Date.now() - this.paksEveTimes[this.currentEveId]),
    t
}
,
canvas.app.battle.Model.prototype.addEvent = function(t, e) {
    this.checkEffectEve(t) || (this.paksEveId++,
    this.paksEveCache.push([this.paksEveId, t, this.relevantCmdId]),
    canvas.app.battle.log("+EVE (id=" + this.paksEveId + ") " + this.serverParser.strEve[e] + "(" + e + ")", 153),
    this.relevantCmdId++,
    this.serverParser.FS_PE_CAPTURE_REAL_TIME[e] && (this.paksEveTimes[this.paksEveId] = Date.now()),
    this.parser.paksParse())
}
,
canvas.app.battle.Model.prototype.checkEffectEve = function(t) {
    if (t.length < 4)
        return !1;
    if (t[1].val != canvas.app.battle.Const.FS_PE_EFFECTUSE)
        return !1;
    var e = t[2].val
      , t = t[3].val;
    return !(this.persId == e || this.oppId == e || !(this.persId == t && this.persAnimFlag || this.oppId == t && this.oppAnimFlag)) && (canvas.app.battle.log("checkEffectEve: SKIP ANIMATIONS, pers_anim_flag = " + this.persAnimFlag + ", opp_anim_flag = " + this.oppAnimFlag),
    !0)
}
,
canvas.app.battle.Model.prototype.addCommand = function(t, e) {
    this.paksCmdId++,
    this.paksCmdCache.push([this.paksCmdId, t]),
    canvas.app.battle.log("+CMD (id=" + this.paksCmdId + ") " + this.serverParser.strCmd[e] + "(" + e + ")", 153),
    this.relevantCmdHash[e] = this.relevantCmdId,
    this.relevantCmdId++,
    this.parser.paksParse()
}
,
canvas.app.battle.Model.prototype.updateSoundVolume = function() {
    canvas.SoundManager.volume = this.soundMute ? 0 : this.soundVolume
}
,
canvas.app.battle.Const = {
    ERROR_INITALIZE: "101",
    ERROR_SOCKET_DATA_HANDLER: "104",
    ERROR_PROXY_DATA_HANDLER: "105",
    ERROR_PARSE_DATA: "106",
    ERROR_EFFECT_USE: "107",
    ERROR_PERS_LOAD: "108",
    ERROR_PERS_NOT_DEFINITION: "109",
    ERROR_PERS_LOAD_PARTS: "110",
    ERROR_PERS_BUILD: "111",
    ERROR_PERS_SOUND: "112",
    ERROR_PAK_LOAD: "113",
    ERROR_EFFECTS_PERS: "114",
    ERROR_EFFECTS_PERS_LOAD: "115",
    ERROR_PAK_DATA: "116",
    BASE_FRAMERATE: 20,
    ADD_FRAMERATE: 5,
    SKIP_TURN_COOLDOWN: 2,
    MAIN_STEP_INIT: "init",
    MAIN_STEP_STATE: "state",
    MAIN_STEP_INFO: "info",
    MAIN_STEP_DONE: "done",
    BOTID1: 1e3,
    BOTID2: 2e3,
    STATUS_CREATED: 0,
    STATUS_FIGHTING: 1,
    STATUS_DEAD: 2,
    STATUS_WAIT: 3,
    STATUS_ACTIVE: 4,
    STATUS_PASSIVE: 5,
    FS_PLS_PENDING: 1,
    FS_PLS_ACTIVE: 2,
    FS_PLS_PASSIVE: 3,
    FS_PF_IDLE: 0,
    FS_PF_BOT: 64,
    FS_PF_STUNNED: 128,
    FS_PF_DEFENDED: 256,
    FS_PF_MAGIC: 1024,
    FS_PF_SKGHOST: 2048,
    FS_PF_PET: 16384,
    FS_PF_SILENT: 2097152,
    FS_PF_MOROC_LIGHT: 4194304,
    FS_PF_MOROC_DARK: 16777216,
    FS_PF_NO_AURAS: 268435456,
    FS_PF_NO_OPP_AUTO: 536870912,
    FS_PF_SHADOW: 1073741824,
    FS_PF_FLEE: 65536,
    FS_PF_INVISIBLE: 32768,
    FIGHT_FLAG_BLIND: 16,
    TO_FS_PF_DEFENDED: 0,
    TO_FS_PF_MAGIC: 1,
    FS_PF_IDLE_STR: "idle",
    FS_PF_STUNNED_STR: "stun",
    FS_PF_DEFENDED_STR: "protected",
    FS_PF_MAGIC_STR: "magic",
    PART_STR: ["combo", "kick_up", "kick_mid", "kick_bot"],
    KICK_STR: ["die", "dodge", "wound", "wound", "block"],
    STATE_SYNC_INTERVAL: 3e4,
    PERS_STATE_INTERVAL: 3e3,
    TIMEOUT_REFRESH_INTERVAL: 980,
    SK_LS_EMPTY: "empty",
    SK_LS_PROGRESS: "progress",
    SK_LS_READY: "ready",
    POP_ST_WAIT: 0,
    POP_ST_VISCORY: 1,
    POP_ST_DEFEAT: 2,
    POP_ST_KILLED: 3,
    POP_ST_ERROR: 4,
    POP_ST_UNKNOWN: 5,
    POP_ST_CONFIRM: 6,
    POP_ST_WAIT_BT: 7,
    POP_ST_WAIT_BT_CONFIRM: 8,
    POP_ER_NO_CODE: 0,
    POP_ER_SHUTDOWN: 1,
    POP_ER_SOC_CLOSE: 2,
    POP_ER_AUTH_FAIL: 3,
    POP_ER_FIGHT_ENDED: 4,
    DMG_KICK_DODGE: 1,
    DMG_KICK_CRIT: 2,
    DMG_KICK_WOUND: 3,
    DMG_KICK_BLOCK: 4,
    DMG_KICK_CURE: 5,
    DMG_KICK_ABSORB: 6,
    DMG_KICK_RESIST: 7,
    DMG_KICK_IMMUNITY: 8,
    DMG_KICK_NOCHANCE: 9,
    DMG_KICK_FULLRES: 10,
    DMG_KICK_MANA: 11,
    MSG_CONFIRM_SHOW: 0,
    MSG_CONFIRM_ANSW: 1,
    FS_PEF_WEAPONEFFECT: 4,
    FS_PEF_SPELL: 8,
    FS_PEF_PASSTURN: 16,
    FS_PEF_NEEDTURN: 32,
    FS_PEF_TARGETSELF: 64,
    FS_PEF_TARGETOPP: 128,
    FS_PEF_TEAMSELF: 256,
    FS_PEF_TEAMOPP: 512,
    FS_PEF_CONFIRM: 8192,
    FS_PEF_USEDEAD: 2048,
    FS_PF_RACESELF: 8388608,
    FS_PEF_BOW: 536870912,
    FS_PEF_AURA: 2147483648,
    FS_PEF_INFINITE: 16777216,
    FS_PEF_DISABLED: 268435456,
    DEFAULT_SPELLS_COOLDOWN: 5e3,
    AEFF_ABSORB: "ABSORB",
    AEFF_SPELL: "SPELL",
    AEFF_SPW: "SPW",
    AEFF_SPD: "SPD",
    AEFF_CH: "101",
    MAX_ANIMATION_LOCK_DELAY: "5000",
    TOP_ATTACK_ID: 1,
    MIDDLE_ATTACK_ID: 2,
    BOTTOM_ATTACK_ID: 3,
    TRANSFER_DATA_SEPARATOR: "@",
    PLAYERS_QUEUE_MAXLEN: 5,
    MODE_SPELLS: "spells",
    MODE_ATTACK: "attack",
    SPELLS_CONT_WIDTH: 154,
    SPELLS_CONT_HEIGHT: 160,
    SPELLS_AR: {
        ICO: [null, "ICON_DirectDamage", "ICON_PlusHP", "ICON_Poison"],
        IN: [null, "raysIN_air", "raysIN_death", "raysIN_earth", "raysIN_fire", "raysIN_life", "raysIN_water"],
        OUT: [null, "raysOUT_air", "raysOUT_death", "raysOUT_earth", "raysOUT_fire", "raysOUT_life", "raysOUT_water"]
    },
    HAND_EFFECT_POSITION: {
        M: [90, 164],
        F: [90, 161]
    },
    BOW_SLOTS_COUNT: 5,
    MAX_ANIMATION_SIZE: "41775e02da98ddb63c980dee",
    SND_FULL_LIST: ["block_weapon_1", "block_weapon_2", "block_weapon_3", "body_fall", "charge_energy", "charge_vampir", "crit_weapon", "dodge", "drink", "fightover_defeat", "fightover_victory", "magic_earth", "magic_evil", "magic_fire", "magic_life", "magic_water", "magic_wind", "wound_punch_1", "wound_punch_2", "wound_punch_3", "orb", "deadGod", "fertilityGod", "dragonGod", "_SP1", "_SP2", "_SP3", "_SP4", "_SP5", "_SP6", "_SP7", "_SP8", "_SP9", "_SP10", "_SP11", "_SP12", "_SP13", "_SP14", "_SP15", "_SP16", "_SP17", "_SP18", "_SP21", "_SP25", "_SP31", "_SP32", "_SP33", "idolWater", "idolAir", "idolZarlog", "idolMaurin"],
    SND_GROUPS: {
        dodge: ["dodge"],
        crit: ["crit_weapon"],
        wound: ["wound_punch_1", "wound_punch_2", "wound_punch_3"],
        block: ["block_weapon_1", "block_weapon_2", "block_weapon_3"]
    },
    EFFECTS_LIST: [["effect_pumpkin", "effect_frog", "effect_orb", "effect_orb_old", "effect_snowball", "effect_starlet", "effect_saw", "effect_bottle"], ["effect_fertilityGod"], ["effect_deadGod"], ["effect_dragonGod"], ["effect_idolWater"], ["effect_idolAir"], ["effect_idolZarlog"], ["effect_idolMaurin"]],
    MY_FUNC_CHANGE_MODE: 1,
    MY_FUNC_USE_EFFECT: 2,
    MY_FUNC_UNSET_AURA: 3,
    MY_FUNC_SEND_MESSAGE: 4,
    EVE_FIGHT_OVER: 1,
    WAITING_BATTLE: 1,
    WAITING_OPPONENT: 2,
    CENTER_DOT_TIME_CD: 4e3,
    CENTER_SPELL_ITEMS_COUNT: 10,
    FIST_NONSCHOOL_EXTRA: 900,
    MV_PERS_SHOW: [-180, -137.8, -101.25, -70.3, -45, -25.3, -11.25, -2.8, 0],
    MV_PERS_HIDE: [0, -2.8, -11.25, -25.3, -60, -70.3, -101.25, -137.8, -180],
    PERS_POS_X: {
        pers: 92,
        opp: 352
    },
    EFFECT_TYPE_OWNER: "fight_pic_owner",
    EFFECT_TYPE_OTHER: "fight_pic_other"
},
canvas.app.battle.Event = {
    HINT_ADD: "Battle.HINT_ADD",
    HINT_REMOVE: "Battle.HINT_REMOVE",
    OPP_ID_CHANGE: "Battle.OPP_ID_CHANGE",
    SOUND_VOLUME_CHANGE: "Battle.SOUND_VOLUME_CHANGE",
    SOUND_MUTE_CHANGE: "Battle.SOUND_MUTE_CHANGE",
    EFFECT_AFTER_SPELL: "Battle.EFFECT_AFTER_SPELL",
    SKIP_TURN: "Battle.SKIP_TURN",
    EVENT_MY_FUNC: "Battle.EVENT_MY_FUNC",
    EVENT_EVE: "Battle.EVENT_EVE",
    EVENT_CMD: "Battle.EVENT_CMD",
    EVENT_CMD_ERROR: "Battle.EVENT_CMD_ERROR",
    CENTER_VISIBLE: "Battle.CENTER_VISIBLE",
    ENTER_FRAME: "Battle.ENTER_FRAME",
    ATTACK: "Battle.ATTACK",
    BLOCK_SWITCH: "Battle.BLOCK_SWITCH",
    CENTER_CHANGE_MODE: "Battle.CENTER_CHANGE_MODE",
    START_AURA_COOLDOWN: "Battle.START_AURA_COOLDOWN",
    RESET: "Battle.RESET",
    TRY_RECONNECT: "Battle.TRY_RECONNECT",
    REPAIR: "Battle.REPAIR",
    OPEN_COMBO_LIST: "Battle.OPEN_COMBO_LIST",
    CHOOSE_COMBO: "Battle.CHOOSE_COMBO",
    SHOW_BOW_PANEL: "Battle.SHOW_BOW_PANEL",
    USE_EFFECT: "Battle.USE_EFFECT",
    SHOW_ERROR: "Battle.SHOW_ERROR",
    SHOW_MESSAGE: "Battle.SHOW_MESSAGE",
    CLEAR_SYNC_TIMEOUT: "Battle.CLEAR_SYNC_TIMEOUT",
    ADD_EVENT: "Battle.ADD_EVENT",
    ADD_COMMAND: "Battle.ADD_COMMAND",
    PERSES_HIDED: "Battle.PERSES_HIDED",
    UPDATE_PERS_HP_LVL: "Battle.UPDATE_PERS_HP_LVL",
    UPDATE_PERS_MP_LVL: "Battle.UPDATE_PERS_MP_LVL"
},
canvas.app.battle.View = function(t) {
    canvas.px.Container.call(this);
    var e = canvas.app.battle.model;
    this.baseLnk = t,
    this.players = new canvas.px.Container,
    this.bgSpells = new canvas.px.Container,
    this.bgEffects = new canvas.px.Container,
    this.spells = new canvas.px.Container,
    this.effects = new canvas.px.Container,
    this.player1 = new canvas.px.Container,
    this.player2 = new canvas.px.Container;
    t = new canvas.px.Sprite(canvas.ResourceLoader.getTexture("bg"));
    this.addChild(t),
    t.position.set(4, 12),
    this.flagButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_flag")),
    this.flagButton.position.set(0, 50),
    this.flagCdGraphics = new canvas.px.Graphics,
    this.flagButton.addChild(this.flagCdGraphics),
    this.flagHint = new canvas.app.view.PxHint(""),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.flagButton,
        params: new canvas.utils.HintParams(this.flagHint)
    }),
    this.flagPers = new canvas.px.Container,
    this.flagOpp = new canvas.px.Container,
    this.frontImage = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_contour"),49,49,49,49),
    this.frontImage.width = 464,
    this.frontImage.height = 359,
    this.frontImage2 = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_bow_contour"),46,46,46,121),
    this.frontImage2.width = 464,
    this.frontImage2.height = 458,
    this.frontImageElement = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_contour_element")),
    this.frontImageElement.position.set(190, 447),
    this.bowPanelBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_back")),
    this.bowPanelBack.position.set(4, 350),
    this.topImage = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_top")),
    this.damageText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16697738,100,16,"center"),
    this.damageText.text = canvas.Translator.getText(30),
    this.soundView = new canvas.app.battle.view.SoundView,
    this.centerView = new canvas.app.battle.view.CenterView(this),
    this.effectsP1 = new canvas.app.battle.view.PersEffects(42,69,!0,this),
    this.effectsP2 = new canvas.app.battle.view.PersEffects(402,69,!1,this),
    this.hpmp = new canvas.app.battle.view.HpMpView,
    this.persNick = new canvas.app.battle.view.NickView,
    this.oppNick = new canvas.app.battle.view.NickView,
    this.persLevel = new canvas.app.battle.view.LevelView,
    this.oppLevel = new canvas.app.battle.view.LevelView,
    this.totalDamage = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16697738,70,17,"center"),
    this.topTimer = new canvas.app.battle.view.TimerView,
    this.errorPopup = new canvas.app.battle.view.ErrorPopup,
    this.mainPopup = new canvas.app.battle.view.MainPopup(this.baseLnk),
    this.messagePopup = new canvas.app.battle.view.MessagePopup,
    this.comboView = new canvas.app.battle.view.ComboView,
    this.bowPanel = new canvas.app.battle.view.BowPanel,
    this.addChild(this.bgEffects),
    this.addChild(this.flagPers),
    this.addChild(this.flagOpp),
    this.flagPers.position.set(160, 210),
    this.flagOpp.position.set(310, 210),
    this.players.addChild(this.bgSpells),
    this.players.addChild(this.player1),
    this.players.addChild(this.player2),
    this.players.addChild(this.spells),
    this.player1.position.set(-15, 40),
    this.player2.position.set(463, 40),
    this.player2.scale.set(-1, 1),
    this.addChild(this.players),
    this.addChild(this.effects),
    this.effects.position.set(-1, 10),
    this.addChild(this.flagButton),
    this.flagButton.visible = !1,
    this.addChild(this.frontImage),
    this.addChild(this.frontImage2),
    this.frontImage.x = -10,
    this.frontImage2.x = -10,
    this.frontImage2.visible = !1,
    this.addChild(this.topImage),
    this.topImage.position.set(20, -4),
    this.addChild(this.damageText),
    this.damageText.position.set(172, 38),
    this.addChild(this.hpmp),
    this.addChild(this.soundView),
    this.soundView.position.set(8, 330),
    this.addChild(this.effectsP1),
    this.addChild(this.effectsP2),
    this.addChild(this.centerView),
    this.centerView.position.set(222, 226),
    this.addChild(this.persNick),
    this.persNick.position.set(133, 14),
    this.addChild(this.oppNick),
    this.oppNick.position.set(312, 14),
    this.addChild(this.persLevel),
    this.persLevel.position.set(36, 4),
    this.addChild(this.oppLevel),
    this.oppLevel.position.set(374, 4),
    this.addChild(this.totalDamage),
    this.totalDamage.position.set(188, 52),
    this.addChild(this.topTimer),
    this.topTimer.position.set(195, 68),
    this.errorPopup.position.set(0, 85),
    this.mainPopup.position.set(147, 110),
    this.messagePopup.position.set(e.popupPos ? e.popupPos.x : 82, e.popupPos ? e.popupPos.y : 110),
    canvas.app.battle.model.showComboRender && this.addChild(this.comboView),
    this.comboView.y = 324,
    this.bowPanel.position.set(10, 345),
    this.addChild(this.bowPanel),
    this.bowPanel.locked = !0,
    this.showBowPanel(!1),
    canvas.app.battle.model.shadowAvailable && (this.shadow = new canvas.app.battle.view.ShadowIcon,
    this.addChild(this.shadow),
    this.shadow.position.set(-3, 19)),
    this.updateTotalDamage(),
    this.msk = new canvas.px.Mask(canvas.app.battle.model.width - 20,canvas.app.battle.model.height - 140),
    this.msk.y = 10,
    this.addChild(this.msk),
    this.players.mask = this.spells.mask = this.bgSpells.mask = this.effects.mask = this.bgEffects.mask = this.msk,
    this.mainPopupContainer = new canvas.px.Container,
    this.addChild(this.mainPopupContainer),
    this.messagePopup.mousedown = this.popupDownHandler.bind(this)
}
,
canvas.app.battle.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.View.prototype.popupDownHandler = function(t) {
    var e = canvas.app.battle.model;
    canvas.Functions.findParent(this.messagePopup.headLabel, t.target) && (canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.popupUpHandler, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.popupUpHandler, this),
    this.messagePopup.startDrag(new canvas.px.Point(t.data.originalEvent.x - this.messagePopup.x - 10,t.data.originalEvent.y - this.messagePopup.y), new canvas.px.Rectangle(0,0,e.width - 300,e.height - 200), new canvas.px.Point(t.data.originalEvent.clientX,t.data.originalEvent.clientY)))
}
,
canvas.app.battle.View.prototype.popupUpHandler = function(t) {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.popupUpHandler, this),
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.popupUpHandler, this);
    var e = canvas.app.battle.model;
    this.messagePopup.stopDrag(),
    e.popupPos = new canvas.px.Point(this.messagePopup.x,this.messagePopup.y)
}
,
canvas.app.battle.View.prototype.updateFocus = function() {
    var t = canvas.app.battle.model;
    this.persLevel.checked = t.persId == t.persInFocus,
    this.oppLevel.checked = t.oppId == t.persInFocus
}
,
canvas.app.battle.View.prototype.updateTotalDamage = function() {
    this.totalDamage.text = canvas.app.battle.model.totalDamage
}
,
canvas.app.battle.View.prototype.showErrorPopup = function(t) {
    this.addChild(this.errorPopup),
    this.errorPopup.activate(t)
}
,
canvas.app.battle.View.prototype.showMainPopup = function(t, e, a, s) {
    this.mainPopupContainer.addChild(this.mainPopup),
    this.mainPopup.activate(t, e, a, s)
}
,
canvas.app.battle.View.prototype.showMessagePopup = function(t, e, a, s, i, n, o, r, c) {
    this.addChild(this.messagePopup),
    this.messagePopup.activate(t, s, i),
    this.messagePopup.setHeader(e),
    this.messagePopup.setBody(a),
    void 0 !== c && (this.messagePopup.num = c),
    void 0 !== n && this.messagePopup.buttonAccept.setLabel(n),
    void 0 !== o && this.messagePopup.buttonBan.setLabel(o),
    void 0 !== r && this.messagePopup.buttonCancel.setLabel(r)
}
,
canvas.app.battle.View.prototype.openComboList = function() {
    this.comboList || (this.comboList = new canvas.app.battle.view.ComboList),
    this.comboList.parent != this && this.addChild(this.comboList)
}
,
canvas.app.battle.View.prototype.showBowPanel = function(t) {
    (canvas.app.battle.model.allowBowPanel = t) ? (this.frontImage.visible = !1,
    this.frontImage2.visible = !0,
    this.frontImageElement.parent || this.addChildAt(this.frontImageElement, 1),
    this.bowPanelBack.parent || this.addChildAt(this.bowPanelBack, 0),
    this.bowPanel.hide()) : (this.frontImage.visible = !0,
    this.frontImage2.visible = !1,
    this.frontImageElement.parent == this && this.removeChild(this.frontImageElement),
    this.bowPanelBack.parent == this && this.removeChild(this.bowPanelBack),
    this.bowPanel.show())
}
,
canvas.app.battle.View.prototype.playComboHit = function() {
    var t = new canvas.app.battle.view.ComboHint;
    this.addChild(t),
    t.position.set(222, 110)
}
,
canvas.app.battle.View.prototype.showMP = function(t) {
    for (var e = 0; e < t.length; e++)
        this.addChild(new canvas.app.battle.view.DmgFly(t[e],e))
}
,
canvas.app.battle.View.prototype.showDmg = function(t) {
    for (var e = canvas.app.battle.model, a = 0; a < t.length; a++)
        if ("pers" == t[a].tar && e.persDmgCnt < 30 || "opp" == t[a].tar && e.oppDmgCnt < 30 || t[a].kick != canvas.app.battle.Const.DMG_KICK_WOUND ? this.addChild(new canvas.app.battle.view.DmgFly(t[a],a)) : canvas.app.battle.log("showDmg: temp skip dmg_fly"),
        null != t[a].new_tar_HP)
            switch (t[a].tar) {
            case "pers":
                this.hpmp.setHpPers(e.persHp, e.persHpMax),
                canvas.EventManager.dispatchEvent(canvas.app.battle.Event.UPDATE_PERS_HP_LVL);
                break;
            case "opp":
                this.hpmp.setHpOpp(e.oppHp, e.oppHpMax),
                t[a].my_dmg && t[a].kick != canvas.app.battle.Const.DMG_KICK_RESIST && (e.watchFight || t[a].dont_inc_totDMG || (e.totalDamage -= t[a].val),
                canvas.app.battle.log("showDmg: <b>*** damage " + String(-t[a].val) + "  totDMG " + String(e.totalDamage) + "</b>"),
                this.updateTotalDamage());
                break;
            default:
                canvas.app.battle.log("showDmg: WARN: unknown tar = " + String(t[a].tar), 16711680)
            }
}
,
canvas.app.battle.View.prototype.addEffect = function(t, e, a, s, i) {
    void 0 === i && (i = !1);
    t = new canvas.px.MovieClip(canvas.Config.spellsPath + t);
    t.frameEvent = canvas.app.battle.Event.ENTER_FRAME,
    t.SND = this.baseLnk.sndPlay,
    t.position.set(e, a),
    t.scale.x = s,
    t.autoDestroy = !0,
    (i ? this.bgEffects : this.effects).addChild(t)
}
,
canvas.app.battle.View.prototype.addSpellAnim = function(t, e) {
    for (; 3 <= this.spells.children.length; )
        this.spells.getChildAt(0).destroy();
    e = new canvas.px.MovieClip(canvas.Config.spellsPath + e);
    e.frameEvent = canvas.app.battle.Event.ENTER_FRAME,
    e.SND = this.baseLnk.sndPlay,
    e.position.set(t, 155),
    e.autoDestroy = !0,
    this.spells.addChild(e)
}
,
canvas.app.battle.View.prototype.drawFlagCd = function(t) {
    var e = 0;
    for (this.flagCdGraphics.clear(),
    this.flagCdGraphics.beginFill(5579281, .5),
    this.flagCdGraphics.moveTo(27, 23),
    this.flagCdGraphics.lineTo(27, 0),
    t *= 9.42 - 3.14,
    e = 3.14; e < t + 3.14; e += .01)
        this.flagCdGraphics.lineTo(12 * Math.sin(e) + 27, 12 * Math.cos(e) + 23);
    this.flagCdGraphics.endFill()
}
,
canvas.app.battle.Parser = function(t) {
    this.model = t
}
,
canvas.app.battle.Parser.prototype.paksParse = function() {
    canvas.app.battle.log("parsePaks: paksEveCache.length=" + this.model.paksEveCache.length + ", oppId=" + this.model.oppId),
    0 != this.model.paksReady ? 0 == this.model.paksCmdCache.length ? 0 < this.model.answersWait ? canvas.app.battle.log("paksParse event skip (by waiting cmd answ) " + this.model.answersWait, "#666666") : 0 != this.model.paksEveCache.length ? (this.model.paksReady = !1,
    this.parseEvePaks()) : canvas.app.battle.log("events cache empty", "#666666") : (this.model.paksReady = !1,
    this.parseCmdPaks()) : canvas.app.battle.log("paksParse root skip", "#666666")
}
,
canvas.app.battle.Parser.prototype.parseEvePaks = function() {
    canvas.app.battle.log("parseEvePaks");
    var t = this.model.paksEveCache[0][0]
      , e = this.model.paksEveCache[0][1]
      , a = this.model.paksEveCache[0][2]
      , s = this.model.serverParser;
    this.model.currentEveId = parseInt(t),
    s.params = [].concat(e);
    var i = this.model.paksEveCache.shift();
    0 < s.params.length ? (e = s.params[1].val,
    canvas.app.battle.log("=EVE (id=" + String(t) + ") " + s.strEve[e] + "(" + String(e) + ")", 39168),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_EVE, null, {
        rid: a,
        code: e,
        event: i
    })) : canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_EVE, null, {
        rid: 0,
        code: -1,
        event: i
    })
}
,
canvas.app.battle.Parser.prototype.parseCmdPaks = function() {
    canvas.app.battle.log("parseCmdPaks");
    var t = this.model.paksCmdCache[0][0]
      , e = this.model.paksCmdCache[0][1]
      , a = this.model.serverParser;
    a.params = [].concat(e);
    var s = this.model.paksCmdCache.shift();
    this.model.answersWait--;
    e = a.params[0].val;
    canvas.app.battle.log("=CMD (id=" + t + ") " + a.strCmd[e] + "(" + e + ")", 39168);
    t = a.params[1].val;
    0 != t && e != a.FS_SCCL_EFFECT_SWAP_SUBSLOT ? (canvas.app.battle.log("<b>Err: " + a.strRet[t] + "(" + t + ") Cmd=" + e + "</b>", 16711680),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_CMD_ERROR, null, {
        code: e,
        command: s
    })) : canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_CMD, null, {
        code: e,
        command: s
    })
}
,
canvas.app.battle.Parser.prototype.parseAdditionalEffectsData = function(t, e) {
    for (var a, s = canvas.app.battle.Const, i = e.split("&"), n = [], o = 0; o < i.length; o++) {
        var r = i[o].split("=");
        if (2 != r.length)
            return canvas.app.battle.log('parseAdditionalEffectsData ERR: invalid data format "' + i[o] + '"', 16711680),
            [];
        if (t == (a = r[0]))
            switch (a) {
            case s.AEFF_ABSORB:
                for (var c = r[1].split(","), p = 0; p < c.length; p++)
                    n.push("ABSORB_" + c[p].toString());
                break;
            case s.AEFF_SPELL:
            case s.AEFF_SPW:
            case s.AEFF_SPD:
            case s.AEFF_CH:
                n.push(r[1]);
                break;
            default:
                return canvas.app.battle.log('parseAdditionalEffectsData ERR: nuhandled eff_type "' + t + '"', 16711680),
                []
            }
    }
    return n
}
,
canvas.app.battle.engine.Connection = function(t) {
    this.baseLnk = t,
    this.inited = !1,
    this.socPacketSize = 0,
    canvas.app.battle.model.proxy && this.initProxy()
}
,
canvas.app.battle.engine.Connection.prototype.tryConnect = function() {
    canvas.app.battle.model.proxy ? (this.proxyReady = !0,
    canvas.app.battle.model.online = !0,
    this.startProxy(),
    this.baseLnk.mainIteration()) : (this.ws = new WSProxy({
        onConnect: this.wsConnectHandler.bind(this),
        onMessage: this.wsMessageHandler.bind(this)
    }),
    this.ws.connect({
        logEnabled: !1,
        ws: {
            host: canvas.app.battle.model.wsHost
        },
        fs: {
            host: canvas.app.battle.model.host,
            port: canvas.app.battle.model.port
        }
    }))
}
,
canvas.app.battle.engine.Connection.prototype.initProxy = function() {
    this.proxyAddr = "https://" + canvas.app.battle.model.proxyHost + "/",
    this.proxyLoader = new canvas.utils.URLRequest,
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.proxyLoader, this.proxyCompleteHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.proxyLoader, this.proxyErrorHandler, this),
    this.proxyReady = !0,
    this.proxyQueue = [],
    this.startProxy()
}
,
canvas.app.battle.engine.Connection.prototype.startProxy = function() {
    this.stopProxy(),
    this.proxyInterval = setInterval(this.proxySend.bind(this), 1e3),
    this.proxySend()
}
,
canvas.app.battle.engine.Connection.prototype.stopProxy = function() {
    this.proxyInterval && clearInterval(this.proxyInterval)
}
,
canvas.app.battle.engine.Connection.prototype.proxySend = function() {
    this.proxyReady && (this.proxyReady = !1,
    0 < this.proxyQueue.length ? this.lastProxyPack = this.proxyQueue.shift() : this.lastProxyPack = this.proxyAddr + "req" + Math.round(9e4 * Math.random()).toString() + "?" + canvas.app.battle.model.sid + "_" + canvas.app.battle.model.fightId,
    this.proxyLoader.load(this.lastProxyPack))
}
,
canvas.app.battle.engine.Connection.prototype.proxyCompleteHandler = function() {
    this.proxyReady = !0;
    var t = this.proxyLoader.request.responseText.split("|", 3)[1];
    if (canvas.app.battle.log("proxyCompleteHandler data(len=" + t.length + ")[" + t + "]"),
    0 < t.length) {
        for (var e = t.split(":"), a = 0; a < e.length; a++)
            this.recvData(e[a]);
        this.proxySend()
    } else
        this.inited || this.proxySend()
}
,
canvas.app.battle.engine.Connection.prototype.recvData = function(t) {
    for (var e, a = canvas.app.battle.model.serverParser, s = a.unpack(t), i = "", n = 0; n < a.params.length; n++)
        i += "|" + a.params[n].val;
    canvas.app.battle.log("conn:recvData (" + i + ")"),
    s ? (e = a.params[0].val) == a.FS_SC_NONE ? (s = a.params[1].val,
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ADD_EVENT, null, {
        params: a.params,
        code: s
    })) : canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ADD_COMMAND, null, {
        params: a.params,
        code: e
    }) : canvas.app.battle.log("BAD PAKET (" + t + ")", 16711680)
}
,
canvas.app.battle.engine.Connection.prototype.sendPak = function(t) {
    var e;
    canvas.app.battle.log("conn: send [" + t + "]"),
    canvas.app.battle.model.answersWait++,
    this.proxyAddr ? (e = this.proxyAddr + "req" + Math.round(1e4 * Math.random()).toString() + "?" + canvas.app.battle.model.sid + "_" + canvas.app.battle.model.fightId + "&" + t,
    this.proxyQueue.push(e),
    this.proxySend()) : canvas.app.battle.model.online ? this.ws.send(t) : this.baseLnk.answersWait--
}
,
canvas.app.battle.engine.Connection.prototype.proxyErrorHandler = function() {
    canvas.app.battle.log("conn:proxyErrorHandler: url=" + this.lastProxyPack, 16711680),
    this.closing()
}
,
canvas.app.battle.engine.Connection.prototype.closing = function() {
    canvas.app.battle.model.online = !1,
    this.stopTransfers(),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.CLEAR_SYNC_TIMEOUT),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ADD_EVENT, null, {
        params: [],
        code: 0
    })
}
,
canvas.app.battle.engine.Connection.prototype.stopTransfers = function() {
    canvas.app.battle.model.online = !1,
    this.proxyAddr ? this.stopProxy() : this.ws.destroy(),
    canvas.app.battle.model.answersWait = 0
}
,
canvas.app.battle.engine.Connection.prototype.wsConnectHandler = function() {
    canvas.app.battle.model.online = !0,
    this.baseLnk.mainIteration()
}
,
canvas.app.battle.engine.Connection.prototype.wsMessageHandler = function(t) {
    canvas.app.battle.model.online && this.recvData(t)
}
,
canvas.app.battle.engine.ServerParser = function() {
    this.PT_INVALID = 0,
    this.PT_INT = 1,
    this.PT_FIXED = 2,
    this.PT_STRING = 3,
    this.PT_RAW = 4,
    this.PT_NINT = 5,
    this.PT_NFIXED = 6,
    this.PT_SHORTINT = 7,
    this.PT_NSHORTINT = 8,
    this.PT_BIGINT = 9,
    this.PT_NBIGINT = 10,
    this.FS_SC_NONE = 0,
    this.FS_SC_SYNC_TIME = 1,
    this.FS_SCCL_INIT = 101,
    this.FS_SCCL_STATE = 102,
    this.FS_SCCL_PERS_INFO = 103,
    this.FS_SCCL_PERS_PARTS = 104,
    this.FS_SCCL_ATTACK = 105,
    this.FS_SCCL_FIGHT_STATE = 106,
    this.FS_SCCL_EFFECTS = 107,
    this.FS_SCCL_USE_EFFECT = 108,
    this.FS_SCCL_CHANGE_MODE = 109,
    this.FS_SCCL_PERS_ACT_EFFECTS = 110,
    this.FS_SCCL_WATCH_FIGHT = 111,
    this.FS_SCCL_EFFECT_SWAP_SUBSLOT = 112,
    this.FS_SCCL_DROP_EFFECT = 113,
    this.FS_SCCL_SKIP_TURN = 114,
    this.FS_SCCL_SEND_MSG = 201,
    this.FS_SCCL_PERS_SUBSCRIBE = 202,
    this.FS_SS_OK = 0,
    this.FS_SS_WRONG_CMD = -1,
    this.FS_SS_WRONG_ARGS = -2,
    this.FS_SS_WRONG_DATA = -3,
    this.FS_SS_WRONG_STATE = -4,
    this.FS_SS_NO_AUTH = -5,
    this.FS_SS_INT_ERROR = -6,
    this.FS_PE_SRVSHUTDOWN = 1,
    this.FS_PE_OPPWAIT = 101,
    this.FS_PE_OPPNEW = 102,
    this.FS_PE_ATTACKNOW = 103,
    this.FS_PE_ATTACKWAIT = 104,
    this.FS_PE_ATTACK = 105,
    this.FS_PE_ATTACKTIMEOUT = 106,
    this.FS_PE_FIGHTLOG = 107,
    this.FS_PE_FIGHTOVER = 108,
    this.FS_PE_FIGHTSTATE = 109,
    this.FS_PE_EFFECTUSE = 110,
    this.FS_PE_EFFECTAPPLY = 111,
    this.FS_PE_DAMAGE = 112,
    this.FS_PE_DEATH = 113,
    this.FS_PE_MANNACONSUM = 114,
    this.FS_PE_MYFIGHTRETURN = 115,
    this.FS_PE_EFFUPDATE = 116,
    this.FS_PE_ENERGYCONSUM = 117,
    this.FS_PE_ENERGYREGEN = 118,
    this.FS_PE_ARROWCONSUM = 119,
    this.FS_PE_EFFSWAP = 120,
    this.FS_PE_RESETCOMBO = 121,
    this.FS_PE_NEWPERS = 122,
    this.FS_PE_DEADCNT = 123,
    this.FS_PE_FIGHTLAUNCH = 124,
    this.FS_PE_MSG = 201,
    this.FS_PE_CDDEC = 202,
    this.FS_PE_CAPTURE_REAL_TIME = {
        103: !0,
        104: !0
    },
    this.strEve = [],
    this.strCmd = [],
    this.strRet = [],
    this.strEve[this.FS_PE_SRVSHUTDOWN] = "FS_PE_SRVSHUTDOWN",
    this.strEve[this.FS_PE_OPPWAIT] = "FS_PE_OPPWAIT",
    this.strEve[this.FS_PE_OPPNEW] = "FS_PE_OPPNEW",
    this.strEve[this.FS_PE_ATTACKNOW] = "FS_PE_ATTACKNOW",
    this.strEve[this.FS_PE_ATTACKWAIT] = "FS_PE_ATTACKWAIT",
    this.strEve[this.FS_PE_ATTACK] = "FS_PE_ATTACK",
    this.strEve[this.FS_PE_ATTACKTIMEOUT] = "FS_PE_ATTACKTIMEOUT",
    this.strEve[this.FS_PE_FIGHTLOG] = "FS_PE_FIGHTLOG",
    this.strEve[this.FS_PE_FIGHTOVER] = "FS_PE_FIGHTOVER",
    this.strEve[this.FS_PE_FIGHTSTATE] = "FS_PE_FIGHTSTATE",
    this.strEve[this.FS_PE_EFFECTUSE] = "FS_PE_EFFECTUSE",
    this.strEve[this.FS_PE_EFFECTAPPLY] = "FS_PE_EFFECTAPPLY",
    this.strEve[this.FS_PE_DAMAGE] = "FS_PE_DAMAGE",
    this.strEve[this.FS_PE_DEATH] = "FS_PE_DEATH",
    this.strEve[this.FS_PE_MANNACONSUM] = "FS_PE_MANNACONSUM",
    this.strCmd[this.FS_PE_MYFIGHTRETURN] = "FS_PE_MYFIGHTRETURN",
    this.strEve[this.FS_PE_EFFUPDATE] = "FS_PE_EFFUPDATE",
    this.strEve[this.FS_PE_ENERGYCONSUM] = "FS_PE_ENERGYCONSUM",
    this.strEve[this.FS_PE_ENERGYREGEN] = "FS_PE_ENERGYREGEN",
    this.strEve[this.FS_PE_ARROWCONSUM] = "FS_PE_ARROWCONSUM",
    this.strEve[this.FS_PE_EFFSWAP] = "FS_PE_EFFSWAP",
    this.strEve[this.FS_PE_RESETCOMBO] = "FS_PE_RESETCOMBO",
    this.strEve[this.FS_PE_NEWPERS] = "FS_PE_NEWPERS",
    this.strEve[this.FS_PE_DEADCNT] = "FS_PE_DEADCNT",
    this.strEve[this.FS_PE_MSG] = "FS_PE_MSG",
    this.strEve[this.FS_PE_CDDEC] = "FS_PE_CDDEC",
    this.strCmd[this.FS_SCCL_INIT] = "FS_SCCL_INIT",
    this.strCmd[this.FS_SCCL_STATE] = "FS_SCCL_STATE",
    this.strCmd[this.FS_SCCL_PERS_INFO] = "FS_SCCL_PERS_INFO",
    this.strCmd[this.FS_SCCL_PERS_PARTS] = "FS_SCCL_PERS_PARTS",
    this.strCmd[this.FS_SC_SYNC_TIME] = "FS_SC_SYNC_TIME",
    this.strCmd[this.FS_SCCL_ATTACK] = "FS_SCCL_ATTACK",
    this.strCmd[this.FS_SCCL_FIGHT_STATE] = "FS_SCCL_FIGHT_STATE",
    this.strCmd[this.FS_SCCL_EFFECTS] = "FS_SCCL_EFFECTS",
    this.strCmd[this.FS_SCCL_USE_EFFECT] = "FS_SCCL_USE_EFFECT",
    this.strCmd[this.FS_SCCL_CHANGE_MODE] = "FS_SCCL_CHANGE_MODE",
    this.strCmd[this.FS_SCCL_PERS_ACT_EFFECTS] = "FS_SCCL_PERS_ACT_EFFECTS",
    this.strCmd[this.FS_SCCL_SEND_MSG] = "FS_SCCL_SEND_MSG",
    this.strCmd[this.FS_SCCL_WATCH_FIGHT] = "FS_SCCL_WATCH_FIGHT",
    this.strCmd[this.FS_SCCL_EFFECT_SWAP_SUBSLOT] = "FS_SCCL_EFFECT_SWAP_SUBSLOT",
    this.strCmd[this.FS_SCCL_DROP_EFFECT] = "FS_SCCL_DROP_EFFECT",
    this.strCmd[this.FS_SCCL_SKIP_TURN] = "FS_SCCL_SKIP_TURN",
    this.strCmd[this.FS_PE_MYFIGHTRETURN] = "FS_PE_MYFIGHTRETURN",
    this.strCmd[this.FS_SCCL_PERS_SUBSCRIBE] = "FS_SCCL_PERS_SUBSCRIBE",
    this.strRet[this.FS_SS_OK] = "FS_SS_OK",
    this.strRet[this.FS_SS_WRONG_CMD] = "FS_SS_WRONG_CMD",
    this.strRet[this.FS_SS_WRONG_ARGS] = "FS_SS_WRONG_ARGS",
    this.strRet[this.FS_SS_WRONG_DATA] = "FS_SS_WRONG_DATA",
    this.strRet[this.FS_SS_WRONG_STATE] = "FS_SS_WRONG_STATE",
    this.strRet[this.FS_SS_NO_AUTH] = "FS_SS_NO_AUTH",
    this.strRet[this.FS_SS_INT_ERROR] = "FS_SS_INT_ERROR",
    this.sprintfArr = ["", "", "", "", "0000", "000", "00", "0", "", "0000000", "000000", "00000", "0000", "000", "00", "0", "", "000000000000000", "00000000000000", "0000000000000", "000000000000", "00000000000", "0000000000", "000000000", "00000000", "0000000", "000000", "00000", "0000", "000", "00", "0", ""]
}
,
canvas.app.battle.engine.ServerParser.prototype.sprintf = function(t, e) {
    if (4 != t && 8 != t && 16 != t)
        return null;
    e = e.toString(16);
    return this.sprintfArr[e.length + t] + e
}
,
canvas.app.battle.engine.ServerParser.prototype.pack = function(t) {
    this.buf = "";
    for (var e = 0; e < t.length; e++) {
        var a = t[e];
        switch (a.type == this.PT_INT && a.val < 0 && (a.type = this.PT_NINT),
        a.type == this.PT_BIGINT && a.val < 0 && (a.type = this.PT_NBIGINT),
        a.type == this.PT_FIXED && a.val < 0 && (a.type = this.PT_NFIXED),
        this.buf += this.sprintf(4, (a.id << 8) + (255 & a.type)),
        a.type) {
        case this.PT_INT:
        case this.PT_NINT:
            this.buf += this.sprintf(8, a.type == this.PT_NINT ? -a.val : a.val);
            break;
        case this.PT_BIGINT:
        case this.PT_NBIGINT:
            this.buf += this.sprintf(16, a.type == this.PT_NBIGINT ? -a.val : a.val);
            break;
        case this.PT_FIXED:
        case this.PT_NFIXED:
            this.buf += this.sprintf(8, 1e4 * (a.type == this.PT_NFIXED ? -a.val : a.val));
            break;
        case this.PT_STRING:
        case this.PT_RAW:
            this.buf += this.sprintf(4, a.val.length) + a.val;
            break;
        default:
            return canvas.app.battle.log("serverParser::pack Invalid param type: " + a.type, 16711680),
            !1
        }
    }
    return this.buf = this.sprintf(4, this.buf.length) + this.buf,
    !0
}
,
canvas.app.battle.engine.ServerParser.prototype.unpack = function(t) {
    var e, a, s, i;
    this.params = [],
    t = t.substr(4);
    for (var n, o = canvas.app.battle.model.codePage ? t.length : this.byteLenght(t), r = 0; 0 < o; ) {
        switch (e = (n = parseInt(t.substr(r, 4), 16)) >> 8,
        r += 4,
        o -= 4,
        a = 255 & n) {
        case this.PT_INT:
        case this.PT_NINT:
            i = parseInt(t.substr(r, 8), 16),
            a == this.PT_NINT && (i = -i),
            r += 8,
            o -= 8;
            break;
        case this.PT_BIGINT:
        case this.PT_NBIGINT:
            i = parseInt(t.substr(r, 16), 16),
            a == this.PT_NBIGINT && (i = -i),
            r += 16,
            o -= 16;
            break;
        case this.PT_SHORTINT:
        case this.PT_NSHORTINT:
            i = parseInt(t.substr(r, 4), 16),
            a == this.PT_NSHORTINT && (i = -i),
            r += 4,
            o -= 4;
            break;
        case this.PT_FIXED:
        case this.PT_NFIXED:
            i = parseInt(t.substr(r, 8), 16) / 1e4,
            a == this.PT_NFIXED && (i = -i),
            r += 8,
            o -= 8;
            break;
        case this.PT_STRING:
        case this.PT_RAW:
            if (s = parseInt(t.substr(r, 4), 16),
            r += 4,
            o -= 4,
            i = "",
            canvas.app.battle.model.codePage)
                i = t.substr(r, s),
                r += s,
                o -= s;
            else
                for (; 0 < s; ) {
                    var c = t.substr(r, 1)
                      , p = this.byteLenght(c);
                    s -= p,
                    r += 1,
                    o -= p,
                    i += c
                }
            i = canvas.app.battle.model.codePage ? canvas.app.battle.model.resetString(i) : i;
            break;
        default:
            return canvas.app.battle.log("serverParser: unpack Invalid param type: " + a + " (offset: " + (r - 4) + ", data: " + t + ")", 16711680),
            !1
        }
        this.params.push({
            id: e,
            type: a,
            val: i
        })
    }
    return !0
}
,
canvas.app.battle.engine.ServerParser.prototype.byteLenght = function(t) {
    for (var e = t.length, a = t.length - 1; 0 <= a; a--) {
        var s = t.charCodeAt(a);
        127 < s && s <= 2047 ? e++ : 2047 < s && s <= 65535 && (e += 2),
        56320 <= s && s <= 57343 && a--
    }
    return e
}
,
canvas.app.battle.engine.MFunc = function(t) {
    this.baseLnk = t,
    this.full_g2m_answ_str = "",
    this.full_g2m_srt_buff = 0,
    this.defferedEffects = {}
}
,
canvas.app.battle.engine.MFunc.prototype.authorization = function() {
    var t = canvas.app.battle.model.serverParser
      , e = this.baseLnk.conn
      , a = canvas.app.battle.model;
    canvas.app.battle.log("mFunc authorization: persId=" + a.persId + ", fightId = " + a.fightId, 10027008),
    t.pack([{
        id: 0,
        type: t.PT_INT,
        val: t.FS_SCCL_INIT
    }, {
        id: 0,
        type: t.PT_INT,
        val: a.persId
    }, {
        id: 0,
        type: t.PT_BIGINT,
        val: a.fightId
    }, {
        id: 0,
        type: t.PT_INT,
        val: a.akey
    }]),
    e.sendPak(t.buf)
}
,
canvas.app.battle.engine.MFunc.prototype.persState = function(t, e) {
    var a = canvas.app.battle.model.serverParser
      , s = this.baseLnk.conn;
    canvas.app.battle.model;
    canvas.app.battle.log("mFunc persState: persId=" + e + ", par=" + t, 10027008),
    e ? a.pack([{
        id: 0,
        type: a.PT_INT,
        val: a.FS_SCCL_STATE
    }, {
        id: 0,
        type: a.PT_INT,
        val: e
    }]) : a.pack([{
        id: 0,
        type: a.PT_INT,
        val: a.FS_SCCL_STATE
    }]),
    s.sendPak(a.buf)
}
,
canvas.app.battle.engine.MFunc.prototype.persInfo = function(t) {
    var e = canvas.app.battle.model.serverParser
      , a = this.baseLnk.conn
      , s = canvas.app.battle.model;
    canvas.app.battle.log("mFunc persInfo: persId=" + s.persId + ", reqId=" + t, 10027008),
    e.pack([{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_PERS_INFO
    }, {
        id: 0,
        type: e.PT_INT,
        val: t
    }]),
    a.sendPak(e.buf)
}
,
canvas.app.battle.engine.MFunc.prototype.persEffects = function() {
    var t = canvas.app.battle.model.serverParser
      , e = this.baseLnk.conn;
    canvas.app.battle.model;
    canvas.app.battle.log("mFunc persEffects: ", 10027008),
    t.pack([{
        id: 0,
        type: t.PT_INT,
        val: t.FS_SCCL_EFFECTS
    }]),
    e.sendPak(t.buf)
}
,
canvas.app.battle.engine.MFunc.prototype.effectList = function(t) {
    var e = canvas.app.battle.model.serverParser
      , a = this.baseLnk.conn;
    canvas.app.battle.model;
    canvas.app.battle.log("mFunc effectList: persId=" + t, 10027008),
    e.pack([{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_PERS_ACT_EFFECTS
    }, {
        id: 0,
        type: e.PT_INT,
        val: t
    }]),
    a.sendPak(e.buf)
}
,
canvas.app.battle.engine.MFunc.prototype.persParts = function(t) {
    var e = canvas.app.battle.model.serverParser
      , a = this.baseLnk.conn
      , s = canvas.app.battle.model;
    canvas.app.battle.log("mFunc persState: persId=" + s.persId + ", reqId=" + t, 10027008),
    e.pack([{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_PERS_PARTS
    }, {
        id: 0,
        type: e.PT_INT,
        val: t
    }]),
    a.sendPak(e.buf)
}
,
canvas.app.battle.engine.MFunc.prototype.attack = function(t) {
    var e = canvas.app.battle.model.serverParser
      , a = this.baseLnk.conn;
    canvas.app.battle.model;
    canvas.app.battle.log("mFunc attack: part=" + t, 10027008),
    e.pack([{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_ATTACK
    }, {
        id: 0,
        type: e.PT_INT,
        val: t
    }, {
        id: 0,
        type: e.PT_INT,
        val: 0
    }]),
    a.sendPak(e.buf)
}
,
canvas.app.battle.engine.MFunc.prototype.fightState = function(t, e) {
    var a = canvas.app.battle.model.serverParser
      , s = this.baseLnk.conn
      , i = canvas.app.battle.model;
    0 == t && 0 == e && i.fightStateExecuting ? canvas.app.battle.log("mFunc persState: already exetuting... exit") : (canvas.app.battle.log("mFunc fightState: persId=" + t + ", startIdx=" + e, 10027008),
    0 == e && (this.full_g2m_answ_str = "",
    this.full_g2m_srt_buff = 0),
    a.pack([{
        id: 0,
        type: a.PT_INT,
        val: a.FS_SCCL_FIGHT_STATE
    }, {
        id: 0,
        type: a.PT_INT,
        val: t
    }, {
        id: 0,
        type: a.PT_INT,
        val: e
    }]),
    s.sendPak(a.buf),
    i.fightStateExecuting = !0)
}
,
canvas.app.battle.engine.MFunc.prototype.persStateRequest = function(t) {
    void 0 === t && (t = 0);
    var e = canvas.app.battle.model.serverParser
      , a = this.baseLnk.conn
      , s = canvas.app.battle.model;
    canvas.app.battle.log("mFunc persStateRequest: startIndex=" + t + ", ids=" + s.persVisible + ", idsPrev=" + s.persVisiblePrev, 10027008),
    !s.persVisible || s.persVisiblePrev && s.persVisible.sort().join(",") == s.persVisiblePrev.sort().join(",") || s.persVisible && (s.persVisiblePrev = s.persVisible,
    0 == t && (this.small_g2m_answ_str1 = "",
    this.small_g2m_answ_str2 = "",
    this.small_g2m_srt_buff = 0),
    t = [{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_PERS_SUBSCRIBE
    }, {
        id: 0,
        type: e.PT_INT,
        val: 0
    }],
    e.pack(t),
    a.sendPak(e.buf))
}
,
canvas.app.battle.engine.MFunc.prototype.useEffect = function(t, e, a) {
    var s, i, n, o, r, c = canvas.app.battle.model.serverParser, p = this.baseLnk.conn, h = canvas.app.battle.model;
    if (void 0 === e && (e = -1),
    void 0 === a && (a = -1),
    h.abilsFlags[t]) {
        if (n = h.abilsFlags[t],
        canvas.app.battle.log("mFunc useEffect: abil_flgs: " + n.toString(16) + "(16) " + n.toString(2) + "(2)", 10066329),
        -1 != e && -1 != a) {
            if (s = e,
            i = a,
            h.persRace != h.memDat[s].kind)
                return void canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(23))
        } else if (0 != h.persInFocus) {
            if (s = h.persInFocus,
            null == h.memDat[s])
                return void canvas.app.battle.log("mFunc useEffect: ERR: have no data for targetId " + s, 16711680);
            if (i = h.memDat[s].team,
            h.testFlag(n, canvas.app.battle.Const.FS_PF_RACESELF)) {
                if (!h.memDat[s].hasOwnProperty("kind"))
                    return this.defferedEffects[s] = {
                        tarId: s,
                        tarTeam: i,
                        effId: t
                    },
                    void this.persInfo(s);
                if (h.persRace != h.memDat[s].kind)
                    return void canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(23))
            }
        } else
            s = h.testFlag(n, canvas.app.battle.Const.FS_PEF_BOW) ? h.oppId : h.persId,
            i = h.persTeam;
        if (h.memDat[s] && h.testFlag(n, canvas.app.battle.Const.FS_PEF_BOW) && h.memDat[s].status == canvas.app.battle.Const.STATUS_DEAD)
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(72));
        else if (canvas.app.battle.log("mFunc useEffect: effId=" + t + ", persInFocus=" + h.persInFocus, 10027008),
        h.watchFight && h.persId != h.myPersId)
            canvas.app.battle.log("mFunc useEffect: pers is under watch_fight mode.", 255);
        else if (h.testFlag(n, canvas.app.battle.Const.FS_PEF_USEDEAD) || h.persStatus != canvas.app.battle.Const.STATUS_DEAD) {
            if (h.testFlag(n, canvas.app.battle.Const.FS_PEF_CONFIRM) && (h.abils[t] ? o = h.abils[t].title : h.spells[t] && (o = h.spells[t].title)),
            o) {
                var l, d = h.testFlag(n, canvas.app.battle.Const.FS_PEF_TEAMSELF), v = h.testFlag(n, canvas.app.battle.Const.FS_PEF_TEAMOPP), e = !!d || h.testFlag(n, canvas.app.battle.Const.FS_PEF_TARGETSELF), a = !!v || h.testFlag(n, canvas.app.battle.Const.FS_PEF_TARGETOPP);
                if (canvas.app.battle.log("mFunc useEffect: self=" + e + " opp=" + a + " self_team=" + d + " opp_team=" + v, 10066329),
                s == h.persId ? e || (canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(20)),
                l = !0) : i == h.persTeam ? d || (canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(21)),
                l = !0) : s == h.oppId ? a || (canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(22)),
                l = !0) : v || (canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, canvas.Translator.getText(23)),
                l = !0),
                l)
                    return void this.baseLnk.view.centerView.spellsUnlockOnError(t)
            }
            h.testFlag(n, canvas.app.battle.Const.FS_PEF_PASSTURN) && (canvas.app.battle.log("mFunc useEffect: PASSTURN"),
            this.baseLnk.centerVisible(!1),
            h.attackTime = Date.now()),
            c.pack([{
                id: 0,
                type: c.PT_INT,
                val: c.FS_SCCL_USE_EFFECT
            }, {
                id: 0,
                type: c.PT_BIGINT,
                val: t
            }, {
                id: 0,
                type: c.PT_INT,
                val: s
            }]),
            h.memDat[s] ? r = h.testFlag(h.memDat[s].persFlags, canvas.app.battle.Const.FS_PF_BOT) : canvas.app.battle.log("mFunc useEffect: memDat for targetId is null", 10027008),
            !o || s == h.persId || r ? p.sendPak(c.buf) : (canvas.app.battle.log("mFunc useEffect: Request confirmation", 10027008),
            h.abilityTemp = c.buf,
            c = h.persId.toString() + "[]" + Date.now().toString(),
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_MESSAGE, null, {
                mode: 2,
                bodyLabel: canvas.Translator.getText(12) + ' "' + o.replace("__", " ") + '"\n' + canvas.Translator.getText(13),
                num: c
            }),
            this.sendMsg(s, "1()" + c + "()" + h.memDat[h.persId].nick + "()" + o))
        } else
            canvas.app.battle.log("mFunc useEffect: pers dead command not be send.", 255)
    } else
        canvas.app.battle.log("mFunc useEffect: ERR: flags is null for this abil", 16711680)
}
,
canvas.app.battle.engine.MFunc.prototype.swapSubSlot = function(t) {
    var e = canvas.app.battle.model.serverParser
      , a = this.baseLnk.conn;
    canvas.app.battle.model;
    canvas.app.battle.log("mFunc swapSubSlot: EffID=" + t, 10027008),
    e.pack([{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_EFFECT_SWAP_SUBSLOT
    }, {
        id: 0,
        type: e.PT_BIGINT,
        val: t
    }]),
    a.sendPak(e.buf)
}
,
canvas.app.battle.engine.MFunc.prototype.changeMode = function(t, e) {
    var a = canvas.app.battle.model.serverParser
      , s = this.baseLnk.conn;
    canvas.app.battle.model;
    canvas.app.battle.log("mFunc changeMode: switcher=" + t + ", flag=0x" + e.toString(16), 10027008),
    a.pack([{
        id: 0,
        type: a.PT_INT,
        val: a.FS_SCCL_CHANGE_MODE
    }, {
        id: 0,
        type: a.PT_INT,
        val: e
    }, {
        id: 0,
        type: a.PT_INT,
        val: t
    }]),
    s.sendPak(a.buf)
}
,
canvas.app.battle.engine.MFunc.prototype.sendMsg = function(t, e) {
    var a = canvas.app.battle.model.serverParser
      , s = this.baseLnk.conn;
    canvas.app.battle.model;
    canvas.app.battle.log("mFunc sendMsg: persId=" + t + ", txt=" + e, 10027008),
    e = encodeURI(e),
    a.pack([{
        id: 0,
        type: a.PT_INT,
        val: a.FS_SCCL_SEND_MSG
    }, {
        id: 0,
        type: a.PT_INT,
        val: t
    }, {
        id: 0,
        type: a.PT_INT,
        val: 1
    }, {
        id: 0,
        type: a.PT_STRING,
        val: e
    }]),
    s.sendPak(a.buf)
}
,
canvas.app.battle.engine.MFunc.prototype.watchFight = function() {
    var t = canvas.app.battle.model.serverParser
      , e = this.baseLnk.conn
      , a = canvas.app.battle.model;
    canvas.app.battle.log("mFunc watchFight: ", 10027008),
    t.pack([{
        id: 0,
        type: t.PT_INT,
        val: t.FS_SCCL_WATCH_FIGHT
    }, {
        id: 0,
        type: t.PT_INT,
        val: a.newPersId
    }]),
    e.sendPak(t.buf)
}
,
canvas.app.battle.engine.MFunc.prototype.unsetAura = function(t) {
    var e = canvas.app.battle.model.serverParser
      , a = this.baseLnk.conn;
    canvas.app.battle.model;
    canvas.app.battle.log("mFunc unsetAura: EffId=" + t, 10027008),
    e.pack([{
        id: 0,
        type: e.PT_INT,
        val: e.FS_SCCL_DROP_EFFECT
    }, {
        id: 0,
        type: e.PT_BIGINT,
        val: t
    }]),
    a.sendPak(e.buf)
}
,
canvas.app.battle.engine.MFunc.prototype.skipTurn = function() {
    var t = canvas.app.battle.model.serverParser
      , e = this.baseLnk.conn
      , a = canvas.app.battle.model;
    canvas.app.battle.log("mFunc skipTurn: ", 10027008),
    t.pack([{
        id: 0,
        type: t.PT_INT,
        val: t.FS_SCCL_SKIP_TURN
    }]),
    e.sendPak(t.buf),
    this.baseLnk.centerVisible(!1),
    a.skipTurnTime = Date.now() + 1500 * canvas.app.battle.Const.SKIP_TURN_COOLDOWN
}
,
canvas.app.battle.engine.MCmd = function(t) {
    this.baseLnk = t,
    this.myEffectsList = "",
    this.myEffectsListIV,
    this.myEffectsListDelayBegin = 1e3,
    this.myEffectsListDelayDelta = 100,
    this.myEffectsListDelayCurrent = 1e3,
    this.myEffectsListDelayMax = 5e3,
    this.myEffectsGetted = !1,
    this.oppIdFromWFCmd = 0
}
,
canvas.app.battle.engine.MCmd.prototype.state = function() {
    var t, e, a, s, i, n = canvas.app.battle.model.serverParser, o = canvas.app.battle.model, r = this.baseLnk;
    canvas.app.battle.log("mCmd state: paramsCount= " + n.params.length),
    o.mainStep == canvas.app.battle.Const.MAIN_STEP_STATE ? (o.clearEventsCache(),
    t = parseInt(n.params[2].val),
    e = parseInt(n.params[3].val),
    a = parseInt(n.params[4].val),
    s = o.parsePersStatus(parseInt(n.params[5].val), parseInt(n.params[6].val)),
    i = parseInt(n.params[7].val),
    o.fightRunning = 0 == t,
    o.roundTime = o.roundTimeBase = 1e3 * e,
    0 < t && (o.roundTime = 1e3 * t,
    r.view.topTimer.activate()),
    o.memDat[a] || (o.memDat[a] = {}),
    o.memDat[a].persFlags = i,
    o.testFlag(o.memDat[o.persId].persFlags, canvas.app.battle.Const.FS_PF_DEFENDED) && r.view.centerView.activeBlock(!0),
    o.testFlag(o.memDat[o.persId].persFlags, canvas.app.battle.Const.FS_PF_MAGIC) && (r.view.centerView.mode = canvas.app.battle.Const.MODE_SPELLS,
    r.view.centerView.cAttack.deactivate()),
    o.totalDamage = n.params[8].val,
    r.view.updateTotalDamage(),
    r.setSyncTimeout(),
    o.persHp = n.params[9].val,
    o.persHpMax = n.params[10].val,
    o.persMp = n.params[11].val,
    o.persMpMax = n.params[12].val,
    r.view.hpmp.setHpPers(o.persHp, o.persHpMax),
    r.view.hpmp.setMpPers(o.persMp, o.persMpMax),
    o.persStatus = s,
    o.oppId = n.params[13].val,
    o.effectsMinCooldown = n.params[14].val,
    0 == o.serverTimestamp && (o.serverTimestamp = parseInt(n.params[15].val),
    o.clientTimestamp = Math.floor(Date.now() / 1e3)),
    o.mainStep = canvas.app.battle.Const.MAIN_STEP_INFO,
    o.paksReady = !0,
    n.params[16] && 0 < n.params[16].val && (o.wfCnt = 1,
    o.newPersId = parseInt(n.params[16].val),
    o.watchFight = !0),
    r.setBowsInfo(n.params[17] ? parseInt(n.params[17].val) : 0, n.params[18] ? parseInt(n.params[18].val) : 0, n.params[19] ? parseInt(n.params[19].val) : 0),
    r.mainIteration(),
    o.currentAura = n.params[20] && 0 < n.params[20] ? n.params[20].toString() : "",
    r.updateAuras(o.persId)) : (o.totalDamage = n.params[8].val,
    r.view.updateTotalDamage(),
    r.setSyncTimeout(),
    this.paksReadyAndParse())
}
,
canvas.app.battle.engine.MCmd.prototype.anyPersInfo = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model;
    this.baseLnk;
    canvas.app.battle.log("mCmd anyPersInfo: paramsCount= " + t.params.length);
    var a = t.params[2].val
      , s = (t.params[3].val,
    e.parsePersStatus(t.params[4].val, t.params[5].val))
      , i = t.params[6].val
      , n = t.params[7].val
      , o = (t.params[8].val,
    t.params[9].val)
      , r = (t.params[10].val,
    t.params[11].val)
      , c = (t.params[12].val,
    t.params[13].val)
      , p = (t.params[14].val,
    t.params[15].val,
    t.params[16].val)
      , h = (t.params[17].val,
    t.params[18].val)
      , l = (t.params[19].val,
    t.params[20].val);
    t.params[21].val;
    e.memDat[a] = {
        maxHP: h,
        maxMP: l,
        nick: n,
        level: o,
        persFlags: i,
        sk: c,
        team: p,
        mem_flag: !0,
        kind: r,
        status: s
    }
}
,
canvas.app.battle.engine.MCmd.prototype.persInfo = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mCmd persInfo: paramsCount= " + t.params.length);
    var s = t.params[2].val
      , i = (t.params[3].val,
    e.parsePersStatus(t.params[4].val, t.params[5].val))
      , n = t.params[6].val
      , o = t.params[7].val
      , r = (t.params[8].val,
    t.params[9].val)
      , c = t.params[10].val
      , p = 1 == c ? "M" : "F"
      , h = t.params[11].val
      , l = t.params[12].val
      , d = t.params[13].val
      , v = t.params[14].val
      , u = t.params[15].val
      , m = t.params[16].val
      , _ = t.params[17].val
      , g = t.params[18].val
      , f = t.params[19].val
      , w = t.params[20].val
      , E = t.params[21].val;
    if (s != e.persId && s != e.oppId)
        return canvas.app.battle.log("mCmd persInfo: ipersId is not =persId or oppId", 16711680),
        void this.paksReadyAndParse();
    canvas.app.battle.log("\t* ipersId = " + s),
    canvas.app.battle.log("\t* ipersFlags  = " + n),
    canvas.app.battle.log("\t\tcheck = " + (16384 & n)),
    canvas.app.battle.log("\t* ipersPetSrc = " + E),
    100 == s && (p = (c = 1) == c ? "M" : "F",
    d = 3),
    canvas.app.battle.log("\t* skeleton = " + d + " time=" + v, 170),
    canvas.app.battle.log("\t* gender   = " + p, 170),
    canvas.app.battle.log("\t* cls(hex) = " + l, 170),
    e.memDat[s] = {
        maxHP: g,
        maxMP: w,
        nick: o,
        level: r,
        gender: c,
        persFlags: n,
        sk: d,
        kind: h,
        team: m,
        mem_flag: !0,
        petSrc: E,
        status: i
    },
    s == e.persId && (a.setBowsInfo(t.params[22] ? parseInt(t.params[22].val) : 0, t.params[23] ? parseInt(t.params[23].val) : 0, t.params[24] ? parseInt(t.params[24].val) : 0),
    a.updateAuras(e.persId)),
    e.memGenders[s] = {
        genders: p
    },
    l = 1 & l ? 1 : 2 & l ? 3 : 4 & l ? 5 : 8 & l ? 2 : 16 & l ? 4 : 32 & l ? 6 : 0,
    e.memClsMage[s] = {
        cls: l
    },
    canvas.app.battle.log("\t* cls(dec) = " + l, 170),
    s == e.persId ? (canvas.app.battle.log("\t* PERS_INFO (MY_PERS)"),
    canvas.app.battle.log("\t* status=" + String(i)),
    a.view.persNick.update(o, s),
    e.persNick = o,
    e.persRace = h,
    e.tempDead ? (e.persStatus = canvas.app.battle.Const.STATUS_DEAD,
    e.tempDead = !1) : e.persStatus = i,
    e.persHp = _,
    e.persHpMax = g,
    e.persMp = f,
    e.persMpMax = w,
    a.view.hpmp.setHpPers(_, g),
    a.view.hpmp.setMpPers(f, w),
    a.updPersHPLvl(),
    a.updPersMPLvl(),
    a.view.persLevel.setLevel(r),
    e.persSk = d,
    e.persSkTime = v,
    e.persGender = p,
    e.persTeam = m,
    a.players[e.persId] ? ((m = a.players[e.persId]).addFuncShow = a.showLoadedPers.bind(a),
    m.showBody()) : d < canvas.app.battle.Const.BOTID1 ? (e.persIsBotFlag = !1,
    a.mFunc.persParts(s),
    e.paksReady = !0) : (a.loadPers(s),
    e.persIsBotFlag = !0,
    a.mFunc.persParts(s),
    this.paksReadyAndParse()),
    e.mainStep = canvas.app.battle.Const.MAIN_STEP_DONE) : (canvas.app.battle.log("\t* PERS_INFO (MY_OPP)"),
    canvas.app.battle.log("\t*  status=" + String(i)),
    a.view.oppNick.update(o, s),
    e.oppStatus = i,
    e.oppHp = _,
    e.oppHpMax = g,
    e.oppMp = f,
    e.oppMpMax = w,
    a.view.hpmp.setHpOpp(_, g),
    a.view.hpmp.setMpOpp(f, w),
    a.view.oppLevel.setLevel(r),
    e.oppSk = d,
    e.oppSkTime = v,
    e.oppMask = u,
    e.oppGender = p,
    a.view.centerView.applyMask(e.oppMask),
    a.players[e.oppId] ? ((p = a.players[e.oppId]).addFuncShow = a.eveOppNewNoSh.bind(a),
    p.showBody()) : (d < canvas.app.battle.Const.BOTID1 ? e.persIsBotFlag = !1 : (a.loadPers(s),
    e.persIsBotFlag = !0),
    a.mFunc.persParts(s),
    e.paksReady = !0))
}
,
canvas.app.battle.engine.MCmd.prototype.persParts = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mCmd persParts: paramsCount= " + t.params.length);
    var s = t.params[2].val;
    e.myAllDataArray[s] = t.params[3].val;
    for (var i, n, o = [], r = t.params[3].val.split(","), c = (r.length,
    0); c < r.length; c++)
        i = r[c].split(";"),
        n = parseInt(i[0]),
        o.push(65535 & n, n >> 16, i[1], i[2], i[3]);
    s == e.persId ? a.flagLoadPers(o[295]) : a.flagLoadOpp(o[295]),
    e.persIsBotFlag ? this.paksReadyAndParse() : (a.loadPers(s),
    a.players[s].mFlagId = o[295])
}
,
canvas.app.battle.engine.MCmd.prototype.sendEffectsList = function() {
    var t = this.baseLnk;
    this.myEffectsGetted || "" == this.myEffectsList || (this.myEffectsGetted = t.sendData("items", "EffList@" + this.myEffectsList)),
    this.myEffectsGetted || (this.myEffectsListDelayCurrent < this.myEffectsListDelayMax && (this.myEffectsListDelayCurrent += this.myEffectsListDelayDelta),
    this.myEffectsListIV = setTimeout(this.sendEffectsList.bind(this), this.myEffectsListDelayCurrent))
}
,
canvas.app.battle.engine.MCmd.prototype.effects = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mCmd effects: paramsCount= " + t.params.length);
    var s = 0;
    this.myEffectsList = "",
    e.abils = {},
    e.auras = new Array;
    for (var i = 2; i < t.params.length; i += 15) {
        var n = t.params[i].val
          , o = t.params[i + 1].val
          , r = t.params[i + 2].val
          , c = t.params[i + 3].val
          , p = t.params[i + 4].val
          , h = t.params[i + 5].val
          , l = t.params[i + 6].val
          , d = t.params[i + 7].val
          , v = t.params[i + 8].val
          , u = t.params[i + 9].val
          , m = t.params[i + 10].val
          , _ = t.params[i + 11].val
          , g = t.params[i + 12].val
          , f = t.params[i + 13].val
          , w = t.params[i + 14].val;
        canvas.app.battle.log("     * effId=" + n + " cnt=" + o + " flags=0x" + r.toString(16) + " cdTime=" + p + " cdType=" + h + " ArtId=" + c + " cdGripId=" + l + " title=" + d + " pic=" + v + " slot=" + m + " mp=" + _ + " cdLeft=" + g + " energy=" + f + " curEffSubSlot=" + w, 6710886),
        e.abilsFlags[n] = r,
        canvas.app.battle.log("     *  PASSTURN   " + e.testFlag(r, canvas.app.battle.Const.FS_PEF_PASSTURN), 10066329),
        canvas.app.battle.log("     *  TARGETSELF " + e.testFlag(r, canvas.app.battle.Const.FS_PEF_TARGETSELF), 10066329),
        canvas.app.battle.log("     *  TARGETOPP  " + e.testFlag(r, canvas.app.battle.Const.FS_PEF_TARGETOPP), 10066329),
        canvas.app.battle.log("     *  TEAMSELF   " + e.testFlag(r, canvas.app.battle.Const.FS_PEF_TEAMSELF), 10066329),
        canvas.app.battle.log("     *  TEAMOPP    " + e.testFlag(r, canvas.app.battle.Const.FS_PEF_TEAMOPP), 10066329),
        canvas.app.battle.log("     *  CONFIRM    " + e.testFlag(r, canvas.app.battle.Const.FS_PEF_CONFIRM), 10066329),
        canvas.app.battle.log("     *  SPELL    " + e.testFlag(r, canvas.app.battle.Const.FS_PEF_SPELL), 10066329),
        canvas.app.battle.log("     *  BOW    " + e.testFlag(r, canvas.app.battle.Const.FS_PEF_BOW), 10066329),
        canvas.app.battle.log("     *  WEAPONEFFECT    " + e.testFlag(r, canvas.app.battle.Const.FS_PEF_WEAPONEFFECT), 10066329),
        canvas.app.battle.log("     *  AURA    " + (r & canvas.app.battle.Const.FS_PEF_AURA), 10066329),
        "BANNER" == u && (e.flagEffId = n,
        e.flagTimeCd = p,
        e.flagTimeLeft = g),
        e.testFlag(r, canvas.app.battle.Const.FS_PEF_WEAPONEFFECT) || (0 < d.length && (d = d.replace(/ /g, "__")),
        u = e.testFlag(r, canvas.app.battle.Const.FS_PEF_CONFIRM) ? d : "0",
        e.testFlag(r, canvas.app.battle.Const.FS_PEF_SPELL) ? (e.spells[m] = {
            effId: n,
            cdTime: Math.max(Math.floor(canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN / 1e3), p),
            cdGripId: l,
            title: d,
            picture: v,
            mp: _,
            confirm: u,
            cdLeft: g
        },
        e.hasSpells = !0) : e.testFlag(r, canvas.app.battle.Const.FS_PEF_BOW) ? e.spellsBow[n] = {
            effId: n,
            cdTime: Math.max(Math.floor(canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN / 1e3), p),
            cdGripId: l,
            title: d,
            picture: v,
            mp: _,
            confirm: u,
            cdLeft: g,
            energy: f,
            index: s++
        } : r & canvas.app.battle.Const.FS_PEF_AURA ? e.auras.push(new canvas.data.battle.AuraData(n.toString(),d,canvas.Config.artifactsPath + v)) : (f = e.testFlag(r, canvas.app.battle.Const.FS_PEF_DISABLED) ? "1" : "0",
        0 < o && (this.myEffectsList += m + e.ch1 + n + e.ch1 + o + e.ch1 + v + e.ch1 + p + e.ch1 + l + e.ch1 + g + e.ch1 + f + e.ch1 + w + e.ch1 + h + e.ch2),
        e.abils[n] = {
            title: d
        },
        canvas.app.battle.log("     *  ABIL: effId=" + n + " title=" + d + " flags=" + r.toString(2) + "(2)," + r.toString(16) + "(16)", 10066329)))
    }
    a.view.centerView.buildSpells(),
    a.view.bowPanel.buildSpells(),
    a.updateAuras(e.persId),
    "" != this.myEffectsList && (this.myEffectsList += "0",
    this.myEffectsListDelayCurrent = this.myEffectsListDelayBegin,
    this.sendEffectsList())
}
,
canvas.app.battle.engine.MCmd.prototype.persActEffects = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mCmd persActEffects: paramsCount= " + t.params.length);
    var s = t.params[2].val;
    canvas.app.battle.log("     persId= " + s);
    var i = t.params.pop().val;
    s == e.persId ? e.persLastEffectsUpdateIndex = i : s == e.oppId && (e.oppLastEffectsUpdateIndex = i);
    if (e.persBafsFlag) {
        e.persBafsFlag = !1;
        for (var i = e.serverTimestamp - e.clientTimestamp, n = s.toString() + "|" + i.toString() + "|", o = 3; o < t.params.length; o += 7)
            d = t.params[o].val,
            v = canvas.Config.artifactsPath + t.params[o + 3].val,
            u = t.params[o + 1].val,
            m = t.params[o + 2].val,
            g = t.params[o + 5].val,
            f = t.params[o + 6].val,
            canvas.app.battle.log(" // curArtId  " + d, 10066329),
            canvas.app.battle.log(" // curPic    " + v, 10066329),
            canvas.app.battle.log(" // curCnt    " + u, 10066329),
            canvas.app.battle.log(" // curTitle  " + m, 10066329),
            canvas.app.battle.log(" // eetimeMax " + g, 10066329),
            n += d.toString() + ";" + v + ";" + u.toString() + ";" + m + ";" + g.toString() + ";" + f.toString() + "|";
        a.sendData("mem", "pers_bafs@" + n.substr(0))
    }
    var r, c = [], p = {}, h = !1;
    for (o = 3; o < t.params.length; o += 7) {
        var l, d = t.params[o].val, v = canvas.Config.artifactsPath + t.params[o + 3].val, u = t.params[o + 1].val, m = t.params[o + 2].val, _ = t.params[o + 4].val, g = t.params[o + 5].val, f = t.params[o + 6].val, h = h || e.testCurrentAura(d, s);
        canvas.app.battle.log("       id=" + d + " title=" + m + " pic=" + v + " cnt=" + u.toString() + " animData=" + _ + " eetimeMax=" + g + " turnsLeft=" + f, 10066329),
        null != p[v] ? c[p[v]].cnt += u : ((l = {}).id = d,
        l.pic = v,
        l.title = m,
        l.cnt = u,
        l.lnk = null,
        l.animData = _,
        l.eetimeMax = g,
        l.turnsLeft = f,
        p[v] = c.push(l) - 1)
    }
    if (h && a.updateAuras(s),
    s == e.persId ? r = a.view.effectsP1 : s == e.oppId ? r = a.view.effectsP2 : canvas.app.battle.log("       WARN: pers_id=" + s.toString() + " not active", 16711680),
    r) {
        r.initEffects(c);
        var w, E = a.players[s];
        if (E) {
            E.clearAdditionalEffects();
            for (var b = 0; b < c.length; b++)
                2 < (w = c[b].animData.split("/")).length && "null" != w[2] && (w = w[2],
                E.showAdditionalEffects(e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_ABSORB, w)))
        } else
            canvas.app.battle.log("       WARN: pers iPersId=" + s + " is null", 10027008)
    }
}
,
canvas.app.battle.engine.MCmd.prototype.fightState = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mCmd persActEffects: paramsCount= " + t.params.length + ", listSize=" + t.params[2].val.toString());
    var s = t.params[2].val;
    if (!(t.params.length < 12)) {
        for (var i, n, o, r, c, p, h, l, d, v, u, m, _, g, f = 3; f < t.params.length; f += 12)
            i = t.params[f + 0].val,
            n = e.parsePersStatus(t.params[f + 1].val, t.params[f + 2].val),
            o = t.params[f + 3].val,
            r = t.params[f + 4].val,
            c = t.params[f + 5].val,
            p = t.params[f + 6].val,
            h = t.params[f + 7].val,
            l = t.params[f + 8].val,
            d = t.params[f + 9].val,
            v = t.params[f + 10].val,
            u = t.params[f + 11].val,
            m = e.testFlag(o, canvas.app.battle.Const.FS_PF_BOT),
            _ = e.testFlag(o, canvas.app.battle.Const.FS_PF_SHADOW),
            e.testPvpStatus(h, m),
            g = 0,
            e.memDat[i] && e.memDat[i].sk && (g = e.memDat[i].sk),
            e.memDat[i] = {
                maxHP: d,
                maxMP: u,
                nick: r,
                level: p,
                persFlags: o,
                sk: g,
                team: h,
                mem_flag: !0,
                status: n
            },
            i == e.persId && a.updateAuras(e.persId),
            a.mFunc.full_g2m_answ_str += i.toString() + e.ch1 + r + e.ch1 + h.toString() + e.ch1 + n.toString() + e.ch1 + l.toString() + e.ch1 + d.toString() + e.ch1 + v.toString() + e.ch1 + u.toString() + e.ch1 + c + e.ch1 + p.toString() + e.ch1 + m.toString() + e.ch1 + o.toString() + e.ch1 + e.fightId.toString() + e.ch1 + _.toString() + e.ch2,
            a.mFunc.full_g2m_srt_buff++,
            canvas.app.battle.log("         ---------"),
            canvas.app.battle.log("         isBot: " + m),
            canvas.app.battle.log("         curNick: " + r),
            canvas.app.battle.log("         curId: " + String(i)),
            canvas.app.battle.log("         curStatus: " + String(n)),
            canvas.app.battle.log("         curData: " + c),
            canvas.app.battle.log("         persFlags: " + o),
            canvas.app.battle.log("         --------");
        if (s > a.mFunc.full_g2m_srt_buff && 0 != s)
            a.mFunc.fightState(0, a.mFunc.full_g2m_srt_buff);
        else {
            if (a.mFunc.full_g2m_answ_str += String(e.myPersId),
            canvas.app.battle.log("      ToMEM: send PAK1 (len=" + a.mFunc.full_g2m_answ_str.length + ") buff=" + a.mFunc.full_g2m_srt_buff, 153),
            canvas.app.battle.log("      ToMEM: send PAK1: " + a.mFunc.full_g2m_answ_str, 153),
            a.mFunc.full_g2m_answ_str.length < 20480)
                a.sendData("mem", "pak1@" + a.mFunc.full_g2m_answ_str);
            else {
                for (var w = a.mFunc.full_g2m_answ_str; 0 < w.length; )
                    a.sendData("mem", "pak1s@" + w.substr(0, 15360)),
                    w = w.substr(15360);
                a.sendData("mem", "pak1s@done")
            }
            !e.watchFight && e.persStatus != canvas.app.battle.Const.STATUS_DEAD || (a.setupWatchFightBts(!0, e.persId),
            a.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT_BT)),
            a.mFunc.full_g2m_answ_str = "",
            a.mFunc.full_g2m_srt_buff = 0,
            e.fullMlLoaded = !0,
            e.fullReqLoaded = !0,
            e.fightStateExecuting = !1
        }
    }
}
,
canvas.app.battle.engine.MCmd.prototype.useEffect = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mCmd useEffect: paramsCount= " + t.params.length);
    var s, i = t.params[2].val, n = t.params[3].val, t = t.params[4].val;
    canvas.app.battle.log("        effId=" + String(i) + " targetId=" + String(n) + " usageStatus=" + String(t), 10066329);
    var o = null;
    for (s in e.spells)
        if (e.spells[s].effId == i) {
            o = s;
            break
        }
    o ? (canvas.app.battle.log("        apply spells cooldown slot_id=" + o, 10066329),
    a.view.centerView.useSlotConfirmed(o)) : e.spellsBow[i] ? (canvas.app.battle.log("        apply bow spells cooldown eff_id=" + i, 10066329),
    a.view.bowPanel.confirmUseEffect(i)) : (canvas.app.battle.log("        send sig to items_left.swf", 10066329),
    a.sendData("items", "update_cnt@" + String(i) + ",-1")),
    e.useFlag(i),
    a.updateAuras(e.persId)
}
;
canvas.app.battle.engine.MCmd.prototype.changeMode = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mCmd changeMode: paramsCount= " + t.params.length);
    var s = e.persId
      , t = t.params[2].val;
    e.memDat[s].persFlags != (e.memDat[s].persFlags = t) && (t = a.getPostLabel(s),
    canvas.app.battle.log("       post label = " + t),
    a.players[s].gotoAndPlay(t))
}
,
canvas.app.battle.engine.MCmd.prototype.skipTurn = function() {
    var t = canvas.app.battle.model.serverParser;
    canvas.app.battle.log("mCmd skipTurn: paramsCount= " + t.params.length)
}
,
canvas.app.battle.engine.MCmd.prototype.unsetAura = function() {
    var t = canvas.app.battle.model.serverParser;
    canvas.app.battle.log("mCmd unsetAura: paramsCount= " + t.params.length)
}
,
canvas.app.battle.engine.MCmd.prototype.watchFight = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mCmd watchFight: paramsCount= " + t.params.length),
    e.wfGet++,
    this.oppIdFromWFCmd = t.params[10].val,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.PERSES_HIDED, null, this.handlerPersesHided, this),
    a.persesHide()
}
,
canvas.app.battle.engine.MCmd.prototype.handlerPersesHided = function() {
    canvas.app.battle.model.serverParser;
    var t = canvas.app.battle.model;
    this.baseLnk;
    if (canvas.EventManager.removeEventListener(canvas.app.battle.Event.PERSES_HIDED, null, this.handlerPersesHided, this),
    canvas.app.battle.log("mCmd handlerPersesHided: newPersId= " + t.newPersId),
    t.wfCnt != t.wfGet)
        return canvas.app.battle.log("        - new_pers_id was changed, handle return", 16711680),
        void this.paksReadyAndParse();
    t.oppId = this.oppIdFromWFCmd,
    t.persId = t.newPersId,
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MCmd.prototype.paksReadyAndParse = function() {
    canvas.app.battle.model.paksReady = !0,
    canvas.app.battle.model.parser.paksParse()
}
,
canvas.app.battle.engine.MEve = function(t) {
    this.baseLnk = t,
    this.effectsList = "",
    this.myEffectsListIV,
    this.myEffectsListDelayBegin = 1e3,
    this.myEffectsListDelayDelta = 100,
    this.myEffectsListDelayCurrent = 1e3,
    this.myEffectsListDelayMax = 5e3,
    this.myEffectsGetted = !1
}
,
canvas.app.battle.engine.MEve.prototype.oppWait = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve oppWait: paramsCount= " + t.params.length),
    a.view.topTimer.deactivate(),
    a.centerVisible(!1),
    0 == e.oppId ? (canvas.app.battle.log("         no opponent, ignore oppWait event"),
    a.showSpellBookInWaitOpponent(),
    this.paksReadyAndParse()) : (canvas.app.battle.log("         hide old opponent"),
    (a = a.players[e.oppId]) ? (a.addFuncHide = this.oppWaitHided.bind(this),
    a.hideBody()) : canvas.app.battle.log("         ERR: opp pers class is null (opp_id=" + String(e.oppId) + ")", 16711680))
}
,
canvas.app.battle.engine.MEve.prototype.oppWaitHided = function(t) {
    canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve oppWaitHided: persId=" + t.pers_id),
    e.oppId = 0,
    a.view.effectsP2.initEffects([]),
    a.view.oppNick.unshow(),
    a.view.oppLevel.setLevel(""),
    a.view.hpmp.setHpOpp(0, 0),
    a.view.hpmp.setMpOpp(0, 0),
    a.showSpellBookInWaitOpponent(),
    e.persDown || e.persStatus != canvas.app.battle.Const.STATUS_DEAD || (a = (a = (t = a.players[e.persId]).sk.kick_array_all.kick_mid.a_mid_1.die)[Math.floor(a.length * Math.random())],
    e.persDown = !0,
    t.gotoAndPlay(a),
    t.magicStandBase.visible = !1),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.oppNew = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve oppNew: paramsCount= " + t.params.length),
    a.view.topTimer.deactivate(),
    e.newOppId = t.params[2].val,
    canvas.app.battle.log("         new opp_id=" + e.newOppId),
    a.view.flagOpp.visible = !1;
    var s = a.players[e.newOppId];
    if (s && (0 != s.mFlagId ? a.view.flagOpp.visible = !0 : a.view.flagOpp.visible = !1),
    e.oppId != e.newOppId) {
        if (0 != e.oppId) {
            t = a.players[e.oppId];
            if (!t)
                return void canvas.app.battle.log("         Err01: opp pers class is null (opp_id=" + String(e.oppId) + ")", 16711680);
            t.addFuncHide = this.oppNewHided.bind(this),
            t.hideBody(),
            a.view.flagOpp.visible = !1,
            s && 0 != s.mFlagId ? a.view.flagOpp.visible = !0 : a.view.flagOpp.visible = !1
        } else
            a.view.mainPopup.deactivate(),
            e.oppId = e.newOppId,
            e.paksReady = !0,
            a.mFunc.persInfo(e.oppId);
        a.view.centerView.cSpells.restoreCooldowns()
    } else
        this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.oppNewHided = function(t) {
    canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve oppNewHided: persId=" + t.pers_id),
    a.view.mainPopup.deactivate(),
    a.view.effectsP2.initEffects([]),
    a.view.oppNick.unshow(),
    a.view.oppLevel.setLevel(""),
    a.view.hpmp.setHpOpp(0, 0),
    a.view.hpmp.setMpOpp(0, 0),
    e.oppId = e.newOppId,
    e.paksReady = !0,
    a.mFunc.persInfo(e.oppId)
}
,
canvas.app.battle.engine.MEve.prototype.fightState = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve fightState: paramsCount= " + t.params.length);
    var s = t.params[2].val
      , i = e.parsePersStatus(t.params[3].val, t.params[4].val)
      , n = t.params[5].val
      , o = t.params[6].val
      , r = t.params[7].val
      , c = t.params[8].val
      , p = t.params[9].val
      , h = s == e.persId || s == e.oppId;
    canvas.app.battle.log("          pers_id=" + String(s) + " status=" + String(i) + " hp=" + String(o) + "/" + String(r) + " mp=" + String(c) + " flags=" + n.toString(2)),
    s == e.myPersId && i != canvas.app.battle.Const.STATUS_DEAD && a.setupWatchFightBts(!1);
    var l, d = !0;
    e.memDat[s] ? (e.memDat[s].maxHP = r,
    e.memDat[s].maxMP = p,
    e.memDat[s].status = i,
    t = s + e.ch1 + i + e.ch1 + String(o) + e.ch1 + String(r) + e.ch1 + String(c) + e.ch1 + String(p) + e.ch1 + n,
    e.mlBufferHash[s] || e.mlBufferQueue.push(s),
    e.mlBufferHash[s] = t,
    e.evActivityTmp++,
    t = e.memDat[s].persFlags,
    e.memDat[s].persFlags = n,
    h && (i == canvas.app.battle.Const.STATUS_DEAD ? (a.players[s] && (a.players[s].clearAdditionalEffects(),
    a.players[s].magicStandBase.visible = !1),
    s == e.oppId ? (canvas.app.battle.log("        opp die (apply <b>dieBody</b>)"),
    e.oppStatus = canvas.app.battle.Const.STATUS_DEAD,
    d = !1,
    a.players[s].addFuncDie = this.fightStateDead.bind(this),
    a.players[s].dieBody()) : (canvas.app.battle.log("        pers die (apply <b>dieBody</b>)"),
    e.persStatus = canvas.app.battle.Const.STATUS_DEAD,
    e.persHpMax = r,
    e.persMpMax = p,
    0 != (l = o - e.persHp) && a.view.showDmg([{
        tar: "pers",
        kick: l < 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_CURE,
        val: l
    }]),
    e.persHp = o,
    e.persMp = c,
    a.view.hpmp.setHpPers(e.persHp, e.persHpMax),
    a.view.hpmp.setMpPers(e.persMp, e.persMpMax),
    d = !1,
    this.fightStateDead({
        pers_id: e.persId
    }))) : (a.players[s] && (a.players[s].magicStandBase.visible = !0),
    s == e.persId ? (a.chekStatusForResurection(),
    e.persStatus = i,
    e.persHpMax = r,
    e.persMpMax = p,
    0 != (l = o - e.persHp) && a.view.showDmg([{
        tar: "pers",
        kick: l < 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_CURE,
        val: l
    }]),
    0 != (l = c - e.persMp) && a.view.showDmg([{
        tar: "pers",
        kick: l < 0 ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_MANA,
        val: l
    }]),
    e.persHp = o,
    e.persMp = c,
    a.view.hpmp.setHpPers(e.persHp, e.persHpMax),
    a.view.hpmp.setMpPers(e.persMp, e.persMpMax),
    a.updPersMPLvl()) : s == e.oppId ? (e.oppStatus = i,
    e.oppHpMax = r,
    e.oppMpMax = p,
    e.oppHp = o,
    e.oppMp = c,
    a.view.hpmp.setHpOpp(e.oppHp, e.oppHpMax),
    a.view.hpmp.setMpOpp(e.oppMp, e.oppMpMax)) : canvas.app.battle.log("          WARN: unknown iPersId=" + String(s) + " in fightState", 16711680),
    t != n && (n = a.getPostLabel(s),
    a.players[s].gotoAndPlay(n)))),
    s == e.myPersId && e.oppId && a.view.centerView.cDot.btIsOn && a.testCenterMode(),
    1 != e.memDat[s].mem_flag && (e.memDat[s].mem_flag = !0,
    a.mFunc.fightState(s, 0))) : e.fullMlLoaded ? a.mFunc.fightState(s, 0) : canvas.app.battle.log("          full MemberList not loaded yet", 153),
    d && this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.fightStateDead = function(t) {
    canvas.app.battle.model.serverParser;
    var e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve fightStateDead: persId=" + t.pers_id),
    0 == e.oppId ? this.paksReadyAndParse() : (a.players[e.oppId].addFuncHide = this.oppWaitHided.bind(this),
    a.players[e.oppId].hideBody()),
    a.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT_BT)
}
,
canvas.app.battle.engine.MEve.prototype.newPers = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve newPers: paramsCount= " + t.params.length);
    var s = t.params[2].val
      , i = e.parsePersStatus(t.params[3].val, t.params[4].val)
      , n = t.params[5].val
      , o = t.params[6].val
      , r = t.params[7].val
      , c = t.params[8].val
      , p = t.params[9].val
      , h = t.params[10].val
      , l = t.params[11].val
      , d = t.params[12].val
      , v = t.params[13].val
      , u = e.testFlag(n, canvas.app.battle.Const.FS_PF_BOT)
      , m = e.testFlag(n, canvas.app.battle.Const.FS_PF_SHADOW);
    if (e.testPvpStatus(p, u),
    t = 0,
    e.memDat[s] && e.memDat[s].sk && (t = e.memDat[s].sk),
    e.memDat[s] = {
        maxHP: l,
        maxMP: v,
        nick: o,
        level: c,
        persFlags: n,
        sk: t,
        team: p,
        mem_flag: !0,
        status: i
    },
    a.mFunc.full_g2m_answ_str += String(s) + e.ch1 + o + e.ch1 + String(p) + e.ch1 + String(i) + e.ch1 + String(h) + e.ch1 + String(l) + e.ch1 + String(d) + e.ch1 + String(v) + e.ch1 + r + e.ch1 + String(c) + e.ch1 + String(u) + e.ch1 + String(n) + e.ch1 + String(e.fightId) + e.ch1 + String(m) + e.ch2,
    a.mFunc.full_g2m_srt_buff++,
    canvas.app.battle.log("           ---------"),
    canvas.app.battle.log("           isBot: " + u),
    canvas.app.battle.log("           curNick: " + o),
    canvas.app.battle.log("           curId: " + String(s)),
    canvas.app.battle.log("           curStatus: " + String(i)),
    canvas.app.battle.log("           curData: " + r),
    canvas.app.battle.log("           persFlags: " + n),
    canvas.app.battle.log("           --------"),
    a.mFunc.full_g2m_answ_str += String(e.myPersId),
    e.fullReqLoaded)
        if (a.mFunc.full_g2m_answ_str.length < 20480)
            a.sendData("mem", "pak1@" + a.mFunc.full_g2m_answ_str);
        else {
            for (var _ = a.mFunc.full_g2m_answ_str; 0 < _.length; )
                a.sendData("mem", "pak1s@" + _.substr(0, 15360)),
                _ = _.substr(15360);
            a.sendData("mem", "pak1s@done")
        }
    !canvas.app.battle.Const.WATCH_FIGHT && e.persStatus != canvas.app.battle.Const.STATUS_DEAD || (a.setupWatchFightBts(!0, e.persId),
    a.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT_BT)),
    a.mFunc.full_g2m_answ_str = "",
    a.mFunc.full_g2m_srt_buff = 0,
    e.fullMlLoaded = !0,
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.attackWait = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve attackWait: paramsCount= " + t.params.length),
    a.chekStatusForResurection(),
    e.persStatus = canvas.app.battle.Const.STATUS_PASSIVE,
    a.centerVisible(!1),
    a.view.topTimer.activate(e.getLostTime()),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.attackNow = function() {
    var t, e = canvas.app.battle.model.serverParser, a = canvas.app.battle.model, s = this.baseLnk;
    canvas.app.battle.log("mEve attackNow: paramsCount= " + e.params.length),
    s.chekStatusForResurection(),
    a.persStatus = canvas.app.battle.Const.STATUS_ACTIVE,
    s.centerVisible(!0),
    s.view.centerView.checkSpells(e.params[2].val),
    s.view.centerView.coolDownStart(e.params[2].val),
    a.memDat[a.oppId] && (t = a.memDat[a.oppId].persFlags,
    a.memDat[a.oppId].persFlags = e.params[2].val,
    t != a.memDat[a.oppId].persFlags && (t = s.getPostLabel(a.oppId),
    s.players[a.oppId].gotoAndPlay(t))),
    s.view.topTimer.activate(a.getLostTime()),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.attack = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model;
    this.baseLnk;
    if (canvas.app.battle.log("mEve attack: paramsCount= " + t.params.length + " pers_id=" + t.params[2].val + "; opp_id=" + t.params[3].val),
    0 == e.oppId)
        return canvas.app.battle.log("                 WARN: no opponent, attack incorrect", 16711680),
        void this.paksReadyAndParse();
    e.waitingDamageCnt = 2,
    e.delayedAttackData = {
        persId: t.params[2].val,
        oppId: t.params[3].val,
        kick: t.params[4].val,
        part: t.params[5].val,
        rnd: t.params[6].val,
        animData: t.params[7].val
    },
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.applyAttack = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    if (canvas.app.battle.log("mEve applyAttack: paramsCount= " + t.params.length + " opp_id=" + e.oppId),
    e.delayedAttackData) {
        a.view.topTimer.deactivate(),
        e.blockTime = 0;
        var s = e.delayedAttackData.persId
          , i = e.delayedAttackData.oppId
          , n = e.delayedAttackData.kick
          , o = e.delayedAttackData.part
          , r = e.delayedAttackData.rnd
          , c = (255 & r) / 255
          , p = (r >> 8) / 255
          , h = e.delayedAttackData.animData ? parseInt(e.delayedAttackData.animData) : 0
          , l = e.delayedAttackData["data_" + String(s)]
          , d = e.delayedAttackData["data_" + String(i)];
        if (!l)
            return canvas.app.battle.log("            ERR: no data for pers_id=" + String(s), 16711680),
            void this.paksReadyAndParse();
        if (null == d)
            return canvas.app.battle.log("            ERR: no data for opp_id=" + String(i), 16711680),
            void this.paksReadyAndParse();
        var v, u, m, _ = n, g = canvas.app.battle.Const.PART_STR[o], t = canvas.app.battle.Const.KICK_STR[n], r = t, i = [];
        s == e.persId ? (e.oppHp -= d.dmg,
        e.persHp -= l.dmg,
        a.view.comboView.newHit(o.toString(), 0 != h),
        canvas.app.battle.log("            [PERSATTACK]  DMG[" + d.dmg + "], PART[" + o + "/" + g + "] kick[" + n + "/" + t + "]", 170),
        e.oppHp <= 0 && (canvas.app.battle.log("            (!) opp DIE", 170),
        e.oppStatus = canvas.app.battle.Const.STATUS_DEAD,
        n = 0,
        r = canvas.app.battle.Const.KICK_STR[n],
        a.players[e.oppId] && (a.players[e.oppId].magicStandBase.visible = !1)),
        v = a.players[e.persId],
        u = a.players[e.oppId],
        a.view.players.getChildIndex(a.view.player1) < a.view.players.getChildIndex(a.view.player2) && a.view.players.swapChildren(a.view.player1, a.view.player2),
        0 != d.absorb && i.push({
            tar: "opp",
            kick: canvas.app.battle.Const.DMG_KICK_ABSORB,
            val: d.absorb
        }),
        0 != d.resist && i.push({
            tar: "opp",
            kick: canvas.app.battle.Const.DMG_KICK_RESIST,
            val: d.resist
        }),
        0 != d.dmg && i.push({
            tar: "opp",
            kick: _,
            crit: d.crit,
            val: -d.dmg,
            new_tar_HP: e.oppHp,
            my_dmg: !0
        }),
        0 != i.length || _ != canvas.app.battle.Const.DMG_KICK_DODGE && _ != canvas.app.battle.Const.DMG_KICK_BLOCK || i.push({
            tar: "opp",
            kick: _,
            crit: 0,
            val: 0
        }),
        0 != l.dmg && i.push({
            tar: "pers",
            kick: l.dmg < 0 ? canvas.app.battle.Const.DMG_KICK_CURE : canvas.app.battle.Const.DMG_KICK_WOUND,
            crit: 0,
            val: -l.dmg,
            new_tar_HP: e.persHp
        })) : (canvas.app.battle.log("            [OPPATTACK]  DMG[" + d.dmg + "], PART[" + o + "/" + g + "] kick[" + n + "/" + t + "]", 170),
        e.oppHp -= l.dmg,
        e.persHp -= d.dmg,
        e.persHp <= 0 && (canvas.app.battle.log("            (!) pers DIE", 170),
        e.persStatus = canvas.app.battle.Const.STATUS_DEAD,
        e.persDown = !0,
        n = 0,
        r = canvas.app.battle.Const.KICK_STR[n],
        a.players[e.persId] && (a.players[e.persId].magicStandBase.visible = !1)),
        v = a.players[e.oppId],
        u = a.players[e.persId],
        a.view.players.getChildIndex(a.view.player1) > a.view.players.getChildIndex(a.view.player2) && a.view.players.swapChildren(a.view.player1, a.view.player2),
        0 != d.absorb && i.push({
            tar: "pers",
            kick: canvas.app.battle.Const.DMG_KICK_ABSORB,
            val: d.absorb
        }),
        0 != d.resist && i.push({
            tar: "pers",
            kick: canvas.app.battle.Const.DMG_KICK_RESIST,
            val: d.resist
        }),
        0 != d.dmg && i.push({
            tar: "pers",
            kick: _,
            crit: d.crit,
            val: -d.dmg,
            new_tar_HP: e.oppHp
        }),
        0 != i.length || _ != canvas.app.battle.Const.DMG_KICK_DODGE && _ != canvas.app.battle.Const.DMG_KICK_BLOCK || i.push({
            tar: "pers",
            kick: _,
            crit: 0,
            val: 0
        }),
        0 != l.dmg && i.push({
            tar: "opp",
            kick: l.dmg < 0 ? canvas.app.battle.Const.DMG_KICK_CURE : canvas.app.battle.Const.DMG_KICK_WOUND,
            crit: 0,
            val: -l.dmg,
            new_tar_HP: e.persHp,
            my_dmg: !0,
            dont_inc_totDMG: !0
        })),
        v.dmgConf = i,
        0 != h && (s == e.persId && a.view.comboView.comboComplete(),
        a.view.playComboHit(),
        m = "combo_" + String(h),
        canvas.app.battle.log("            COMBO label=" + m),
        v.allLabels[m] ? (o = 0,
        g = canvas.app.battle.Const.PART_STR[o]) : (canvas.app.battle.log('            WARN: this pers have no label "' + m + '"', 10027008),
        m = null)),
        m || (m = (o = v.sk.action_array_all[g])[Math.round(c * (o.length - 1))]);
        var f, w, r = u.sk.kick_array_all[g][m][r], r = r[Math.round(p * (r.length - 1))];
        if (canvas.app.battle.log("            //action_label = " + m, 5570815),
        canvas.app.battle.log("            //sk = " + v, 5570815),
        canvas.app.battle.log("            //conf = " + v.sk.ActionConf[m], 5570815),
        canvas.app.battle.log("            //reaction_label = " + r, 5570815),
        canvas.app.battle.log("            //sk = " + u, 5570815),
        canvas.app.battle.log("            //conf = " + u.sk.ReactionConf[r], 5570815),
        canvas.app.battle.log("            attack point 1"),
        "wound" == t)
            if (u.sndConf = null,
            f = v.sk.ActionSound[m],
            canvas.app.battle.log("            curSndConf=" + f),
            canvas.app.battle.log("            curSndConf.srd=" + f.std),
            f.std) {
                switch (n) {
                case 0:
                case 3:
                    w = canvas.app.battle.Const.SND_GROUPS.wound;
                    break;
                case 2:
                    w = canvas.app.battle.Const.SND_GROUPS.crit;
                    break;
                default:
                    w = canvas.app.battle.Const.SND_GROUPS.wound,
                    canvas.app.battle.log("            WARN: 01 unknown kick = " + String(n), 16711680)
                }
                v.sndConf = {
                    std: !0,
                    snd_name: w[Math.floor(Math.random() * w.length)]
                },
                canvas.app.battle.log("            standart sound : " + v.sndConf.snd_name)
            } else
                !f.std && f.self ? (v.sndConf = {
                    std: !1,
                    snd_name: f.self
                },
                canvas.app.battle.log("            internal sound : " + f.self)) : canvas.app.battle.log("            WARN: INCORRECT ActionSound", 16711680);
        else if (v.sndConf = null,
        (f = u.sk.ActionSound[r]).std) {
            switch (n) {
            case 1:
                w = canvas.app.battle.Const.SND_GROUPS.dodge;
                break;
            case 4:
                w = canvas.app.battle.Const.SND_GROUPS.block;
                break;
            default:
                w = canvas.app.battle.Const.SND_GROUPS.block,
                canvas.app.battle.log("            WARN: 02 unknown kick = " + String(n), 16711680)
            }
            u.sndConf = {
                std: !0,
                snd_name: w[Math.floor(Math.random() * w.length)]
            },
            canvas.app.battle.log("            standart sound : " + u.sndConf.snd_name)
        } else
            !f.std && f.self ? (u.sndConf = {
                std: !1,
                snd_name: f.self
            },
            canvas.app.battle.log("            internal sound : " + f.self)) : canvas.app.battle.log("            WARN: INCORRECT ActionSound", 16711680);
        canvas.app.battle.log("            attack point 2"),
        v.inMotion = !0,
        v.gotoAndPlay(m),
        u.inMotion = !0,
        u.setReaction({
            r_label: r,
            r_delay: v.sk.ActionConf[m] - u.sk.ReactionConf[r]
        })
    } else
        canvas.app.battle.log("            ERR: delayed_attack_data is null", 16711680)
}
,
canvas.app.battle.engine.MEve.prototype.fightLog = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model;
    this.baseLnk;
    canvas.app.battle.log("mEve fightLog: paramsCount= " + t.params.length);
    var a = e.memDat[t.params[3].val]
      , s = e.memDat[t.params[4].val];
    0 == t.params[4].val && (s = {
        nick: "",
        level: 0
    }),
    a && s ? canvas.Config.isLocal || (4 == t.params[5].val && (t.params[8].val = e.getEffectLogImage(t.params[3].val == e.persId ? canvas.app.battle.Const.EFFECT_TYPE_OWNER : canvas.app.battle.Const.EFFECT_TYPE_OTHER, t.params[8].val)),
    fightUpdateLog(t.params[2].val, t.params[3].val, a.nick, a.level, t.params[4].val, s.nick, s.level, t.params[5].val, t.params[6].val, t.params[7].val, t.params[8].val, t.params[9].val)) : canvas.app.battle.log("           ERR: pers_id " + t.params[3].val + " or " + t.params[4].val + " is null in memDat (can not send fightlog)", 16711680),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.attackTimeout = function() {
    var t = canvas.app.battle.model.serverParser
      , e = (canvas.app.battle.model,
    this.baseLnk);
    canvas.app.battle.log("mEve attackTimeout: paramsCount= " + t.params.length),
    e.centerVisible(!1),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.fightOver = function(t) {
    null == t && (t = !0);
    var e = canvas.app.battle.model.serverParser
      , a = canvas.app.battle.model
      , s = this.baseLnk;
    canvas.app.battle.log("mEve fightOver: paramsCount= " + e.params.length + ", showResult=" + t),
    s.sendData("items", "Clean@"),
    t && (canvas.app.battle.log("            winTeam=" + String(e.params[2].val), 10027008),
    e.params[2].val == a.persTeam ? (s.sndPlay("fightover_victory"),
    s.view.showMainPopup(canvas.app.battle.Const.POP_ST_VISCORY)) : (s.sndPlay("fightover_defeat"),
    s.view.showMainPopup(canvas.app.battle.Const.POP_ST_DEFEAT)),
    a.fightResult = e.params[2].val),
    a.fightResult = e.params[2] ? e.params[2].val : 0,
    s.view.messagePopup.deactivate(),
    s.clearSyncTimeout(),
    s.conn.stopTransfers(),
    s.view.topTimer.deactivate(),
    s.centerVisible(!1)
}
,
canvas.app.battle.engine.MEve.prototype.srvShutdown = function() {
    var t = canvas.app.battle.model.serverParser
      , e = (canvas.app.battle.model,
    this.baseLnk);
    canvas.app.battle.log("mEve srvShutdown: paramsCount= " + t.params.length),
    e.view.showMainPopup(canvas.app.battle.Const.POP_ST_ERROR, canvas.app.battle.Const.POP_ER_SHUTDOWN)
}
,
canvas.app.battle.engine.MEve.prototype.effectApply = function(t) {
    var e = canvas.app.battle.model.serverParser
      , a = canvas.app.battle.model
      , s = this.baseLnk;
    canvas.app.battle.log("mEve effectApply: paramsCount= " + e.params.length + ", rid=" + t);
    var i = e.params.pop().val
      , n = e.params[2].val
      , o = e.params[3].val
      , r = e.params[4].val
      , c = e.params[5].val
      , p = e.params[6].val
      , h = e.params[7].val
      , t = e.params[8].val
      , e = e.params[9].val;
    if (a.testCurrentAura(o, n, r < 0) && s.updateAuras(n),
    n == a.persId || n == a.oppId) {
        var l = n == a.persId ? s.view.effectsP1 : s.view.effectsP2;
        (n == a.persId && i > a.persLastEffectsUpdateIndex || n == a.oppId && i > a.oppLastEffectsUpdateIndex) && l.deltaItem(o, c, canvas.Config.artifactsPath + p, r, h, t, e);
        var d = s.players[n];
        if (d) {
            h = h.split("/");
            if (canvas.app.battle.log("          animData = " + h.join("|")),
            2 < h.length && "null" != h[2])
                for (var v, u = a.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_ABSORB, h[2]), m = 0; m < u.length; m++)
                    v = u[m],
                    d.additionalEffects[v] ? l.haveAnimData(v) || d.removeAdditionalEffect(v) : l.haveAnimData(v) && d.showAdditionalEffect(v)
        }
    } else
        canvas.app.battle.log("          WARN: pers_id=" + String(n) + " not active");
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.updateItems = function() {
    var t, e, a, s, i = canvas.app.battle.model.serverParser, n = canvas.app.battle.model;
    this.baseLnk;
    canvas.app.battle.log("mEve updateItems: paramsCount= " + i.params.length),
    this.effectsList = "";
    for (var o = 2; o < i.params.length; o += 4)
        t = i.params[o].val,
        e = i.params[o + 1].val,
        a = i.params[o + 2].val,
        s = i.params[o + 3].val;
    canvas.app.battle.log("                 effId=" + t + " cnt=" + e + " flags=0x" + a.toString(16) + " cdLeft=" + s, 6710886);
    var r = n.testFlag(a, canvas.app.battle.Const.FS_PEF_DISABLED) ? "1" : "0";
    this.effectsList += t.toString() + n.ch1 + r + n.ch2,
    this.myEffectsListDelayCurrent = this.myEffectsListDelayBegin,
    this.sendDisEffectsList()
}
,
canvas.app.battle.engine.MEve.prototype.sendDisEffectsList = function() {
    if (this.myEffectsGetted || "" == this.effectsList || (this.myEffectsGetted = baseLnk.sendData("items", "Disabled@" + this.effectsList)),
    this.myEffectsGetted)
        return this.myEffectsGetted = !1,
        void this.paksReadyAndParse();
    this.myEffectsListDelayCurrent < this.myEffectsListDelayMax && (this.myEffectsListDelayCurrent += this.myEffectsListDelayDelta),
    this.myEffectsListIV = setTimeout(this.sendDisEffectsList.bind(this), this.myEffectsListDelayCurrent)
}
,
canvas.app.battle.engine.MEve.prototype.manaConsum = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve manaConsum: paramsCount= " + t.params.length);
    var s = t.params[2].val
      , i = -t.params[3].val
      , t = [];
    s == e.persId ? (0 != i && (e.persMp += i,
    t.push({
        tar: "pers",
        kick: canvas.app.battle.Const.DMG_KICK_MANA,
        val: i
    }),
    e.persMp < 0 && (e.persMp = 0),
    a.view.hpmp.setMpPers(e.persMp, e.persMpMax),
    a.updPersMPLvl()),
    0 < t.length && (0 < i || i < 0 && e.persStatus == canvas.app.battle.Const.STATUS_PASSIVE) && a.view.showMP(t)) : s == e.oppId ? (0 != i && (e.oppMp += i,
    t.push({
        tar: "opp",
        kick: canvas.app.battle.Const.DMG_KICK_MANA,
        val: i
    }),
    e.oppMp < 0 && (e.oppMp = 0),
    a.view.hpmp.setMpOpp(e.oppMp, e.oppMpMax)),
    0 < t.length && (0 < i || i < 0 && e.oppStatus == canvas.app.battle.Const.STATUS_PASSIVE) && a.view.showMP(t)) : canvas.app.battle.log("               WARN: pers_id=" + String(s) + " not active", 16711680),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.energyConsum = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve energyConsum: paramsCount= " + t.params.length);
    var s = t.params[2].val
      , t = -t.params[3].val;
    s == e.persId && (e.bowEnergyValue += t,
    a.view.bowPanel.setProgress(e.bowEnergyValue, e.bowEnergyMax)),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.energyRegen = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve energyRegen: paramsCount= " + t.params.length);
    var s = t.params[2].val
      , t = t.params[3].val;
    s == e.persId && (e.bowEnergyValue += t,
    a.view.bowPanel.setProgress(e.bowEnergyValue, e.bowEnergyMax)),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.arrowConsum = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve effectUse: arrowConsum= " + t.params.length);
    var s = t.params[2].val
      , t = -t.params[3].val;
    s == e.persId && a.setBowsInfo(e.arrowsCount + t, e.bowEnergyValue, e.bowEnergyMax),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.damage = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve damage: paramsCount= " + t.params.length);
    var s = t.params[2].val
      , i = t.params[3].val
      , n = t.params[4].val
      , o = t.params[5].val
      , r = t.params[6].val
      , c = t.params[7].val
      , p = t.params[8].val;
    if (-1 == e.waitingDamageCnt) {
        canvas.app.battle.log("         <b>SIMPLE DAMAGE</b>"),
        canvas.app.battle.log("         // e_persId  : " + String(s), 6710886),
        canvas.app.battle.log("         // e_dmg     : " + String(i), 6710886),
        canvas.app.battle.log("         // e_dmgType : " + String(n), 6710886),
        canvas.app.battle.log("         // e_crit    : " + String(o), 6710886),
        canvas.app.battle.log("         // e_absorb  : " + String(r), 6710886),
        canvas.app.battle.log("         // e_aid     : " + String(c), 6710886),
        canvas.app.battle.log("         // e_resist  : " + String(p), 6710886);
        var h, l = [];
        return s == e.persId ? (0 != i && (e.persHp -= i,
        l.push({
            tar: "pers",
            kick: 1 == o ? canvas.app.battle.Const.DMG_KICK_CRIT : 0 < i ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_CURE,
            val: -i,
            new_tar_HP: e.persHp,
            my_dmg: !1
        })),
        0 != r && l.push({
            tar: "pers",
            kick: canvas.app.battle.Const.DMG_KICK_ABSORB,
            val: r,
            new_tar_HP: e.persHp,
            my_dmg: !1
        }),
        0 != p && l.push({
            tar: "pers",
            kick: canvas.app.battle.Const.DMG_KICK_RESIST,
            val: p,
            new_tar_HP: e.persHp,
            my_dmg: !1
        }),
        0 < l.length && a.view.showDmg(l),
        !e.persDown && e.persHp <= 0 && (t = (t = (h = a.players[e.persId]).sk.kick_array_all.kick_mid.a_mid_1.die)[Math.floor(t.length * Math.random())],
        canvas.app.battle.log("         pers body down, label=" + t),
        e.persStatus = canvas.app.battle.Const.STATUS_DEAD,
        e.persDown = !0,
        h.gotoAndPlay(t),
        h.magicStandBase.visible = !1)) : s == e.oppId ? (0 != i && (e.oppHp -= i,
        l.push({
            tar: "opp",
            kick: 1 == o ? canvas.app.battle.Const.DMG_KICK_CRIT : 0 < i ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_CURE,
            val: -i,
            new_tar_HP: e.oppHp,
            my_dmg: c == e.persId
        })),
        0 != r && l.push({
            tar: "opp",
            kick: canvas.app.battle.Const.DMG_KICK_ABSORB,
            val: r,
            new_tar_HP: e.oppHp,
            my_dmg: c == e.persId
        }),
        0 != p && l.push({
            tar: "opp",
            kick: canvas.app.battle.Const.DMG_KICK_RESIST,
            val: p,
            new_tar_HP: e.oppHp,
            my_dmg: c == e.persId
        }),
        0 < l.length && a.view.showDmg(l)) : canvas.app.battle.log("         WARN: pers_id=" + String(s) + " not active", 16711680),
        void this.paksReadyAndParse()
    }
    0 < e.waitingDamageCnt ? (e.delayedAttackData ? e.delayedAttackData.persId == s || e.delayedAttackData.oppId == s ? e.delayedAttackData["data_" + s] = {
        dmg: i,
        dmgType: n,
        crit: o,
        absorb: r,
        resist: p
    } : canvas.app.battle.log("         ERR: not actual event, persId=" + String(s) + ", waitingIds=" + String(e.delayedAttackData.persId) + "," + String(e.delayedAttackData.oppId), 16711680) : canvas.app.battle.log("         ERR: delayed_attack_data is null", 16711680),
    e.waitingDamageCnt--,
    canvas.app.battle.log("         waiting_damage_cnt = " + String(e.waitingDamageCnt)),
    0 == e.waitingDamageCnt ? (e.waitingDamageCnt = -1,
    this.applyAttack()) : this.paksReadyAndParse()) : canvas.app.battle.log("         ERR: waiting_damage_cnt = " + String(e.waitingDamageCnt), 16711680)
}
,
canvas.app.battle.engine.MEve.prototype.death = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve death: paramsCount= " + t.params.length + ",  pers_id=" + t.params[2].val + ", myPersId=" + e.persId);
    t = t.params[2].val;
    if (t == e.persId || t == e.oppId) {
        if (a.players[t]) {
            if (canvas.app.battle.log("                 die (apply <b>dieBody</b>)"),
            t == e.oppId) {
                if (e.oppStatus == canvas.app.battle.Const.STATUS_DEAD)
                    return canvas.app.battle.log("                 opp already dead"),
                    void this.paksReadyAndParse();
                e.oppStatus = canvas.app.battle.Const.STATUS_DEAD
            }
            if (t == e.persId) {
                if (t == e.myPersId ? a.setupWatchFightBts(!0) : (a.setupWatchFightBts(!0, e.myPersId),
                a.watchFightStart(e.myPersId)),
                e.persStatus == canvas.app.battle.Const.STATUS_DEAD)
                    return canvas.app.battle.log("                 pers already dead"),
                    void this.paksReadyAndParse();
                e.persStatus = canvas.app.battle.Const.STATUS_DEAD
            }
            2 == e.waitingDamageCnt && (e.waitingDamageCnt = 1),
            t == e.oppId && (a.players[t].addFuncTurn = this.afterDeath1.bind(this)),
            t == e.persId && (a.players[t].addFuncTurn = this.afterDeath2.bind(this));
            e = a.players[t],
            a = e.sk.kick_array_all.kick_mid.a_mid_1.die,
            a = a[Math.floor(a.length * Math.random())];
            return canvas.app.battle.log("                 pers_id = " + t + " body down, label=" + a),
            e.gotoAndPlay(a),
            void (e.magicStandBase.visible = !1)
        }
        canvas.app.battle.log('                 WARN: pers for "' + String(t) + '" is null', 10027008)
    } else
        canvas.app.battle.log("                 WARN: ignore event", 10027008);
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.afterDeath1 = function(t) {
    var e = this.baseLnk;
    canvas.app.battle.log("mEve afterDeath1: pers_id=" + String(t.pers_id)),
    e.players[t.pers_id].addFuncDie = this.afterDeath2.bind(this),
    e.players[t.pers_id].dieBody()
}
,
canvas.app.battle.engine.MEve.prototype.afterDeath2 = function(t) {
    canvas.app.battle.log("mEve afterDeath2: pers_id=" + String(t.pers_id)),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.fightReturn = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve fightReturn: paramsCount= " + t.params.length),
    e.newPersId != e.persId && canvas.app.battle.log("             WARN! conf.new_pers_id!=conf.persId", 16711680),
    e.watchFight = !1,
    a.setupWatchFightBts(!1),
    a.view.comboView.visible = !0,
    a.view.showMainPopup(canvas.app.battle.Const.POP_ST_WAIT),
    e.newPersId != e.myPersId ? (canvas.EventManager.addEventListener(canvas.app.battle.Event.PERSES_HIDED, null, this.handlerPersesHided, this),
    a.persesHide()) : this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.handlerPersesHided = function() {
    canvas.app.battle.log("mEve handlerPersesHided"),
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.PERSES_HIDED, null, this.handlerPersesHided, this),
    conf.tempDead = !0,
    conf.newPersId = conf.persId = conf.myPersId,
    conf.oppId = 0,
    conf.mainStep = canvas.app.battle.Const.MAIN_STEP_INFO,
    baseLnk.mainIteration(),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.msg = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve msg: paramsCount= " + t.params.length);
    var s = t.params[2].val
      , i = t.params[3].val
      , n = t.params[4].val
      , n = decodeURI(n);
    canvas.app.battle.log("            persId=" + String(s) + " code=" + String(i) + " txt=" + n, 6710886);
    var o = n.split("()")
      , r = o[0]
      , t = o[1];
    "1" == r ? 4 == o.length ? canvas.app.battle.Const.WATCH_FIGHT || e.persStatus == canvas.app.battle.Const.STATUS_DEAD ? (i = o[2],
    n = o[3],
    a.view.messagePopup.targetPersId = s,
    a.view.showMessagePopup(1, "", canvas.Translator.getText(14) + ' "' + i + '" ' + canvas.Translator.getText(15) + ' "' + n.replace(new RegExp("__","g"), " ") + '"', void 0, void 0, void 0, void 0, void 0, t),
    t.split("[]")[1]) : canvas.app.battle.log("            WARN: can not resurrect alive", 10027008) : canvas.app.battle.log("            WARN: wrong data format (len=" + String(o.length) + ")", 10027008) : "2" == r ? 3 == o.length ? a.view.messagePopup.num == t ? ("1" == o[2] && (canvas.app.battle.log("            Apply requested ability"),
    e.abilityTemp && (a.conn.sendPak(e.abilityTemp),
    e.abilityTemp = null)),
    a.view.messagePopup.deactivate()) : canvas.app.battle.log("            TIP: data num not relavant", 10027008) : canvas.app.battle.log("            WARN: wrong data format (len=" + String(o.length) + ")", 10027008) : canvas.app.battle.log("            WARN: wrong data code [" + r + "]", 10027008),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.cdDec = function() {
    var t = canvas.app.battle.model.serverParser
      , e = (canvas.app.battle.model,
    this.baseLnk);
    canvas.app.battle.log("mEve cdDec: paramsCount= " + t.params.length + ", m_turns=" + t.params[2].val);
    t = t.params[2].val;
    e.sendData("items", "cd_dec@" + String(t)),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.socOnClose = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve socOnClose: paramsCount= " + t.params.length),
    a.view.showMainPopup(canvas.app.battle.Const.POP_ST_ERROR, canvas.app.battle.Const.POP_ER_SOC_CLOSE),
    a.players[e.persId] && (a.players[e.persId].addFuncHide = null,
    a.players[e.persId].hideBody()),
    a.players[e.oppId] && (a.players[e.oppId].addFuncHide = null,
    a.players[e.oppId].hideBody())
}
,
canvas.app.battle.engine.MEve.prototype.effectSwap = function() {
    var t = this.baseLnk
      , e = canvas.app.battle.model.serverParser;
    canvas.app.battle.log("mEve effectSwap: paramsCount= " + e.params.length),
    t.sendData("items", "swap_slots@" + e.params[2].val + "," + e.params[3].val + "," + e.params[4].val + "," + e.params[5].val),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.resetCombo = function() {
    var t = canvas.app.battle.model.serverParser
      , e = (canvas.app.battle.model,
    this.baseLnk);
    canvas.app.battle.log("mEve resetCombo: paramsCount= " + t.params.length),
    e.view.comboView.resetCombo(),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.deadCnt = function() {
    var t = canvas.app.battle.model.serverParser
      , e = (canvas.app.battle.model,
    this.baseLnk);
    canvas.app.battle.log("mEve deadCnt: paramsCount= " + t.params.length + ", team1=" + t.params[2].val + "; team2=" + t.params[3].val),
    e.sendData("mem", "dead_cnt@" + t.params[2].val + "," + t.params[3].val),
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.fightLaunch = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model;
    this.baseLnk;
    canvas.app.battle.log("mEve fightLaunch: paramsCount= " + t.params.length),
    e.fightRunning = !0,
    e.roundTime = e.roundTimeBase,
    this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.effectUse = function() {
    var t = canvas.app.battle.model.serverParser
      , e = canvas.app.battle.model
      , a = this.baseLnk;
    canvas.app.battle.log("mEve effectUse: paramsCount= " + t.params.length);
    var s = !1;
    try {
        var i, n, o, r = t.params[2].val, c = t.params[3].val, p = t.params[4].val, h = t.params[5].val;
        canvas.app.battle.log("            persId     " + String(r)),
        canvas.app.battle.log("            targetId   " + String(c)),
        canvas.app.battle.log("            animData   " + t.params[4].val),
        canvas.app.battle.log("            usageStatus " + String(h)),
        canvas.app.battle.log("            // pers_id=" + String(e.persId) + " opp_id=" + String(e.oppId));
        var l, d = p.split("/");
        1 < d.length && "null" != d[1] && (canvas.app.battle.log("            <b>sound label = " + d[1] + "</b>"),
        a.sndPlay(d[1])),
        2 < d.length && "null" != d[2] && (l = d[2]);
        var v = r == e.persId
          , u = r == e.oppId
          , m = c == e.persId
          , _ = c == e.oppId;
        if (canvas.app.battle.log("            bool_my_action  " + v, 10066329),
        canvas.app.battle.log("            bool_opp_action " + u, 10066329),
        canvas.app.battle.log("            bool_me_target  " + m, 10066329),
        canvas.app.battle.log("            bool_opp_target " + _, 10066329),
        v || m || u || _)
            if ((v || u) && (i = a.players[r]),
            (_ || m) && (n = a.players[c]),
            (v && a.view.players.getChildIndex(a.view.player1) < a.view.players.getChildIndex(a.view.player2) || u && a.view.players.getChildIndex(a.view.player1) > a.view.players.getChildIndex(a.view.player2)) && a.view.players.swapChildren(a.view.player1, a.view.player2),
            canvas.app.battle.log("            curPers   " + i),
            canvas.app.battle.log("            curTarget " + n),
            null != !i || n) {
                var g, f, w, E, b, C, p = p.split("/")[0].split(";");
                canvas.app.battle.log("            // parts=" + p.join("|"));
                var y = !1
                  , T = 0
                  , M = !0;
                if (i && p[0]) {
                    canvas.app.battle.log("            0-10-20-30 ", 16711680),
                    canvas.app.battle.log("            usageStatus=" + String(h), 16711680);
                    var S = c == e.persId ? "opp" : "pers";
                    switch (canvas.app.battle.log("            cur_tar=" + S, 10027008),
                    h) {
                    case 0:
                        break;
                    case 10:
                        canvas.app.battle.log("            case 10 showDMG,tar:" + S, 10027008),
                        e.dmgEve.push({
                            tar: S,
                            kick: canvas.app.battle.Const.DMG_KICK_IMMUNITY
                        });
                        break;
                    case 20:
                        canvas.app.battle.log("            case 20 showDMG,tar:" + S, 10027008),
                        e.dmgEve.push({
                            tar: S,
                            kick: canvas.app.battle.Const.DMG_KICK_NOCHANCE
                        });
                        break;
                    case 30:
                        canvas.app.battle.log("            case 30 showDMG,tar:" + S, 10027008),
                        e.dmgEve.push({
                            tar: S,
                            kick: canvas.app.battle.Const.DMG_KICK_FULLRES
                        })
                    }
                    g = (K = p[0].split(","))[0],
                    f = K[1],
                    w = K[2];
                    var x = r == e.persId ? canvas.app.battle.Const.PERS_POS_X.pers : canvas.app.battle.Const.PERS_POS_X.opp;
                    canvas.app.battle.log("            // persAnim      = " + g, 39168),
                    canvas.app.battle.log("            // persSpellType = " + f, 39168),
                    canvas.app.battle.log("            // persSpellIcon = " + w, 39168)
                }
                var I;
                if (n && p[1]) {
                    E = (K = p[1].split(","))[0],
                    b = K[1],
                    C = K[2];
                    var A = c == e.persId ? canvas.app.battle.Const.PERS_POS_X.pers : canvas.app.battle.Const.PERS_POS_X.opp;
                    if (canvas.app.battle.log("            // targetAnim      = " + E, 39168),
                    canvas.app.battle.log("            // targetSpellType = " + b, 39168),
                    canvas.app.battle.log("            // targetSpellIcon = " + C, 39168),
                    l) {
                        var L = r == e.persId || r == e.oppId;
                        n.showAdditionalEffects(e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_ABSORB, l));
                        for (var O, R, k, P, B, H, N = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, l), F = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_CH, l), D = 0, V = !1, U = 0; U < N.length; U++) {
                            var W, G, j = N[U];
                            canvas.app.battle.log("            // spell anim num=" + j),
                            !L && 1 <= parseInt(j) && parseInt(j) <= 6 || (G = "_SP" + j,
                            parseInt(j),
                            (O = new canvas.px.MovieClip(canvas.Config.spellsPath + G)).frameEvent = canvas.app.battle.Event.ENTER_FRAME,
                            k = R = 0,
                            V = "13" != j && "14" != j && "15" != j && "16" != j && "17" != j && "18" != j && "35" != j ? !1 : !0,
                            "4" == g && e.memGenders[r] && "M" == e.memGenders[r].genders && V && (R = 50),
                            "7" != j && "8" != j && "9" != j && "10" != j && "11" != j && "12" != j || (k = 45),
                            canvas.app.battle.log("            spell_delta_x = " + R, 16711680),
                            O ? (M = !1,
                            a.sndPlay("_SP" + j),
                            W = "",
                            m && (e.persAnimFlag = !0,
                            W = "pers",
                            canvas.app.battle.log("            pers_anim_flag = true, because bool_my_action")),
                            _ && (e.oppAnimFlag = !0,
                            W = "opp",
                            canvas.app.battle.log("            opp_anim_flag = true, because bool_opp_action")),
                            "901" != j && "902" != j || (k = 120,
                            D = 340,
                            m ? (a.players[e.persId] && (D -= .6 * a.players[e.persId].baseHeight),
                            B = new canvas.px.Point("901" == j ? 292 : 222,"901" == j ? 160 : 0),
                            H = new canvas.px.Point(102,D),
                            a.view.spells.addChild(new canvas.app.battle.view.AddArrow(B,H,"901" == j ? .5 : 1,-1,"901" == j ? 0 : 45))) : (a.players[e.oppId] && (D -= .6 * a.players[e.oppId].baseHeight),
                            B = new canvas.px.Point("901" == j ? 152 : 222,"901" == j ? 160 : 0),
                            H = new canvas.px.Point(342,D),
                            a.view.spells.addChild(new canvas.app.battle.view.AddArrow(B,H,"901" == j ? .5 : 1,1,"901" == j ? 0 : 45))),
                            canvas.app.battle.log("            arrow fromPoint = " + B + "; toPoint = " + H)),
                            P = v || (!u || !V) && (V ? m : _),
                            a.view.spells.addChild(new canvas.app.battle.view.AddSpell(a,222 + (P ? R + k : -R - k),0 == D ? e.memDat[r] && 1 != e.memDat[r].gender ? 203 : 183 : D,P,O,!1,W,j,1 == F.length && "1" == F[0]))) : canvas.app.battle.log('            ERR: no spell "' + G + '" in spell pack', 16711680))
                        }
                        var K = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPW, l);
                        1 == K.length && "1" == K[0] && (y = !0,
                        1 == (K = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPD, l)).length && (T = Math.max(0, parseInt(K[0]))))
                    }
                }
                var z, q, Y = -1 < g.indexOf("effect_");
                if (!Y) {
                    Y = !0;
                    var X = g;
                    switch (g) {
                    case "16":
                        g = "effect_frog#5";
                        break;
                    case "17":
                        g = "effect_starlet#5";
                        break;
                    case "18":
                        g = "effect_saw#5";
                        break;
                    case "19":
                        g = "effect_orb_old#5";
                        break;
                    case "20":
                        g = "effect_deadGod#4";
                        break;
                    case "21":
                        g = "effect_fertilityGod#4";
                        break;
                    case "22":
                        g = "effect_orb#4";
                        break;
                    case "23":
                        g = "effect_dragonGod#4";
                        break;
                    case "33":
                        g = "effect_idolWater#4";
                        break;
                    case "34":
                        g = "effect_idolAir#5";
                        break;
                    case "35":
                        g = "effect_bottle#5";
                        break;
                    case "36":
                        g = "effect_idolZarlog#4";
                        break;
                    case "37":
                        g = "effect_idolMaurin#4";
                        break;
                    default:
                        Y = !1
                    }
                    Y && canvas.app.battle.log("            Old effect " + X + " matched to " + g, 13209)
                }
                if (Y) {
                    var X = g.split("#")
                      , Q = X[0]
                      , Z = X[1]
                      , J = "spell_1";
                    if ("effect_orb" == Q) {
                        if (I = "spell_1",
                        i.allLabels[I]) {
                            if (s = !0,
                            y ? null != n && (n.inMotion = !0,
                            n.addWoundEffect({
                                delay: T
                            })) : i.addFuncTurn = a.handlerEffectAfterSpell.bind(a),
                            i.addFuncTurn = a.handlerEffectAfterSpell.bind(a),
                            i.gotoAndPlay(I),
                            (v || u) && l) {
                                v && a.players[e.persId] && (a.players[e.persId].magicStandBase.visible = !1),
                                u && a.players[e.oppId] && (a.players[e.oppId].magicStandBase.visible = !1),
                                canvas.app.battle.log("            spell base in anim 4", 16711680),
                                canvas.app.battle.log("            Gender = " + String(e.memGenders[r].genders), 16711680);
                                for (var $, tt, et, at, st = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, l), it = 0; it < st.length; it++)
                                    st[it] < canvas.app.battle.Const.FIST_NONSCHOOL_EXTRA && ($ = 0 == parseInt(st[it] % 6) ? String(6) : String(parseInt(st[it] % 6)),
                                    tt = "M" == e.memGenders[r].genders ? 50 : 0,
                                    et = "spell" + $ + "base",
                                    (at = new canvas.px.MovieClip(canvas.Config.spellsPath + et)).frameEvent = canvas.app.battle.Event.ENTER_FRAME,
                                    at ? (M && a.sndPlay("_SP" + $),
                                    a.view.bgSpells.addChild(new canvas.app.battle.view.AddSpell(a,v ? 85 + tt : 370 - tt,330,v,at))) : canvas.app.battle.log('            ERR: no spell "' + et + '" in spell pack', 16711680))
                            }
                        } else
                            canvas.app.battle.log("            WARN: no `" + I + "` label in skel", 16711680);
                        i.addBgEffect({
                            delay: 10,
                            type: Q
                        })
                    } else
                        switch (Z) {
                        case "4":
                            J = "spell_1",
                            y ? (n.addWoundEffect({
                                delay: T
                            }),
                            a.view.addEffect(Q, _ ? 7 : 438, 5, _ ? 1 : -1)) : (a.view.addEffect(Q, _ ? 438 : 7, 5, _ ? -1 : 1),
                            canvas.app.battle.log("            Without wound")),
                            i.allLabels[J] ? (s = !0,
                            i.gotoAndPlay(J)) : canvas.app.battle.log("            WARN: no `" + J + "` label in character skeleton", 16711680);
                            break;
                        case "5":
                            J = "spell_2",
                            i.allLabels[J] ? (s = !0,
                            i.gotoAndPlay(J),
                            i.addEffect({
                                delay: 10,
                                type: Q
                            }),
                            n.addWoundEffect({
                                delay: T
                            })) : canvas.app.battle.log("            WARN: no `" + J + "` label in character skeleton", 16711680);
                            break;
                        default:
                            canvas.app.battle.log("            ERROR: invalid character animation number received (" + Z + "), only 4 and 5 are valid", 16711680)
                        }
                } else
                    switch (g) {
                    case null:
                    case "0":
                        if (y && n && (n.inMotion = !0,
                        n.addWoundEffect({
                            delay: T
                        })),
                        (v || u) && l) {
                            v && a.players[e.persId] && (a.players[e.persId].magicStandBase.visible = !1),
                            u && a.players[e.oppId] && (a.players[e.oppId].magicStandBase.visible = !1),
                            canvas.app.battle.log("            spell base in anim 0", 16711680);
                            for (var nt, ot, rt, ct = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, l), pt = 0; pt < ct.length; pt++)
                                ct[pt] < canvas.app.battle.Const.FIST_NONSCHOOL_EXTRA && (ot = "spell" + (nt = 0 == parseInt(ct[pt] % 6) ? String(6) : String(parseInt(ct[pt] % 6))) + "base",
                                (rt = new canvas.px.MovieClip(canvas.Config.spellsPath + ot)).frameEvent = canvas.app.battle.Event.ENTER_FRAME,
                                rt ? (M && a.sndPlay("_SP" + nt),
                                a.view.bgSpells.addChild(new canvas.app.battle.view.AddSpell(a,v ? 85 : 370,330,v,rt))) : canvas.app.battle.log('            ERR: no spell "' + ot + '" in spell pack', 16711680))
                        }
                        break;
                    case "1":
                        i.allLabels.drink ? (s = !0,
                        a.sndPlay("drink"),
                        i.addFuncTurn = a.handlerEffectAfterDrink.bind(a),
                        i.gotoAndPlay("drink")) : canvas.app.battle.log("            WARN: no `drink` label in skel", 16711680);
                        break;
                    case "2":
                        a.sndPlay("charge_energy"),
                        i.addHandEffect("Eff_CHARGE");
                        break;
                    case "3":
                        a.sndPlay("charge_vampir"),
                        i.addHandEffect("Eff_VAMPIRISM");
                        break;
                    case "4":
                    case "5":
                    case "24":
                    case "25":
                    case "26":
                    case "27":
                    case "28":
                    case "29":
                    case "30":
                        switch (g) {
                        case "4":
                            I = "spell_1";
                            break;
                        case "5":
                            I = "spell_2";
                            break;
                        case "24":
                            I = "a_bow_1";
                            break;
                        case "25":
                            I = "a_bow_2";
                            break;
                        case "26":
                            I = "dodge_1";
                            break;
                        case "27":
                            I = "combo_1";
                            break;
                        case "28":
                            I = "combo_2";
                            break;
                        case "29":
                            I = "combo_3";
                            break;
                        case "30":
                            I = "combo_4"
                        }
                        if (i.allLabels[I]) {
                            if (s = !0,
                            y ? n && (n.inMotion = !0,
                            n.addWoundEffect({
                                delay: T
                            })) : i.addFuncTurn = a.handlerEffectAfterSpell.bind(a),
                            n && (n.sndConf = null),
                            i.inMotion = !0,
                            i.gotoAndPlay(I),
                            (v || u) && l) {
                                v && a.players[e.persId] && (a.players[e.persId].magicStandBase.visible = !1),
                                u && a.players[e.oppId] && (a.players[e.oppId].magicStandBase.visible = !1),
                                canvas.app.battle.log("            spell base in anim 5", 16711680);
                                for (var ht, lt, dt, vt = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, l), ut = 0; ut < vt.length; ut++)
                                    vt[ut] < canvas.app.battle.Const.FIST_NONSCHOOL_EXTRA && (lt = "spell" + (ht = 0 == parseInt(vt[ut] % 6) ? String(6) : String(parseInt(vt[ut] % 6))) + "base",
                                    (dt = new canvas.px.MovieClip(canvas.Config.spellsPath + lt)).frameEvent = canvas.app.battle.Event.ENTER_FRAME,
                                    dt ? (M && a.sndPlay("_SP" + ht),
                                    a.view.bgSpells.addChild(new canvas.app.battle.view.AddSpell(a,v ? 85 : 370,330,v,dt))) : canvas.app.battle.log('            ERR: no spell "' + lt + '" in spell pack', 16711680))
                            }
                        } else
                            canvas.app.battle.log("            WARN: no `" + I + "` label in skel", 16711680);
                        break;
                    case "8":
                        a.sndPlay("charge_energy"),
                        i.addHandEffect("Eff_CHARGE_2");
                        break;
                    case "9":
                    case "10":
                    case "11":
                        if ("9" == g && (I = "a_bot_1"),
                        "10" == g && (I = "a_mid_1"),
                        "11" == g && (I = "a_up_1"),
                        i.allLabels[I]) {
                            if (s = !0,
                            y ? n && (n.inMotion = !0,
                            n.addWoundEffect({
                                delay: T
                            })) : i.addFuncTurn = a.handlerEffectAfterSpell.bind(a),
                            n && (n.sndConf = null),
                            z = i.sk.ActionSound[I],
                            z.std ? (q = canvas.app.battle.Const.SND_GROUPS.wound,
                            i.sndConf = {
                                std: !0,
                                snd_name: q[Math.floor(Math.random() * q.length)]
                            },
                            canvas.app.battle.log("            standart sound : " + i.sndConf.snd_name)) : !z.std && z.self ? (i.sndConf = {
                                std: !1,
                                snd_name: z.self
                            },
                            canvas.app.battle.log("            internal sound : " + z.self)) : canvas.app.battle.log("            WARN: INCORRECT ActionSound", 16711680),
                            i.inMotion = !0,
                            i.gotoAndPlay(I),
                            (v || u) && l) {
                                v && a.players[e.persId] && (a.players[e.persId].magicStandBase.visible = !1),
                                u && a.players[e.oppId] && (a.players[e.oppId].magicStandBase.visible = !1),
                                canvas.app.battle.log("            spell base in anim " + g, 16711680);
                                for (var mt, _t, gt, ft = e.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_SPELL, l), wt = 0; wt < ft.length; wt++)
                                    ft[wt] < canvas.app.battle.Const.FIST_NONSCHOOL_EXTRA && (_t = "spell" + (mt = 0 == parseInt(ft[wt] % 6) ? String(6) : String(parseInt(ft[wt] % 6))) + "base",
                                    (gt = canvas.px.MovieClip(canvas.Config.spellsPath + _t)) ? (M && a.sndPlay("_SP" + mt),
                                    a.view.bgSpells.addChild(new canvas.app.battle.view.AddSpell(a,v ? 85 : 370,330,v,gt))) : canvas.app.battle.log('            ERR: no spell "' + _t + '" in spell pack', 16711680))
                            }
                        } else
                            canvas.app.battle.log("            WARN: no `" + I + "` label in skel", 16711680);
                        break;
                    case "12":
                        y && n && (n.inMotion = !0,
                        n.addWoundEffect({
                            delay: T
                        }));
                        break;
                    case "13":
                    case "14":
                    case "15":
                    case "31":
                    case "32":
                        "13" == g && (I = "baf_1"),
                        "14" == g && (I = "baf_2"),
                        "15" == g && (I = "baf_3"),
                        "31" == g && (I = "dodge"),
                        "32" == g && (I = "block"),
                        i.allLabels[I] ? (s = !0,
                        y ? n && (n.inMotion = !0,
                        n.addWoundEffect({
                            delay: T
                        })) : (e.animationLock = !0,
                        i.addFuncTurn = a.handlerEffectAfterSpell.bind(a)),
                        i.inMotion = !0,
                        i.gotoAndPlay(I)) : canvas.app.battle.log("            WARN: no `" + I + "` label in skel", 16711680);
                        break;
                    case "100":
                    case "101":
                        var Et, bt = i.pet;
                        "100" == g ? Et = 1 : "101" == g && (Et = 2),
                        bt && (s = !1,
                        y && n && (n.inMotion = !0,
                        n.addWoundEffect({
                            delay: T
                        })),
                        bt.playBaff(Et));
                        break;
                    default:
                        canvas.app.battle.log("            ERR: unknown persAnim = " + g, 16711680)
                    }
                if (f && (o = canvas.app.battle.Const.SPELLS_AR.OUT[f],
                canvas.app.battle.log("            SpellId OUT =" + o, 16711680),
                o ? a.view.addSpellAnim(x, o) : canvas.app.battle.log("            WARN: SpellId is null for persSpellType " + f, 16711680),
                "0" != (o = canvas.app.battle.Const.SPELLS_AR.ICO[w]) && (o ? a.view.addSpellAnim(x, o) : canvas.app.battle.log("            WARN: SpellId is null for persSpellIcon " + w, 16711680))),
                c == e.oppId || c == e.persId) {
                    switch (E) {
                    case "0":
                    case null:
                        break;
                    case "7":
                        y || n.addWoundEffect({
                            delay: 10
                        });
                        break;
                    default:
                        canvas.app.battle.log("            ERR: unknown targetAnim = " + E, 16711680)
                    }
                    b && (o = canvas.app.battle.Const.SPELLS_AR.IN[b],
                    canvas.app.battle.log("            SpellId IN =" + o, 16711680),
                    o ? a.view.addSpellAnim(A, o) : canvas.app.battle.log("            WARN: SpellId is null for targetSpellType " + b, 16711680),
                    "0" != (o = canvas.app.battle.Const.SPELLS_AR.ICO[C]) && (o ? a.view.addSpellAnim(A, o) : canvas.app.battle.log("            WARN: SpellId is null for targetSpellIcon " + C, 16711680)))
                }
            } else
                canvas.app.battle.log("            <b>WARN: pers & target clips == null</b>", 16711680)
    } catch (t) {
        canvas.app.battle.log("MEve effectuse Error: " + t, 16711680)
    }
    s || this.paksReadyAndParse()
}
,
canvas.app.battle.engine.MEve.prototype.paksReadyAndParse = function() {
    canvas.app.battle.model.paksReady = !0,
    canvas.app.battle.model.parser.paksParse()
}
,
canvas.app.battle.view.SoundView = function() {
    canvas.px.Container.call(this),
    this.back = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_sound_bg")),
    this.addChild(this.back),
    this.back.interactive = !0,
    this.back.buttonMode = !0,
    this.back.hitArea = new canvas.px.Rectangle(0,0,20,20),
    this.back.mouseup = this.handlerClick.bind(this),
    this.soundOff = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_sound_off")),
    this.soundOff.position.set(2, 1),
    this.addChild(this.soundOff),
    this.progress = new canvas.ui.Progress(canvas.ResourceLoader.getImage("ui", "battle_sound_fill"),[0, 0, 0, 0]),
    this.progress.position.set(22, 6),
    this.progress.setSize(48, 7),
    this.addChild(this.progress),
    this.progress.selectable = !0,
    canvas.EventManager.addEventListener(canvas.ui.ProgressEvent.EVENT_PROGRESS, this.progress, this.handlerProgress, this)
}
,
canvas.app.battle.view.SoundView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.SoundView.prototype.init = function(t, e) {
    this.soundOff.visible = t,
    this.progress.progress = e
}
,
canvas.app.battle.view.SoundView.prototype.handlerClick = function(t) {
    this.soundOff.visible = !this.soundOff.visible,
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SOUND_MUTE_CHANGE, null, this.soundOff.visible)
}
,
canvas.app.battle.view.SoundView.prototype.handlerProgress = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SOUND_VOLUME_CHANGE, null, this.progress.progress)
}
,
canvas.app.battle.view.CenterView = function() {
    this._mode,
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            this._mode = t,
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.CENTER_CHANGE_MODE, null, t)
        }
    }),
    canvas.px.Container.call(this),
    this.controls = new canvas.px.Container,
    this.addChild(this.controls),
    this.cDot = new canvas.app.battle.view.CenterDotView(this),
    this.addChild(this.cDot),
    this.cDot.setIcon(canvas.app.battle.Const.MODE_ATTACK),
    this.cAttack = new canvas.app.battle.view.CenterAttackView(this),
    this.cAttack.activate(),
    this.hotkeyShowersCont = new canvas.px.Container,
    this.addChild(this.hotkeyShowersCont),
    this.hotkeyShowersCont.position.set(-Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2), -Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2)),
    this.hotkeyShowersCont.visible = !1,
    this.cSpells = new canvas.app.battle.view.CenterSpellsView(this,this.hotkeyShowersCont),
    this.mode = canvas.app.battle.Const.MODE_ATTACK,
    this.skipButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_btn_skip_turn")),
    this.addChild(this.skipButton),
    this.skipButton.visible = !1,
    this.skipButton.position.set(-Math.round(.5 * this.skipButton.width), -140),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.skipButton,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.Translator.getText(65)))
    }),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.skipButton, this.handlerSkipButtonClick)
}
,
canvas.app.battle.view.CenterView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.CenterView.prototype.handlerSkipButtonClick = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SKIP_TURN)
}
,
canvas.app.battle.view.CenterView.prototype.activeBlock = function(t) {
    canvas.app.battle.log("cCenter:active_block " + t),
    this.cAttack.activeBlock(t)
}
,
canvas.app.battle.view.CenterView.prototype.applyMask = function(t) {
    this.cAttack.applyMask(t)
}
,
canvas.app.battle.view.CenterView.prototype.changeControlMode = function(t) {
    switch (void 0 === t && (t = !1),
    this.mode) {
    case canvas.app.battle.Const.MODE_ATTACK:
        this.mode = canvas.app.battle.Const.MODE_SPELLS,
        this.activeBlock(!1),
        t || canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 1, canvas.app.battle.Const.TO_FS_PF_MAGIC]),
        this.cAttack.deactivate();
        break;
    case canvas.app.battle.Const.MODE_SPELLS:
        this.mode = canvas.app.battle.Const.MODE_ATTACK,
        t || (canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 0, canvas.app.battle.Const.TO_FS_PF_MAGIC]),
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 0, canvas.app.battle.Const.TO_FS_PF_DEFENDED])),
        this.cSpells.deactivate(),
        this.hotkeyShowersCont.visible = !1;
        break;
    default:
        canvas.app.battle.log('ERR: unknown mode "' + this.mode + '"', 16711680)
    }
    this.cDot.setIcon(this.mode, t)
}
,
canvas.app.battle.view.CenterView.prototype.controlDeactivated = function() {
    switch (this.mode) {
    case canvas.app.battle.Const.MODE_ATTACK:
        this.cAttack.activate();
        break;
    case canvas.app.battle.Const.MODE_SPELLS:
        this.cSpells.activate(),
        this.hotkeyShowersCont.visible = !0;
        break;
    default:
        canvas.app.battle.log('ERR: unknown mode "' + this.mode + '"', 16711680)
    }
}
,
canvas.app.battle.view.CenterView.prototype.addControl = function(t) {
    t.parent != this.controls ? this.controls.addChild(t) : canvas.app.battle.log('WARN: "' + t + '" already contains in controls', 10027008)
}
,
canvas.app.battle.view.CenterView.prototype.removeControl = function(t) {
    t.parent == this.controls ? this.controls.removeChild(t) : canvas.app.battle.log('WARN: "' + t + '" not contains in controls', 10027008)
}
,
canvas.app.battle.view.CenterView.prototype.buildSpells = function(t) {
    canvas.app.battle.log("cCenter:build_spells ** "),
    this.cDot.check(),
    this.cSpells.buildSpells()
}
,
canvas.app.battle.view.CenterView.prototype.turnOnKeyCallbacks = function() {
    this.cDot.turnOnKeyCallbacks()
}
,
canvas.app.battle.view.CenterView.prototype.turnOffKeyCallbacks = function() {
    this.cDot.turnOffKeyCallbacks()
}
,
canvas.app.battle.view.CenterView.prototype.useEffect = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_USE_EFFECT, t]);
    t = canvas.app.battle.model;
    null != t.memDat[t.oppId] && (t = t.memDat[t.oppId].persFlags,
    this.coolDownStart(t))
}
,
canvas.app.battle.view.CenterView.prototype.useSlotConfirmed = function(t) {
    this.cSpells.useSlotConfirmed(t)
}
,
canvas.app.battle.view.CenterView.prototype.setDefCooldown = function() {
    this.cSpells.setDefCooldown()
}
,
canvas.app.battle.view.CenterView.prototype.spellsUnlockOnError = function(t) {
    this.cSpells.spellsUnlockOnError(t),
    this.cAttack.auraControl.spellsUnlockOnError(t)
}
,
canvas.app.battle.view.CenterView.prototype.coolDownStart = function(t) {
    canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_STUNNED) && this.cAttack.coolDownStart()
}
,
canvas.app.battle.view.CenterView.prototype.checkSpells = function(t) {
    this.cSpells.checkSpells(t)
}
,
canvas.app.battle.view.CenterView.prototype.addSpellCoolDown = function(t, e) {
    void 0 === e && (e = !1),
    this.cSpells.addSpellCoolDown(t, e)
}
,
canvas.app.battle.view.CenterView.prototype.turnBowPanel = function(t) {}
,
canvas.app.battle.view.CenterView.prototype.setVisible = function(t) {
    this.visible = t,
    this.visible ? this.updateSkipButton() : this.cDot.externalMouseOut()
}
,
canvas.app.battle.view.CenterView.prototype.updateSkipButton = function() {
    var t, e = canvas.app.battle.model;
    !this.cAttack.isCooldown && e.isPvp && e.memDat[e.oppId] && 0 == e.fightResult ? (t = e.memDat[e.oppId].persFlags,
    this.skipButton.visible = !e.testFlag(t, canvas.app.battle.Const.FS_PF_NO_OPP_AUTO)) : this.skipButton.visible = !1
}
,
canvas.app.battle.view.CenterView.prototype.attackFunc = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.ATTACK, null, t)
}
,
canvas.app.battle.view.CenterView.prototype.blockSwitch = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.BLOCK_SWITCH)
}
,
canvas.app.battle.view.CenterDotView = function(t) {
    canvas.px.Container.call(this),
    this.rt = t,
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot")),
    this.bg.position.set(-Math.round(this.bg.width / 2), -Math.round(this.bg.height / 2)),
    this.bgTop = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot_top")),
    this.bgTop.position.set(-Math.round(this.bgTop.width / 2), -Math.round(this.bgTop.height / 2)),
    this.icon = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.bt = new canvas.px.Graphics,
    this.bt.beginFill(0, 0),
    this.bt.drawCircle(0, 0, 34),
    this.bt.endFill(),
    this.bt.interactive = !0,
    this.bt.buttonMode = !0,
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.bt,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.app.battle.model.getHintTextWithHotkey("", canvas.Translator.getText(64))))
    }),
    this.dotClickTime = 0,
    this.light = new canvas.px.Graphics,
    this.light.beginFill(16777215, .3),
    this.light.drawCircle(0, 0, 25),
    this.light.endFill(),
    this.light.blendMode = canvas.px.BlendMode.OVERLAY,
    this.addChild(this.bg),
    this.addChild(this.icon),
    this.addChild(this.bt),
    this.rad = Math.round(this.bg.width / 2 - 6),
    this.msk = new canvas.px.Graphics,
    this.msk.beginFill(0, 1),
    this.msk.drawCircle(0, 0, this.rad - 1),
    this.msk.endFill(),
    this.har = [[this.rad, -this.rad], [this.rad, this.rad], [-this.rad, this.rad], [-this.rad, -this.rad], [0, -this.rad]],
    this.shp = new canvas.px.Graphics,
    this.shp.mask = this.msk,
    this.addChild(this.shp),
    this.addChild(this.msk),
    this.addChild(this.bgTop)
}
,
canvas.app.battle.view.CenterDotView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.CenterDotView.prototype.check = function() {
    var t;
    canvas.app.battle.log("CenterDot: check, hasSpells=" + canvas.app.battle.model.hasSpells),
    canvas.app.battle.model.hasSpells ? this.btActivated || (this.btActivated = !0,
    this.bt.interactive = !0,
    this.btIsOn = !0,
    this.bt.mouseover = this.handlerBtnOver.bind(this),
    this.bt.mouseout = this.handlerBtnOut.bind(this),
    this.bt.mouseup = this.handlerBtnClick.bind(this)) : (this.btActivated && (this.btActivated = !1,
    this.bt.interactive = !1,
    this.bt.mouseover = null,
    this.bt.mouseout = null,
    this.bt.mouseup = null),
    canvas.app.battle.view.CenterView.filter1 ? this.icon.filters = [canvas.app.battle.view.CenterView.filter1] : ((t = new canvas.px.ColorMatrixFilter).matrix = [.3086000084877014, .6093999743461609, .0820000022649765, 0, 0, .3086000084877014, .6093999743461609, .0820000022649765, 0, 0, .3086000084877014, .6093999743461609, .0820000022649765, 0, 0, 0, 0, 0, 1, 0],
    canvas.app.battle.view.CenterView.filter1 = t,
    this.icon.filters = [t]))
}
,
canvas.app.battle.view.CenterDotView.prototype.checkDot = function() {
    return Date.now() >= this.dotClickTime + canvas.app.battle.Const.CENTER_DOT_TIME_CD && 0 != canvas.app.battle.model.oppId
}
,
canvas.app.battle.view.CenterDotView.prototype.switchDot = function(t) {
    canvas.app.battle.log("CenterDot: switch, fl=" + t),
    canvas.app.battle.model.hasSpells && (t ? this.btIsOn || (this.btIsOn = !0,
    this.bt.interactive = !0,
    this.bt.mouseover = this.handlerBtnOver.bind(this),
    this.bt.mouseout = this.handlerBtnOut.bind(this),
    this.bt.mouseup = this.handlerBtnClick.bind(this)) : this.btIsOn && !this.checkDot() && (this.btIsOn = !1,
    this.bt.interactive = !1,
    this.bt.mouseover = null,
    this.bt.mouseout = null,
    this.bt.mouseup = null))
}
,
canvas.app.battle.view.CenterDotView.prototype.handlerBtnOver = function() {
    this.light.parent != this && this.addChild(this.light)
}
,
canvas.app.battle.view.CenterDotView.prototype.handlerBtnOut = function() {
    this.light.parent == this && this.removeChild(this.light)
}
,
canvas.app.battle.view.CenterDotView.prototype.handlerBtnClick = function() {
    this.handlerBtnOut();
    var t = Date.now();
    t - this.dotClickTime < canvas.app.battle.Const.CENTER_DOT_TIME_CD || (this.dotClickTime = t,
    this.rt.changeControlMode(),
    this.switchDot(!1),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this))
}
,
canvas.app.battle.view.CenterDotView.prototype.externalMouseOut = function() {
    this.handlerBtnOut()
}
,
canvas.app.battle.view.CenterDotView.prototype.handlerFrame = function() {
    var t = Date.now();
    if (t < this.dotClickTime + canvas.app.battle.Const.CENTER_DOT_TIME_CD) {
        var e = (t - this.dotClickTime) / canvas.app.battle.Const.CENTER_DOT_TIME_CD * 100;
        this.shp.clear(),
        this.shp.beginFill(0, .4),
        this.shp.moveTo(0, 0);
        var a = 3.6 / 57.2958 * e - 1.57
          , t = this.rad * Math.cos(a)
          , a = this.rad * Math.sin(a);
        this.shp.lineTo(t, a);
        for (var s = Math.round(e % 100 / 25); s < this.har.length; )
            this.shp.lineTo(this.har[s][0], this.har[s][1]),
            s++;
        this.shp.endFill()
    } else
        this.switchDot(!0),
        this.shp.clear(),
        canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this)
}
,
canvas.app.battle.view.CenterDotView.prototype.setIcon = function(t, e) {
    switch (t) {
    case canvas.app.battle.Const.MODE_ATTACK:
    case canvas.app.battle.Const.MODE_SPELLS:
        this.icon.texture = canvas.ResourceLoader.getImage("ui", "battle_center_icon_" + (t == canvas.app.battle.Const.MODE_ATTACK ? "1" : e ? "3" : "2")),
        this.icon.x = -Math.round(this.icon.width / 2),
        this.icon.y = -Math.round(this.icon.height / 2);
        break;
    default:
        canvas.app.battle.log('WARN: unknown mode "' + t + '"', 10027008)
    }
}
,
canvas.app.battle.view.CenterDotView.prototype.turnOnKeyCallbacks = function() {
    this.initKeyCallbacks(!0)
}
,
canvas.app.battle.view.CenterDotView.prototype.turnOffKeyCallbacks = function() {
    this.initKeyCallbacks(!1)
}
,
canvas.app.battle.view.CenterDotView.prototype.initKeyCallbacks = function(t) {
    t && canvas.app.battle.model.hasSpells ? canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this) : canvas.EventManager.removeEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this)
}
,
canvas.app.battle.view.CenterDotView.prototype.handlerKey = function(t) {
    if(t.params.globalKeyCode) {
        t.params.globalKeyCode == canvas.Const.TAB && canvas.app.battle.model.centerVisible && canvas.app.battle.model.hasSpells && this.handlerBtnClick()
    }
}
,
canvas.app.battle.view.CenterClsView = function() {
    canvas.px.Container.call(this),
    this.showVals = [.47, .67, 1],
    this.hideVals = [.67, .47, .4]
}
,
canvas.app.battle.view.CenterClsView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.CenterClsView.prototype.activate = function() {
    this.rt.addControl(this),
    this.scale.set(.4, .4),
    this.frameIndex = 0,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerShow, this)
}
,
canvas.app.battle.view.CenterClsView.prototype.deactivate = function() {
    this.scale.set(1, 1),
    this.frameIndex = 0,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerHide, this)
}
,
canvas.app.battle.view.CenterClsView.prototype.handlerShow = function() {
    this.scale.set(this.showVals[this.frameIndex]),
    this.frameIndex < this.showVals.length - 1 ? this.frameIndex++ : canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerShow, this)
}
,
canvas.app.battle.view.CenterClsView.prototype.handlerHide = function() {
    this.scale.set(this.hideVals[this.frameIndex], this.hideVals[this.frameIndex]),
    this.frameIndex < this.showVals.length - 1 ? this.frameIndex++ : (canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerHide, this),
    this.rt.removeControl(this),
    this.rt.controlDeactivated())
}
,
canvas.app.battle.view.CenterAttackView = function(t) {
    canvas.app.battle.view.CenterClsView.call(this),
    this.isCooldown = !1,
    this.rt = t,
    this.rad1 = 42,
    this.rad2 = 70,
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center")),
    this.bgGrey = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_grey")),
    this.bg.x = this.bgGrey.x = -Math.round(this.bg.width / 2),
    this.bg.y = this.bgGrey.y = -Math.round(this.bg.height / 2),
    this.bgMask = new canvas.px.Graphics,
    this.setBgMask(this.rad2),
    this.bg.mask = this.bgMask,
    this.bladeUp = new canvas.app.battle.view.CenterBladeView(this.rt,9,-41,-55),
    this.bladeMid = new canvas.app.battle.view.CenterBladeView(this.rt,39,-11,0),
    this.bladeBot = new canvas.app.battle.view.CenterBladeView(this.rt,31,28,55),
    this.sectorUp = new canvas.app.battle.view.CenterSectorView(0,0,-60,canvas.app.battle.Const.TOP_ATTACK_ID,this.bladeUp,this.rt.attackFunc,canvas.Translator.getText(33),canvas.Translator.getText(60)),
    this.sectorMid = new canvas.app.battle.view.CenterSectorView(0,0,0,canvas.app.battle.Const.MIDDLE_ATTACK_ID,this.bladeMid,this.rt.attackFunc,canvas.Translator.getText(34),canvas.Translator.getText(61)),
    this.sectorBot = new canvas.app.battle.view.CenterSectorView(0,0,60,canvas.app.battle.Const.BOTTOM_ATTACK_ID,this.bladeBot,this.rt.attackFunc,canvas.Translator.getText(35),canvas.Translator.getText(62)),
    this.blockOn = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_center_block1")),
    this.blockOn.position.set(-62, -22),
    this.blockOn.visible = !1,
    this.blockOff = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_center_block2")),
    this.blockOff.position.set(-62, -22),
    this.blockBtn = new canvas.px.Graphics,
    this.blockBtn.position.set(-62, -22),
    this.blockBtn.beginFill(0, 0),
    this.blockBtn.drawRect(0, 0, 18, 44),
    this.blockBtn.endFill(),
    this.blockBtn.interactive = !0,
    this.blockBtn.buttonMode = !0,
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.blockBtn,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.app.battle.model.getHintTextWithHotkey(canvas.Translator.getText(36), canvas.Translator.getText(63))))
    }),
    this.blockBtn.click = this.handlerBlockClick.bind(this),
    this.addChild(this.bgGrey),
    this.addChild(this.bg),
    this.addChild(this.bgMask),
    this.addChild(this.bladeUp),
    this.addChild(this.bladeMid),
    this.addChild(this.bladeBot),
    this.addChild(this.sectorUp),
    this.addChild(this.sectorMid),
    this.addChild(this.sectorBot),
    this.addChild(this.blockOn),
    this.addChild(this.blockOff),
    this.addChild(this.blockBtn),
    this.auraControl = new canvas.app.battle.view.AuraControlView(this.rt),
    this.addChild(this.auraControl),
    this.auraControl.visible = !1
}
,
canvas.app.battle.view.CenterAttackView.prototype = Object.create(canvas.app.battle.view.CenterClsView.prototype),
canvas.app.battle.view.CenterAttackView.prototype.handlerBlockClick = function() {
    this.rt.blockSwitch()
}
,
canvas.app.battle.view.CenterAttackView.prototype.activeBlock = function(t) {
    this.blockOn.visible = t,
    this.blockOff.visible = !t
}
,
canvas.app.battle.view.CenterAttackView.prototype.applyMask = function(t) {
    var e = 1 == (1 & t)
      , a = (2 & t) >> 1 == 1
      , t = (4 & t) >> 2 == 1;
    this.sectorUp.visible = e,
    this.bladeUp.visible = e,
    this.sectorMid.visible = a,
    this.bladeMid.visible = a,
    this.sectorBot.visible = t,
    this.bladeBot.visible = t
}
,
canvas.app.battle.view.CenterAttackView.prototype.setBgMask = function(t) {
    this.bgMask.clear(),
    this.bgMask.beginFill(255, 1),
    this.bgMask.drawCircle(0, 0, t),
    this.bgMask.endFill()
}
,
canvas.app.battle.view.CenterAttackView.prototype.coolDownStart = function() {
    this.sTime = 2050 - (Date.now() - canvas.app.battle.model.attackTime),
    this.vTime = Date.now(),
    this.setBgMask(this.rad1),
    0 < this.sTime ? (this.mInterval = setInterval(this.refreshBgMask.bind(this), 100),
    this.setBgMask(this.rad2),
    this.sectorUp.visible = this.bladeUp.visible = !1,
    this.sectorMid.visible = this.bladeMid.visible = !1,
    this.sectorBot.visible = this.bladeBot.visible = !1,
    this.rt.cDot.switchDot(!1),
    this.setCooldown(!0),
    this.rt.turnBowPanel(!1)) : this.setCooldown(!1)
}
,
canvas.app.battle.view.CenterAttackView.prototype.setCooldown = function(t) {
    this.isCooldown = t,
    this.rt.updateSkipButton()
}
,
canvas.app.battle.view.CenterAttackView.prototype.refreshBgMask = function() {
    var t;
    2050 < Date.now() - canvas.app.battle.model.attackTime ? (this.setBgMask(this.rad2),
    this.sectorUp.visible = this.bladeUp.visible = !0,
    this.sectorMid.visible = this.bladeMid.visible = !0,
    this.sectorBot.visible = this.bladeBot.visible = !0,
    this.applyMask(canvas.app.battle.model.oppMask),
    this.rt.mode == canvas.app.battle.Const.MODE_ATTACK && this.rt.cDot.switchDot(!0),
    this.mInterval && (clearInterval(this.mInterval),
    this.setCooldown(!1)),
    this.rt.turnBowPanel(!0)) : (t = this.rad1 + (this.rad2 - this.rad1) * (Date.now() - this.vTime) / this.sTime,
    this.setBgMask(t))
}
,
canvas.app.battle.view.CenterBladeView = function(t, e, a, s) {
    canvas.px.Container.call(this),
    this.mv = [0, 2.7, 4.8, 6.3, 7.2, 7.5, 7.2, 6.3, 4.8, 2.7],
    this.mvLen = 10,
    this.rt = t,
    this.position.set(e, a),
    this.rotation = canvas.Functions.degToRad(s),
    this.bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_blade")),
    this.addChild(this.bmp)
}
,
canvas.app.battle.view.CenterBladeView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.CenterBladeView.prototype.handlerFrame = function() {
    this.mvIndex++,
    this.mvIndex == this.mvLen && (this.mvIndex = 0),
    this.bmp.x = this.mv[this.mvIndex]
}
,
canvas.app.battle.view.CenterBladeView.prototype.over = function() {
    this.mvIndex = 0,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this)
}
,
canvas.app.battle.view.CenterBladeView.prototype.out = function() {
    this.bmp.x = 0,
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this)
}
,
canvas.app.battle.view.CenterSectorView = function(t, e, a, s, i, n, o, r) {
    canvas.px.Graphics.call(this),
    this.position.set(t, e),
    this.rotation = canvas.Functions.degToRad(a),
    this.r1 = 28,
    this.r2 = 76,
    this.ang = Math.PI / 3,
    this.shape = new canvas.px.Graphics,
    this.shape.interactive = !0,
    this.addChild(this.shape),
    this.drawSector(),
    this.bladeId = s,
    this.bladeLnk = i,
    this.attackFunc = n,
    this.interactive = !0,
    this.buttonMode = !0,
    this.mouseover = this.handlerOver.bind(this),
    this.mouseup = this.handlerClick.bind(this),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.shape,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.app.battle.model.getHintTextWithHotkey(o, r)))
    })
}
,
canvas.app.battle.view.CenterSectorView.prototype = Object.create(canvas.px.Graphics.prototype),
canvas.app.battle.view.CenterSectorView.prototype.drawSector = function() {
    this.shape.moveTo(this.r1 * Math.sin(this.ang), this.r1 * Math.cos(this.ang)),
    this.shape.beginFill(0, 0),
    this.shape.lineTo(this.r2 * Math.sin(this.ang), this.r2 * Math.cos(this.ang)),
    this.shape.lineTo(this.r2 * Math.sin(3 * this.ang / 2), this.r2 * Math.cos(3 * this.ang / 2)),
    this.shape.lineTo(this.r2 * Math.sin(2 * this.ang), this.r2 * Math.cos(2 * this.ang)),
    this.shape.lineTo(this.r1 * Math.sin(2 * this.ang), this.r1 * Math.cos(2 * this.ang)),
    this.shape.lineTo(this.r1 * Math.sin(3 * this.ang / 2), this.r1 * Math.cos(3 * this.ang / 2)),
    this.endFill()
}
,
canvas.app.battle.view.CenterSectorView.prototype.handlerOver = function() {
    this.bladeLnk.over(),
    this.mouseout = this.handlerOut.bind(this)
}
,
canvas.app.battle.view.CenterSectorView.prototype.handlerOut = function() {
    this.bladeLnk.out(),
    this.mouseout = null
}
,
canvas.app.battle.view.CenterSectorView.prototype.handlerClick = function() {
    this.attackFunc && this.attackFunc(this.bladeId)
}
,
canvas.app.battle.view.CenterSpellsView = function(t, e) {
    canvas.app.battle.view.CenterClsView.call(this),
    this.rt = t,
    this.hotkeyShowersCont = e,
    this.hotkeysPoints = [new canvas.px.Point(69,38), new canvas.px.Point(91,45), new canvas.px.Point(104,62), new canvas.px.Point(104,84), new canvas.px.Point(90,101), new canvas.px.Point(69,109), new canvas.px.Point(48,102), new canvas.px.Point(35,85), new canvas.px.Point(34,62), new canvas.px.Point(47,45)],
    this.slotsPos = [[-18, -78], [17, -67], [38, -36], [39, 0], [17, 29], [-18, 41], [-53, 29], [-75, 0], [-75, -36], [-53, -66]],
    this.spellsCont = new canvas.px.Container,
    this.tgBmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_spells")),
    this.tgBmp.position.set(-Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2), -Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2)),
    this.addChild(this.spellsCont),
    this.addChild(this.tgBmp),
    this.slots = {}
}
,
canvas.app.battle.view.CenterSpellsView.prototype = Object.create(canvas.app.battle.view.CenterClsView.prototype),
canvas.app.battle.view.CenterSpellsView.prototype.buildSpells = function() {
    var t, e, a;
    for (t in canvas.Functions.destroyChildren(this.spellsCont),
    this.removeAllSpellHotkeyShowers(),
    canvas.Functions.destroyChildren(this.tgBmp),
    canvas.app.battle.model.spells)
        e = canvas.app.battle.model.spells[t],
        (a = this.slotsPos[parseInt(t) - 1]) ? (this.slots[t] && (this.slots[t].remove(),
        delete this.slots[t]),
        this.slots[t] = new canvas.app.battle.view.CenterSpellItemRenderer(this,t,a,e)) : canvas.app.battle.log("ERR: positions for slotId=" + t + " is null", 16711680);
    for (var s, i = 0; i < canvas.app.battle.Const.CENTER_SPELL_ITEMS_COUNT; i++)
        this.slots[i + 1] || (a = this.slotsPos[i],
        s = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_spell_empty")),
        this.tgBmp.addChild(s),
        s.position.set(a[0] + Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2) - 1, a[1] + Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2) - 1));
    this.createSpellHotkeyShowers()
}
,
canvas.app.battle.view.CenterSpellsView.prototype.useSpellItem = function(t) {
    canvas.app.battle.model.spells[t] ? this.locked ? canvas.app.battle.log("TIP: spells blocked, witing answer for use spell", 153) : (this.locked = !0,
    this.rt.useEffect(canvas.app.battle.model.spells[t].effId)) : canvas.app.battle.log("ERR: spell for this slot is null", 16711680)
}
,
canvas.app.battle.view.CenterSpellsView.prototype.useSlotConfirmed = function(t) {
    var e, a = canvas.app.battle.model.spells[t], s = Date.now(), i = 1e3 * canvas.app.battle.model.spells[t].cdTime + s;
    for (e in this.slots)
        canvas.app.battle.model.spells[e].cdGripId == a.cdGripId ? this.slots[e].cooldownStart(s, i) : this.slots[e].cooldownStart(s, s + canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN);
    this.unlock()
}
,
canvas.app.battle.view.CenterSpellsView.prototype.setDefCooldown = function() {
    var t, e = Date.now(), a = e + canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN;
    for (t in this.slots)
        this.slots[t].cooldownStart(e, a)
}
,
canvas.app.battle.view.CenterSpellsView.prototype.spellsUnlockOnError = function(t) {
    for (var e in canvas.app.battle.log("CenterSpellsView: spellsUnlockOnError " + t),
    canvas.app.battle.model.spells)
        if (canvas.app.battle.model.spells[e].effId == t) {
            canvas.app.battle.log("spells unlocked on error"),
            this.unlock();
            break
        }
}
,
canvas.app.battle.view.CenterSpellsView.prototype.restoreCooldowns = function() {
    for (var t in this.slots)
        this.slots[t].restoreCooldown()
}
,
canvas.app.battle.view.CenterSpellsView.prototype.switchDot = function(t) {
    this.rt.cDot.switchDot(t)
}
,
canvas.app.battle.view.CenterSpellsView.prototype.checkSpells = function(t) {
    for (var e in this.slots)
        this.slots[e].checkSpells(t)
}
,
canvas.app.battle.view.CenterSpellsView.prototype.addSpellCoolDown = function(t, e) {
    for (var a in void 0 === e && (e = !1),
    this.slots)
        this.slots[a].addSpellCoolDown(t, !0, e)
}
,
canvas.app.battle.view.CenterSpellsView.prototype.unlock = function() {
    this.locked = !1
}
,
canvas.app.battle.view.CenterSpellsView.prototype.createSpellHotkeyShowers = function() {
    for (var t, e, a = 0; a < canvas.app.battle.Const.CENTER_SPELL_ITEMS_COUNT; a++)
        t = "",
        (e = this.slots[a + 1]) && (t = e.getHotkeyText()),
        e = this.hotkeysPoints[a],
        t = new canvas.app.battle.view.CenterSpellHotkeyRenderer(t),
        this.hotkeyShowersCont.addChild(t),
        t.x = e.x,
        t.y = e.y
}
,
canvas.app.battle.view.CenterSpellsView.prototype.removeSpellHotkeyShower = function(t) {
    for (var e = this.hotkeyShowersCont.children.length, a = 0; a < e; a++)
        if (this.hotkeyShowersCont.getChildAt(a) == t) {
            this.hotkeyShowersCont.removeChildAt(a);
            break
        }
}
,
canvas.app.battle.view.CenterSpellsView.prototype.removeAllSpellHotkeyShowers = function() {
    canvas.Functions.destroyChildren(this.hotkeyShowersCont)
}
,
canvas.app.battle.view.CenterSpellHotkeyRenderer = function(t) {
    canvas.px.Container.call(this),
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot")),
    this.bg.width = 16,
    this.bg.height = 16,
    this.addChild(this.bg),
    this.textTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16509576,this.bg.width,this.bg.height,"center"),
    this.addChild(this.textTF),
    this.textTF.position.set(0, 2),
    this.textTF.text = t
}
,
canvas.app.battle.view.CenterSpellHotkeyRenderer.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.CenterSpellItemRenderer = function(t, e, a, s) {
    canvas.px.Container.call(this),
    this.spellsHotkeys = ["Q", "W", "E", "R", "T", "A", "S", "D", "F", "G"],
    this.spellsHotkeyCodes = [canvas.Const.KEYS.Q, canvas.Const.KEYS.W, canvas.Const.KEYS.E, canvas.Const.KEYS.R, canvas.Const.KEYS.T, canvas.Const.KEYS.A, canvas.Const.KEYS.S, canvas.Const.KEYS.D, canvas.Const.KEYS.F, canvas.Const.KEYS.G],
    this.rt = t,
    this.slotId = e,
    this.obj = s,
    this.position.set(a[0] - 1, a[1] - 1);
    this.bmpMsk = new canvas.px.Graphics,
    this.bmpMsk.beginFill(0, 0),
    this.bmpMsk.drawCircle(19, 19, 19),
    this.bmpMsk.endFill(),
    this.bmp = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.bmp.mask = this.bmpMsk,
    this.bmp.scale.set(38 / 60, 38 / 60),
    this.light = new canvas.px.Graphics,
    this.light.beginFill(16777215, .3),
    this.light.drawCircle(19, 19, 19),
    this.light.endFill(),
    this.light.visible = !1,
    this.light.blendMode = canvas.px.BlendMode.OVERLAY,
    this.btn = new canvas.px.Graphics,
    this.btn.beginFill(0, 0),
    this.btn.drawCircle(19, 19, 19),
    this.btn.endFill(),
    this.btn.buttonMode = !0,
    this.btn.interactive = !0,
    this.btn.mouseover = this.handlerOver.bind(this),
    this.btn.click = this.handlerClick.bind(this),
    this.cooldown = new canvas.app.battle.view.CenterSpellItemCdRenderer(this),
    this.addChild(this.bmp),
    this.addChild(this.bmpMsk),
    this.addChild(this.light),
    this.addChild(this.btn),
    this.rt.spellsCont.addChild(this),
    this.addChild(this.cooldown),
    0 < s.cdTime && 0 < s.cdLeft && (a = Date.now(),
    this.cooldown.activate(a - (s.cdTime - s.cdLeft), 1e3 * s.cdLeft + a)),
    this.initKeyCallbacks(),
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerLoaded, this),
    canvas.ResourceLoader.add([canvas.Config.artifactsPath + this.obj.picture]),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.app.battle.model.getHintTextWithHotkey(this.obj.title + "\n" + canvas.Translator.getText(49) + " " + this.obj.mp, this.getHotkeyText())))
    }),
    this.interactive = !0
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerLoaded = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerLoaded, this),
    this.bmp.texture = canvas.ResourceLoader.getTexture(canvas.Config.artifactsPath + this.obj.picture)
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerClick = function() {
    this.cooldown.active() || (this.rt.useSpellItem(this.slotId),
    this.cooldown.showTxt())
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerOver = function() {
    this.btn.mouseout = this.handlerOut.bind(this),
    this.light.visible = !0,
    this.cooldown.active() && this.cooldown.showTxt()
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerOut = function() {
    this.light.visible = !1,
    this.btn.mouseout = null,
    this.cooldown.active() && this.cooldown.hideTxt()
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype.cooldownStart = function(t, e) {
    this.cooldown.parent != this && this.addChild(this.cooldown),
    this.cooldown.activate(t, e)
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype.restoreCooldown = function() {
    this.cooldown.restore()
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype.cooldownCancel = function() {
    this.cooldown.parent == this && this.removeChild(this.cooldown),
    0 != canvas.app.battle.model.oppId && this.rt.switchDot(!0)
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype.remove = function() {
    this.parent == this.rt.spellsCont ? this.rt.spellsCont.removeChild(this) : canvas.app.battle.log("ERR: this slot is not contains", 16711680),
    this.rt = null
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype.checkSpells = function(t) {
    this.cooldown.forStep() && (this.cooldown.cooldownDone(),
    canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_STUNNED) && this.addSpellCoolDown(3050))
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype.addSpellCoolDown = function(t, e, a) {
    void 0 === e && (e = !1),
    void 0 === a && (a = !1);
    var s = Date.now();
    e ? (e = canvas.app.battle.model.abilsFlags[canvas.app.battle.model.spells[this.slotId].effId],
    a && canvas.app.battle.model.testFlag(e, canvas.app.battle.Const.FS_PEF_PASSTURN) && (t = 12e5),
    this.cooldownStart(s, s + t)) : s - canvas.app.battle.model.attackTime < t && this.cooldownStart(s, canvas.app.battle.model.attackTime + t)
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype.initKeyCallbacks = function() {
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this)
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype.handlerKey = function(t) {
    canvas.app.battle.model.centerMode != canvas.app.battle.Const.MODE_ATTACK && t.params.globalKeyCode == this.getHotkeyCode() && this.handlerClick()
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype.getHotkeyCode = function() {
    return this.spellsHotkeyCodes[this.slotId - 1]
}
,
canvas.app.battle.view.CenterSpellItemRenderer.prototype.getHotkeyText = function() {
    return this.spellsHotkeys[this.slotId - 1]
}
,
canvas.app.battle.view.CenterSpellItemCdRenderer = function(t) {
    canvas.px.Container.call(this),
    this.rt = t,
    this.realFT = -1,
    this.realST = -1,
    this.forStepFl = !1,
    this.rad = 19;
    t = this.rad;
    this.har = [[t, -t], [t, t], [-t, t], [-t, -t], [0, -t]],
    this.shp = new canvas.px.Graphics,
    this.shp.position.set(t, t),
    this.msk = new canvas.px.Graphics,
    this.msk.position.set(t, t),
    this.msk.beginFill(0, 1),
    this.msk.drawCircle(0, 0, t - 1),
    this.msk.endFill(),
    this.tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE,16777215,24,16,"center"),
    this.tf.position.set(t - 12, t - 8),
    this.shp.mask = this.msk,
    this.addChild(this.shp),
    this.addChild(this.msk)
}
,
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.restore = function() {
    0 < this.realFT && this.activate(0, 0)
}
,
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.activate = function(t, e) {
    12e5 <= e - t ? (this.realFT = this.ftime,
    this.realST = this.stime) : 0 < this.realFT && (t = this.realST,
    e = this.realFT,
    this.realFT = -1,
    this.activated = !1),
    this.activated ? this.ftime - t < e - t && (this.stime = t,
    this.ftime = e) : (this.forStepFl = e - t == canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN || 1e6 < e - t,
    this.activated = !0,
    this.stime = t,
    this.ftime = e,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this))
}
,
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.handlerFrame = function() {
    try {
        var t, e = Date.now();
        if (this.har && e < this.ftime) {
            1e6 < this.ftime - this.stime ? (t = 100,
            this.ftime = e + 12e5,
            this.tf.text = "") : (this.tf.text = Math.round((this.ftime - e) / 1e3),
            t = (e - this.stime) / (this.ftime - this.stime) * 100),
            this.shp.clear(),
            this.shp.beginFill(0, .6),
            this.shp.moveTo(0, 0);
            var a = t * (3.6 / 57.2958) - 1.57
              , e = this.rad * Math.cos(a)
              , a = this.rad * Math.sin(a);
            this.shp.lineTo(e, a);
            for (var s = Math.round(t % 100 / 25); s < this.har.length; )
                this.shp.lineTo(this.har[s][0], this.har[s][1]),
                s++;
            this.shp.endFill()
        } else
            this.cooldownDone()
    } catch (t) {}
}
,
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.cooldownDone = function() {
    this.activated = this.forStepFl = !1,
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this),
    this.hideTxt(),
    this.rt.cooldownCancel()
}
,
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.showTxt = function() {
    this.tf.parent != this && this.addChild(this.tf)
}
,
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.hideTxt = function() {
    this.tf.parent == this && this.removeChild(this.tf)
}
,
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.active = function() {
    return this.activated
}
,
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.setActive = function(t) {
    this.activated = t
}
,
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.forStep = function() {
    return this.forStepFl
}
,
canvas.app.battle.view.CenterSpellItemCdRenderer.prototype.setForStep = function(t) {
    this.forStepFl = t
}
,
canvas.app.battle.view.AuraControlView = function(t) {
    canvas.px.Container.call(this),
    this.items = [];
    for (var e = [[-33, -68], [-55, -55], [-55, 23], [-33, 37]], a = 0; a < 4; a++) {
        var s = new canvas.app.battle.view.AuraItemView(canvas.app.battle.model.auras[a],t);
        this.addChild(s),
        this.items.push(s),
        s.position.set(e[a][0], e[a][1])
    }
    canvas.EventManager.addEventListener(canvas.app.battle.Event.START_AURA_COOLDOWN, null, this.cooldownHandler, this)
}
,
canvas.app.battle.view.AuraControlView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.AuraControlView.prototype.update = function() {
    for (var t = 0; t < 4; t++) {
        var e = canvas.app.battle.model.auras[t];
        this.items[t].data = e,
        this.items[t].selected = e && e.id == canvas.app.battle.model.currentAura
    }
}
,
canvas.app.battle.view.AuraControlView.prototype.useAura = function(t) {
    t = this.items[t];
    this.interactiveChildren && t && t.action()
}
,
canvas.app.battle.view.AuraControlView.prototype.spellsUnlockOnError = function(t) {
    for (var e = 0; e < 4; e++) {
        var a = canvas.app.battle.model.auras[e];
        if (a && parseInt(a.id) == t)
            return void this.timerComplete()
    }
}
,
canvas.app.battle.view.AuraControlView.prototype.cooldownHandler = function() {
    this.interactiveChildren = !1,
    this.timer && clearTimeout(this.timer),
    this.timer = setTimeout(this.timerComplete.bind(this), 3e3)
}
,
canvas.app.battle.view.AuraControlView.prototype.timerComplete = function() {
    this.interactiveChildren = !0
}
,
canvas.app.battle.view.AuraItemView = function(t, e) {
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            var e;
            t ? (this.locked = !1,
            "" == t.image || null != this._data && this._data.image == t.image || (canvas.Functions.destroyChildren(this.imageContainer),
            e = new canvas.ui.Image(t.image),
            this.imageContainer.addChild(e),
            this.hint.text = t.title,
            e.scale.set(.5, .5)),
            (e = canvas.app.battle.model.memDat[canvas.app.battle.model.persId]) && canvas.app.battle.model.testFlag(e.persFlags, canvas.app.battle.Const.FS_PF_NO_AURAS) && (this.locked = !0)) : this.locked = !0,
            this._data = t
        }
    }),
    this._locked = !1,
    Object.defineProperty(this, "locked", {
        get: function() {
            return this._locked
        },
        set: function(t) {
            this._locked = t,
            this.locker.visible = this._locked,
            this.buttonMode = !this._locked,
            this._locked && (this.selected = !1)
        }
    }),
    this._selected = null,
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            this._selected = t,
            this.selector.visible = this._selected
        }
    }),
    canvas.px.Container.call(this),
    this.rt = e,
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_aura_circle"))),
    this.imageContainer = new canvas.px.Container,
    this.imageContainer.interactive = !0,
    this.addChild(this.imageContainer),
    this.hint = new canvas.app.view.PxHint("title"),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.imageContainer,
        params: new canvas.utils.HintParams(this.hint)
    });
    e = new canvas.px.Graphics;
    e.beginFill(16711935, 1),
    e.drawCircle(0, 0, 10),
    e.endFill(),
    this.addChild(e),
    e.position.set(15, 15),
    this.imageContainer.mask = e,
    this.selector = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_aura_selector")),
    this.addChild(this.selector),
    this.locker = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_aura_lock")),
    this.addChild(this.locker),
    this.locker.position.set(8, 7),
    this.light = new canvas.px.Graphics,
    this.light.beginFill(16777215, .3),
    this.light.drawCircle(15, 15, 15),
    this.light.endFill(),
    this.light.visible = !1,
    this.light.blendMode = canvas.px.BlendMode.OVERLAY,
    this.addChild(this.light),
    this.buttonMode = !0,
    this.interactive = !0,
    this.locked = !1,
    this.selected = !1,
    this.data = t,
    this.hitArea = new canvas.px.Circle(15,15,12),
    this.mouseover = this.overHandler,
    this.mouseout = this.outHandler,
    this.mouseup = this.clickHandler
}
,
canvas.app.battle.view.AuraItemView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.AuraItemView.prototype.clickHandler = function() {
    this.action()
}
,
canvas.app.battle.view.AuraItemView.prototype.outHandler = function() {
    this.light.visible = !1
}
,
canvas.app.battle.view.AuraItemView.prototype.overHandler = function() {
    this.data && (this.light.visible = !0)
}
,
canvas.app.battle.view.AuraItemView.prototype.action = function() {
    this.data && (this.data.id == canvas.app.battle.model.currentAura ? canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_UNSET_AURA, parseInt(this.data.id)]) : canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_USE_EFFECT, parseInt(this.data.id)]),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.START_AURA_COOLDOWN, this))
}
,
canvas.app.battle.view.PersEffects = function(t, e, a, s) {
    canvas.px.Container.call(this),
    this.position.set(t, e),
    this.baseLnk = s,
    this.effList = [],
    this.items = {},
    a ? (this.deltaX = 28,
    this.startX = 0) : (this.deltaX = -28,
    this.startX = -28)
}
,
canvas.app.battle.view.PersEffects.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.PersEffects.prototype.initEffects = function(t) {
    this.clearItems(),
    this.effList = t,
    this.updateItems(!0)
}
,
canvas.app.battle.view.PersEffects.prototype.clearItems = function() {
    this.effList = [],
    this.removeChildren()
}
,
canvas.app.battle.view.PersEffects.prototype.updateItems = function(t) {
    if (null == t && (t = !1),
    t) {
        for (var e in this.items)
            null != this.items[e] && this.items[e].destroy();
        this.items = {}
    }
    for (var a, s, i = !1, n = 0; n < this.effList.length; n++)
        (a = this.effList[n]).lnk || (a.lnk = new canvas.app.battle.view.PersEffectItem(a,this.baseLnk),
        this.addChild(a.lnk),
        i = !0),
        s = a.lnk,
        a.cnt <= 0 ? (this.removeChild(s),
        this.effList.splice(n, 1),
        s.destroy(),
        i = !(this.items[a.pic] = null)) : (s.setCount(a.cnt),
        this.items[a.pic] = s);
    i && this.repositItems()
}
,
canvas.app.battle.view.PersEffects.prototype.repositItems = function() {
    for (var t = 0, e = this.startX, a = 0, s = 0; s < this.children.length; s++)
        this.getChildAt(s).position.set(e, a),
        ++t <= 4 ? e += this.deltaX : (t = 0,
        e = this.startX,
        a += 18)
}
,
canvas.app.battle.view.PersEffects.prototype.deltaItem = function(t, e, a, s, i, n, o) {
    for (var r, c = !1, p = 0; p < this.effList.length; p++) {
        var h = this.effList[p];
        if (h.pic == a) {
            c = !0,
            h.cnt += s,
            h.animData = i,
            h.eetimeMax = Math.max(n, h.eetimeMax);
            break
        }
    }
    !c && 0 < s && ((r = {}).id = t,
    r.title = e,
    r.pic = a,
    r.cnt = s,
    r.lnk = null,
    r.animData = i,
    r.eetimeMax = n,
    r.turnsLeft = o,
    this.effList.push(r)),
    this.updateItems()
}
,
canvas.app.battle.view.PersEffects.prototype.haveAnimData = function(t) {
    for (var e = 0; e < this.effList.length; e++) {
        var a = this.effList[e].animData.split("/");
        if (2 < a.length && a[2])
            for (var s = canvas.app.battle.model.parser.parseAdditionalEffectsData(canvas.app.battle.Const.AEFF_ABSORB, a[2]), i = 0; i < s.length; i++)
                if (s[i] == t)
                    return !0
    }
    return !1
}
,
canvas.app.battle.view.PersEffectItem = function(t, e) {
    canvas.px.Container.call(this),
    this.baseLnk = e,
    this.data = t,
    this.tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE,16777215,19,19,"right"),
    this.tf.position.set(-4, 1),
    this.bmp = new canvas.ui.Image(this.data.pic),
    this.bmp.position.set(16, 4),
    this.bmp.scale.set(.25, .25),
    this.bmp.interactive = !0,
    this.hint = new canvas.app.view.PxHint(""),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: this.bmp,
        params: new canvas.utils.HintParams(this.hint)
    }),
    this.updateHintText(),
    this.interactive = !0,
    this.buttonMode = !0,
    this.click = this.clickHandler,
    this.mouseout = this.outHandler,
    this.mouseover = this.overHandler,
    this.addChild(this.tf),
    this.addChild(this.bmp)
}
,
canvas.app.battle.view.PersEffectItem.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.PersEffectItem.prototype.setCount = function(t) {
    this.tf.text = Math.max(0, t)
}
,
canvas.app.battle.view.PersEffectItem.prototype.clickHandler = function() {
    showArtifactInfo(!1, this.data.id)
}
,
canvas.app.battle.view.PersEffectItem.prototype.outHandler = function() {
    this.timer && clearInterval(this.timer)
}
,
canvas.app.battle.view.PersEffectItem.prototype.overHandler = function() {
    this.updateHintText()
}
,
canvas.app.battle.view.PersEffectItem.prototype.timerHandler = function() {
    this.updateHintText()
}
,
canvas.app.battle.view.PersEffectItem.prototype.updateHintText = function() {
    var t = this.data
      , e = !1
      , a = t.title
      , s = Math.floor(t.eetimeMax - Date.now() / 1e3 - (canvas.app.battle.model.serverTimestamp - canvas.app.battle.model.clientTimestamp))
      , i = Math.max(0, 1 + s).toString()
      , n = ""
      , o = "";
    if (s < 3600) {
        switch (e = !0,
        canvas.Config.lng) {
        case "ru":
        case "turk":
        case "de":
        case "cn":
            1 == t.turnsLeft ? a += "\n" + canvas.Translator.getText(44) + " " : a += "\n" + canvas.Translator.getText(43) + " ",
            n += i + " " + canvas.Translator.getText(2003);
            break;
        case "en":
            a += "\n ",
            o += canvas.Translator.getText(43),
            n += i + " " + canvas.Translator.getText(2003);
            break;
        default:
            a += "\n" + i
        }
        this.timer && clearInterval(this.timer),
        this.timer = setInterval(this.timerHandler.bind(this), 1e3)
    }
    e || (1 == t.turnsLeft ? a += "\n" + canvas.Translator.getText(44) + " " : a += "\n" + canvas.Translator.getText(43) + " "),
    0 < t.turnsLeft && t.turnsLeft < 3600 && (s = 0,
    10 <= (s = t.turnsLeft) && (s %= 10),
    1 == s && (a += e ? t.turnsLeft + this.getRightPhraseForTurns(t.turnsLeft) + o + canvas.Translator.getText(53) + " " : t.turnsLeft + this.getRightPhraseForTurns(t.turnsLeft)),
    (1 < s || 0 == s) && (a += e ? t.turnsLeft + this.getRightPhraseForTurns(t.turnsLeft) + o + canvas.Translator.getText(53) + " " : t.turnsLeft + this.getRightPhraseForTurns(t.turnsLeft))),
    !e && (t.turnsLeft <= 0 || 3600 <= t.turnsLeft) ? a = t.title : a += n,
    this.hint.text = a
}
,
canvas.app.battle.view.PersEffectItem.prototype.getRightPhraseForTurns = function(t) {
    return this.isPhraseManyTurns(t) ? " " + canvas.Translator.getText(52) : this.isPhraseTurn(t) ? " " + canvas.Translator.getText(50) : this.isPhraseOneTurn(t) ? " " + canvas.Translator.getText(51) : "--:--"
}
,
canvas.app.battle.view.PersEffectItem.prototype.isPhraseManyTurns = function(t) {
    var e = t % 100;
    return 11 <= e && e <= 20 || (5 <= (e = t % 10) && e <= 9 || 0 == e)
}
,
canvas.app.battle.view.PersEffectItem.prototype.isPhraseTurn = function(t) {
    t %= 10;
    return 2 <= t && t <= 4
}
,
canvas.app.battle.view.PersEffectItem.prototype.isPhraseOneTurn = function(t) {
    return 1 == t % 10
}
,
canvas.app.battle.view.PersEffectItem.prototype.destroy = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_REMOVE, null, {
        target: this.bmp
    }),
    this.baseLnk = null,
    this.data = null,
    this.tf = null,
    this.bmp = null,
    this.timer && (clearInterval(this.timer),
    this.timer = null),
    this.hint = null,
    this.mouseup = null,
    this.mouseout = null,
    this.mouseover = null,
    canvas.ui.Component.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.battle.view.HpMpView = function() {
    canvas.px.Container.call(this),
    this.hpPersFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_hp_fill")),
    this.hpPers = new canvas.px.Graphics,
    this.hpPers.beginFill(0, 1),
    this.hpPers.lineStyle(0, 0, 0),
    this.hpPers.drawRect(0, 0, this.hpPersFill.width, this.hpPersFill.height),
    this.hpPers.endFill(),
    this.addChild(this.hpPersFill),
    this.addChild(this.hpPers),
    this.hpPersFill.mask = this.hpPers,
    this.hpPersFill.position.set(42, 38),
    this.hpPers.position.set(42, 38),
    this.hpOppFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_hp_fill")),
    this.hpOpp = new canvas.px.Graphics,
    this.hpOpp.beginFill(0, 1),
    this.hpOpp.lineStyle(0, 0, 0),
    this.hpOpp.drawRect(0, 0, this.hpOppFill.width, this.hpOppFill.height),
    this.hpOpp.endFill(),
    this.addChild(this.hpOppFill),
    this.addChild(this.hpOpp),
    this.hpOppFill.mask = this.hpOpp,
    this.hpOppFill.scale.x = -1,
    this.hpOppFill.position.set(403, 38),
    this.hpOpp.position.set(403, 38),
    this.mpPersFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_mp_fill")),
    this.mpPers = new canvas.px.Graphics,
    this.mpPers.beginFill(0, 1),
    this.mpPers.lineStyle(0, 0, 0),
    this.mpPers.drawRect(0, 0, this.mpPersFill.width, this.mpPersFill.height),
    this.mpPers.endFill(),
    this.addChild(this.mpPersFill),
    this.addChild(this.mpPers),
    this.mpPersFill.mask = this.mpPers,
    this.mpPersFill.position.set(42, 52),
    this.mpPers.position.set(42, 52),
    this.mpOppFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_mp_fill")),
    this.mpOpp = new canvas.px.Graphics,
    this.mpOpp.beginFill(0, 1),
    this.mpOpp.lineStyle(0, 0, 0),
    this.mpOpp.drawRect(0, 0, this.mpOppFill.width, this.mpOppFill.height),
    this.mpOpp.endFill(),
    this.addChild(this.mpOppFill),
    this.addChild(this.mpOpp),
    this.mpOppFill.mask = this.mpOpp,
    this.mpOppFill.position.set(275, 52),
    this.mpOpp.position.set(403, 52),
    this.hpPersText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center"),
    this.hpPersText.position.set(42, 38),
    this.addChild(this.hpPersText),
    this.mpPersText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center"),
    this.mpPersText.position.set(42, 52),
    this.addChild(this.mpPersText),
    this.hpOppText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center"),
    this.hpOppText.position.set(275, 38),
    this.addChild(this.hpOppText),
    this.mpOppText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center"),
    this.mpOppText.position.set(275, 52),
    this.addChild(this.mpOppText),
    this.setHpPers(0, 0),
    this.setMpPers(0, 0),
    this.setHpOpp(0, 0),
    this.setMpOpp(0, 0)
}
,
canvas.app.battle.view.HpMpView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.HpMpView.prototype.setHpPers = function(t, e) {
    this.setValue(this.hpPersText, this.hpPers, t, e, 1)
}
,
canvas.app.battle.view.HpMpView.prototype.setMpPers = function(t, e) {
    this.setValue(this.mpPersText, this.mpPers, t, e, 1)
}
,
canvas.app.battle.view.HpMpView.prototype.setHpOpp = function(t, e) {
    this.setValue(this.hpOppText, this.hpOpp, t, e, -1)
}
,
canvas.app.battle.view.HpMpView.prototype.setMpOpp = function(t, e) {
    this.setValue(this.mpOppText, this.mpOpp, t, e, -1)
}
,
canvas.app.battle.view.HpMpView.prototype.setValue = function(t, e, a, s, i) {
    a = (s = s < 0 ? 0 : s) < a ? s : a < 0 ? 0 : a,
    0 != s ? (t.text = a + "/" + s,
    e.scale.x = a / s * i) : (t.text = "0/0",
    e.scale.x = 0)
}
,
canvas.app.battle.view.NickView = function() {
    canvas.px.Container.call(this),
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD,16697738,120,10,"left"),
    this.addChild(this.field),
    this.field.y = 2,
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_info_icon")),
    this.addChild(this.infoButton),
    this.visible = !1,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.clickHandler, this)
}
,
canvas.app.battle.view.NickView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.NickView.prototype.clickHandler = function() {
    var t, e, a, s, i = canvas.app.battle.model, n = this.id;
    null != i.memDat[n] && (s = i.memDat[n].persFlags,
    t = i.memDat[n].team,
    e = (s & canvas.app.battle.Const.FS_PF_BOT) == canvas.app.battle.Const.FS_PF_BOT,
    a = (s & canvas.app.battle.Const.FS_PF_SHADOW) == canvas.app.battle.Const.FS_PF_SHADOW,
    s = (s & canvas.app.battle.Const.FS_PF_INVISIBLE) == canvas.app.battle.Const.FS_PF_INVISIBLE,
    ((i.fightFlags & canvas.app.battle.Const.FIGHT_FLAG_BLIND) == canvas.app.battle.Const.FIGHT_FLAG_BLIND || s) && i.invisibleInfoUrl ? canvas.Functions.navigateToURL(i.invisibleInfoUrl, "_blank") : a ? showShadowInfo(!1, n.toString(), !1, i.fightId, i.fightServerId || !1) : e ? showBotInfo(n.toString(), "0", i.fightId, i.fightServerId || !1) : showUserInfo(this.nick, i["team" + t + "serverUrl"] || !1))
}
,
canvas.app.battle.view.NickView.prototype.update = function(t, e) {
    this.nick = t,
    this.id = e,
    this.nick.length <= 14 ? this.field.text = this.nick : this.field.text = this.nick.substr(0, 12) + "...",
    this.field.x = -Math.round(this.field.width / 2) - 5,
    this.infoButton.x = -this.field.x - 12,
    this.visible = !0
}
,
canvas.app.battle.view.NickView.prototype.unshow = function() {
    this.nick = "",
    this.id = 0,
    this.field.text = "",
    this.visible = !1
}
,
canvas.app.battle.view.LevelView = function() {
    this._checked = !1,
    Object.defineProperty(this, "checked", {
        get: function() {
            return this._checked
        },
        set: function(t) {
            this._checked = t,
            this.button.checked = this._checked,
            this.button.enabled = !this._checked
        }
    }),
    canvas.px.Container.call(this),
    this.button = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "battle_button_lvl_base"),canvas.ResourceLoader.getImage("ui", "battle_button_lvl_over"),null,null,null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_button_lvl_down"))),
    this.addChild(this.button),
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD,3616041,25,18,"center"),
    this.addChild(this.field),
    this.field.position.set(5, 13),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this)
}
,
canvas.app.battle.view.LevelView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.LevelView.prototype.clickHandler = function() {
    this.checked = !0
}
,
canvas.app.battle.view.LevelView.prototype.setLevel = function(t) {
    this.field.text = t
}
,
canvas.app.battle.view.TimerView = function() {
    canvas.px.Container.call(this),
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_NUMBERS_BOLD_STROKE_BEVEL,16777184,55,25,"center"),
    this.addChild(this.field),
    this.field.text = "00:00",
    this.visible = !1
}
,
canvas.app.battle.view.TimerView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.TimerView.prototype.timerFunc = function() {
    var t, e = this.timeEnd - Date.now();
    e < 0 ? this.deactivate() : (e = (e = Math.round(e / 1e3)) - 60 * (t = Math.floor(e / 60)),
    this.field.text = (t < 10 ? "0" + t.toString() : t.toString()) + ":" + (e < 10 ? "0" + e.toString() : e.toString()))
}
,
canvas.app.battle.view.TimerView.prototype.activate = function(t) {
    void 0 === t && (t = 0),
    this.timerIv && clearInterval(this.timerIv),
    this.timeEnd = Date.now() + canvas.app.battle.model.roundTime - t,
    this.timerIv = setInterval(this.timerFunc.bind(this), canvas.app.battle.Const.TIMEOUT_REFRESH_INTERVAL),
    this.timerFunc(),
    this.visible = !0
}
,
canvas.app.battle.view.TimerView.prototype.deactivate = function() {
    this.timerIv && (clearInterval(this.timerIv),
    this.timerIv = 0),
    this.visible = !1
}
,
canvas.app.battle.view.ErrorPopup = function() {
    canvas.px.Container.call(this),
    this.interactive = !1,
    this.interactiveChildren = !1,
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE,-1,444,20,"center"),
    this.addChild(this.field)
}
,
canvas.app.battle.view.ErrorPopup.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.ErrorPopup.prototype.activate = function(t) {
    this.field.text = t,
    this.alpha = 1,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.battle.view.ErrorPopup.prototype.frameHandler = function() {
    this.alpha -= .01,
    this.alpha <= 0 && (this.parent && this.parent.removeChild(this),
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this))
}
,
canvas.app.battle.view.MainPopup = function(t) {
    canvas.px.Container.call(this),
    this.baseLnk = t,
    this.bgBlank = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bg_blank")),
    this.bgVictory = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bg_victory")),
    this.bgDefeat = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bg_defeat")),
    this.midVictory = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_victory")),
    this.midDefeat = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_defeat")),
    this.midKilled = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_killed")),
    this.borTop = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_top")),
    this.borBottom = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_bottom")),
    this.borLeft = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_left")),
    this.borRight = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_right")),
    this.addChild(this.bgBlank),
    this.addChild(this.bgVictory),
    this.addChild(this.bgDefeat),
    this.addChild(this.borTop),
    this.addChild(this.borBottom),
    this.addChild(this.borLeft),
    this.addChild(this.borRight),
    this.borBottom.y = 111,
    this.borLeft.y = 29,
    this.borLeft.height = 82,
    this.borRight.position.set(268, 29),
    this.borRight.height = 82,
    this.closeButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_popup_btn")),
    this.addChild(this.closeButton),
    this.closeButton.position.set(83, 116),
    this.midVictory.position.set(43, 35),
    this.midDefeat.position.set(12, 42),
    this.midKilled.position.set(20, 47),
    this.addChild(this.midVictory),
    this.addChild(this.midDefeat),
    this.addChild(this.midKilled),
    this.headLabel = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,16769466,104,23,"center"),
    this.headLabel.position.set(86, 3),
    this.addChild(this.headLabel),
    this.middleLabel = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_ARIAL_11_BOLD : canvas.Const.FONT_ARIAL_11,7693391,230,90,"center","middle"),
    this.middleLabel.position.set(23, 26),
    this.addChild(this.middleLabel),
    this.bottomLabel = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_TAHOMA_10_BOLD : canvas.Const.FONT_TAHOMA_10,16769466,73,18,"center"),
    this.bottomLabel.position.set(102, 117),
    this.addChild(this.bottomLabel),
    this.clearList = [this.bgBlank, this.bgVictory, this.bgDefeat, this.midVictory, this.midDefeat, this.midKilled, this.headLabel, this.middleLabel, this.bottomLabel, this.closeButton],
    this.waitingPopup = new canvas.app.battle.view.WaitingPopup,
    this.setClear(),
    this.interactive = !0
}
,
canvas.app.battle.view.MainPopup.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.MainPopup.prototype.deactivate = function() {
    this.parent && this.parent.removeChild(this)
}
,
canvas.app.battle.view.MainPopup.prototype.setClear = function() {
    for (var t = 0; t < this.clearList.length; t++)
        this.clearList[t].visible = !1;
    this.waitingPopup.parent == this && (this.removeChild(this.waitingPopup),
    this.waitingPopup.removedHandler()),
    this.setBackVisible(!0)
}
,
canvas.app.battle.view.MainPopup.prototype.setBackVisible = function(t) {
    this.borBottom.visible = t,
    this.borLeft.visible = t,
    this.borRight.visible = t,
    this.borTop.visible = t
}
,
canvas.app.battle.view.MainPopup.prototype.showLabel = function(t, e) {
    t.visible = !0,
    t.text = e
}
,
canvas.app.battle.view.MainPopup.prototype.updateWait = function() {
    this.currentState == canvas.app.battle.Const.POP_ST_WAIT && (this.setBackVisible(!1),
    this.waitingPopup.setState(canvas.app.battle.model.fightRunning ? canvas.app.battle.Const.WAITING_OPPONENT : canvas.app.battle.Const.WAITING_BATTLE),
    this.addChild(this.waitingPopup),
    this.waitingPopup.addedHandler())
}
,
canvas.app.battle.view.MainPopup.prototype.finishClickHandlerBT = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandlerBT, this),
    this.baseLnk.mEve.fightOver(!1),
    canvas.Functions.navigateToURL("fight.php?flee=1", "_self")
}
,
canvas.app.battle.view.MainPopup.prototype.finishClickHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandler, this),
    canvas.Functions.navigateToURL("" == canvas.app.battle.model.urlFinish2 ? canvas.app.battle.model.urlFinish : canvas.app.battle.model.urlFinish2, "_self")
}
,
canvas.app.battle.view.MainPopup.prototype.error1ClickHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error1ClickHandler, this),
    canvas.Functions.navigateToURL(canvas.app.battle.model.urlError, "_self")
}
,
canvas.app.battle.view.MainPopup.prototype.error2ClickHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error2ClickHandler, this),
    this.deactivate(),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.TRY_RECONNECT, this)
}
,
canvas.app.battle.view.MainPopup.prototype.error3ClickHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error3ClickHandler, this),
    canvas.Functions.navigateToURL(canvas.app.battle.model.urlFinish, "_self")
}
,
canvas.app.battle.view.MainPopup.prototype.unknownErrorClickHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.unknownErrorClickHandler, this),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.REPAIR, this)
}
,
canvas.app.battle.view.MainPopup.prototype.activate = function(t, e, a, s) {
    void 0 === e && (e = 0),
    void 0 === a && (a = ""),
    void 0 === s && (s = "");
    var i = canvas.app.battle.model;
    switch (canvas.app.battle.log("MainPopup:setState " + t + " error_code " + e),
    this.currentState = t,
    this.setClear(),
    t) {
    case canvas.app.battle.Const.POP_ST_WAIT_BT:
        if (i.watchFight && i.persId != i.myPersId || !i.canLeaveFight)
            return void this.deactivate();
        this.bgBlank.visible = !0,
        this.middleLabel.visible = !0,
        this.middleLabel.text = canvas.Translator.getText(40),
        this.showLabel(this.headLabel, canvas.Translator.getText(39)),
        this.closeButton.visible = !0,
        this.showLabel(this.bottomLabel, canvas.Translator.getText(2)),
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandlerBT, this);
        break;
    case canvas.app.battle.Const.POP_ST_WAIT:
        this.updateWait();
        break;
    case canvas.app.battle.Const.POP_ST_VISCORY:
        this.showLabel(this.headLabel, canvas.Translator.getText(1)),
        this.closeButton.visible = !0,
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandler, this),
        "" != i.urlFinish2 ? (this.bgBlank.visible = !0,
        this.middleLabel.visible = !0,
        this.middleLabel.text = i.urlFinish2Text,
        this.showLabel(this.bottomLabel, canvas.Translator.getText(48))) : (this.bgVictory.visible = !0,
        this.midVictory.visible = !0,
        this.showLabel(this.bottomLabel, canvas.Translator.getText(2)));
        break;
    case canvas.app.battle.Const.POP_ST_DEFEAT:
        this.showLabel(this.headLabel, canvas.Translator.getText(1)),
        this.closeButton.visible = !0,
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.finishClickHandler, this),
        "" != i.urlFinish2 ? (this.bgBlank.visible = !0,
        this.middleLabel.visible = !0,
        this.middleLabel.text = i.urlFinish2Text,
        this.showLabel(this.bottomLabel, canvas.Translator.getText(48))) : (this.bgDefeat.visible = !0,
        this.midDefeat.visible = !0,
        this.showLabel(this.bottomLabel, canvas.Translator.getText(2)));
        break;
    case canvas.app.battle.Const.POP_ST_KILLED:
        this.bgBlank.visible = !0,
        this.midKilled.visible = !0,
        this.showLabel(this.headLabel, canvas.Translator.getText(0));
        break;
    case canvas.app.battle.Const.POP_ST_ERROR:
        switch (this.bgBlank.visible = !0,
        this.showLabel(this.headLabel, canvas.Translator.getText(4)),
        this.closeButton.visible = !0,
        this.middleLabel.visible = !0,
        e) {
        case canvas.app.battle.Const.POP_ER_SHUTDOWN:
            this.middleLabel.text = canvas.Translator.getText(59),
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error1ClickHandler, this),
            this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
            break;
        case canvas.app.battle.Const.POP_ER_SOC_CLOSE:
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.RESET, this),
            this.middleLabel.text = canvas.Translator.getText(5),
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error2ClickHandler, this),
            this.showLabel(this.bottomLabel, canvas.Translator.getText(37));
            break;
        case canvas.app.battle.Const.POP_ER_AUTH_FAIL:
            this.middleLabel.text = canvas.Translator.getText(3),
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error3ClickHandler, this),
            this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
            break;
        case canvas.app.battle.Const.POP_ER_FIGHT_ENDED:
            this.middleLabel.text = canvas.Translator.getText(6),
            canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.error3ClickHandler, this),
            this.showLabel(this.bottomLabel, canvas.Translator.getText(2));
            break;
        default:
            canvas.app.battle.log("MainPopup WARN: unknown error_code = " + e, 16711680)
        }
        break;
    case canvas.app.battle.Const.POP_ST_UNKNOWN:
        this.bgBlank.visible = !0,
        this.showLabel(this.headLabel, a),
        this.middleLabel.visible = !0,
        this.middleLabel.text = s,
        this.closeButton.visible = !0,
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.unknownErrorClickHandler, this),
        this.showLabel(this.bottomLabel, canvas.Translator.getText(7));
        break;
    default:
        canvas.app.battle.log("MainPopup ERR: unknown popup state_id = " + t, 16711680)
    }
}
,
canvas.app.battle.view.WaitingPopup = function() {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_waiting_popup_back"))),
    this.waiter = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_waiter")),
    this.addChild(this.waiter),
    this.waiter.pivot = new canvas.px.Point(Math.round(.5 * this.waiter.width),Math.round(.5 * this.waiter.height)),
    this.waiter.position.set(53, 63),
    this.container = new canvas.px.Sprite,
    this.addChild(this.container)
}
,
canvas.app.battle.view.WaitingPopup.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.WaitingPopup.prototype.setState = function(t) {
    var e;
    switch (canvas.Functions.destroyChildren(this.container),
    t) {
    case canvas.app.battle.Const.WAITING_BATTLE:
        e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_icon_wait_battle")),
        this.container.addChild(e),
        e.position.set(41, 51),
        e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_wait2")),
        this.container.addChild(e),
        e.position.set(87, 43);
        break;
    case canvas.app.battle.Const.WAITING_OPPONENT:
        e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_icon_wait_opponent")),
        this.container.addChild(e),
        e.position.set(41, 47),
        e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_popup_mid_wait")),
        this.container.addChild(e),
        e.position.set(87, 43)
    }
}
,
canvas.app.battle.view.WaitingPopup.prototype.addedHandler = function() {
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.updateHandler, this)
}
,
canvas.app.battle.view.WaitingPopup.prototype.updateHandler = function() {
    this.waiter.rotation += .17
}
,
canvas.app.battle.view.WaitingPopup.prototype.removedHandler = function() {
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.updateHandler, this)
}
,
canvas.app.battle.view.MessagePopup = function() {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bg_blank")));
    var t = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_top"))
      , e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_bottom"))
      , a = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_left"))
      , s = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_popup_bor_right"));
    this.addChild(t),
    this.addChild(e),
    this.addChild(a),
    this.addChild(s),
    this.interactive = !0,
    e.y = 111,
    a.y = 29,
    a.height = 82,
    s.position.set(268, 29),
    s.height = 82,
    this.headLabel = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,16769466,104,23,"center"),
    this.headLabel.position.set(86, 3),
    this.addChild(this.headLabel),
    this.headLabel.interactive = !0,
    this.middleLabel = new canvas.ui.Text(canvas.Const.FONT_ARIAL_11,7693391,230,60,"center","middle"),
    this.middleLabel.position.set(23, 28),
    this.addChild(this.middleLabel),
    this.buttonAccept = new canvas.app.battle.view.elements.PopupButton(canvas.Translator.getText(9)),
    this.buttonBan = new canvas.app.battle.view.elements.PopupButton(canvas.Translator.getText(10)),
    this.buttonCancel = new canvas.app.battle.view.elements.PopupButton(canvas.Translator.getText(11)),
    this.buttonAccept.position.set(28, 94),
    this.buttonBan.position.set(139, 94),
    this.buttonCancel.position.set(82, 94),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buttonAccept, this.acceptHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buttonBan, this.banHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buttonCancel, this.cancelHandler, this)
}
,
canvas.app.battle.view.MessagePopup.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.MessagePopup.prototype.acceptHandler = function() {
    this.yesFunc ? this.yesFunc.apply(null, this.yesFuncParams) : this.sendAnswer("1"),
    this.deactivate()
}
,
canvas.app.battle.view.MessagePopup.prototype.banHandler = function() {
    this.yesFunc || this.sendAnswer("0"),
    this.deactivate()
}
,
canvas.app.battle.view.MessagePopup.prototype.cancelHandler = function() {
    this.deactivate()
}
,
canvas.app.battle.view.MessagePopup.prototype.setAcceptLabel = function(t) {
    this.acceptButton.setLabel(t)
}
,
canvas.app.battle.view.MessagePopup.prototype.setBanLabel = function(t) {
    this.banButton.setLabel(t)
}
,
canvas.app.battle.view.MessagePopup.prototype.setCancelLabel = function(t) {
    this.cancelButton.setLabel(t)
}
,
canvas.app.battle.view.MessagePopup.prototype.setHeader = function(t) {
    this.headLabel.text = t || ""
}
,
canvas.app.battle.view.MessagePopup.prototype.setBody = function(t) {
    this.middleLabel.text = t
}
,
canvas.app.battle.view.MessagePopup.prototype.activate = function(t, e, a) {
    switch (this.yesFunc = e,
    this.yesFuncParams = a,
    t) {
    case 1:
        this.buttonAccept.parent != this && this.addChild(this.buttonAccept),
        this.buttonBan.parent != this && this.addChild(this.buttonBan),
        this.buttonCancel.parent == this && this.removeChild(this.buttonCancel);
        break;
    case 2:
        this.buttonAccept.parent == this && this.removeChild(this.buttonAccept),
        this.buttonBan.parent == this && this.removeChild(this.buttonBan),
        this.buttonCancel.parent != this && this.addChild(this.buttonCancel)
    }
}
,
canvas.app.battle.view.MessagePopup.prototype.sendAnswer = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_SEND_MESSAGE, this.targetPersId, "2()" + this.num + "()" + t])
}
,
canvas.app.battle.view.MessagePopup.prototype.deactivate = function() {
    this.yesFunc = null,
    this.yesFuncParams = null,
    this.num = null,
    this.targetPersId = 0,
    this.headLabel.text = canvas.Translator.getText(0),
    this.buttonAccept.setLabel(canvas.Translator.getText(9)),
    this.buttonBan.setLabel(canvas.Translator.getText(10)),
    this.buttonCancel.setLabel(canvas.Translator.getText(11)),
    this.parent && this.parent.removeChild(this)
}
,
canvas.app.battle.view.ComboView = function() {
    canvas.px.Container.call(this),
    this.padding = 5,
    this.interactive = !0,
    this.buttonMode = !0,
    this.click = this.clickHandler,
    this.chooseDefaultCombo(),
    this.align(),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handlerFrame, this)
}
,
canvas.app.battle.view.ComboView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.ComboView.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.OPEN_COMBO_LIST)
}
,
canvas.app.battle.view.ComboView.prototype.resetCombo = function(t) {
    void 0 === t && (t = 0),
    0 != canvas.app.battle.model.combos.length && this.setStep(t)
}
,
canvas.app.battle.view.ComboView.prototype.newHit = function(t, e) {
    var a, s;
    0 != canvas.app.battle.model.combos.length && (a = this.comboStep >= this.activeCombo.size - 1,
    t != this.activeCombo.seq.charAt(this.comboStep) ? 0 < (s = this.findSubComboIndex(this.activeCombo.seq.substr(0, this.comboStep).concat(t))) ? this.setStep(s) : this.resetCombo() : a ? !e && 0 < (s = this.findSubComboIndex(this.activeCombo.seq.substr(1, this.comboStep))) ? this.setStep(s) : this.resetCombo() : this.setStep(this.comboStep + 1))
}
,
canvas.app.battle.view.ComboView.prototype.findSubComboIndex = function(t) {
    for (var e = t.length, a = 0; a < e; a++)
        if (this.activeCombo.seq.substr(0, e - a) == t.substr(a, e - a))
            return e - a;
    return 0
}
,
canvas.app.battle.view.ComboView.prototype.setStep = function(t) {
    this.comboStep = t,
    this.drawCombo(),
    canvas.app.battle.model.localStorage.set("comboStep", parseInt(this.comboStep))
}
,
canvas.app.battle.view.ComboView.prototype.comboComplete = function() {
    this.resetCombo()
}
,
canvas.app.battle.view.ComboView.prototype.drawCombo = function() {
    if (0 != canvas.app.battle.model.combos.length) {
        canvas.Functions.destroyChildren(this),
        this.cursorIcon = null;
        for (var t = 0; t < canvas.app.battle.model.combos.length; t++)
            if (this.activeComboId == canvas.app.battle.model.combos[t].id) {
                this.activeCombo = canvas.app.battle.model.combos[t];
                break
            }
        for (t = 0; t < this.activeCombo.size; t++) {
            var e = this.chooseStrike(this.activeCombo.seq.charAt(t))
              , a = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_" + e + (15 < this.activeCombo.level ? "_aura" : "")));
            this.iconSide = a.width,
            a.x = (a.width + this.padding) * t,
            e = t < this.comboStep ? new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_combo_border_green")) : new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_combo_border_yellow")),
            this.addChild(a),
            a.addChild(e),
            e.position.set(-1, -1)
        }
        this.cursorIcon || (this.cursorIcon = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_combo_cursor")),
        this.cursorIcon.interactive = !1),
        this.cursorIcon.y = -this.cursorIcon.height,
        this.cursorDirection = !0,
        this.cursorIcon.x = Math.round((this.iconSide + this.padding) * this.comboStep - this.cursorIcon.width / 2 + this.iconSide / 2),
        this.addChild(this.cursorIcon),
        this.align()
    }
}
,
canvas.app.battle.view.ComboView.prototype.handlerFrame = function() {
    this.cursorIcon && (this.cursorDirection ? (--this.cursorIcon.y,
    this.cursorIcon.y <= -this.cursorIcon.height - 10 && (this.cursorDirection = !this.cursorDirection)) : (this.cursorIcon.y += 1,
    this.cursorIcon.y >= -this.cursorIcon.height && (this.cursorDirection = !this.cursorDirection)))
}
,
canvas.app.battle.view.ComboView.prototype.chooseStrike = function(t) {
    var e;
    switch (t) {
    case "2":
        e = "combo_middle";
        break;
    case "3":
        e = "combo_down";
        break;
    case "1":
        e = "combo_up";
        break;
    case "0":
        e = "combo_none"
    }
    return e
}
,
canvas.app.battle.view.ComboView.prototype.align = function() {
    this.x = Math.round((canvas.app.battle.model.width - this.width) / 2)
}
,
canvas.app.battle.view.ComboView.prototype.chooseCombo = function(t, e) {
    void 0 === e && (e = 0),
    canvas.app.battle.model.localStorage.set("activeID", t),
    canvas.app.battle.model.localStorage.set("fightId", canvas.app.battle.model.fightId),
    this.activeComboId = canvas.app.battle.model.activeComboId = t,
    this.resetCombo(e)
}
,
canvas.app.battle.view.ComboView.prototype.chooseDefaultCombo = function() {
    var t, e = -1, a = canvas.app.battle.model.localStorage.get("activeID"), s = canvas.app.battle.model.localStorage.get("fightId"), i = parseInt(canvas.app.battle.model.localStorage.get("comboStep"));
    if ((e = a && s == canvas.app.battle.model.fightId ? a : canvas.app.battle.model.defaultCombo) && 0 <= e) {
        for (var n = 0; n < canvas.app.battle.model.combos.length; n++)
            if (canvas.app.battle.model.combos[n].id == e) {
                t = e;
                break
            }
        i && s == canvas.app.battle.model.fightId && (this.comboStep = i),
        n == canvas.app.battle.model.combos.length && (t = this.getLongestCombo())
    } else
        t = this.getLongestCombo();
    0 < t && this.chooseCombo(t, this.comboStep)
}
,
canvas.app.battle.view.ComboView.prototype.getLongestCombo = function() {
    var t = canvas.app.battle.model;
    if (!t.combos || t.combos.length < 1)
        return 0;
    for (var e = 0, a = 1; a < t.combos.length; a++)
        t.combos[a].size >= t.combos[e].size && (e = a);
    return t.combos[e].id
}
,
canvas.app.battle.view.ComboList = function() {
    canvas.px.Container.call(this),
    this.curWidth = 320,
    this.curElevation = 1,
    this.padding = 5,
    this.container = new canvas.px.Container,
    this.drawCarcase(),
    this.drawAllCombos(),
    this.x = Math.round((canvas.app.battle.model.width - this.width) / 2),
    this.y = 360 - this.height
}
,
canvas.app.battle.view.ComboList.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.ComboList.prototype.drawCarcase = function() {
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_combo_list_back"),0,9,0,11),
    this.back.interactive = !0,
    this.back.height = 100,
    this.back.x = -3,
    this.back.y = -10,
    this.addChild(this.back),
    this.addChild(this.container),
    this.closeButton = new canvas.app.battle.view.elements.PopupButton(canvas.Translator.getText(32)),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.handlerClose, this),
    this.closeButton.x = Math.round((this.curWidth - this.closeButton.width) / 2),
    this.addChild(this.closeButton),
    this.selectCursor = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_combo_select_cursor")),
    this.selectCursor.x = 2
}
,
canvas.app.battle.view.ComboList.prototype.drawAllCombos = function() {
    for (var t, e, a, s, i = 0; i < canvas.app.battle.model.combos.length; i++)
        this.drawCombo(canvas.app.battle.model.combos[i]);
    280 < this.curElevation + 20 ? (this.back.height = 280,
    t = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_scroll_back")),
    e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_scroll_arrow")),
    (s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_scroll_arrow"))).scale.y = -1,
    s.y = -s.height,
    (a = new canvas.px.Container).addChild(s),
    s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "battle_scroll_drag")),
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,e,a,t,s,this),
    this.addChild(this.scroll),
    this.scroll.padding = 10,
    this.scroll.setSize(17, 248),
    this.scroll.x = this.back.width - this.scroll.width - 8,
    this.scroll.step = 10,
    this.scrollMask = new canvas.px.Mask(320,250),
    this.addChild(this.scrollMask),
    this.container.mask = this.scrollMask,
    this.scroll.max = this.container.height - this.scrollMask.height,
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this)) : this.back.height = this.curElevation + 20,
    this.closeButton.y = this.back.height - 20
}
,
canvas.app.battle.view.ComboList.prototype.scrollHandler = function() {
    this.container.y = -this.scroll.current
}
,
canvas.app.battle.view.ComboList.prototype.drawCombo = function(t) {
    var e, a = new canvas.px.Container;
    a.combo = t,
    a.buttonMode = !0,
    a.interactive = !0,
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.HINT_ADD, null, {
        target: a,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(t.description))
    }),
    "0" != t.seq.charAt(0) && (a.click = this.handlerClick.bind(this));
    var s = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,3355443,300,20);
    s.text = t.title,
    s.x = 20,
    s.y = 2,
    a.addChild(s);
    for (var i = this.curWidth - t.size * (16 + this.padding), n = 0; n < t.size; n++)
        e = canvas.app.battle.view.ComboView.prototype.chooseStrike(t.seq.charAt(n)),
        (e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_" + e + (15 < t.level ? "_aura" : "")))).x = (e.width + this.padding) * n + i,
        a.addChild(e);
    a.y = this.curElevation,
    this.container.addChild(a),
    canvas.app.battle.model.activeComboId == t.id && this.placeSelectCursor(a),
    this.curElevation += a.height + this.padding
}
,
canvas.app.battle.view.ComboList.prototype.placeSelectCursor = function(t) {
    this.selectCursor.parent != this.container && this.container.addChild(this.selectCursor),
    this.selectCursor.y = t.y + 3
}
,
canvas.app.battle.view.ComboList.prototype.handlerClick = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.CHOOSE_COMBO, null, t.currentTarget.combo.id),
    this.placeSelectCursor(t.currentTarget)
}
,
canvas.app.battle.view.ComboList.prototype.handlerClose = function() {
    this.parent && this.parent.removeChild(this)
}
,
canvas.app.battle.view.BowPanel = function() {
    this._locked = !1,
    Object.defineProperty(this, "locked", {
        get: function() {
            return this._locked
        },
        set: function(t) {
            this._locked = !(0 < this.numSpells) || t,
            this.container.alpha = this._locked ? .5 : 1
        }
    }),
    canvas.px.Container.call(this),
    this.items = new Array,
    this.container = new canvas.px.Container,
    this.container.position.set(10, 2),
    this.addChild(this.container),
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_panel"))),
    this.leftArrow = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "battle_button_arrow"),canvas.ResourceLoader.getImage("ui", "battle_button_arrow_over"),canvas.ResourceLoader.getImage("ui", "battle_button_arrow_press")),
    this.rightArrow = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "battle_button_arrow"),canvas.ResourceLoader.getImage("ui", "battle_button_arrow_over"),canvas.ResourceLoader.getImage("ui", "battle_button_arrow_press")),
    this.rightArrow.scale.x = -1,
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL,this.leftArrow,this.rightArrow),
    this.scroll.setSize(400, 42),
    this.scroll.position.set(-16, 24),
    this.container.addChild(this.scroll),
    this.leftArrow.visible = !1,
    this.rightArrow.visible = !1,
    this.progress = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_bow_progress"),18,0,18,0),
    this.container.addChild(this.progress),
    this.progress.width = 157,
    this.progress.position.set(200, 74),
    this.progressMask = new canvas.px.Mask(154,11),
    this.container.addChild(this.progressMask),
    this.progressMask.position.set(202, 75),
    this.progress.mask = this.progressMask,
    this.progressMask.scale.x = 0,
    this.progressField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,16770533,154,16,"center"),
    this.container.addChild(this.progressField),
    this.progressField.position.set(201, 75),
    this.arrowsField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,16770533,30,16,"center"),
    this.container.addChild(this.arrowsField),
    this.arrowsField.position.set(42, 75),
    this.itemsContainer = new canvas.px.Container,
    this.container.addChild(this.itemsContainer),
    this.itemsContainer.position.set(22, -1),
    this.itemsMask = new canvas.px.Mask(365,100),
    this.itemsMask.position.set(32, -1),
    this.addChild(this.itemsMask),
    this.itemsContainer.mask = this.itemsMask,
    this.hideButton = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "battle_button_arrow"),canvas.ResourceLoader.getImage("ui", "battle_button_arrow_over"),canvas.ResourceLoader.getImage("ui", "battle_button_arrow_press")),
    this.hide(),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hideButton, this.handlerHideClick, this),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.handlerScroll, this)
}
,
canvas.app.battle.view.BowPanel.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.BowPanel.prototype.handlerHideClick = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_BOW_PANEL, null, !this.container.parent)
}
,
canvas.app.battle.view.BowPanel.prototype.handlerScroll = function() {
    this.itemsContainer.x = 22 - 75 * this.scroll.current,
    this.leftArrow.visible = !0,
    this.rightArrow.visible = !0,
    0 == this.scroll.current ? this.leftArrow.visible = !1 : this.scroll.current == this.scroll.max && (this.rightArrow.visible = !1)
}
,
canvas.app.battle.view.BowPanel.prototype.setProgress = function(t, e) {
    0 == e ? (this.progressMask.scale.x = 0,
    this.progressField.text = "") : (this.progressField.text = t.toString() + "/" + e.toString(),
    this.progressMask.scale.x = t / e),
    this.arrowsField.text = canvas.app.battle.model.arrowsCount.toString()
}
,
canvas.app.battle.view.BowPanel.prototype.buildSpells = function() {
    var t, e, a, s = 0, i = new Array;
    for (a in canvas.app.battle.model.spellsBow)
        i.push(canvas.app.battle.model.spellsBow[a]);
    i.sort(function(t, e) {
        return t.index - e.index
    });
    for (var n = 0; n < i.length; n++)
        t = i[n],
        e = new canvas.app.battle.view.elements.BowItem,
        this.itemsContainer.addChild(e),
        e.x = s,
        e.y = 10,
        s += 75,
        this.items.push(e),
        e.effectID = parseInt(t.effId),
        e.image = canvas.Config.artifactsPath + t.picture,
        e.count = t.energy,
        e.coolDown = t.cdTime,
        e.coolDownLeft = t.cdLeft,
        e.title = t.title;
    this.numSpells = i.length,
    this.numSpells > canvas.app.battle.Const.BOW_SLOTS_COUNT && (this.scroll.max = this.numSpells - canvas.app.battle.Const.BOW_SLOTS_COUNT,
    this.handlerScroll()),
    0 < this.numSpells && (this.addChild(this.hideButton),
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_BOW_PANEL, null, !0))
}
,
canvas.app.battle.view.BowPanel.prototype.confirmUseEffect = function(t) {
    for (var e = 0; e < this.items.length; e++) {
        var a = this.items[e];
        if (a.effectID == t) {
            a.coolDownLeft = a.coolDown;
            break
        }
    }
}
,
canvas.app.battle.view.BowPanel.prototype.show = function() {
    this.hideButton.x = 191,
    this.hideButton.y = 38,
    this.hideButton.rotation = -canvas.Functions.degToRad(90),
    this.container.parent == this && this.removeChild(this.container)
}
,
canvas.app.battle.view.BowPanel.prototype.hide = function() {
    this.hideButton.y = 92,
    this.hideButton.rotation = canvas.Functions.degToRad(90),
    this.hideButton.x = 232,
    this.container.parent != this && this.addChild(this.container)
}
,
canvas.app.battle.view.ShadowIcon = function() {
    canvas.px.Container.call(this),
    this.shadowButton = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "battle_button_shadow_nrm"),canvas.ResourceLoader.getImage("ui", "battle_button_shadow_over"),canvas.ResourceLoader.getImage("ui", "battle_button_shadow_down"),canvas.ResourceLoader.getImage("ui", "battle_button_shadow_disbld")),
    this.addChild(this.shadowButton),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.shadowButton, this.clickHandler, this),
    this.loader = new canvas.utils.URLRequest(canvas.app.battle.model.shadowSummonUrl + "&json_mode_on=1"),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.loader, this.completeHandler, this),
    this.update()
}
,
canvas.app.battle.view.ShadowIcon.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.ShadowIcon.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_MESSAGE, null, {
        mode: 1,
        headerLabel: canvas.Translator.getText(67),
        bodyLabel: canvas.Translator.getText(66),
        yesFunc: this.loadShadow.bind(this),
        acceptLabel: canvas.Translator.getText(68),
        banLabel: canvas.Translator.getText(69)
    })
}
,
canvas.app.battle.view.ShadowIcon.prototype.loadShadow = function() {
    this.loader.load()
}
,
canvas.app.battle.view.ShadowIcon.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.loader, this.completeHandler, this);
    var t = JSON.parse(this.loader.request.responseText);
    t["common|action"].redirect_error ? canvas.EventManager.dispatchEvent(canvas.app.battle.Event.SHOW_ERROR, null, t["common|action"].redirect_error) : (canvas.app.battle.model.shadowSummonable = !1,
    this.update())
}
,
canvas.app.battle.view.ShadowIcon.prototype.update = function() {
    this.shadowButton.enabled = canvas.app.battle.model.shadowSummonable
}
,
canvas.app.battle.view.Pers = function(t) {
    this._addFuncTurn = null,
    Object.defineProperty(this, "addFuncTurn", {
        get: function() {
            return this._addFuncTurn
        },
        set: function(t) {
            this.isFuncTurn = null != t,
            this._addFuncTurn = t
        }
    }),
    canvas.px.Container.call(this),
    this.baseLnk = t,
    this.isFuncTurn = !1,
    this.addFuncShow = null,
    this.addFuncDie = null,
    this.mFlagId = 0,
    this.magicStandBase = new canvas.px.Container,
    this.magicStandBaseAura = new canvas.px.Container,
    this.dmgConf = null,
    this.sndConf = null,
    this.pet = null,
    this.inMotion = !1,
    this.baseHeight = 0,
    this.allLabels = {},
    this.deadFrame = 0,
    this.mvIndexShow = 0,
    this.deadFlag = !1,
    this.inMV = !1,
    this.additionalEffects = {},
    this.skContainer = new canvas.px.Container,
    this.petContainer = new canvas.px.Container,
    this.addEffCont = new canvas.px.Container,
    this.skContainer.y = -10,
    this.petContainer.y = 20,
    this.magicStandBase.scale.set(.75, .75),
    this.magicStandBaseAura.scale.set(.75, .75),
    this.visible = !1,
    this.addChild(this.magicStandBase),
    this.addChild(this.magicStandBaseAura),
    this.addChild(this.skContainer),
    this.addChild(this.petContainer),
    this.addChild(this.addEffCont)
}
,
canvas.app.battle.view.Pers.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.Pers.prototype.config = function(t) {
    var e = canvas.app.battle.model;
    this.persId = t.pers_id,
    this.persSk = t.pers_sk,
    this.persSkLink = t.pers_sk_link,
    this.persGender = t.pers_gender,
    this.persKind = e.memDat[this.persId].kind,
    2 != this.persKind ? this.dieColors = canvas.Const.SK_DIE_COLORS_HUMAN : this.dieColors = canvas.Const.SK_DIE_COLORS_MAGMAR,
    this.hePos = canvas.app.battle.Const.HAND_EFFECT_POSITION[this.persGender],
    this.hePos || (this.hePos = e.HAND_EFFECT_POSITION.M)
}
,
canvas.app.battle.view.Pers.prototype.loadBegin = function() {
    this.persSk < canvas.app.battle.Const.BOTID1 ? (this.sk = new canvas.animation.Skeleton(this.persSkLink,new canvas.px.Point(70,180),this.parent),
    this.sk.frameEvent = canvas.app.battle.Event.ENTER_FRAME,
    this.sk.skeletonData = new canvas.data.battle.SkeletonData(canvas.app.battle.model.myAllDataArray[this.persId],this.persGender)) : (this.sk = new canvas.animation.Bot(this.persSkLink,new canvas.px.Point(70,180),this.parent),
    this.sk.frameEvent = canvas.app.battle.Event.ENTER_FRAME);
    var t = canvas.app.battle.model.memDat[this.persId].persFlags;
    canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_SKGHOST) ? this.sk.filters = [canvas.Functions.getGlow(10, 3, 0, 16777215, .1), canvas.Functions.getAlpha(.4)] : canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_MOROC_LIGHT) ? this.sk.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 6737100, .1)] : canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_MOROC_DARK) && (this.sk.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 10066176, .1)]),
    this.skContainer.addChild(this.sk),
    this.sk.stop(),
    this.sk.ready ? this.skReady() : canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.sk, this.skReady, this)
}
,
canvas.app.battle.view.Pers.prototype.skReady = function() {
    for (var t in canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.sk, this.skReady, this),
    this.sk.labels)
        this.allLabels[t] = !0;
    this.sk.DMG = this.DMG.bind(this),
    this.sk.MV = this.MV.bind(this),
    this.sk.AFX = this.AFX.bind(this),
    this.sk.TURN = this.TURN.bind(this),
    this.sk.POST = this.POST.bind(this),
    this.sk.SND = this.SND.bind(this),
    this.updateSkelPost(),
    this.showBody()
}
,
canvas.app.battle.view.Pers.prototype.showBody = function() {
    this.baseLnk.mFunc.effectList(this.persId),
    this.setChildIndex(this.addEffCont, this.children.length - 1),
    this.visible = !0,
    this.sk.visible = !0,
    this.baseHeight = this.height,
    this.mvIndexShow = 0,
    this.gotoAndPlay(this.baseLnk.getPostLabel(this.persId)),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.showBodyHandler, this),
    this.showBodyHandler(),
    this.sk.parent || this.skContainer.addChild(this.sk)
}
,
canvas.app.battle.view.Pers.prototype.updateSkelPost = function() {
    this.persId == canvas.app.battle.model.persId && canvas.app.battle.model.persStatus == canvas.app.battle.Const.STATUS_DEAD ? this.allLabels.dead ? this.sk.gotoAndStop("dead") : this.deadFrame ? this.sk.gotoAndStop(this.deadFrame) : (this._addFuncTurn = this.emptyFunction,
    this.sk.gotoAndPlay("die")) : this.gotoAndPlay(this.baseLnk.getPostLabel(this.persId))
}
,
canvas.app.battle.view.Pers.prototype.gotoAndPlay = function(t) {
    this.sk.gotoAndPlay(t),
    -1 != t.indexOf("die") && this.pet && this.pet.die(),
    -1 != t.indexOf("idle") && this.pet && this.pet.idle()
}
,
canvas.app.battle.view.Pers.prototype.emptyFunction = function() {}
,
canvas.app.battle.view.Pers.prototype.showBodyHandler = function() {
    this.mvIndexShow++,
    this.mvIndexShow < canvas.app.battle.Const.MV_PERS_SHOW.length ? this.sk.x = canvas.app.battle.Const.MV_PERS_SHOW[this.mvIndexShow] : (canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.showBodyHandler, this),
    this.addFuncShow && this.addFuncShow({
        pers_id: this.persId
    }))
}
,
canvas.app.battle.view.Pers.prototype.clearAdditionalEffects = function() {
    for (var t in this.additionalEffects)
        this.removeAdditionalEffect(this.additionalEffects[t])
}
,
canvas.app.battle.view.Pers.prototype.showAdditionalEffects = function(t) {
    for (var e = 0; e < t.length; e++)
        this.showAdditionalEffect(t[e]);
    0 < canvas.app.battle.model.dmgEve.length && setTimeout(this.showDmgEve.bind(this), 1100)
}
,
canvas.app.battle.view.Pers.prototype.showDmgEve = function() {
    this.baseLnk.view.showDmg(canvas.app.battle.model.dmgEve),
    canvas.app.battle.model.dmgEve = []
}
,
canvas.app.battle.view.Pers.prototype.showAdditionalEffect = function(t) {
    var e = this.additionalEffects[t];
    e || ((e = new canvas.px.MovieClip(canvas.Config.spellsPath + t)).frameEvent = canvas.app.battle.Event.ENTER_FRAME,
    (this.additionalEffects[t] = e).position.set(120, 210),
    this.addEffCont.addChild(e))
}
,
canvas.app.battle.view.Pers.prototype.removeAdditionalEffect = function(t) {
    var e = this.additionalEffects[t];
    e && (e.parent == this.addEffCont && this.addEffCont.removeChild(e),
    e.destroy({
        children: !0
    }),
    delete this.additionalEffects[t])
}
,
canvas.app.battle.view.Pers.prototype.hideBody = function() {
    this.deadFlag ? this.comleteHiding() : (this.mvIndexHide = 0,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.hideBodyHandler, this),
    this.hideBodyHandler())
}
,
canvas.app.battle.view.Pers.prototype.hideBodyHandler = function() {
    this.mvIndexHide++,
    this.mvIndexHide < canvas.app.battle.Const.MV_PERS_HIDE.length ? this.sk && (this.sk.x = canvas.app.battle.Const.MV_PERS_HIDE[this.mvIndexHide]) : (canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.hideBodyHandler, this),
    this.comleteHiding())
}
,
canvas.app.battle.view.Pers.prototype.comleteHiding = function() {
    this.visible = !1,
    this.addFuncHide && (this.sk && (this.sk.parent == this.skContainer && this.skContainer.removeChild(this.sk),
    this.sk.gotoAndStop(1)),
    this.clearAdditionalEffects(),
    this.addFuncHide({
        pers_id: this.persId
    }),
    this.addFuncHide = null)
}
,
canvas.app.battle.view.Pers.prototype.dieBody = function() {
    this.deadFlag = !0,
    this.persSk < canvas.app.battle.Const.BOTID1 ? (this.ctIndexDie = 0,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.dieBodyHandler, this),
    this.dieBodyHandler()) : this.sk.flags && canvas.app.battle.model.testFlag(this.sk.flags, 1) ? this.addFuncDie && (this.addFuncDie({
        pers_id: this.persId
    }),
    this.addFuncDie = null) : (canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.dieAlphaBodyHandler, this),
    this.dieAlphaBodyHandler())
}
,
canvas.app.battle.view.Pers.prototype.dieBodyHandler = function() {
    var t;
    this.ctIndexDie < this.dieColors.length ? (t = this.dieColors[this.ctIndexDie],
    this.sk.filters = [canvas.Functions.getColorMatrixFilter(t[0], t[1], t[2], 1, t[3], t[4], t[5], 0)]) : (canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.dieBodyHandler, this),
    this.sk.filters = [],
    this.sk.visible = !1,
    this.dieSoul()),
    this.ctIndexDie++
}
,
canvas.app.battle.view.Pers.prototype.dieSoul = function() {
    2 != this.persKind ? this.dieAnim = new canvas.px.MovieClip(canvas.Config.spellsPath + "spirit_hum") : this.dieAnim = new canvas.px.MovieClip(canvas.Config.spellsPath + "spirit_mag"),
    this.dieAnim.frameEvent = canvas.app.battle.Event.ENTER_FRAME,
    this.dieAnim.autoDestroy = !0,
    this.dieAnim.position.set(100, 280),
    this.addChild(this.dieAnim),
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.dieAnim, this.dieAnimCheckHandler, this)
}
,
canvas.app.battle.view.Pers.prototype.dieAnimCheckHandler = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.dieAnim, this.dieAnimCheckHandler, this),
    this.addFuncDie && (this.addFuncDie({
        pers_id: this.persId
    }),
    this.addFuncDie = null)
}
,
canvas.app.battle.view.Pers.prototype.dieAlphaBodyHandler = function() {
    this.sk.alpha -= .1,
    this.sk.alpha <= 0 && (this.sk.visible = !1,
    this.sk.alpha = 1,
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.dieAlphaBodyHandler, this),
    null != this.addFuncDie && (this.addFuncDie({
        pers_id: this.persId
    }),
    this.addFuncDie = null))
}
,
canvas.app.battle.view.Pers.prototype.setReaction = function(t) {
    this.reactionLabel = t.r_label,
    this.reactionDelay = t.r_delay,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.delayedReactionHandler, this)
}
,
canvas.app.battle.view.Pers.prototype.delayedReactionHandler = function() {
    this.reactionDelay--,
    this.reactionDelay <= 0 && (this.gotoAndPlay(this.reactionLabel),
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.delayedReactionHandler, this))
}
,
canvas.app.battle.view.Pers.prototype.addWoundEffect = function(t) {
    this.woundFrameRest = t.delay,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.woundFrameHandler, this)
}
,
canvas.app.battle.view.Pers.prototype.woundFrameHandler = function() {
    0 < this.woundFrameRest ? this.woundFrameRest-- : (canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.woundFrameHandler, this),
    this.woundBegin())
}
,
canvas.app.battle.view.Pers.prototype.woundBegin = function() {
    var t = this.sk.kick_array_all.kick_mid.a_mid_1.wound
      , t = t[Math.floor(t.length * Math.random())];
    this.addFuncTurn = this.baseLnk.afterWound.bind(this.baseLnk),
    this.gotoAndPlay(t)
}
,
canvas.app.battle.view.Pers.prototype.addBgEffect = function(t) {
    this.bgEffect = !0,
    this.addEffect(t)
}
,
canvas.app.battle.view.Pers.prototype.addEffect = function(t) {
    this.bgEffect = !1,
    this.effectFrameRest = t.delay,
    this.effectType = t.type,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.effectFramehandler, this)
}
,
canvas.app.battle.view.Pers.prototype.effectFramehandler = function() {
    var t;
    0 < this.effectFrameRest ? this.effectFrameRest-- : (canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.effectFramehandler, this),
    t = new canvas.px.Point(this.hePos[0],this.hePos[1]),
    t = this.sk.getChildByName("HAND13").toGlobal(t),
    this.baseLnk.view.addEffect(this.effectType, t.x, t.y, this.parent.scale.x, this.bgEffect))
}
,
canvas.app.battle.view.Pers.prototype.addHandEffect = function(t) {
    this.handAnim = new canvas.px.MovieClip(canvas.Config.spellsPath + t),
    this.handAnim.frameEvent = canvas.app.battle.Event.ENTER_FRAME,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handFrameHandler, this),
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.handAnim, this.handCompleteHandler, this),
    this.addChild(this.handAnim),
    this.handAnim.autoDestroy = !0
}
,
canvas.app.battle.view.Pers.prototype.handFrameHandler = function() {
    var t = new canvas.px.Point(this.hePos[0],this.hePos[1])
      , e = this.sk.getChildByName("HAND13");
    e && this.handAnim && (t = e.toGlobal(t),
    t = this.toLocal(t),
    this.handAnim.position.set(t.x, t.y))
}
,
canvas.app.battle.view.Pers.prototype.handCompleteHandler = function() {
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.handFrameHandler, this),
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.handAnim, this.handCompleteHandler, this),
    this.handAnim = null
}
,
canvas.app.battle.view.Pers.prototype.showPet = function(t, e) {
    this.pet || (this.pet = new canvas.app.battle.view.Pet),
    1 == this.scale.x && (this.pet.scale.x = this.pet.scale.y = .8),
    e && (t = !0),
    t || this.pet.parent != this.petContainer || this.petContainer.removeChild(this.pet),
    t && (this.petContainer.addChild(this.pet),
    this.pet.load(e))
}
,
canvas.app.battle.view.Pers.prototype.DMG = function() {
    this.dmgConf && (this.baseLnk.view.showDmg(this.dmgConf),
    this.dmgConf = null)
}
,
canvas.app.battle.view.Pers.prototype.MV = function(t, e) {
    this.mvCurIter = t,
    this.mvCurDelta = e,
    this.inMV && this.skMoveClear(),
    this.inMV = !0,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.skMoveHandler, this)
}
,
canvas.app.battle.view.Pers.prototype.skMoveHandler = function() {
    this.mvCurIter--,
    0 < this.mvCurIter ? this.sk.x += this.mvCurDelta : this.skMoveClear()
}
,
canvas.app.battle.view.Pers.prototype.skMoveClear = function() {
    this.inMV = !1,
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.skMoveHandler, this)
}
,
canvas.app.battle.view.Pers.prototype.AFX = function() {}
,
canvas.app.battle.view.Pers.prototype.TURN = function() {
    var t = canvas.app.battle.model;
    "die" == this.sk.currentLabel && (this.deadFrame = this.sk.currentFrame - 1),
    this.isFuncTurn ? (this.isFuncTurn = !1,
    this._addFuncTurn({
        pers_id: this.persId
    })) : this.baseLnk.persMotionDone(this.persId),
    this.baseLnk.players[t.persId] && (this.baseLnk.players[t.persId].magicStandBase.visible = this.baseLnk.players[t.persId].magicStandBaseAura.visible = !0),
    this.baseLnk.players[t.oppId] && (this.baseLnk.players[t.oppId].magicStandBase.visible = this.baseLnk.players[t.oppId].magicStandBaseAura.visible = !0)
}
,
canvas.app.battle.view.Pers.prototype.POST = function() {
    this.sk.x = 0,
    this.gotoAndPlay(this.baseLnk.getPostLabel(this.persId))
}
,
canvas.app.battle.view.Pers.prototype.SND = function(e, a, s) {
    if (void 0 === e && (e = !0),
    void 0 === a && (a = ""),
    void 0 === s && (s = !1),
    !canvas.app.battle.model.islp3) {
        if (0 == arguments.length) {
            var t = this.sk.data.properties.ActionSound[this.sk.currentLabel];
            if (t && !t.std)
                return a = t.self,
                void this.baseLnk.sndPlayInternal(a, this.persSk)
        }
        try {
            if (e) {
                if (!this.sndConf)
                    return;
                this.sndConf.std ? this.baseLnk.sndPlay(this.sndConf.snd_name) : this.baseLnk.sndPlayInternal(this.sndConf.snd_name, this.persSk)
            } else
                s ? this.baseLnk.sndPlayInternal(a, this.persSk) : this.baseLnk.sndPlay(a)
        } catch (t) {
            canvas.app.battle.log("Pers.SND ERROR: " + t + "; url=" + this.persSkLink + ", soundID=" + a + ", normal=" + e + ", internal=" + s)
        }
    }
}
,
canvas.app.battle.view.Pers.prototype.destroy = function() {
    this.sk.destroy({
        children: !0
    }),
    this.clearAdditionalEffects(),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.battle.view.AddArrow = function(t, e, a, s, i) {
    canvas.px.Container.call(this),
    void 0 === a && (a = 0),
    void 0 === s && (s = 1),
    void 0 === i && (i = 0),
    this.fromPoint = t,
    this.toPoint = e,
    this.speedX = Math.abs(t.x - e.x) / 10,
    this.speedY = Math.abs(t.y - e.y) / 10,
    this.arrow = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_arrow")),
    this.arrow.anchor.set(.5, .5),
    this.arrow.scale.set(1.6 * s, 1.6 * s),
    this.arrow.rotation = canvas.Functions.degToRad(i),
    0 < a ? setTimeout(this.timerHandler.bind(this), 1e3 * a) : this.timerHandler()
}
,
canvas.app.battle.view.AddArrow.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.AddArrow.prototype.timerHandler = function() {
    this.arrow.position.set(this.fromPoint.x, this.fromPoint.y),
    this.addChild(this.arrow),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.battle.view.AddArrow.prototype.frameHandler = function() {
    this.arrow.x < this.toPoint.x ? (this.arrow.x += this.speedX,
    this.arrow.x > this.toPoint.x && (this.arrow.x = this.toPoint.x)) : this.arrow.x > this.toPoint.x && (this.arrow.x -= this.speedX,
    this.arrow.x < this.toPoint.x && (this.arrow.x = this.toPoint.x)),
    this.arrow.y < this.toPoint.y ? (this.arrow.y += this.speedY,
    this.arrow.y > this.toPoint.y && (this.arrow.y = this.toPoint.y)) : this.arrow.y > this.toPoint.y && (this.arrow.y -= this.speedY,
    this.arrow.y < this.toPoint.y && (this.arrow.y = this.toPoint.y)),
    this.arrow.x == this.toPoint.x && this.arrow.y == this.toPoint.y && this.destroy()
}
,
canvas.app.battle.view.AddArrow.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.parent && this.parent.removeChild(this),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.battle.view.AddSpell = function(t, e, a, s, i, n, o, r, c) {
    canvas.px.Container.call(this),
    void 0 === n && (n = !1),
    void 0 === o && (o = ""),
    void 0 === r && (r = ""),
    void 0 === c && (c = !1),
    this.baseLnk = t,
    this.centerHide = !!this.baseLnk.view.centerView.visible && c,
    this.whoseAnimFlag = o,
    this.position.set(e, a),
    s || "31" == r || "32" == r || "33" == r || "34" == r || "35" == r || "36" == r || (this.scale.x = -1),
    this.splMc = i,
    n || canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.splMc, this.destroy, this),
    this.centerHide && this.baseLnk.centerVisible(!1),
    this.addChild(this.splMc)
}
,
canvas.app.battle.view.AddSpell.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.AddSpell.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.splMc, this.destroy, this),
    this.parent && this.parent.removeChild(this),
    this.splMc.stop(),
    this.removeChild(this.splMc),
    this.splMc = null,
    this.parent != this.baseLnk.view.bgSpells && ("pers" == this.whoseAnimFlag ? canvas.app.battle.model.persAnimFlag = !1 : "opp" == this.whoseAnimFlag && (canvas.app.battle.model.oppAnimFlag = !1)),
    this.parent && this.parent.removeChild(this),
    this.centerHide && this.baseLnk.centerVisible(!0),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.battle.view.Pet = function() {
    canvas.px.Container.call(this),
    this.dieFlag = !1,
    this.deadFrame = 0,
    this.persId = 0
}
,
canvas.app.battle.view.Pet.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.Pet.prototype.load = function(t) {
    this.srcPet = t;
    t = this.srcPet.split("/");
    this.petName = t[t.length - 1].split(".")[0],
    this.srcPet = canvas.Config.petsPath + this.petName + "/" + this.petName,
    this.animation = new canvas.animation.Bot(this.srcPet),
    this.animation.frameEvent = canvas.app.battle.Event.ENTER_FRAME,
    this.animation.ready ? this.loadComplete() : canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.animation, this.loadComplete, this)
}
,
canvas.app.battle.view.Pet.prototype.loadComplete = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.animation, this.loadComplete, this),
    this.animation.x = 20,
    this.addChild(this.animation),
    this.animation.TURN = this.TURN.bind(this),
    this.animation.SND = this.SND.bind(this),
    this.dieFlag && this.deadFrame ? this.animation.gotoAndStop(this.deadFrame) : this.dieFlag ? this.animation.gotoAndPlay("die") : this.animation.gotoAndPlay("idle")
}
,
canvas.app.battle.view.Pet.prototype.TURN = function() {
    "die" == this.animation.currentLabel && (this.deadFrame = this.animation.currentFrame),
    this.dieFlag || this.animation.gotoAndPlay("idle"),
    this.intervalHandler()
}
,
canvas.app.battle.view.Pet.prototype.SND = function(t) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "pets/" + this.petName + "/" + t + ".mp3")
}
,
canvas.app.battle.view.Pet.prototype.playBaff = function(t) {
    var e;
    if (this.animation) {
        switch (t) {
        case 1:
            e = "baf_1";
            break;
        case 2:
            e = "baf_2"
        }
        this.animation.labels[e] ? this.animation.gotoAndPlay(e) : (this.idInterval && clearTimeout(this.idInterval),
        this.idInterval = setTimeout(this.intervalHandler.bind(this), 1e3))
    }
}
,
canvas.app.battle.view.Pet.prototype.intervalHandler = function() {
    this.addFuncTurn && this.addFuncTurn({
        pers_id: this.persId
    })
}
,
canvas.app.battle.view.Pet.prototype.die = function() {
    !this.dieFlag && this.animation && (this.dieFlag = !0,
    this.animation.gotoAndPlay("die"))
}
,
canvas.app.battle.view.Pet.prototype.idle = function() {
    this.dieFlag && (this.dieFlag = !1,
    this.animation && this.animation.gotoAndPlay("idle"))
}
,
canvas.app.battle.view.DmgFly = function(t, e) {
    canvas.px.Container.call(this),
    this.ARR_Y = [70, 61.3, 54.55, 49.7, 46.8, 45.85, 45.85, 45.7, 45.6, 45.35, 44.95, 44.65, 44.15, 43.6, 43, 42.3, 41.6, 40.8, 39.85, 38.95, 37.9, 36.8, 35.65, 34.45, 33.1, 31.75, 30.3, 28.75, 27.2, 25.45, 23.75, 21.95, 20.1, 18.1, 16.15, 14.05, 11.85, 9.6, 7.3, 4.95, 2.5, 0],
    this.ARR_A = [0, .36, .64, .84, .96, 1, 1, 1, .99, .99, .98, .97, .96, .95, .94, .92, .91, .89, .87, .85, .83, .8, .78, .75, .72, .69, .66, .63, .59, .55, .52, .48, .44, .39, .35, .3, .26, .21, .16, .11, .05, 0];
    var a, s, i = canvas.app.battle.model;
    switch (canvas.app.battle.Const.PERS_POS_X[t.tar] ? (this.x = canvas.app.battle.Const.PERS_POS_X[t.tar],
    this.dX = this.x + Math.floor(90 * Math.random() - 25) * ("pers" == t.tar ? 0 < i.persDmgCnt ? 1 : 0 : 0 < i.oppDmgCnt ? -1 : 0),
    this.dX_mir = this.x + Math.floor(40 * Math.random() + 25) * ("pers" == t.tar ? 0 < i.persDmgCnt ? -1 : 0 : 0 < i.oppDmgCnt ? 1 : 0),
    this.whose_dmg = t.tar) : (canvas.app.battle.log("DmgFly WARN: dmg_fly, unknown target = " + t.tar, 16711680),
    this.dX = this.x),
    this.y = 20 * e + 60,
    this.yy = this.y,
    this.dV = .7 * Math.random() + .65,
    this.dVx = .065,
    "pers" == this.whose_dmg ? (i.persDmgCnt++,
    8 < i.persDmgCnt && (this.dV *= 1.6)) : "opp" == this.whose_dmg && (i.oppDmgCnt++,
    8 < i.oppDmgCnt && (this.dV *= 1.6)),
    1 == t.crit && (t.kick = canvas.app.battle.Const.DMG_KICK_CRIT),
    t.kick) {
    case canvas.app.battle.Const.DMG_KICK_DODGE:
        a = 39168,
        s = canvas.Translator.getText(16),
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_WOUND:
        a = 16777215,
        s = this.val2str(t.val);
        break;
    case canvas.app.battle.Const.DMG_KICK_CRIT:
        a = 16711680,
        s = this.val2str(t.val);
        break;
    case canvas.app.battle.Const.DMG_KICK_BLOCK:
        a = 170,
        s = canvas.Translator.getText(31),
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_CURE:
        a = 39168,
        s = this.val2str(t.val),
        this.dX = this.dX_mir;
        break;
    case canvas.app.battle.Const.DMG_KICK_MANA:
        a = 4605695,
        s = this.val2str(t.val),
        this.dX = this.dX_mir;
        break;
    case canvas.app.battle.Const.DMG_KICK_ABSORB:
        a = 16776960,
        s = canvas.Translator.getText(17) + " " + String(t.val),
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_RESIST:
        a = 16711935,
        s = canvas.Translator.getText(18) + " " + String(t.val) + "%",
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_IMMUNITY:
        a = 65535,
        s = canvas.Translator.getText(46),
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_NOCHANCE:
        a = 65535,
        s = canvas.Translator.getText(47),
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_FULLRES:
        a = 65535,
        s = canvas.Translator.getText(18),
        this.dX = this.x;
        break;
    default:
        canvas.app.battle.log("DmgFly WARN: showDMG unknown kick = " + t.kick, 16711680)
    }
    i = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_20_BOLD_STROKE,a,30,20,"center");
    i.text = s,
    this.addChild(i),
    this.dmg_fly_index = 0,
    this.updatePos(),
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.battle.view.DmgFly.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.DmgFly.prototype.val2str = function(t) {
    return 0 < t ? "+" + String(t) : String(t)
}
,
canvas.app.battle.view.DmgFly.prototype.frameHandler = function() {
    var t = canvas.app.battle.model;
    this.dmg_fly_index++,
    this.dmg_fly_index < this.ARR_A.length ? this.updatePos() : ("pers" == this.whose_dmg ? (t.persDmgCnt--,
    t.persDmgCnt < 0 && (t.persDmgCnt = 0)) : "opp" == this.whose_dmg && (t.oppDmgCnt--,
    t.oppDmgCnt < 0 && (t.oppDmgCnt = 0)),
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.parent.removeChild(this),
    this.destroy({
        children: !0
    }))
}
,
canvas.app.battle.view.DmgFly.prototype.updatePos = function() {
    this.y = this.yy + this.ARR_Y[this.dmg_fly_index] * this.dV,
    this.alpha = this.ARR_A[this.dmg_fly_index] * this.dV,
    1 < Math.abs(this.x - this.dX) && (this.x -= (this.x - this.dX) * this.dVx)
}
,
canvas.app.battle.view.ComboHint = function() {
    canvas.px.Container.call(this),
    this.image = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_combo_hint")),
    this.image.scale.set(0, 0),
    this.image.anchor.set(.5, .5),
    this.addChild(this.image),
    this.state = !1,
    this.delayIndex = 0,
    canvas.EventManager.addEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.battle.view.ComboHint.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.ComboHint.prototype.frameHandler = function() {
    var t;
    this.state ? 15 < this.delayIndex ? this.image.alpha <= 0 ? this.finish() : (this.image.y += 4,
    this.image.alpha -= .15) : this.delayIndex++ : 1 <= this.image.scale.x ? (this.state = !0,
    this.image.scale.set(1, 1)) : (t = 1 < (t = this.image.scale.x + .1) ? 1 : t,
    this.image.scale.set(t, t))
}
,
canvas.app.battle.view.ComboHint.prototype.finish = function() {
    canvas.EventManager.removeEventListener(canvas.app.battle.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.parent.removeChild(this),
    this.destroy({
        children: !0
    })
}
,
canvas.app.battle.view.elements.PopupButton = function(t) {
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "battle_popup_btn")),
    this.field = new canvas.ui.Text(canvas.app.battle.model.isBold ? canvas.Const.FONT_TAHOMA_10_BOLD : canvas.Const.FONT_TAHOMA_10,16769466,73,18,"center"),
    this.addChild(this.field),
    this.field.position.set(18, 1),
    this.setLabel(t),
    this.sprite.hitArea = new canvas.px.Rectangle(14,0,this.width - 28,18)
}
,
canvas.app.battle.view.elements.PopupButton.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.battle.view.elements.PopupButton.prototype.setLabel = function(t) {
    this.field.text = t
}
,
canvas.app.battle.view.elements.BowItem = function() {
    this._image = !1,
    Object.defineProperty(this, "image", {
        get: function() {
            return this._image
        },
        set: function(t) {
            this._image = t,
            "" != this._image ? (this.imageView ? this.imageView.setImage(this._image) : (this.imageView = new canvas.ui.Image(this._image),
            this.container.addChildAt(this.imageView, 0)),
            this.count = this._count,
            this.buttonMode = !0,
            this.gradient.visible = !0,
            this.countBack.visible = !0,
            this.countField.visible = !0) : (this.locked = !1,
            this.selected = !1,
            this.buttonMode = !1,
            this.gradient.visible = !1,
            this.countBack.visible = !1,
            this.countField.visible = !1)
        }
    }),
    this._locked = !1,
    Object.defineProperty(this, "locked", {
        get: function() {
            return this._locked
        },
        set: function(t) {
            this._locked = t,
            this.buttonMode = !this._locked,
            this.wallLock.visible = this._locked
        }
    }),
    this._selected = !1,
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            this._selected = t,
            this.selection.visible = this._selected
        }
    }),
    this._count = !1,
    Object.defineProperty(this, "count", {
        get: function() {
            return this._count
        },
        set: function(t) {
            this._count = t,
            this.countField.text = this._count.toString()
        }
    }),
    this._coolDownLeft = !1,
    Object.defineProperty(this, "coolDownLeft", {
        get: function() {
            return this._coolDownLeft
        },
        set: function(t) {
            this._coolDownLeft = t,
            0 < this._coolDownLeft && (this.timeout = setTimeout(this.timerHandler.bind(this), 1e3 * this._coolDownLeft),
            this.locked = !0)
        }
    }),
    canvas.px.Container.call(this),
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.gradient = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_item_gradient")),
    this.container.addChild(this.gradient),
    this.countBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_item_count_back")),
    this.container.addChild(this.countBack),
    this.countBack.x = 36,
    this.countBack.y = 45,
    this.countField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,16770533,25,16,"center"),
    this.countField.x = 35,
    this.countField.y = 45,
    this.container.addChild(this.countField),
    this.selection = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_item_selector")),
    this.container.addChild(this.selection),
    this.selection.x = -1,
    this.selection.y = -1,
    this.wallLock = new canvas.px.Graphics,
    this.wallLock.beginFill(0, .6),
    this.wallLock.drawRect(0, 0, 60, 60),
    this.wallLock.endFill(),
    this.container.addChild(this.wallLock),
    this.wallLock.x = -1,
    this.wallLock.y = -1,
    this.lock = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_bow_item_lock")),
    this.wallLock.addChild(this.lock),
    this.lock.x = 2,
    this.lock.y = 1,
    this.wallLock.visible = !1,
    this.selection.visible = !1,
    this.countField.visible = !1,
    this.countBack.visible = !1,
    this.gradient.visible = !1,
    this.buttonMode = !1,
    this.interactive = !0,
    this.mouseover = this.overHandler.bind(this),
    this.mouseout = this.outHandler.bind(this),
    this.click = this.clickHandler.bind(this)
}
,
canvas.app.battle.view.elements.BowItem.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.battle.view.elements.BowItem.prototype.timerHandler = function() {
    this.locked = !1
}
,
canvas.app.battle.view.elements.BowItem.prototype.overHandler = function() {
    this.image && "undefined" != typeof artifactAltSimple && artifactAltSimple("aa" + this.effectID.toString(), 2)
}
,
canvas.app.battle.view.elements.BowItem.prototype.outHandler = function() {
    "undefined" != typeof artifactAltSimple && artifactAltSimple("aa" + this.effectID.toString(), 0)
}
,
canvas.app.battle.view.elements.BowItem.prototype.clickHandler = function() {
    this.buttonMode && (this._locked || canvas.EventManager.dispatchEvent(canvas.app.battle.Event.USE_EFFECT, null, this.effectID))
}
,
canvas.app.location.Main = function(t, e, a) {
    canvas.px.Container.call(this),
    this.model = t,
    this.model.init(),
    this.hintManager = e,
    this.windowsManager = a,
    canvas.EventManager.addEventListener(canvas.app.location.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.RESIZE, null, this.resizeHandler, this),
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    this.windowsContainer = new canvas.px.Container,
    this.view = new canvas.app.location.View(this),
    this.addChild(this.view),
    this.addChild(this.windowsContainer),
    this.addChild(this.hintContainer),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, this.windowsManager, this.windowOpenHandler, this),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, this.windowsManager, this.windowCloseHandler, this),
    setInterval(this.timerHandler.bind(this), 1e3),
    setInterval(this.timer60Handler.bind(this), 6e4)
}
,
canvas.app.location.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.Main.prototype.resizeHandler = function() {
    this.resize(this.model.width, this.model.height)
}
,
canvas.app.location.Main.prototype.resize = function(t, e) {
    this.hintManager.init(this.hintContainer, t, e),
    this.model.width = t,
    this.model.height = e,
    this.view.resize(t, e)
}
,
canvas.app.location.Main.prototype.handlerKey = function(t) {
    var e;
    document.activeElement && "HTMLInputElement" == document.activeElement.constructor.name || (e = t.params.globalKeyCode,
    t.params.altKey,
    t.params.ctrlKey,
    t = t.params.shiftKey,
    e === canvas.Const.KEYS.L && t && canvas.Log.show(canvas.Log.LOCATION))
}
,
canvas.app.location.Main.prototype.swfObject = function(t) {
    var e, a;
    if (t)
        for (e in canvas.app.location.log("swfObjectHandler", 65280),
        t)
            if (a = t[e],
            canvas.app.location.log("DATA[" + e + "] :: " + t[e]),
            canvas.Functions.testStatus(a))
                switch (e) {
                case "common|area_conf":
                    this.model.isInst || (this.model.parser.unpackTownConfObject(a.area_conf),
                    this.view.buildAll());
                    break;
                case "instance|conf":
                    this.model.isInst && (this.model.parser.unpackTownConfObject(this.model.parser.instanceToLocation(a, t.server_time)),
                    this.view.buildAll());
                    break;
                case "common|event_conf":
                    this.model.parser.unpackEventConfObject(a.event_conf),
                    this.view.buildEvent();
                    break;
                case "common|resurrection_modes":
                    this.model.parseResurrectData(a.buttons),
                    this.view.buildResurect();
                    break;
                case "fight|count":
                    this.model.NUM_BIG_FIGHT = a.fight_count,
                    this.view.buildFight();
                    break;
                case "front|conf":
                    this.model.parseFronts(t),
                    this.view.updateFronts();
                    break;
                case "front|locations":
                    this.view.mapSide.miniMap.swfObject(t);
                    break;
                case "user|view":
                    this.model.USER_GHOST = a.dead;
                    break;
                case "magic_mirror|end_time":
                    this.model.magicMirrorEndTime = a.magicMirrorEndTime,
                    this.view.updateMagicMirror();
                    break;
                case "common|action_complete":
                    this.model.inWaitingAnswer = !1
                }
}
,
canvas.app.location.Main.prototype.sendData = function(t, e) {
    canvas.app.location.log("swf_transfer:sendData " + t + " " + e),
    "undefined" != typeof swfTransfer && swfTransfer("game", t, e)
}
,
canvas.app.location.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.location.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.location.Main.prototype.windowOpenHandler = function(t) {
    this.view.locSide.location_cont.filters = [canvas.Functions.getGreyScale()]
}
,
canvas.app.location.Main.prototype.windowCloseHandler = function(t) {
    this.windowsManager.currentWindow === this.view.resurrectWindow ? this.view.resurrectWindow = null : canvas.app.location.model.USER_GHOST || (this.view.locSide.location_cont.filters = [])
}
,
canvas.app.location.Main.prototype.timerHandler = function() {
    this.model.fronts.frontsPanelEnabled && this.view.frontsPanel.updateTimer(),
    this.model.fronts.frontsEnabled && this.view.frontsIcon.updateTimer(),
    this.view.campaignInfo && this.view.campaignInfo.data && (this.view.campaignInfo.data.finishTime > this.model.serverTime.getTime() ? this.view.campaignInfo.updateTime() : (this.view.campaignInfo.destroy(),
    this.view.campaignInfo = null)),
    this.view.popupWheelFortune && (this.view.popupWheelFortune.parent ? this.view.popupWheelFortune.updateTime() : this.view.popupWheelFortune = null)
}
,
canvas.app.location.Main.prototype.timer60Handler = function() {
    this.loadFrontsData()
}
,
canvas.app.location.Main.prototype.loadFrontsData = function(t, e) {
    if(top?.document.gameFlags.hideFronts == true) {
        return
    }
    if (null == t && (t = "conf"),
    null == e && (e = ""),
    this.model.frontsAction = t,
    this.model.fronts.frontsEnabled)
        switch (t) {
        case canvas.app.location.Const.ACTION_CONF:
            this.model.resetFrontsCooldown(),
            front_conf();
            break;
        case canvas.app.location.Const.ACTION_FIGHT_JOIN:
            confirm_front(e);
            break;
        case canvas.app.location.Const.ACTION_FIGHT_START:
            front_fight_start()
        }
    else
        this.view.updateFronts()
}
,
canvas.app.location.Main.prototype.joinFrontsBattle = function(t) {
    this.loadFrontsData(canvas.app.location.Const.ACTION_FIGHT_JOIN, t)
}
,
canvas.app.location.Main.prototype.startFrontsBattle = function(t) {
    this.loadFrontsData(canvas.app.location.Const.ACTION_FIGHT_START)
}
,
canvas.app.location.Model = function(t) {
    var e, a, s, i, n;
    if (this.par = t,
    this.serverTime = new canvas.utils.ServerTime(parseInt(t.current_time)),
    this.parser = new canvas.app.location.Parser,
    this.finder = new canvas.app.location.Finder,
    this.RACE_HUM = "hum",
    this.RACE_MAG = "mag",
    this.firstResize = !0,
    this.CfgArea = null != t.area_conf_json ? JSON.parse(t.area_conf_json) : null != t.instance_conf ? this.parser.instanceToLocation(JSON.parse(t.instance_conf), t.server_time) : {},
    this.isInst = null != t.instance_conf,
    this.CfgEvent = null != t.event_conf_json ? JSON.parse(t.event_conf_json) : {},
    this.CfgFight = t.fight_count,
    this.CfgNav = null != t.CfgLink ? t.CfgLink : "images/locale/ru/compass_conf.xml",
    this.CasinoLink = null != t.casino_link ? t.casino_link : "",
    this.mRace = null == t.race || 1 == t.race ? this.RACE_HUM : this.RACE_MAG,
    this.noUserValue = "1" == t.no_user_value,
    this.FinishLocation = "",
    this.FinishType = "",
    this.FlagLocation = "",
    this.TRANSITION_POSSIBLE = !1,
    this.WITH_MAP = !0,
    this.IsBold = null == t.nobold || 1 != t.nobold,
    this.USER_NUB = null != t.nub && 1 == t.nub,
    this.USER_GHOST = null != t.ghost && 1 == t.ghost,
    this.OBJ_NUB_LOC_ITEMS = {
        "human-city.swf": 5,
        "nubi_village.swf": 2,
        "magm-city.swf": 7,
        "nubi_village_mag.swf": 4
    },
    this.STRINGS_ARR = {},
    this.OBJ_WORLD = {
        locs: {},
        conf: {}
    },
    this.OBJ_TOWN = {},
    this.OBJ_EVENT = {
        tasks: {}
    },
    this.OBJ_LOCVERGE = {},
    this.NUM_LOCATIONS = 0,
    this.ARR_LOCATIONS = [],
    this.NUM_BIG_FIGHT = 0,
    this.MapCfgLink = null != t.MapCfgLink ? t.MapCfgLink : "images/locale/ru/world_conf.xml",
    this.MapUpdLink = null != t.MapUpdLink ? t.MapUpdLink : "images/swf/dod_world/my_flag.xml",
    this.MapNavLink = this.CfgNav,
    this.World1_Path = null != t.World1_Path ? t.World1_Path : "images/swf/world_res/world1/",
    this.World2_Path = null != t.World2_Path ? t.World2_Path : "images/swf/world_res/world2/",
    this.Areas_Path = null != t.Areas_Path ? t.Areas_Path : "images/swf/world_res/areas/",
    this.AreasXML_Path = null != t.AreasXML_Path ? t.AreasXML_Path : "images/locale/ru/world_xml/",
    this.MORNING_TIME = new Date(null,null,null,6,30),
    this.EVENING_TIME = new Date(null,null,null,20,30),
    this.MAIN_HIDDEN = "main_hidden",
    this.WITHOUT_FARM = "$WithoutFarm",
    this.MODE_AREA = "mode_area",
    this.MODE_NPC = "mode_npc",
    this.MODE_HOUSE = "mode_house",
    this.TYPE_AREA = "type_area",
    this.TYPE_NPC = "type_npc",
    this.TYPE_BOT = "type_bot",
    this.TYPE_ACTION = "type_action",
    this.TYPE_INSTATNS = "type_instance",
    this.MIN_STAGE_WIDTH = 831,
    this.MIN_STAGE_HEIGHT = 290,
    this.MAX_STAGE_WIDTH = 10600,
    this.MAX_STAGE_HEIGHT = 660,
    this.MAP_WIDTH = 300,
    this.MAP_HEIGHT = 610,
    this.S_TIME_TRANSITION = "S_TIME_TRANSITION",
    this.S_TRANSITION_POSSIBLE = "S_TRANSITION_POSSIBLE",
    this.S_ARE_YOU_ASSURED = "S_ARE_YOU_ASSURED",
    this.S_YES = "S_YES",
    this.S_CANCEL = "S_CANCEL",
    this.S_CONFIRMATION = "S_CONFIRMATION",
    this.S_LOCATIONS = "S_LOCATIONS",
    this.S_OBJECTS = "S_OBJECTS",
    this.S_NPCs = "S_NPCs",
    this.S_OPEN_MAP = "S_OPEN_MAP",
    this.S_CLOSE_MAP = "S_CLOSE_MAP",
    this.S_OPEN_LIST = "S_OPEN_LIST",
    this.S_CLOSE_LIST = "S_CLOSE_LIST",
    this.S_MAP = "S_MAP",
    this.S_ACTION_IN_PROCESS = "S_ACTION_IN_PROCESS",
    this.S_OPEN_WORLD_MAP = "S_OPEN_WORLD_MAP",
    this.S_REFRESH_MAP = "S_REFRESH_MAP",
    this.S_ZOOM_IN = "S_ZOOM_IN",
    this.S_ZOOM_OUT = "S_ZOOM_OUT",
    this.S_SHOW_EVENT = "S_SHOW_EVENT",
    this.S_GREAT_FIGHT = "S_GREAT_FIGHT",
    this.S_TO_YOU = "S_TO_YOU",
    this.S_TO_ALL = "S_TO_ALL",
    this.S_RESURECT = "S_RESURECT",
    this.S_RESURECT_WILL = "S_RESURECT_WILL",
    this.S_TO_BATTLE = "S_TO_BATTLE",
    this.S_CASINO = "S_CASINO",
    this.S_RESURRECT_MONEY = "S_RESURRECT_MONEY",
    this.S_RESURRECT_CAPITAL = "S_RESURRECT_CAPITAL",
    this.S_DONT_RESURRECT = "S_DONT_RESURRECT",
    this.S_MONTH_JAN = "S_MONTH_JAN",
    this.S_MONTH_FEB = "S_MONTH_FEB",
    this.S_MONTH_MAR = "S_MONTH_MAR",
    this.S_MONTH_APR = "S_MONTH_APR",
    this.S_MONTH_MAY = "S_MONTH_MAY",
    this.S_MONTH_JUN = "S_MONTH_JUN",
    this.S_MONTH_JUL = "S_MONTH_JUL",
    this.S_MONTH_AUG = "S_MONTH_AUG",
    this.S_MONTH_SEP = "S_MONTH_SEP",
    this.S_MONTH_OCT = "S_MONTH_OCT",
    this.S_MONTH_NOV = "S_MONTH_NOV",
    this.S_MONTH_DEC = "S_MONTH_DEC",
    this.blinkIds = [],
    this.tech_works_start = 1e3 * parseInt(t.tech_works_start),
    this.tech_current_time = 1e3 * parseInt(t.current_time),
    this.tech_works_stop = 1e3 * parseInt(t.tech_works_stop),
    this.tech_works_name = t.tech_works_name,
    this.tech_works_description = t.tech_works_description,
    this.info_start = 1e3 * parseInt(t.info_start),
    this.info_current_time = 1e3 * parseInt(t.current_time),
    this.info_stop = 1e3 * parseInt(t.info_stop),
    this.info_name = t.info_name,
    this.info_description = t.info_description,
    this.serverTimeZoneOffset = null == t.time_zone ? 240 : parseInt(t.time_zone),
    this.NPCEvents = [],
    this.ww = 0,
    this.hh = 0,
    this.diceGameEnabled = t.dice_game_enabled,
    this.translatePath = "",
    this.frontsURL = null != t.frontsURL ? t.frontsURL : "",
    this.fronts = new canvas.data.location.DFronts,
    this.activityURL = t.activity_url,
    this.castPeriodFinish = 0,
    this.resurrectData = null,
    this.magicMirrorEndTime = null == t.magicMirrorEndTime ? 0 : parseInt(t.magicMirrorEndTime),
    this.actionConfirms = !0,
    this.campaignData = null,
    this.transitionLnk = "",
    this.waitRefresh = !1,
    this.inWaitingAnswer = !1,
    this.reqTime = 0,
    this.m_awardUrl = t.bannerurl,
    this.award_msg = t.bannermsg,
    this.brilliant_msg = t.br_msg,
    this.brilliant_link = t.br_link,
    this.frontsAction = "",
    this.canvasMinigamesFlag = 0 < parseInt(t.canvasMinigamesFlag),
    this.manorAutoTurn = !1,
    this.wfEnabled = "1" == t.wheel_fortune,
    this.wfUrl = t.wf_url,
    this.wfMsg = t.wf_msg,
    this.wfExpireTime = t.wf_expire_time,
    null != t.blink)
        for (s = (a = t.blink.split("|")).length,
        e = 0; e < s; e++)
            i = parseInt(a[e]),
            this.blinkIds.indexOf(i) < 0 && this.blinkIds.push(i);
    null != t.resurrect_buttons && this.parseResurrectData(JSON.parse(t.resurrect_buttons)),
    this.ok(t.user_campaign) && (n = JSON.parse(t.user_campaign),
    this.campaignData = new canvas.data.location.DCampaign,
    this.campaignData.title = n.title,
    this.campaignData.picture = n.picture,
    this.campaignData.finishTime = n.time_expire,
    this.campaignData.finishTime <= this.serverTime.getTime() && (this.campaignData = null)),
    t = null != t.labels ? t.labels.split("|") : ["время до перехода", "переход возможен", "Подтверждение", "Вы уверены?", "да", "отмена", "локации", "объекты", "персонажи", "Открыть миникарту", "Закрыть миникарту", "Карта", "Выполняется действие", "Карта мира", "Обновить", "Уменьшить", "Увеличить", "великие битвы", "Вами", "Всего", "Воскреснуть", "Желаете воскреснуть?", "В бой!", "Однорукий бандит", "Здесь за", "В столице", "Не воскрешаться", "Января", "Февраля", "Марта", "Апреля", "Мая", "Июня", "Июля", "Августа", "Сентября", "Октября", "Ноября", "Декабря"],
    this.STRINGS_ARR[this.S_TIME_TRANSITION] = t[0],
    this.STRINGS_ARR[this.S_TRANSITION_POSSIBLE] = t[1],
    this.STRINGS_ARR[this.S_CONFIRMATION] = t[2],
    this.STRINGS_ARR[this.S_ARE_YOU_ASSURED] = t[3],
    this.STRINGS_ARR[this.S_YES] = t[4],
    this.STRINGS_ARR[this.S_CANCEL] = t[5],
    this.STRINGS_ARR[this.S_LOCATIONS] = t[6],
    this.STRINGS_ARR[this.S_OBJECTS] = t[7],
    this.STRINGS_ARR[this.S_NPCs] = t[8],
    this.STRINGS_ARR[this.S_OPEN_MAP] = t[9],
    this.STRINGS_ARR[this.S_CLOSE_MAP] = t[10],
    this.STRINGS_ARR[this.S_MAP] = t[11],
    this.STRINGS_ARR[this.S_ACTION_IN_PROCESS] = t[12],
    this.STRINGS_ARR[this.S_OPEN_WORLD_MAP] = t[13],
    this.STRINGS_ARR[this.S_REFRESH_MAP] = t[14],
    this.STRINGS_ARR[this.S_ZOOM_OUT] = t[15],
    this.STRINGS_ARR[this.S_ZOOM_IN] = t[16],
    this.STRINGS_ARR[this.S_GREAT_FIGHT] = t[17],
    this.STRINGS_ARR[this.S_TO_YOU] = null != t[18] ? t[18] : "Вами",
    this.STRINGS_ARR[this.S_TO_ALL] = null != t[19] ? t[19] : "Всего",
    this.STRINGS_ARR[this.S_RESURECT] = null != t[20] ? t[20] : "Воскреснуть",
    this.STRINGS_ARR[this.S_RESURECT_WILL] = null != t[21] ? t[21] : "Желаете воскреснуть?",
    this.STRINGS_ARR[this.S_TO_BATTLE] = null != t[22] ? t[22] : "В бой!",
    this.STRINGS_ARR[this.S_CASINO] = null != t[23] ? t[23] : "Однорукий бандит",
    this.STRINGS_ARR[this.S_RESURRECT_MONEY] = null != t[24] ? t[24] : "Здесь за",
    this.STRINGS_ARR[this.S_RESURRECT_CAPITAL] = null != t[25] ? t[25] : "В столице",
    this.STRINGS_ARR[this.S_DONT_RESURRECT] = null != t[26] ? t[26] : "Не воскрешаться",
    this.STRINGS_ARR[this.S_MONTH_JAN] = null != t[27] ? t[27] : "Января",
    this.STRINGS_ARR[this.S_MONTH_FEB] = null != t[28] ? t[28] : "Февраля",
    this.STRINGS_ARR[this.S_MONTH_MAR] = null != t[29] ? t[29] : "Марта",
    this.STRINGS_ARR[this.S_MONTH_APR] = null != t[30] ? t[30] : "Апреля",
    this.STRINGS_ARR[this.S_MONTH_MAY] = null != t[31] ? t[31] : "Мая",
    this.STRINGS_ARR[this.S_MONTH_JUN] = null != t[32] ? t[32] : "Июня",
    this.STRINGS_ARR[this.S_MONTH_JUL] = null != t[33] ? t[33] : "Июля",
    this.STRINGS_ARR[this.S_MONTH_AUG] = null != t[34] ? t[34] : "Августа",
    this.STRINGS_ARR[this.S_MONTH_SEP] = null != t[35] ? t[35] : "Сентября",
    this.STRINGS_ARR[this.S_MONTH_OCT] = null != t[36] ? t[36] : "Октября",
    this.STRINGS_ARR[this.S_MONTH_NOV] = null != t[37] ? t[37] : "Ноября",
    this.STRINGS_ARR[this.S_MONTH_DEC] = null != t[38] ? t[38] : "Декабря",
    this.months = [this.STRINGS_ARR[this.S_MONTH_JAN], this.STRINGS_ARR[this.S_MONTH_FEB], this.STRINGS_ARR[this.S_MONTH_MAR], this.STRINGS_ARR[this.S_MONTH_APR], this.STRINGS_ARR[this.S_MONTH_MAY], this.STRINGS_ARR[this.S_MONTH_JUN], this.STRINGS_ARR[this.S_MONTH_JUL], this.STRINGS_ARR[this.S_MONTH_AUG], this.STRINGS_ARR[this.S_MONTH_SEP], this.STRINGS_ARR[this.S_MONTH_OCT], this.STRINGS_ARR[this.S_MONTH_NOV], this.STRINGS_ARR[this.S_MONTH_DEC]],
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.LOCATION)
}
,
canvas.app.location.Model.prototype.init = function() {
    this.parser.unpackTownConfObject(this.CfgArea),
    this.parser.unpackEventConfObject(this.CfgEvent),
    this.NUM_BIG_FIGHT = parseInt(this.CfgFight),
    this.parser.unpackNavConf(canvas.ResourceLoader.get("navigate").data)
}
,
canvas.app.location.Model.prototype.getCoordinates = function() {
    var t, e = null, a = canvas.Functions.getSessTarget(), e = a.target;
    this.autoPenalty = a.autoPenalty,
    e ? (t = e.split("|"),
    this.FinishLocation = t[0],
    this.FinishType = t[1],
    null == this.FinishType && (this.FinishType = "location")) : (this.FinishLocation = e,
    this.FinishType = null),
    this.FlagLocation == this.FinishLocation && "location" == this.FinishType && (a.manor ? this.manorAutoEnter = !0 : this.finishSessTarget())
}
,
canvas.app.location.Model.prototype.finishSessTarget = function() {
    canvas.Functions.deleteSessTarget(),
    this.FinishLocation = null
}
,
canvas.app.location.Model.prototype.parseFronts = function(t) {
    var e, a, s, i, n = new Date;
    if (t) {
        for (s in e = t["front|conf"],
        t.state,
        this.fronts.frontTitle = e.frontTitle,
        this.fronts.humLocs = e.humLocs,
        this.fronts.magLocs = e.magLocs,
        this.fronts.locationsData = new Array,
        e.locationsData)
            a = e.locationsData[s],
            (i = new canvas.data.location.DFrontsLoc).id = s,
            "" != a.image && (i.image = a.image),
            i.title = a.title,
            i.status = a.status,
            i.owner = this.parseRace(a.owner),
            i.description = a.description,
            i.cooldown = n.getTime() + 1e3 * (a.nextEvent <= 0 ? 10 : a.nextEvent),
            i.cooldownStart = n.getTime(),
            i.fightAvail = 1 == parseInt(a.fightAvail),
            i.fightID = a.fight_id,
            i.weight = a.weight,
            this.fronts.locationsData.push(i),
            e.currentLocationId == s && (this.fronts.currentLocationData = i),
            e.availableLocationId == s && (this.fronts.availableLocationData = i);
        this.fronts.locationsData.sort(function(t, e) {
            return t.weight - e.weight
        })
    } else
        this.fronts.currentLocationData = new canvas.data.location.DFrontsLoc,
        this.fronts.currentLocationData.owner = 1,
        this.fronts.currentLocationData.status = 2,
        this.fronts.currentLocationData.cooldown = n.getTime() + 36e5,
        this.fronts.currentLocationData.cooldownStart = n.getTime(),
        this.fronts.frontsEnabled = !0,
        this.fronts.frontsPanelEnabled = !0,
        this.fronts.frontTitle = "Front title",
        this.fronts.humLocs = 10,
        this.fronts.locationsData = [new canvas.data.location.DFrontsLoc, new canvas.data.location.DFrontsLoc, new canvas.data.location.DFrontsLoc, new canvas.data.location.DFrontsLoc, new canvas.data.location.DFrontsLoc],
        this.fronts.magLocs = 60
}
,
canvas.app.location.Model.prototype.resetFrontsCooldown = function() {
    for (var t, e = this.fronts.locationsData.length, a = 0; a < e; a++)
        (t = this.fronts.locationsData[a]).cooldownStart = Date.now(),
        t.cooldown = t.cooldownStart + 7e4
}
,
canvas.app.location.Model.prototype.parseRace = function(t) {
    return 1 < t ? -1 : t
}
,
canvas.app.location.Model.prototype.parseResurrectData = function(t) {
    var e, a, s;
    for (s in this.resurrectData = null,
    t)
        (e = t[s]).id && (null == this.resurrectData && (this.resurrectData = new Array),
        (a = new canvas.data.location.DResurrect).id = parseInt(e.id),
        a.title = e.title,
        a.enabled = e.state,
        a.error = e.error,
        a.picture = e.picture,
        this.resurrectData.push(a))
}
,
canvas.app.location.Model.prototype.ok = function(t) {
    return null != t && null != t && "null" != t && "undefined" != t
}
,
canvas.app.location.Const = {
    ACTION_CONF: "conf",
    ACTION_FIGHT_START: "fight_start",
    ACTION_FIGHT_JOIN: "fight_join",
    BRILLIANT_IMAGE_PATH: "images/m_dmd.gif",
    POPUP_ZERO_LEVEL: "POPUP_ZERO_LEVEL",
    POPUP_ACTIVITY: "POPUP_ACTIVITY",
    LOC_SMALL_WIDTH: 986,
    LOC_MID_WIDTH: 1986,
    LOC_SMALL_HEIGHT: 326,
    LOC_MID_HEIGHT: 600
},
canvas.app.location.Event = {
    ENTER_FRAME: "Location.ENTER_FRAME",
    HINT_ADD: "Location.HINT_ADD",
    HINT_REMOVE: "Location.HINT_REMOVE",
    POPUP_WIN_CLICK_OK: "Location.POPUP_WIN_CLICK_OK",
    POPUP_WIN_CLICK_CANCEL: "Location.POPUP_WIN_CLICK_CANCEL",
    ITEM_OVER: "Location.ITEM_OVER",
    ITEM_OUT: "Location.ITEM_OUT",
    ITEM_CLICK: "Location.ITEM_CLICK",
    ANIM_OVER: "Location.ANIM_OVER",
    ANIM_OUT: "Location.ANIM_OUT",
    ANIM_CLICK: "Location.ANIM_CLICK",
    MOVE_TO_ANIM: "Location.MOVE_TO_ANIM",
    WAY_OVER: "Location.WAY_OVER",
    WAY_OUT: "Location.WAY_OUT",
    WAY_CLICK: "Location.WAY_CLICK",
    ZOOM_IN: "Location.ZOOM_IN",
    ZOOM_OUT: "Location.ZOOM_OUT",
    REFRESH_MAP: "Location.REFRESH_MAP",
    TIMER_DONE: "Location.TIMER_DONE",
    COMPLETE: "Location.COMPLETE",
    UPDATE_NPC_EVENTS: "UPDATE_NPC_EVENTS",
    RESIZE: "Location.RESIZE",
    SNOWBALL_KILL: "Location.SNOWBALL_KILL",
    SNOWBALL_DRAW: "Location.SNOWBALL_DRAW",
    PROGRESS_CANCEL: "Location.PROGRESS_CANCEL",
    PROGRESS_DONE: "Location.PROGRESS_DONE",
    LOCATION_READY: "Location.LOCATION_READY",
    AUTO_TURN: "Location.AUTO_TURN"
},
canvas.app.location.View = function(t) {
    this._enableContent = !0,
    Object.defineProperty(this, "enableContent", {
        get: function() {
            return this._enableContent
        },
        set: function(t) {
            this._enableContent = t,
            this.listSide.interactiveChildren = this.locSide.interactiveChildren = this.mapSide.interactiveChildren = t
        }
    }),
    canvas.px.Container.call(this);
    var e = canvas.app.location.model;
    this.main = t,
    this.windowsContainer = t.windowsContainer,
    this.locsToRemove = [],
    this.popupWin = null,
    this.progressWin = null,
    this.skyAll = {},
    this.snow = null,
    this.x_start = 200,
    this.y_start = 20,
    this.clocks = new canvas.app.location.view.elements.Clocks,
    this.clocks.y = 30,
    this.clocks.visible = !1,
    this.popupsContainer = new canvas.app.location.view.popups.Popups(canvas.app.location.Event),
    this.popupsContainer.position.set(30, 20),
    this.frontsIcon = new canvas.app.location.view.fronts.FrontsIcon(this),
    this.frontsPanel = new canvas.app.location.view.fronts.FrontsPanel(this),
    this.m_brContainer = new canvas.px.Container,
    this.popupsExtContainer = new canvas.px.Container,
    this.resurrectWindow = new canvas.app.location.view.ResurrectWindow,
    this.buildAll(),
    this.buildResurect(),
    this.m_awardTf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16705718,200,20,"center"),
    this.m_awardCnt = new canvas.px.Graphics,
    e.award_msg && (this.x_start = 200,
    this.m_awardTf.text = e.award_msg,
    this.x_start = (this.locSide._width - (this.m_awardTf.textWidth + 20)) / 2 + 16,
    this.m_awardTf.position.set(8, 2),
    this.m_awardCnt.beginFill(1118481, .5),
    this.m_awardCnt.drawRoundedRect(0, 0, this.m_awardTf.width + 20, this.m_awardTf.height + 2, 10),
    this.m_awardCnt.addChild(this.m_awardTf),
    this.m_awardCnt.endFill(),
    this.m_awardCnt.buttonMode = !0,
    this.m_awardCnt.interactive = !0,
    this.locSide.addChild(this.m_awardCnt),
    this.m_awardCnt.click = this.awardClick.bind(this)),
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frame, this),
    this.m_timer = setInterval(this.timerHandler.bind(this), 1e3),
    this.blinkTimer = setInterval(this.blinkTimerHandler.bind(this), 2e3),
    this.m_brilliantTf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD,canvas.Const.FONT_TAHOMA_11_BOLD,16705718,300,20,"left","top"),
    this.m_brilliantTf.interactive = !1,
    null != e.brilliant_msg && (this.unlinkBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "close_ico")),
    this.m_brilliantTf.text = e.brilliant_msg + " <img src='" + canvas.app.location.Const.BRILLIANT_IMAGE_PATH + "' yOffset='6'/>",
    this.x_start = (this.locSide._width - (this.m_brilliantTf.textWidth + 20)) / 2,
    this.m_brilliantTf.position.set(8, -3),
    this.unlinkBtn.position.set(this.m_brilliantTf.textWidth + 2, 3),
    this.m_brBg = new canvas.px.Graphics,
    this.m_brBg.beginFill(1118481, .5),
    this.m_brBg.drawRoundedRect(0, 0, this.m_brilliantTf.textWidth + 20, 18, 7),
    this.m_brContainer.addChildAt(this.m_brBg, 0),
    this.m_brBg.buttonMode = !0,
    this.m_brBg.interactive = !0,
    this.m_brContainer.addChild(this.m_brilliantTf),
    this.m_brContainer.addChild(this.unlinkBtn),
    this.m_brContainer.position.set(this.x_start, 19),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.unlinkBtn, this.onCloseBrillContainer, this)),
    null != e.par.time_bonus_online && this.popupsContainer.init(canvas.app.location.Const.POPUP_ZERO_LEVEL, e.par),
    this.popupsContainer.children.length < 1 && e.activityURL && this.popupsContainer.init(canvas.app.location.Const.POPUP_ACTIVITY, e.activityURL)
    if(top?.document.gameFlags.hidePromotions == false) {
        e.campaignData && (this.campaignInfo = new canvas.app.location.view.elements.CampaignInfo,
            this.campaignInfo.data = e.campaignData,
            this.addChild(this.campaignInfo),
            this.campaignInfo.y = 28)
    }
    if(top?.document.gameFlags.hideWheelFortune == false) {
        e.wfEnabled && (this.popupWheelFortune = this.popupsExtContainer.addChild(new canvas.app.location.view.popups.PopupWheelFortune(e.wfMsg,e.wfExpireTime,e.wfUrl))),
        "1" == e.localStorage.get("MapSide") && e.WITH_MAP && this.miniMapBtnDownHandler()
    }
    this.frontsPanel.y = e.brilliant_msg || this.award_msg ? 40 : 20,
    this.checkGreatBattleConfirm(),
    this.addListeners()
}
,
canvas.app.location.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.View.prototype.resize = function() {
    var t, e;
    this.resizeStarted || (this.resizeStarted = !0,
    t = canvas.app.location.model,
    this.get_ww(),
    this.get_hh(),
    this.locSide._width = this.ww - this.listSide._width - (this.mapSide.visible ? this.mapSide._width - 25 : 0) + 25,
    this.locSide._height = this.hh,
    this.locSide.x = this.mapSide.visible ? this.mapSide.x + this.mapSide._width - 25 : 0,
    this.mapSide._height = this.hh,
    this.listSide._height = this.hh,
    e = this.locSide.x + this.locSide._width,
    this.eventBtn && (e = this.eventBtn.x = Math.round(this.locSide.x + this.locSide._width - this.eventBtn.width - 7)),
    this.eventPanel && this.eventPanel.parent && (e = this.eventPanel.x = Math.round(this.locSide.x + this.locSide._width - this.eventPanel.width - 7)),
    this.clocks.visible && (e = this.clocks.x = Math.round(this.locSide.x + this.locSide._width - this.clocks.width - 25)),
    this.campaignInfo && (this.campaignInfo.x = Math.round(e - this.campaignInfo.width - 20)),
    this.listSide.x = this.locSide.x + this.locSide._width - 25,
    this.popupWin && (this.popupWin.x = this.locSide.x + Math.round((this.locSide._width - this.popupWin.width) / 2)),
    this.progressWin && (this.progressWin.x = Math.round((this.locSide._width - this.progressWin.width) / 2)),
    this.setupMapButtonPosition(),
    this.fightBtn && (this.fightBtn.x = this.mapSide.visible ? this.mapSide._width - 16 : 8),
    this.x = Math.abs(Math.round((t.width - ((this.mapSide.visible ? this.mapSide._width - 25 : 0) + this.locSide._width + this.listSide._width - 25)) / 2)),
    null != this.frontsIcon && this.frontsIcon.position.set(this.locSide.x + 15 + (t.CasinoLink ? 90 : 0), this.locSide._height - 65),
    this.frontsPanel && (this.frontsPanel.x = Math.round(.5 * (this.locSide._width - this.frontsPanel.back.width)) + (this.mapSide.visible ? this.mapSide._width : 0)),
    this.main.windowsManager.init(this.windowsContainer, this.ww - (this.mapSide.visible ? 480 : 210), this.hh, this),
    this.windowsContainer.x = this.x + this.locSide.x,
    this.main.windowsManager.resizeWindows(),
    this.m_brContainer.x = this.locSide.x + Math.round(.5 * (this.locSide._width - this.m_brContainer.width)),
    this.popupsExtContainer.position.set(this.locSide.x + Math.round(.5 * (this.locSide._width - this.popupsExtContainer.width)), 19),
    this.m_awardCnt && this.m_awardCnt.position.set(Math.round((this.locSide._width - (this.m_awardTf.width + 20)) / 2), 15),
    this.resizeStarted = !1)
},
canvas.app.location.View.prototype.setupMapButtonPosition = function() {
    if(top?.document.gameFlags.hideMiniMap) {
        return
    }
    this.miniMapBtn.scale.x = this.mapSide.visible ? 1 : -1,
    this.miniMapBtn.position.set(this.mapSide.visible ? this.mapSide.width - 30 : 30, Math.round((this.hh - this.miniMapBtn.height) / 2))
}
,
canvas.app.location.View.prototype.get_ww = function() {
    var t = canvas.app.location.model;
    this.ww = t.width;
    var e = "" == t.OBJ_TOWN.bg_mid ? this.listSide._width + canvas.app.location.Const.LOC_SMALL_WIDTH : this.listSide._width + canvas.app.location.Const.LOC_MID_WIDTH;
    this.ww < t.MIN_STAGE_WIDTH ? this.ww = t.MIN_STAGE_WIDTH : this.ww > e && (this.ww = e),
    t.ww = this.ww
}
,
canvas.app.location.View.prototype.get_hh = function() {
    var t = canvas.app.location.model
      , e = "" != t.OBJ_TOWN.bg_mid && this.ww - this.listSide._width + 25 > canvas.app.location.Const.LOC_SMALL_WIDTH ? canvas.app.location.Const.LOC_MID_HEIGHT : canvas.app.location.Const.LOC_SMALL_HEIGHT;
    e > t.height - 10 && (e = t.height - 10),
    this.hh = t.hh = e
}
,
canvas.app.location.View.prototype.buildAll = function() {
    var t, e, a = canvas.app.location.model;
    for (t in this.popupWin && this.popupWin.parent == this.windowsContainer && this.windowsContainer.removeChild(this.popupWin),
    this.listSide && (this.listSide.parent && this.removeChild(this.listSide),
    this.listSide.destroy()),
    a.TRANSITION_POSSIBLE = !1,
    a.FinishLocation = null,
    this.mapSide || (this.mapSide = new canvas.app.location.view.MapSide,
    canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_OVER, this.mapSide, this.wayOverHandler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_OUT, this.mapSide, this.wayOutHandler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_CLICK, this.mapSide, this.wayClickHandler, this),
    this.mapSide._width = a.MAP_WIDTH,
    this.mapSide.visible = !1,
    this.mapSide.y = 6,
    this.addChild(this.mapSide)),
    this.listSide = new canvas.app.location.view.ListSide,
    canvas.EventManager.addEventListener(canvas.app.location.Event.ITEM_CLICK, null, this.pointClickHandler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.ITEM_OVER, null, this.itemOverHandler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.ITEM_OUT, null, this.itemOutHandler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.TIMER_DONE, null, this.timerDoneHandler, this),
    this.listSide.timerStart(),
    this.listSide.y = 6,
    this.addChild(this.listSide),
    this.locSide ? this.locSide.areaID != a.OBJ_TOWN.area_id && (this.locsToRemove.push(this.locSide),
    this.interactiveChildren = !1,
    null != a.OBJ_WORLD.locs[a.OBJ_TOWN.area_id] ? (this.locSide = a.OBJ_WORLD.locs[a.OBJ_TOWN.area_id],
    this.locSide.resetHorizontalScrollPos(),
    this.mapSide.updateFlag(),
    this.removeLocs()) : (this.locSide = new canvas.app.location.view.LocSide,
    this.setLocSideListeners()),
    this.addChild(this.locSide)) : (this.locSide = new canvas.app.location.view.LocSide,
    this.setLocSideListeners(),
    this.addChild(this.locSide)),
    this.locSide.start(),
    this.skyAll[a.OBJ_TOWN.sky_type] || (this.skyAll[a.OBJ_TOWN.sky_type] = new canvas.app.location.view.elements.Sky(a.OBJ_TOWN.sky_type)),
    this.skyAll)
        t == a.OBJ_TOWN.sky_type ? this.skyAll[a.OBJ_TOWN.sky_type].start() : this.skyAll[a.OBJ_TOWN.sky_type].stop();
    for (e in this.locSide.setSky(this.skyAll[a.OBJ_TOWN.sky_type]),
    this.locSide.y = 6,
    "1" == a.OBJ_TOWN.weather && (this.snow || (this.snow = new canvas.app.location.view.elements.Snow,
    this.snow.init(2e3, a.MAX_STAGE_HEIGHT)),
    this.locSide.setSnow(this.snow)),
    this.buildMapButton(),
    this.getChildIndex(this.listSide) > this.getChildIndex(this.locSide) && this.swapChildren(this.locSide, this.listSide),
    this.buildEvent(),
    this.buildFight(),
    a.inWaitingAnswer = !1,
    a.OBJ_TOWN.items) {
        var s = a.OBJ_TOWN.items[e].dtime
          , i = a.OBJ_TOWN.items[e].ltime
          , n = a.OBJ_TOWN.curtime
          , o = a.OBJ_TOWN.items[e].href
          , r = 1 == parseInt(a.OBJ_TOWN.items[e].refresh);
        0 != s && 0 != i && (a.transitionLnk = o,
        a.waitRefresh = r,
        this.startFarming(1e3 * n, 1e3 * s, 1e3 * (s - i), a.STRINGS_ARR[a.S_ACTION_IN_PROCESS]))
    }
    this.addChild(this.m_brContainer),
    this.addChild(this.popupsExtContainer),
    this.addChild(this.popupsContainer),
    this.addChild(this.clocks),
    this.campaignInfo && this.addChild(this.campaignInfo),
    a.fronts.frontsEnabled && this.main.loadFrontsData(),
    this.resize(),
    this.main.hintManager.hide()
},
canvas.app.location.View.prototype.buildMapButton = function() {
    if(top?.document.gameFlags.hideMiniMap) {
        return
    }
    var t, e, a = canvas.app.location.model;
    this.miniMapBtn || (this.miniMapBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "mini_map_btn")),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.miniMapBtn, this.miniMapBtnDownHandler, this),
    this.miniMapBtn.y = Math.round((a.MIN_STAGE_HEIGHT - this.miniMapBtn.height) / 2),
    new canvas.app.view.MappingHint(a.STRINGS_ARR[a.S_OPEN_MAP]),
    this.miniMapHint = new canvas.app.view.MappingHint(a.STRINGS_ARR[a.S_OPEN_MAP]),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.miniMapBtn,
        params: new canvas.utils.HintParams(this.miniMapHint)
    }),
    this.addChild(this.miniMapBtn)),
    this.miniMapBtn.interactiveChildren = a.WITH_MAP,
    this.miniMapBtn.filters = a.WITH_MAP ? [] : [canvas.Functions.getGreyScale(.5)],
    this.miniMapBtn.parent && (this.getChildIndex(this.listSide) > this.getChildIndex(this.miniMapBtn) && this.swapChildren(this.miniMapBtn, this.listSide),
    this.getChildIndex(this.locSide) > this.getChildIndex(this.miniMapBtn) && this.swapChildren(this.miniMapBtn, this.locSide))
}
,
canvas.app.location.View.prototype.buildEvent = function() {
    if(top?.document.gameFlags.hideCurrentEvent) {
        return
    }
    var t = canvas.app.location.model;
    this.eventBtn && (canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.eventBtn, this.refreshEventHandler, this),
    this.eventBtn.destroy(),
    this.eventBtn = null),
    this.eventPanel && this.eventPanel.parent && this.removeChild(this.eventPanel),
    0 < t.OBJ_EVENT.id && (this.eventPanel = new canvas.app.location.view.elements.EventPanel,
    this.eventPanel.y = 20,
    this.addChild(this.eventPanel),
    this.eventBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "event_btn")),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.eventBtn, this.refreshEventHandler, this),
    this.eventBtn.y = 12,
    this.addChild(this.eventBtn),
    this.resize())
}
,
canvas.app.location.View.prototype.buildFight = function() {
    var t = canvas.app.location.model;
    this.fightBtn && (this.fightBtn.destroy(),
    this.fightBtn = null),
    0 < t.NUM_BIG_FIGHT && (this.fightBtn = new canvas.app.location.view.elements.FightButton(t.NUM_BIG_FIGHT),
    this.fightBtn.y = 12,
    this.addChild(this.fightBtn))
}
,
canvas.app.location.View.prototype.buildResurect = function() {
    var t = canvas.app.location.model;
    this.main.windowsManager.windowIsActive(this.resurrectWindow) && (this.windowsManager.closeWindow(this.resurrectWindow),
    this.locSide.grayscaleLoc(!1)),
    t.USER_GHOST && (this.locSide.grayscaleLoc(!0),
    t.resurrectData && this.resurrectWindow && (this.resurrectWindow.itemsCount = t.resurrectData.length,
    this.resurrectWindow.update(),
    this.main.windowsManager.openWindow(this.resurrectWindow, !1, !1)))
}
,
canvas.app.location.View.prototype.refreshEventHandler = function() {
    refreshEvent(canvas.app.location.model.OBJ_EVENT.id)
}
,
canvas.app.location.View.prototype.wayOverHandler = function(t) {
    t.params.areaWaypoints ? this.findLocation(t.params.areaWaypoints) : this.findLocation(t.params.arr)
}
,
canvas.app.location.View.prototype.wayOutHandler = function(t) {
    this.itemOutHandler(t)
}
,
canvas.app.location.View.prototype.wayClickHandler = function(t) {
    canvas.app.location.model.TRANSITION_POSSIBLE && (t.params.areaWaypoints ? this.findClickButton(t.params.areaWaypoints) : this.findClickButton(t.params.arr))
}
,
canvas.app.location.View.prototype.startFarming = function(t, e, a, s) {
    var i = canvas.app.location.model;
    this.progressWin && (this.progressWin.destroy(),
    this.progressWin = null),
    this.popupWin && this.popupWin.parent && this.windowsContainer.removeChild(this.popupWin),
    this.progressWin = new canvas.app.location.view.ProgressWin(t,e,a,s),
    canvas.EventManager.addEventListener(canvas.app.location.Event.PROGRESS_CANCEL, null, this.cancelFarming, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.PROGRESS_DONE, null, this.doneFarming, this),
    this.progressWin.position.set(Math.round((this.locSide._width - this.progressWin.width) / 2), Math.round((this.locSide._height - this.progressWin.height) / 2)),
    this.windowsContainer.addChild(this.progressWin),
    "1" == i.localStorage.get("MapSide") && this.miniMapBtnDownHandler(),
    this.miniMapBtn.enabled = !1,
    this.enableContent = this.listSide.active = this.locSide.active = !1,
    this.progressWin.startProgress()
}
,
canvas.app.location.View.prototype.doneFarming = function() {
    this.closeFarming(),
    this.navigateToUrl(),
    this.resize()
}
,
canvas.app.location.View.prototype.cancelFarming = function() {
    this.closeFarming(),
    stopAction(),
    canvas.app.location.model.inWaitingAnswer = !0
}
,
canvas.app.location.View.prototype.closeFarming = function() {
    this.progressWin && (this.progressWin.destroy(),
    this.progressWin = null),
    this.enableContent = this.locSide.active = !0,
    canvas.app.location.model.TRANSITION_POSSIBLE && (this.listSide.active = !0),
    this.miniMapBtn.enabled = !0
}
,
canvas.app.location.View.prototype.itemOverHandler = function(t) {
    this.locSide.showOverOnAnim = t.params
}
,
canvas.app.location.View.prototype.itemOutHandler = function(t) {
    this.locSide.showOutOnAnim = t.params
}
,
canvas.app.location.View.prototype.timerDoneHandler = function() {
    this.progressWin && this.progressWin.parent == this.windowsContainer || (this.listSide.active = !0)
}
,
canvas.app.location.View.prototype.updateFronts = function() {
    if(top?.document.gameFlags.hideFronts == true) {
        return
    }
    var t = canvas.app.location.model;
    t.fronts.frontsEnabled ? (this.addChild(this.frontsIcon),
    this.frontsIcon.update()) : this.frontsIcon.parent == this && this.removeChild(this.frontsIcon),
    t.fronts.frontsPanelEnabled ? (this.addChild(this.frontsPanel),
    this.frontsPanel.update()) : this.frontsPanel.parent == this && this.removeChild(this.frontsPanel)
}
,
canvas.app.location.View.prototype.setLocSideListeners = function() {
    canvas.EventManager.addEventListener(canvas.app.location.Event.ANIM_CLICK, null, this.pointClickHandler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.ANIM_OVER, null, this.animOverHandler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.ANIM_OUT, null, this.animOutHandler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.COMPLETE, null, this.completeLocHandler, this)
}
,
canvas.app.location.View.prototype.animOverHandler = function(t) {
    this.listSide.showOverOnItem = t.params
}
,
canvas.app.location.View.prototype.animOutHandler = function(t) {
    this.listSide.showOverOnItem = null
}
,
canvas.app.location.View.prototype.completeLocHandler = function(t) {
    var e = canvas.app.location.model;
    this.mapSide.updateFlag(),
    e.OBJ_WORLD.locs[e.OBJ_TOWN.area_id] = t.params,
    this.removeLocs()
}
,
canvas.app.location.View.prototype.removeLocs = function() {
    var t = this.locsToRemove.length;
    if (0 < t) {
        for (var e = 0; e < t; e++)
            this.removeIfExist(this.locsToRemove[e]),
            this.locsToRemove[e].stop();
        this.locsToRemove = []
    }
    this.interactiveChildren = !0
}
,
canvas.app.location.View.prototype.pointClickHandler = function(t) {
    var e, a, s, i = "", n = null, o = canvas.app.location.model, r = o.blinkIds.indexOf(t.params.id);
    for (s in 0 <= r && (o.blinkIds.splice(r, 1),
    this.listSide.list.update()),
    o.OBJ_TOWN.items)
        if (e = o.OBJ_TOWN.items[s].id,
        a = o.OBJ_TOWN.items[s].href,
        i = o.OBJ_TOWN.items[s].type,
        e == t.params.id && (!t.params.href || a == t.params.href)) {
            n = o.OBJ_TOWN.items[s];
            break
        }
    n ? (o.TRANSITION_POSSIBLE || n.mode == o.MODE_NPC || n.hide) && this.clickFunction(n, i) : this.clickFunction(n, "")
}
,
canvas.app.location.View.prototype.clickFunction = function(t, e) {
    var a;
    t && (this.locSide.scroll && this.locSide.scroll.wasDragged || ((a = canvas.app.location.model).inWaitingAnswer || (a.transitionLnk = t.href,
    a.waitRefresh = parseInt(t.refresh),
    t.confirm && a.actionConfirms ? null != this.popupWin && this.popupWin.parent || (this.popupWin && (canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL),
    canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_OK),
    this.popupWin.destroy()),
    this.popupWin = new canvas.app.location.view.PopupWin(t.confirm_text,null,null,e,canvas.Translator.getText(2026),canvas.Translator.getText(2027)),
    canvas.EventManager.addEventListener(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL, this.popupWin, this.popupWinClickCancelHandler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.POPUP_WIN_CLICK_OK, this.popupWin, this.popupWinClickOkHandler, this),
    this.popupWin.position.set(this.locSide.x + Math.round((this.locSide.width - this.popupWin.width) / 2), Math.round((this.locSide.height - this.popupWin.height) / 2)),
    this.windowsContainer.addChild(this.popupWin),
    this.enableContent = this.listSide.active = this.locSide.active = this.mapSide.active = !1) : this.navigateToUrl())))
}
,
canvas.app.location.View.prototype.popupWinClickOkHandler = function() {
    var t = canvas.app.location.model;
    this.popupWinClickCancelHandler(),
    this.navigateToUrl(),
    this.popupWin.checkBox && (t.actionConfirms = !this.popupWin.checkBox.checked)
}
,
canvas.app.location.View.prototype.navigateToUrl = function() {
    var t = Date.now()
      , e = canvas.app.location.model;
    (1e4 < t - e.reqTime || !e.inWaitingAnswer) && (t = e.waitRefresh ? e.MAIN_HIDDEN : "_self",
    e.waitRefresh ? (new canvas.utils.URLRequest).load(e.transitionLnk) : canvas.Functions.navigateToURL(e.transitionLnk, t),
    this.main.hintManager.hide(),
    e.reqTime = Date.now(),
    e.inWaitingAnswer = !0)
}
,
canvas.app.location.View.prototype.miniMapBtnDownHandler = function() {
    var t = canvas.app.location.model;
    this.mapSide.isVisible = !this.mapSide.visible,
    this.mapSide.build(),
    this.miniMapHint.update(this.mapSide.visible ? t.STRINGS_ARR[t.S_CLOSE_MAP] : t.STRINGS_ARR[t.S_OPEN_MAP]),
    this.resize(),
    this.popupsContainer.visible = !this.mapSide.visible
}
,
canvas.app.location.View.prototype.awardClick = function() {
    var t = canvas.app.location.model;
    t.m_awardUrl && canvas.Functions.navigateToURL(t.m_awardUrl, "_blank")
}
,
canvas.app.location.View.prototype.frame = function() {
    canvas.app.location.model
}
,
canvas.app.location.View.prototype.timerHandler = function() {
    var t = canvas.app.location.model.castPeriodFinish - Math.round(.001 * Date.now())
      , e = 0 < t
      , a = e != this.clocks.visible;
    this.clocks.visible = e,
    this.clocks.visible && this.clocks.update(t),
    a && this.resize()
}
,
canvas.app.location.View.prototype.blinkTimerHandler = function() {
    var t = canvas.app.location.model
      , e = null;
    try {
        e = getCookie("sess_location_blink")
    } catch (t) {}
    if (null != e && "" != e) {
        t.blinkIds = new Array;
        for (var a = e.split("|"), s = 0; s < a.length; s++)
            t.blinkIds.indexOf(parseInt(a[s])) < 0 && t.blinkIds.push(parseInt(a[s]));
        this.locSide.location.update(),
        this.listSide.list.update(),
        deleteCookie("sess_location_blink")
    }
}
,
canvas.app.location.View.prototype.onCloseBrillContainer = function() {
    this.removeChild(this.m_brContainer)
}
,
canvas.app.location.View.prototype.checkGreatBattleConfirm = function() {
    var t, e = canvas.app.location.model;
    "1" == e.par.fight_confirm && (t = e.par.fight_confirm_msg,
    e.par.fight_url,
    this.popupWin && (canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL),
    canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_OK),
    this.popupWin.destroy()),
    this.popupWin = new canvas.app.location.view.PopupWin(null,t,e.STRINGS_ARR[e.S_TO_BATTLE],""),
    canvas.EventManager.addEventListener(canvas.app.location.Event.POPUP_WIN_CLICK_OK, this.popupWin, this.popupWinClickOk2Handler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL, this.popupWin, this.popupWinClickCancelHandler, this),
    this.popupWin.position.set(this.locSide.x + Math.round((this.locSide._width - this.popupWin.width) / 2), Math.round((this.locSide._height - this.popupWin.height) / 2)),
    this.windowsContainer.addChild(this.popupWin),
    this.enableContent = this.listSide.active = this.locSide.active = this.mapSide.active = !1)
}
,
canvas.app.location.View.prototype.popupWinClickOk2Handler = function() {
    var t = canvas.app.location.model;
    this.popupWinClickCancelHandler(),
    canvas.Functions.navigateToURL(t.par.fight_url, "_self")
}
,
canvas.app.location.View.prototype.popupWinClickCancelHandler = function() {
    var t = canvas.app.location.model;
    this.popupWin.parent && (this.windowsContainer.removeChild(this.popupWin),
    this.enableContent = this.locSide.active = this.listSide.partActive = this.mapSide.active = !0,
    t.TRANSITION_POSSIBLE && (this.listSide.active = !0)),
    canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL),
    canvas.EventManager.removeAllListeners(canvas.app.location.Event.POPUP_WIN_CLICK_OK)
}
,
canvas.app.location.View.prototype.addListeners = function() {
    this.m_brBg && (this.m_brBg.click = this.onBrilliantBgClick.bind(this))
}
,
canvas.app.location.View.prototype.removeListeners = function() {
    this.m_brBg && (this.m_brBg.click = null)
}
,
canvas.app.location.View.prototype.onBrilliantBgClick = function() {
    var t = canvas.app.location.model;
    canvas.Functions.navigateToURL(t.brilliant_link, "_blank")
}
,
canvas.app.location.View.prototype.blinkButton = function(t, e) {
    var a = canvas.app.location.model;
    e ? a.blinkIds.indexOf(t) < 0 && a.blinkIds.push(t) : 0 <= a.blinkIds.indexOf(t) && a.blinkIds.splice(a.blinkIds.indexOf(t), 1),
    this.locSide.location.update(),
    this.listSide.list.update()
}
,
canvas.app.location.View.prototype.updateMagicMirror = function() {
    var t = canvas.app.location.model;
    this.locSide.magicMirrorButton.visible = t.magicMirrorEndTime > t.serverTime.getTime()
}
,
canvas.app.location.View.prototype.findLocation = function(t) {
    for (var e, a = canvas.app.location.model, s = !1, i = 0; i < t.length; i++) {
        if (s)
            return;
        for (var n in a.OBJ_TOWN.items)
            null != (e = a.OBJ_TOWN.items[n].anim) && (parseInt(t[i]) == parseInt(a.OBJ_TOWN.items[n].loc_id) ? (s = e.light = !0,
            this.locSide.moveToAnim = e) : e.light = !1)
    }
}
,
canvas.app.location.View.prototype.findClickButton = function(t) {
    var e, a = canvas.app.location.model, s = null, i = "";
    t: for (var n = 0; n < t.length; n++)
        for (var o in a.OBJ_TOWN.items) {
            if (e = a.OBJ_TOWN.items[o].btn,
            i = a.OBJ_TOWN.items[o].type,
            null != e && parseInt(t[n]) == a.OBJ_TOWN.items[o].loc_id) {
                s = a.OBJ_TOWN.items[o];
                break t
            }
            0
        }
    null != s && this.clickFunction(s, i)
}
,
canvas.app.location.View.prototype.showConfirm = function(t, e, a, s, i, n, o) {
    this.confirmWindow || (this.confirmWindow = new canvas.app.view.window.ConfirmWindowOld),
    this.confirmWindow.update(t, e, a, s, i, n, o),
    this.main.windowsManager.openWindow(this.confirmWindow),
    this.main.hintManager.hide()
}
,
canvas.app.location.View.prototype.showEnterBattleConfirm = function(t, e, a) {
    a = new Date(a);
    this.showConfirm(canvas.Translator.getText(714), canvas.Translator.getText(715) + " <b><font color='#990000'>" + t + "</font></b>?<br/><br/>" + canvas.Translator.getText(716) + ": <b><font color='#990000'>" + canvas.Functions.setNumberLen(a.getHours()) + ":" + canvas.Functions.setNumberLen(a.getMinutes()) + ":" + canvas.Functions.setNumberLen(a.getSeconds()) + "</font></b>.", canvas.Translator.getText(712), canvas.Translator.getText(2019), this.main.joinFrontsBattle, [e], this.main)
}
,
canvas.app.location.View.prototype.showStartBattleConfirm = function(t, e, a) {
    a = new Date(a);
    this.showConfirm(canvas.Translator.getText(714), canvas.Translator.getText(720) + " <b><font color='#990000'>" + t + "</font></b>?<br/><br/>" + canvas.Translator.getText(716) + ": <b><font color='#990000'>" + canvas.Functions.setNumberLen(a.getHours()) + ":" + canvas.Functions.setNumberLen(a.getMinutes()) + ":" + canvas.Functions.setNumberLen(a.getSeconds()) + "</font></b>.", canvas.Translator.getText(707), canvas.Translator.getText(2019), this.main.startFrontsBattle, null, this.main)
}
,
canvas.app.location.Parser = function() {}
,
canvas.app.location.Parser.prototype.extractBg = function(t) {
    if (!t)
        return "";
    t = t.split(".")[0].split("/");
    return t[t.length - 1]
}
,
canvas.app.location.Parser.prototype.unpackTownConfObject = function(t) {
    var e, a, s, i, n, o, r = canvas.app.location.model, c = {}, p = !1;
    for (s in t)
        switch (n = t[s],
        s) {
        case "town":
            if (n.bg && n.title && (o = String(n.bg).split("/"),
            o = String(o[o.length - 1]).split("?")),
            null != r.OBJ_WORLD.conf[n.area_id] ? r.OBJ_TOWN = r.OBJ_WORLD.conf[n.area_id] : (r.OBJ_TOWN = {
                items: {}
            },
            p = !0),
            r.OBJ_TOWN.area_id != n.area_id && (r.actionConfirms = !0),
            r.OBJ_TOWN.area_id = r.FlagLocation = n.area_id,
            r.OBJ_TOWN.bg = this.extractBg(n.bg),
            r.OBJ_TOWN.bg_mid = null == n.bg_mid ? "" : this.extractBg(n.bg_mid),
            r.OBJ_TOWN.swf_file = String(o[0]),
            r.OBJ_TOWN.title = null != n.title ? n.title : "---",
            r.OBJ_TOWN.sky_type = null != n.sky_type ? this.extractBg(n.sky_type) : "",
            r.OBJ_TOWN.ftime = null != n.ftime ? n.ftime : "0",
            r.OBJ_TOWN.ftime_max = null != n.ftime_max ? parseInt(n.ftime_max) : "0",
            r.OBJ_TOWN.weather = null != n.weather ? n.weather : "0",
            r.OBJ_TOWN.curtime = null != n.curtime ? n.curtime : Math.round(Date.now() / 1e3),
            r.OBJ_TOWN.dy = null != n.dy ? parseInt(n.dy) : 0,
            r.WITH_MAP = n.show_minimap,
            r.castPeriodFinish = null != n.chaotic_fight_time ? Math.round(.001 * Date.now()) + parseInt(n.chaotic_fight_time) : 0,
            null != n.fronts)
                switch (parseInt(n.fronts)) {
                case 1:
                    r.fronts.frontsEnabled = !0,
                    r.fronts.frontsPanelEnabled = !1;
                    break;
                case 2:
                    r.fronts.frontsEnabled = !0,
                    r.fronts.frontsPanelEnabled = !0;
                    break;
                default:
                    r.fronts.frontsEnabled = !1,
                    r.fronts.frontsPanelEnabled = !1
                }
            else
                r.fronts.frontsEnabled = !1,
                r.fronts.frontsPanelEnabled = !1;
            var h, l = 0;
            if (n.items)
                for (i in n.items)
                    null != n.items[i].id && (p ? (h = null != n.items[i].name ? n.items[i].name : "",
                    r.OBJ_TOWN.items[l] = {
                        id: null != n.items[i].id ? n.items[i].id : "---",
                        name: h,
                        confirm: null != n.items[i].confirm ? String(n.items[i].confirm) : null != n.items[i].confirm_text ? 1 : 0,
                        confirm_text: null != n.items[i].confirm_text ? String(n.items[i].confirm_text) : null,
                        mode: null != n.items[i].mode ? "mode_" + n.items[i].mode : r.MODE_AREA,
                        href: n.items[i].link_href || n.items[i].href || "",
                        loc_id: null != n.items[i].loc_id ? n.items[i].loc_id : "-100",
                        type: null != n.items[i].type ? n.items[i].type : r.TYPE_AREA,
                        farm: null != n.items[i].farm ? n.items[i].farm : r.WITHOUT_FARM,
                        refresh: null != n.items[i].hidden ? n.items[i].hidden : "0",
                        ltime: null != n.items[i].ltime ? n.items[i].ltime : 0,
                        dtime: null != n.items[i].dtime ? n.items[i].dtime : 0,
                        anim_x: 0,
                        anim_y: 0,
                        hide: "" == h || null != n.items[i].hide && "1" == n.items[i].hide
                    }) : (r.OBJ_TOWN.items[l].ltime = null != n.items[i].ltime ? n.items[i].ltime : 0,
                    r.OBJ_TOWN.items[l].dtime = null != n.items[i].dtime ? n.items[i].dtime : 0),
                    l++);
            break;
        case "add":
            if (e = n)
                for (a = 0; a < e.length; a++)
                    null != e[a].id && null != e[a].type && null != e[a].x && null != e[a].y && null != e[a].text && (c[e[a].id] = {
                        type: e[a].type,
                        x: e[a].x,
                        y: e[a].y,
                        text: e[a].text
                    })
        }
    r.OBJ_WORLD.conf[r.OBJ_TOWN.area_id] = r.OBJ_TOWN
}
,
canvas.app.location.Parser.prototype.unpackNavConf = function(t) {
    for (var e, a, s = canvas.app.location.model, i = t.childNodes, n = 0; n < i.length; n++)
        if ("locations" == i[n].nodeName)
            for (e = i[n].childNodes,
            a = 0; a < e.length; a++)
                if ("loc" == e[a].nodeName && null != e[a].attributes.id && null != e[a].attributes.verges) {
                    var o = !0;
                    if (null != e[a].attributes.race && e[a].attributes.race.value != s.mRace && (o = !1),
                    o) {
                        for (var r, c = [], p = e[a].attributes.verges.value.split("|"), h = 0; h < p.length; h++)
                            2 == (r = p[h].split(",")).length && (c[h] = [r[0], r[1]]);
                        s.OBJ_LOCVERGE[e[a].attributes.id.value] = c,
                        s.NUM_LOCATIONS++
                    }
                }
}
,
canvas.app.location.Parser.prototype.unpackEventConf = function(t) {
    var e, a, s, i, n, o = canvas.app.location.model, t = (new DOMParser).parseFromString(t, "text/xml"), r = new Date;
    for (o.OBJ_EVENT = {
        tasks: {}
    },
    e = t.childNodes,
    s = 0; s < e.length; s++) {
        if ("event" == e[s].nodeName) {
            null != e[s].attributes.id && null != e[s].attributes.title && null != e[s].attributes.point_title && (o.OBJ_EVENT = {
                tasks: {}
            },
            o.OBJ_EVENT.id = e[s].attributes.id,
            o.OBJ_EVENT.title = e[s].attributes.title,
            o.OBJ_EVENT.point_title = e[s].attributes.point_title),
            a = e[s].childNodes;
            for (var c = 0, p = 0; p < a.length; p++)
                "task" == a[p].nodeName && (o.OBJ_EVENT.tasks[c] = {
                    title: null != a[p].attributes.title ? a[p].attributes.title : "---",
                    max_value: null != a[p].attributes.max_value ? a[p].attributes.max_value : 0,
                    max_user_value: null != a[p].attributes.max_user_value ? a[p].attributes.max_user_value : 0,
                    user_value: null != a[p].attributes.user_value ? a[p].attributes.user_value : 0,
                    value: null != a[p].attributes.value ? a[p].attributes.value : 0,
                    noUserValue: "1" == a[p].attributes.no_user_value
                },
                c++)
        }
        if ("global_npcs" == e[s].nodeName) {
            o.NPCEvents = new Array;
            for (var h = e[s].childNodes.length, l = 0; l < h; l++)
                "npc" == (i = e[s].childNodes[l]).nodeName && ((n = new canvas.data.location.DEvent).description = i.firstChild.nodeValue,
                n.picture = i.attributes.picture,
                n.title = i.attributes.title,
                n.url = i.attributes.url,
                n.finishTime = Math.round(.001 * r.getTime()) + parseInt(i.attributes.time_left),
                o.NPCEvents.push(n))
        }
    }
}
,
canvas.app.location.Parser.prototype.unpackEventConfObject = function(t) {
    var e, a, s, i, n = canvas.app.location.model, o = new Date;
    for (s in n.OBJ_EVENT = {
        tasks: {}
    },
    t) {
        if ("event" == s) {
            null != t[s].id && null != t[s].title && null != t[s].point_title && (n.OBJ_EVENT = {
                tasks: {}
            },
            n.OBJ_EVENT.id = t[s].id,
            n.OBJ_EVENT.title = t[s].title,
            n.OBJ_EVENT.point_title = t[s].point_title);
            var r = 0;
            if (t[s].task)
                for (i in t[s].task)
                    e = t[s].task[i],
                    n.OBJ_EVENT.tasks[r] = {
                        title: null != e.title ? e.title : "---",
                        max_value: null != e.max_value ? e.max_value : 0,
                        max_user_value: null != e.max_user_value ? e.max_user_value : 0,
                        user_value: null != e.user_value ? e.user_value : 0,
                        value: null != e.value ? e.value : 0,
                        noUserValue: "1" == e.no_user_value
                    },
                    r++
        }
        if ("global_npcs" == s)
            for (i in n.NPCEvents = new Array,
            t[s])
                e = t[s][i],
                (a = new canvas.data.location.DEvent).description = e.description,
                a.picture = e.picture,
                a.title = e.title,
                a.url = e.url,
                a.finishTime = Math.round(.001 * o.getTime()) + parseInt(e.time_left),
                n.NPCEvents.push(a)
    }
}
,
canvas.app.location.Parser.prototype.unpackFightConf = function(t) {
    for (var e = canvas.app.location.model, a = (new DOMParser).parseFromString(t, "text/xml").childNodes, s = e.NUM_BIG_FIGHT = 0; s < a.length; s++)
        "fight" == a[s].nodeName && null != a[s].attributes.in_process && (e.NUM_BIG_FIGHT = a[s].attributes.in_process)
}
,
canvas.app.location.Parser.prototype.instanceToLocation = function(t, e) {
    var a, s, i = t, n = new Object;
    for (s in n.area_id = i.location.area_id,
    n.title = i.location.title,
    n.sky_type = i.location.sky_type,
    n.bg = i.location.swf,
    n.bg_mid = i.location.swf_mid,
    n.ftime = i.area.ftime,
    n.ftime_max = i.area.ftime_max,
    n.weather = "0",
    n.show_minimap = !1,
    n.fronts = 0,
    n.dy = "0",
    n.is_copy_location_id = "0",
    n.code = i.location.code,
    n.curtime = e,
    n.items = new Object,
    i.items)
        a = i.items[s],
        n.items[a.id] = {
            id: a.id,
            name: a.name,
            building_type: a.building_type,
            type: "instance",
            href: a.href,
            link_href: a.link_href,
            confirm: a.confirm,
            confirm_text: a.confirm_text,
            mode: "area"
        };
    return {
        town: n
    }
}
,
canvas.app.location.Finder = function() {
    this.p1 = 0,
    this.p2 = 0,
    this.p1_tmp = 0,
    this.p2_tmp = 0,
    this.arr_tmp = null,
    this.arr_trash = null,
    this.cache_cont = null,
    this.arr_loc = null
}
,
canvas.app.location.Finder.prototype.find = function(t, e) {
    canvas.app.location.log("Finder: start = " + t + ", target = " + e, 10551296);
    var a = canvas.app.location.model;
    if (this.p1 = t,
    this.p2 = e,
    String(this.p1) == String(this.p2))
        return [0];
    this.p2_tmp = this.p2,
    this.p1_tmp = this.p2_tmp,
    this.arr_tmp = [],
    this.arr_trash = [],
    this.cache_cont = {},
    this.arr_loc = [],
    this.arr_tmp.push(this.p1),
    this.arr_trash = this.arr_trash.concat(this.arr_tmp);
    var s = 0
      , i = a.NUM_LOCATIONS;
    if (i <= 0)
        return [0];
    t: for (; s < i; ) {
        s++;
        for (var n = [], o = this.arr_tmp.length; o--; ) {
            var r = this.getNearLoc(this.arr_tmp[o]);
            if (this.clearArr(r, this.arr_trash),
            this.cache_cont[this.arr_tmp[o]] = r,
            this.seach(r, this.p2))
                break t;
            this.arr_trash = this.arr_trash.concat(r),
            n = n.concat(r)
        }
        if (this.arr_tmp = [],
        this.arr_tmp = this.arr_tmp.concat(n),
        0 == this.arr_tmp.length)
            return [-1]
    }
    for (this.arr_loc.push(this.p1_tmp); this.p1_tmp != this.p1; )
        this.p2_tmp = this.getNextCacheLoc(this.p2_tmp),
        this.p1_tmp = this.p2_tmp,
        this.arr_loc.push(this.p1_tmp);
    return this.arr_loc
}
,
canvas.app.location.Finder.prototype.getNextCacheLoc = function(t) {
    for (var e in this.cache_cont)
        for (var a = this.cache_cont[e], s = a.length; s--; )
            if (parseInt(a[s]) == t)
                return parseInt(e);
    return 1
}
,
canvas.app.location.Finder.prototype.getNearLoc = function(t) {
    var e, a = canvas.app.location.model, s = [];
    for (e in a.OBJ_LOCVERGE) {
        var i = a.OBJ_LOCVERGE[e];
        t: for (var n = i.length; n--; )
            for (var o = i[n].length; o--; )
                if (i[n][o] == t) {
                    s.push(e);
                    break t
                }
    }
    return s
}
,
canvas.app.location.Finder.prototype.seach = function(t, e) {
    for (var a = t.length; a--; )
        if (t[a] == e)
            return !0;
    return !1
}
,
canvas.app.location.Finder.prototype.clearArr = function(t, e) {
    for (var a = e.length; a--; )
        for (var s = t.length; s--; )
            t[s] == e[a] && (t.splice(s, 1),
            s++)
}
,
canvas.app.location.view.LocationView = function(t) {
    canvas.px.Container.call(this),
    this.name = t,
    this.buttons = {},
    this.anims = {},
    this.movies = [],
    this.ready = !1,
    this.url = canvas.Config.areasPath + t + "/" + t,
    this.back = new canvas.ui.Image(canvas.Config.areasPath + t + ".png"),
    this.addChild(this.back),
    this.tmpIndex = 0,
    this.back.ready ? this._preInit() : canvas.EventManager.addEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.back, this._preInit, this)
}
,
canvas.app.location.view.LocationView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.LocationView.prototype._preInit = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.back, this.preInit, this),
    this.tmpIndex = 0,
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.location.view.LocationView.prototype.frameHandler = function() {
    2 == this.tmpIndex ? (canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.preInit()) : this.tmpIndex++
}
,
canvas.app.location.view.LocationView.prototype.preInit = function() {
    canvas.ResourceLoader.get(this.url + ".mci") ? this.init() : (canvas.ResourceLoader.add([this.url + ".mci", this.url + ".json"]),
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.init, this))
}
,
canvas.app.location.view.LocationView.prototype.init = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.init, this),
    this.data = canvas.ResourceLoader.get(this.url + ".mci").data,
    this.atlas = canvas.ResourceLoader.get(this.url + ".json").textures;
    for (var t, e, a, s, i = this.data[canvas.px.MovieClipProps.children].length, n = 0; n < i; n++)
        e = null,
        (t = this.data[canvas.px.MovieClipProps.children][n]).mc ? ((e = new canvas.px.MovieClipChild(t.mc,this.atlas,t.name + "/",null)).frameEvent = canvas.app.location.Event.ENTER_FRAME,
        e.play()) : t.polygon ? (e = new canvas.px.Container,
        a = new canvas.px.Polygon(t.polygon),
        e.addChild(a),
        (e.button = a).interactive = !0) : e = new canvas.px.Sprite(this.atlas[t.name + ".png"]),
        "but_" == t.name.substr(0, 4) ? this.anims[t.name.substr(4)] ? e = null : (e = new canvas.app.location.view.elements.LocationAnim(e),
        (this.anims[t.name.substr(4)] = e).name = t.name.substr(4)) : "hit_" == t.name.substr(0, 4) ? this.buttons[t.name.substr(8)] ? e = null : ((this.buttons[t.name.substr(8)] = e).interactive = !0,
        e.buttonMode = !0,
        e.mouseover = this.overHandler.bind(this),
        e.mouseout = this.outHandler.bind(this),
        e.click = this.clickHandler.bind(this),
        e.name = e.id = t.name.substr(8)) : t.mc && this.movies.push(e),
        e && (this.addChild(e),
        e.position.set(Math.round(t.x) * (t[canvas.px.MovieClipProps.matrix] && t[canvas.px.MovieClipProps.matrix].a < 0 ? t[canvas.px.MovieClipProps.matrix].a : 1), Math.round(t.y) * (t[canvas.px.MovieClipProps.matrix] && t[canvas.px.MovieClipProps.matrix].d < 0 ? t[canvas.px.MovieClipProps.matrix].d : 1)),
        t[canvas.px.MovieClipProps.matrix] && (e.scale.set(t[canvas.px.MovieClipProps.matrix].a < 0 && 0 < e.x ? t[canvas.px.MovieClipProps.matrix].a : 1, t[canvas.px.MovieClipProps.matrix].d < 0 && 0 < e.y ? t[canvas.px.MovieClipProps.matrix].d : 1),
        1 == t.x2 && e.scale.set(2, 2)));
    for (s in this.buttons)
        this.anims[s] || this.movies[s] || (this.removeChild(this.buttons[s]),
        this.buttons[s].destroy({
            children: !0
        }),
        this.buttons[s] = null);
    this.ready = !0,
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.LOCATION_READY)
}
,
canvas.app.location.view.LocationView.prototype.overHandler = function(t) {
    var e;
    t.currentTarget && t.currentTarget.name && ((e = this.anims[t.currentTarget.name]) && (e.show(),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ANIM_OVER, null, t.currentTarget)))
}
,
canvas.app.location.view.LocationView.prototype.outHandler = function(t) {
    var e;
    t.currentTarget && t.currentTarget.name && ((e = this.anims[t.currentTarget.name]) && (e.hide(),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ANIM_OUT, null, t.currentTarget)))
}
,
canvas.app.location.view.LocationView.prototype.clickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ANIM_CLICK, null, t.currentTarget)
}
,
canvas.app.location.view.LocationView.prototype.start = function() {
    for (var t = 0; t < this.movies.length; t++)
        this.movies[t].play()
}
,
canvas.app.location.view.LocationView.prototype.stop = function() {
    for (var t = 0; t < this.movies.length; t++)
        this.movies[t].stop()
}
,
canvas.app.location.view.LocationView.prototype.destroy = function() {
    for (var t in this.buttons)
        this.buttons[t].mouseover = null,
        this.buttons[t].mouseout = null,
        this.buttons[t].click = null;
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.location.view.PopupWin = function(t, e, a, s, i, n) {
    canvas.px.Container.call(this),
    this.interactive = !0;
    var o = canvas.app.location.model;
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", i ? "popup_win2" : "popup_win")),
    this.caption_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,15660470,100,20,"center"),
    this.caption_tf.text = o.STRINGS_ARR[o.S_CONFIRMATION],
    this.info_tf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD,canvas.Const.FONT_TAHOMA_11_BOLD,9722697,this.bg.width - 40,50,"center","middle"),
    this.info_tf.text = e || ("area" == s || "instance" == s ? t || o.STRINGS_ARR[o.S_ARE_YOU_ASSURED] : t ? s : o.STRINGS_ARR[o.S_ARE_YOU_ASSURED]),
    canvas.EventManager.addEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, this.info_tf, this.info_tfLinkHandler, this),
    this.but_ok = new canvas.app.view.OldButton(1133569),
    this.but_ok.setTitle(a || o.STRINGS_ARR[o.S_YES]),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_ok, this.confirmHandler, this),
    this.but_cancel = new canvas.app.view.OldButton(12124160),
    this.but_cancel.setTitle(o.STRINGS_ARR[o.S_CANCEL]),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_cancel, this.hideWinHandler, this),
    this.addChild(this.bg),
    this.addChild(this.caption_tf),
    this.addChild(this.info_tf),
    this.addChild(this.but_ok),
    this.addChild(this.but_cancel),
    this.caption_tf.position.set(Math.round((this.width - this.caption_tf.width) / 2), 2),
    this.info_tf.position.set(Math.round((this.width - this.info_tf._width) / 2) - 2, 20),
    e ? (this.but_ok.x = Math.round(this.bg.width / 2 - this.but_ok.width + 27),
    this.but_ok.y = this.height - this.but_ok.height - 15,
    this.but_cancel.x = Math.round(this.bg.width / 2 - 27),
    this.but_cancel.y = this.height - this.but_cancel.height - 15) : (this.but_ok.x = Math.round((this.width - this.but_ok.width) / 2),
    this.but_ok.y = 67,
    this.but_cancel.x = Math.round((this.width - this.but_cancel.width) / 2),
    this.but_cancel.y = 87),
    this.info_tf.setSize(0, this.but_ok.x - 20),
    i && (this.checkBox = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "checker_back"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "checker_front"))),
    (e = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9722697,150,20,"center","top",0,0)).text = i,
    this.checkBox.sprite.addChild(e),
    e.position.set(30, 3),
    this.addChild(this.checkBox),
    this.checkBox.y = 102,
    this.checkBox.x = Math.round(.5 * (this.bg.width - this.checkBox.width)),
    this.but_ok.y -= 15,
    this.but_cancel.y -= 15,
    n && (this.hint = new canvas.app.view.MappingHint(n),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.checkBox,
        params: new canvas.utils.HintParams(this.hint)
    })))
}
,
canvas.app.location.view.PopupWin.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.PopupWin.prototype.confirmHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.POPUP_WIN_CLICK_OK, this)
}
,
canvas.app.location.view.PopupWin.prototype.hideWinHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.POPUP_WIN_CLICK_CANCEL, this)
}
,
canvas.app.location.view.PopupWin.prototype.info_tfLinkHandler = function(t) {
    ExternalInterface.call(t.params)
}
,
canvas.app.location.view.PopupWin.prototype.destroy = function() {
    this.parent && this.parent.removeChild(this),
    this.checkBox && canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_REMOVE, null, {
        target: this.checkBox
    }),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_ok, this.confirmHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_cancel, this.hideWinHandler, this),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.location.view.MapSide = function() {
    Object.defineProperty(this, "_width", {
        get: function() {
            return this.curls.width
        },
        set: function(t) {
            this.resize(t)
        }
    }),
    Object.defineProperty(this, "_height", {
        get: function() {
            return this.curls.height
        },
        set: function(t) {
            this.hh = t,
            this.resize(this.ww)
        }
    }),
    Object.defineProperty(this, "isVisible", {
        get: function() {
            return !1
        },
        set: function(t) {
            this.visible = t,
            canvas.app.location.model.localStorage.set("MapSide", t ? "1" : "0")
        }
    }),
    Object.defineProperty(this, "active", {
        get: function() {
            return !1
        },
        set: function(t) {
            t ? this.activate() : this.deactivate()
        }
    }),
    canvas.px.Container.call(this);
    var t = canvas.app.location.model;
    this.isOvered = !1,
    this.hh = t.MIN_STAGE_HEIGHT - 8,
    this.curls = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"),95,130,95,130),
    this.curls.height = this.hh,
    this.caption = new canvas.ui.Text(t.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,16769466,100,20,"center"),
    this.caption.text = t.STRINGS_ARR[t.S_MAP],
    this.caption.y = -4,
    this.header = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"),31,0,31,0),
    this.header.width = this.caption.field.textWidth + 70,
    this.header.y = -6,
    this.miniMap = new canvas.app.location.view.MiniMap,
    canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_OVER, this.miniMap, this.wayOverHandler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_OUT, this.miniMap, this.wayOutHandler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.WAY_CLICK, this.miniMap, this.wayClickHandler, this),
    this.miniMap.x = -3,
    this.mapZoom = new canvas.app.location.view.elements.MapZoom,
    canvas.EventManager.addEventListener(canvas.app.location.Event.REFRESH_MAP, this.mapZoom, this.refreshMapHandler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.ZOOM_IN, this.mapZoom, this.zoomInMapHandler, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.ZOOM_OUT, this.mapZoom, this.zoomOutMapHandler, this),
    this.mapZoom.y = this.hh - this.mapZoom.height,
    this.mapMask = new canvas.px.Mask(t.MAP_WIDTH,this.hh - 10),
    this.miniMap.mask = this.mapMask,
    this.addChild(this.miniMap),
    this.addChild(this.curls),
    this.addChild(this.header),
    this.addChild(this.caption),
    this.addChild(this.mapZoom),
    this.addChild(this.mapMask),
    this.interactive = !0,
    this.mouseover = this.rollOverHandler.bind(this),
    this.mouseout = this.rollOutHandler.bind(this)
}
,
canvas.app.location.view.MapSide.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.MapSide.prototype.resize = function(t) {
    var e = canvas.app.location.model;
    this.ww = t,
    this.curls.width = this.ww,
    this.curls.height = this.hh,
    this.caption.x = Math.round((t - this.caption._width) / 2) + 1,
    this.header.x = Math.round((t - this.header.width) / 2),
    this.mapZoom.y = this.hh - this.mapZoom.height,
    this.mapMask.setSize(e.MAP_WIDTH, this.hh - 10),
    this.miniMap.resizeMap()
}
,
canvas.app.location.view.MapSide.prototype.updateFlag = function() {
    this.miniMap.updateFlag()
}
,
canvas.app.location.view.MapSide.prototype.build = function() {
    this.miniMap.build()
}
,
canvas.app.location.view.MapSide.prototype.wayOverHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.WAY_OVER, this, t.params)
}
,
canvas.app.location.view.MapSide.prototype.wayOutHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.WAY_OUT, this)
}
,
canvas.app.location.view.MapSide.prototype.wayClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.WAY_CLICK, this, t.params)
}
,
canvas.app.location.view.MapSide.prototype.refreshMapHandler = function() {
    this.miniMap.refreshMap()
}
,
canvas.app.location.view.MapSide.prototype.zoomInMapHandler = function() {
    this.miniMap.zoomMode(2),
    this.mapZoom.zoomMode(2)
}
,
canvas.app.location.view.MapSide.prototype.zoomOutMapHandler = function() {
    this.miniMap.zoomMode(1),
    this.mapZoom.zoomMode(1)
}
,
canvas.app.location.view.MapSide.prototype.rollOverHandler = function() {
    this.isOvered = !0
}
,
canvas.app.location.view.MapSide.prototype.rollOutHandler = function() {
    this.isOvered = !1
}
,
canvas.app.location.view.MapSide.prototype.activate = function() {
    this.miniMap.filters = []
}
,
canvas.app.location.view.MapSide.prototype.deactivate = function() {
    this.miniMap.filters = [canvas.Functions.getGreyScale(.5)]
}
,
canvas.app.location.view.MiniMap = function() {
    canvas.px.Container.call(this),
    this.isBuilded = !1
}
,
canvas.app.location.view.MiniMap.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.MiniMap.prototype.updateFlag = function() {
    this.map && this.isBuilded && this.map.fastUpdateFlag && this.map.fastUpdateFlag.call(this.map)
}
,
canvas.app.location.view.MiniMap.prototype.refreshMap = function() {
    this.map && this.isBuilded && this.map.refreshFlag && this.map.refreshFlag.call(this.map)
}
,
canvas.app.location.view.MiniMap.prototype.zoomMode = function(t) {
    this.map && this.isBuilded && (1 == t ? this.map.zoomOut && this.map.zoomOut.call(this.map, t) : this.map.zoomIn && this.map.zoomIn.call(this.map, t))
}
,
canvas.app.location.view.MiniMap.prototype.wheelMouse = function(t, e) {
    null == e && (e = "y"),
    this.map && this.isBuilded && this.map.wheelMouse && this.map.wheelMouse.call(this.map, t, e)
}
,
canvas.app.location.view.MiniMap.prototype.resizeMap = function() {
    this.map && this.isBuilded && this.map.resize && this.map.resize.call(this.map)
}
,
canvas.app.location.view.MiniMap.prototype.swfObject = function(t) {
    this.map && this.isBuilded && this.map.swfObjectData && this.map.swfObjectData.call(this.map, t)
}
,
canvas.app.location.view.MiniMap.prototype.build = function() {
    this.isBuilded || (this.isBuilded = !0,
    this.map = new canvas.app.CanvasWorld({},this,!0))
}
,
canvas.app.location.view.MiniMap.prototype.selectWay = function(t, e) {}
,
canvas.app.location.view.MiniMap.prototype.unSelectWay = function() {}
,
canvas.app.location.view.MiniMap.prototype.goToWay = function(t, e) {
    e = {
        arr: t,
        areaWaypoints: e
    };
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.WAY_CLICK, this, e)
}
,
canvas.app.location.view.MiniMap.prototype.zoomModeAnswer = function(t) {
    1 == t ? canvas.EventManager.dispatchEvent(canvas.app.location.Event.ZOOM_OUT, this) : canvas.EventManager.dispatchEvent(canvas.app.location.Event.ZOOM_IN, this)
}
,
canvas.app.location.view.ListSide = function() {
    Object.defineProperty(this, "_width", {
        get: function() {
            return this.curls.width
        },
        set: function(t) {}
    }),
    Object.defineProperty(this, "_height", {
        get: function() {
            return this.curls.height
        },
        set: function(t) {
            this.hh = t,
            this.resize()
        }
    }),
    Object.defineProperty(this, "showOverOnItem", {
        get: function() {
            return !1
        },
        set: function(t) {
            this.list.showOverOnItem = t
        }
    }),
    Object.defineProperty(this, "active", {
        get: function() {
            return !1
        },
        set: function(t) {
            t ? this.activate() : this.deactivate()
        }
    }),
    Object.defineProperty(this, "partActive", {
        get: function() {
            return !1
        },
        set: function(t) {
            t && this.partiallyDeactivate()
        }
    }),
    canvas.px.Container.call(this);
    var t = canvas.app.location.model;
    t.listOveredFlag = !1,
    this.bg = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "bg_list")),
    this.bg.position.set(14, 14),
    this.bg.width = 203,
    this.curls = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"),95,130,95,130),
    this.curls.width = 232,
    this.curls.height = t.MIN_STAGE_HEIGHT - 8,
    this.curls2 = new canvas.app.location.view.elements.CurlBack,
    this.curls2.setSize(196, t.MIN_STAGE_HEIGHT - 36),
    this.curls2.position.set(18, 14),
    this.bg.height = this.curls2.height;
    var e = 0 == t.OBJ_TOWN.ftime_max ? 0 : 50;
    this.list = new canvas.app.location.view.List(167,256 - e,t.OBJ_TOWN.items,this),
    this.list.position.set(34, 30),
    this.partiallyDeactivate(),
    this.timer = new canvas.app.location.view.elements.LocTimer(t.OBJ_TOWN.ftime,t.OBJ_TOWN.ftime_max),
    canvas.EventManager.addEventListener(canvas.app.location.Event.TIMER_DONE, this.timer, this.timerDoneHandler, this),
    this.addChild(this.bg),
    this.addChild(this.curls2),
    this.addChild(this.curls),
    this.addChild(this.list),
    this.addChild(this.timer),
    this.timer.position.set(Math.round((this.curls.width - this.timer.width) / 2), this.curls.height - this.timer.height - 18),
    this.interactive = !0,
    this.mouseover = this.rollOverHandler.bind(this),
    this.mouseout = this.rollOutHandler.bind(this)
}
,
canvas.app.location.view.ListSide.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.ListSide.prototype.timerStart = function() {
    this.timer.timerStart()
}
,
canvas.app.location.view.ListSide.prototype.partiallyDeactivate = function() {
    this.list.active = !1
}
,
canvas.app.location.view.ListSide.prototype.timerDoneHandler = function() {
    canvas.app.location.model.TRANSITION_POSSIBLE = !0
}
,
canvas.app.location.view.ListSide.prototype.activate = function() {
    this.list.activeAll = !0
}
,
canvas.app.location.view.ListSide.prototype.deactivate = function() {
    this.list.activeAll = !1
}
,
canvas.app.location.view.ListSide.prototype.rollOverHandler = function() {
    canvas.app.location.model.listOveredFlag = !0,
    this.list.listRollOver()
}
,
canvas.app.location.view.ListSide.prototype.rollOutHandler = function() {
    canvas.app.location.model.listOveredFlag = !1,
    this.list.listRollOut()
}
,
canvas.app.location.view.ListSide.prototype.resize = function() {
    this.curls.height = this.hh,
    this.curls2.height = this.hh - 28,
    this.timer.y = this.curls.height - this.timer.height - 18,
    this.bg.height = this.curls2.height,
    this.list.resize(this.hh)
}
,
canvas.app.location.view.ListSide.prototype.destroy = function() {
    this.list && this.list.destroy(),
    this.timer && this.timer.destroy(),
    this.mouseover = null,
    this.mouseout = null,
    canvas.EventManager.removeEventListener(canvas.app.location.Event.TIMER_DONE, this.timer, this.timerDoneHandler, this),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.location.view.List = function(t, e, a, s) {
    Object.defineProperty(this, "showOverOnItem", {
        get: function() {
            return !1
        },
        set: function(t) {
            this.overOnItem(t)
        }
    }),
    Object.defineProperty(this, "active", {
        get: function() {
            return !1
        },
        set: function(t) {
            t ? this.activate() : this.deactivate()
        }
    }),
    Object.defineProperty(this, "activeAll", {
        get: function() {
            return !1
        },
        set: function(t) {
            t ? this.activate() : this.deactivate(!0)
        }
    }),
    canvas.px.Container.call(this),
    this.actived = !0,
    this.items = {},
    this.ww = t,
    this.hh = e,
    this.listSide = s,
    this.items = a,
    this.cont_mask = new canvas.px.Mask,
    this.cont = new canvas.px.Container,
    this.addChild(this.cont),
    this.addChild(this.cont_mask),
    this.cont.mask = this.cont_mask,
    this.create_masked_cont(),
    this.intervalId = setInterval(this.finderTik.bind(this), 2e3),
    this.finderTik(),
    this.activate()
}
,
canvas.app.location.view.List.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.List.prototype.activate = function() {
    this.actived = !0,
    this.create_masked_cont()
}
,
canvas.app.location.view.List.prototype.deactivate = function(t) {
    null == t && (t = !1),
    this.create_masked_cont(!0, t)
}
,
canvas.app.location.view.List.prototype.create_masked_cont = function(t, e) {
    null == t && (t = !1),
    null == e && (e = !1);
    var a = canvas.app.location.model;
    this.destroyAllBtns(),
    this.cont_mask.setSize(this.ww - 2, this.hh - 24);
    for (var s = 0, i = [[a.MODE_AREA, a.STRINGS_ARR[a.S_LOCATIONS], 0], [a.MODE_HOUSE, a.STRINGS_ARR[a.S_OBJECTS], 0], [a.MODE_NPC, a.STRINGS_ARR[a.S_NPCs], 0]], n = 0; n < i.length; n++) {
        var o = new canvas.ui.Text(a.IsBold ? canvas.Const.FONT_TAHOMA_10_BOLD : canvas.Const.FONT_TAHOMA_10,16771765,100,20,"center");
        o.text = i[n][1],
        o.position.set(Math.round((this.ww - o._width) / 2), 3);
        var r = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "list_sliser"),56,0,56,0);
        r.width = Math.round(o.field.textWidth) + 110,
        r.x = Math.round((this.ww - r.width) / 2);
        var c, p, h = new canvas.px.Container;
        for (c in h.addChild(r),
        h.addChild(o),
        h.y = s,
        this.items)
            this.items[c].mode == i[n][0] && (p = new canvas.app.location.view.elements.ListItem(this.ww,18,this.items[c]),
            this.items[c].btn = p,
            this.items[c].hide || (0 == i[n][2] && (this.cont.addChild(h),
            i[n][2] = 1,
            s += 21),
            p.position.set(0, s),
            !t || this.items[c].mode == a.MODE_NPC && !e ? (canvas.EventManager.addEventListener(canvas.app.location.Event.ITEM_OVER, null, this.itemBtnMouseOver, this),
            p.interactive = !0) : p.gray = !0,
            s += 21,
            this.cont.addChild(p)))
    }
    this.creat_scroll(),
    this.update()
}
,
canvas.app.location.view.List.prototype.listRollOver = function() {
    for (var t in this.items)
        this.items[t].btn.overList()
}
,
canvas.app.location.view.List.prototype.listRollOut = function() {
    for (var t in this.items)
        this.items[t].btn.outList()
}
,
canvas.app.location.view.List.prototype.itemBtnMouseOver = function(t) {
    for (var e in this.items)
        this.items[e].btn.id != t.params.id && this.items[e].btn.refresh()
}
,
canvas.app.location.view.List.prototype.finderTik = function() {
    var t = canvas.app.location.model
      , e = t.FinishLocation;
    t.getCoordinates(),
    t.FinishLocation != e ? (t.ARR_LOCATIONS = [],
    t.ARR_LOCATIONS = t.ARR_LOCATIONS.concat(t.finder.find(parseInt(t.FlagLocation), parseInt(t.FinishLocation))),
    this.actived ? this.activate() : this.deactivate()) : null == t.FinishLocation && (t.ARR_LOCATIONS = [])
}
,
canvas.app.location.view.List.prototype.update = function() {
    var t, e = canvas.app.location.model;
    for (t in this.items) {
        var a = this.items[t].btn;
        -1 != e.ARR_LOCATIONS.indexOf(parseInt(this.items[t].loc_id)) || 0 <= e.blinkIds.indexOf(parseInt(this.items[t].id)) ? a.light = !0 : a.light = !1
    }
}
,
canvas.app.location.view.List.prototype.creat_scroll = function() {
    var t, e, a, s;
    this.scroll || (t = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_up")),
    e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_down")),
    (a = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "scroll_item"),0,3,0,3)).height = 40,
    this.drag = a,
    (s = new canvas.px.Graphics).beginFill(9764864, .1),
    s.drawRect(0, 0, 16, 100),
    s.endFill(),
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,t,e,s,a,this),
    this.scroll.padding = 15,
    this.scroll.step = 15,
    this.scroll.position.set(this.ww, -16)),
    this.scroll.setSize(16, this.hh + (this.listSide.timer && this.listSide.timer.visible ? -4 : 17)),
    this.scroll.max = this.cont.height - (this.hh - 28),
    this.scroll.current = this.scroll.current,
    this.drag.height = Math.min(this.hh - 70, this.hh - this.scroll.max),
    this.drag.height < 50 && (this.drag.height = 50),
    this.scroll.isDisabled() ? (this.scroll.parent && this.removeChild(this.scroll),
    canvas.EventManager.removeEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this)) : (this.scroll.parent || this.addChild(this.scroll),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this))
}
,
canvas.app.location.view.List.prototype.resize = function(t) {
    this.hh = t - (this.listSide.timer.visible ? 75 : 35),
    this.create_masked_cont()
}
,
canvas.app.location.view.List.prototype.scrollHandler = function() {
    this.cont.y = -this.scroll.current
}
,
canvas.app.location.view.List.prototype.overOnItem = function(t) {
    for (var e in this.items) {
        var a;
        this.items[e].hide || (a = this.items[e].btn,
        t && parseInt(a.id) == parseInt(t.id) ? (a.select = !0,
        this.toListPosition(a.y)) : a.select = !1)
    }
}
,
canvas.app.location.view.List.prototype.toListPosition = function(t) {
    this.scroll.parent && (this.scroll.current = t - this.hh + 80,
    this.scrollHandler())
}
,
canvas.app.location.view.List.prototype.destroyAllBtns = function() {
    canvas.Functions.destroyChildren(this.cont)
}
,
canvas.app.location.view.List.prototype.destroy = function() {
    clearInterval(this.intervalId),
    clearTimeout(this.timeoutId),
    canvas.EventManager.removeEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this),
    this.destroyAllBtns(),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.location.view.LocSide = function() {
    this._hPos = 0,
    Object.defineProperty(this, "hPos", {
        get: function() {
            return this._hPos
        },
        set: function(t) {}
    }),
    Object.defineProperty(this, "_width", {
        get: function() {
            return this.curls.width
        },
        set: function(t) {
            this.ww = t
        }
    }),
    Object.defineProperty(this, "_height", {
        get: function() {
            return this.curls.height
        },
        set: function(t) {
            this.hh = t,
            this.activeHeight = t - 25,
            canvas.app.location.model.firstResize || this.loadLocation(),
            this.resize(this.ww),
            canvas.app.location.model.firstResize = !1
        }
    }),
    Object.defineProperty(this, "bg", {
        get: function() {
            return this.objTownBg
        },
        set: function(t) {}
    }),
    Object.defineProperty(this, "areaID", {
        get: function() {
            return this.objTown.area_id
        },
        set: function(t) {}
    }),
    Object.defineProperty(this, "showOverOnAnim", {
        get: function() {
            return !1
        },
        set: function(t) {
            null != this.location && (this.location.showOverOnAnim = t)
        }
    }),
    Object.defineProperty(this, "showOutOnAnim", {
        get: function() {
            return !1
        },
        set: function(t) {
            null != this.location && (this.location.showOutOnAnim = t),
            this.animOutHandler()
        }
    }),
    Object.defineProperty(this, "active", {
        get: function() {
            return !1
        },
        set: function(t) {
            t ? this.activate() : this.deactivate()
        }
    }),
    Object.defineProperty(this, "moveToAnim", {
        get: function() {
            return !1
        },
        set: function(t) {
            this.moveToAnimHandler({
                params: t
            })
        }
    }),
    canvas.px.Container.call(this),
    this.objTown = {},
    this.locationCurType = "small",
    this.locationCurTypePrev = "small",
    this.actived = !0,
    this.locIsLoaded = !1,
    this.locMidIsLoaded = !1,
    this.locIsStartLoading = !1,
    this.locMidIsSartLoading = !1,
    this.eventsContainer = new canvas.px.Container,
    this.mapWasMoved = !1,
    this.hPosMax = 0,
    this.vScrollActive = !1;
    var t, e = canvas.app.location.model;
    this.hh = e.MIN_STAGE_HEIGHT - 8,
    this.cont = new canvas.px.Container,
    this.cont.y = -1,
    this.cont2 = new canvas.px.Container,
    this.location_cont = new canvas.px.Container,
    this.location_cont.position.set(14, 14),
    this.location_mask = new canvas.px.Graphics,
    this.cont.addChild(this.location_cont),
    this.cont.mask = this.location_mask,
    this.objTown = e.OBJ_TOWN,
    this.objTownBg = this.objTown.bg,
    this.curls = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"),95,130,95,130),
    this.curls.height = this.hh - 3,
    this.caption = new canvas.ui.Text(e.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,16769466,1e3,20,"center"),
    this.caption.text = String(this.objTown.title),
    this.caption.setSize(this.caption.textWidth),
    this.caption.y = -4,
    this.header = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"),31,0,31,0),
    this.header.width = this.caption._width + 70,
    this.header.y = -6,
    this.drag = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_slider"),[47, 0, 47, 0]),
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL,null,null,new canvas.px.Mask(100,19),this.drag,this.cont,!0),
    this.scroll.padding = 15,
    this.scroll.step = 30,
    this.scroll.position.set(this.ww, -16),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this),
    this.dragV = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_slider_v"),[0, 47, 0, 47]),
    this.scrollV = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,null,null,new canvas.px.Mask(19,100),this.dragV,this.cont2,!0,!1),
    this.scrollV.padding = 15,
    this.scrollV.step = 30,
    this.scrollV.position.set(this.ww, 0),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollV, this.scrollVHandler, this),
    this.techBtn = new canvas.app.location.view.popups.TechBtn(e.par,canvas.app.location.Event.ENTER_FRAME),
    this.infoBtn = new canvas.app.location.view.popups.InfoBtn(e.par)
    if(top?.document.gameFlags.hideCasino == false) {
        e.CasinoLink && (this.casinoBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "casino")),
        this.casinoBtn.position.set(13, 207),
        this.casinoBtn.sprite.hitArea = new canvas.px.Circle(38,58,27),
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
            target: this.casinoBtn,
            params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(e.CasinoIsGold ? canvas.Translator.getText(735) : canvas.Translator.getText(734)))
        }),
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.casinoBtn, this.onCasionClick, this))
    }
    if(top?.document.gameFlags.hideDiceGame == false) {
        e.diceGameEnabled && (this.diceGameButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "dice_game")),
        this.diceGameButton.sprite.hitArea = new canvas.px.Circle(46,46,36),
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
            target: this.diceGameButton,
            params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(700)))
        }),
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.diceGameButton, this.onDiceGameClick, this))
    }
    this.magicMirrorButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "icon_mirror")),
    this.magicMirrorButton.x = 10,
    this.magicMirrorButton.visible = e.magicMirrorEndTime > e.serverTime.getTime(),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.magicMirrorButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(732)))
    }),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.magicMirrorButton, this.onMagicMirrorClick, this),
    this.addChild(this.cont2),
    this.cont2.addChild(this.cont),
    this.addChild(this.location_mask),
    null != this.casinoBtn && this.addChild(this.casinoBtn),
    null != this.diceGameButton && this.addChild(this.diceGameButton),
    this.addChild(this.curls),
    this.addChild(this.header),
    this.addChild(this.caption),
    this.addChild(this.techBtn),
    this.techBtn.position.set(1028, 305),
    this.addChild(this.infoBtn),
    this.infoBtn.position.set(1080, 105),
    this.addChild(this.scroll),
    this.addChild(this.scrollV),
    this.addChild(this.magicMirrorButton),
    this.eventsContainer = new canvas.px.Container,
    this.addChild(this.eventsContainer),
    this.eventsContainer.position.set(15, 70);
    if(top?.document.gameFlags.hideNPCEvents == false) {
        for (var a = 0; a < e.NPCEvents.length; a++)
        t = e.NPCEvents[a],
        t = new canvas.app.location.view.popups.NPCEventBtn(t),
        this.eventsContainer.addChild(t);
        this.updateNPCEvents()
    }
    canvas.EventManager.addEventListener(canvas.app.location.Event.UPDATE_NPC_EVENTS, null, this.updateNPCEvents, this),
    canvas.EventManager.addEventListener(canvas.app.location.Event.MOVE_TO_ANIM, null, this.moveToAnimHandler, this)
}
,
canvas.app.location.view.LocSide.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.LocSide.prototype.scrollHandler = function() {
    this.scroll.isDisabled() ? this.location_cont.x = 0 : this.location_cont.x = -Math.round(this.scroll.current)
}
,
canvas.app.location.view.LocSide.prototype.scrollVHandler = function() {
    this.scrollV.isDisabled() ? this.location_cont.y = "mid" == this.locationCurType ? 0 : 15 : this.location_cont.y = ("mid" == this.locationCurType ? 0 : 15) - Math.round(this.scrollV.current)
}
,
canvas.app.location.view.LocSide.prototype.onCasionClick = function() {
    canvas.Functions.navigateToURL(canvas.app.location.model.CasinoLink, "_self")
}
,
canvas.app.location.view.LocSide.prototype.onDiceGameClick = function() {
    openHeavensGift(canvas.app.location.model.canvasMinigamesFlag),
    canvas.app.location.model.diceGameEnabled = !1,
    this.update()
}
,
canvas.app.location.view.LocSide.prototype.update = function() {
    this.diceGameButton && (canvas.app.location.model.diceGameEnabled ? this.diceGameButton.parent || (this.addChild(this.diceGameButton),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.diceGameButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(700)))
    }),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.diceGameButton, this.onDiceGameClick, this)) : this.diceGameButton.parent && (this.removeChild(this.diceGameButton),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_REMOVE, null, {
        target: this.diceGameButton
    }),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.diceGameButton, this.onDiceGameClick, this)))
}
,
canvas.app.location.view.LocSide.prototype.onMagicMirrorClick = function() {
    _top().openMagicMirror(canvas.app.location.model.canvasMinigamesFlag)
}
,
canvas.app.location.view.LocSide.prototype.loadLocation = function() {
    this.locMidIsSartLoading && !this.locMidIsLoaded || this.locIsStartLoading && !this.locIsLoaded || (this.locationCurTypePrev = this.locationCurType,
    canvas.app.location.model.hh > canvas.app.location.Const.LOC_SMALL_HEIGHT && "" != this.objTown.bg_mid ? (this.locationCurType = "mid",
    this.locMidIsSartLoading ? this.locMidIsLoaded && (this.location = this.location_mid,
    this.resizeLocation()) : (this.startLoad(this.objTown.bg_mid, this.getLocationMid),
    this.locMidIsSartLoading = !0)) : (this.locationCurType = "small",
    this.locIsStartLoading ? this.locIsLoaded && (this.location = this.location_small,
    this.resizeLocation()) : (this.startLoad(this.objTown.bg, this.getLocation),
    this.locIsStartLoading = !0)))
}
,
canvas.app.location.view.LocSide.prototype.loadProgress = function(t) {
    this.preloader && this.preloader.gotoAndStop(Math.round(t.params.progress))
}
,
canvas.app.location.view.LocSide.prototype.loadCompleteOperations = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.getLocationMid, this),
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.getLocation, this),
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.loadProgress, this),
    this.preloader && (this.preloader.destroy(),
    delete this.preloader)
}
,
canvas.app.location.view.LocSide.prototype.startLoad = function(t, e) {
    this.sky && (this.sky.visible = !1),
    this.snow && (this.snow.visible = !1);
    t = canvas.Config.areasPath + t + "/" + t;
    this.preloader = new canvas.px.MovieClip(canvas.Config.effectsPath + "preloader"),
    this.preloader.frameEvent = canvas.app.location.Event.ENTER_FRAME,
    this.preloader.position.set(Math.round(this.ww / 2), Math.round(this.hh / 2)),
    this.addChild(this.preloader),
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, e, this),
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.loadProgress, this),
    canvas.ResourceLoader.add([t + ".mci", t + ".json"])
}
,
canvas.app.location.view.LocSide.prototype.getLocation = function(t) {
    this.loadCompleteOperations(),
    this.location_small = new canvas.app.location.view.LocContents(this.objTown.bg,canvas.app.location.model.OBJ_TOWN.items),
    this.location = this.location_small,
    null != this.location ? this.completeLocation() : canvas.app.location.log("ERR: found old location [ " + this.objTown.bg + " ]", 16711680)
}
,
canvas.app.location.view.LocSide.prototype.getLocationMid = function(t) {
    this.loadCompleteOperations(),
    this.location_mid = new canvas.app.location.view.LocContents(this.objTown.bg_mid,canvas.app.location.model.OBJ_TOWN.items),
    this.location = this.location_mid,
    null != this.location ? this.completeLocation() : canvas.app.location.log("ERR: found old location [ " + objTown.bg + " ]", 16711680)
}
,
canvas.app.location.view.LocSide.prototype.completeLocation = function() {
    switch (this.locationCurType) {
    case "small":
        this.locIsLoaded = !0;
        break;
    case "mid":
        this.locMidIsLoaded = !0
    }
    this.location_cont.addChild(this.location),
    this.sky && (this.sky.visible = !0),
    this.snow && (this.snow.visible = !0),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.COMPLETE, null, this),
    this.resizeLocation(),
    this.setScrollSize(this.ww - 28),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.RESIZE),
    this.resetHorizontalScrollPos()
}
,
canvas.app.location.view.LocSide.prototype.setSky = function(t) {
    this.sky = t,
    this.location_cont.addChildAt(t, 0)
}
,
canvas.app.location.view.LocSide.prototype.setSnow = function(t) {
    this.snow = t,
    this.cont.addChild(this.snow)
}
,
canvas.app.location.view.LocSide.prototype.resetHorizontalScrollPos = function() {
    this.scroll && (this.scroll.current = Math.round(.5 * this.scroll.max)),
    this.scrollHandler(),
    this.scrollV && (this.scrollV.current = this.scrollV.max)
}
,
canvas.app.location.view.LocSide.prototype.resize = function(t) {
    var e = this.getLocationHeight()
      , a = 0 == this.hPosMax ? 0 : this.hPos / this.hPosMax;
    null != this.location && (this.hPosMax = this.hh >= e ? 0 : e - this.hh,
    this.locationCurType != this.locationCurTypePrev ? this.resetHorizontalScrollPos() : this.hPos = this.hPosMax * a),
    this.location_mask.clear(),
    this.location_mask.beginFill(255, 1),
    this.location_mask.drawRect(15, 14, this.ww - 28, this.hh - 25),
    this.location_mask.endFill(),
    this.ww = t,
    this.curls.width = this.ww,
    this.curls.height = this.hh - 3,
    this.caption.x = Math.round((this.ww - this.caption.width) / 2),
    this.header.x = Math.round((this.ww - this.header.width) / 2),
    this.setScrollSize(this.ww - 28),
    this.scroll.position.set(30, this.hh - 20),
    this.scrollV.position.set(this.ww - 20, 0),
    this.techBtn.position.set(this.ww - 10, this.hh - 20),
    this.infoBtn.position.set(this.ww - 10, 100),
    null != this.casinoBtn && (this.casinoBtn.y = this.hh - 100),
    null != this.magicMirrorButton && (this.magicMirrorButton.y = this.hh - 130),
    null != this.diceGameButton && this.diceGameButton.position.set(this.techBtn.x - this.techBtn.width - 93, this.techBtn.y - 85),
    this.preloader && this.preloader.position.set(Math.round(this.ww / 2), Math.round(this.hh / 2))
}
,
canvas.app.location.view.LocSide.prototype.setScrollSize = function(t) {
    var e = this.getLocationWidth();
    this.scroll.max = e - t - 14,
    this.scroll.setSize(t - 35, 19);
    var a = this.scroll._width - 2 * this.scroll.padding - this.scroll.max;
    this.drag.setSize(a < 300 ? 300 : a, 19),
    0 == this.scroll.max ? (this.location_cont.x = 0,
    this.scroll.visible = !1) : (this.scroll.visible = !0,
    this.scroll.update(),
    this.scroll.current = Math.round(.5 * this.scroll.max)),
    t = this.hh - 14,
    e = this.getLocationHeight(),
    this.scrollV.max = e - t - 14,
    this.scrollV.setSize(19, this.hh),
    a = this.scrollV._height - this.scrollV.max,
    this.dragV.setSize(19, a < 200 ? 200 : a),
    0 == this.scrollV.max ? (this.location_cont.y = 0,
    this.scrollV.visible = !1) : (this.scrollV.visible = !0,
    this.scrollV.current = this.scrollV.max),
    this.scrollHandler(),
    this.scrollVHandler()
}
,
canvas.app.location.view.LocSide.prototype.resizeLocation = function() {
    switch (this.locationCurType) {
    case "small":
        null == this.location_small || this.location_small.parent || (this.location_cont.addChild(this.location_small),
        this.location_small.location.start()),
        null != this.location_mid && this.location_mid.parent && (this.location_cont.removeChild(this.location_mid),
        this.location_mid.location.stop());
        break;
    case "mid":
        null != this.location_small && this.location_small.parent && (this.location_cont.removeChild(this.location_small),
        this.location_small.location.stop()),
        null == this.location_mid || this.location_mid.parent || (this.location_cont.addChild(this.location_mid),
        this.location_mid.location.start())
    }
    this.scrollHandler(),
    this.scrollVHandler()
}
,
canvas.app.location.view.LocSide.prototype.updateNPCEvents = function() {
    for (var t, e = 0, a = this.eventsContainer.children.length; a--; )
        (t = this.eventsContainer.getChildAt(a)).x = e,
        e += t.imageWidth + 5
}
,
canvas.app.location.view.LocSide.prototype.activate = function() {
    this.actived = !0,
    this.cont.filters = []
}
,
canvas.app.location.view.LocSide.prototype.deactivate = function() {
    this.actived = !1
}
,
canvas.app.location.view.LocSide.prototype.grayscaleLoc = function(t) {
    this.location_cont.filters = t ? [canvas.Functions.getGreyScale(.3)] : []
}
,
canvas.app.location.view.LocSide.prototype.getLocationWidth = function() {
    return null == this.location ? canvas.app.location.Const.LOC_SMALL_WIDTH + 2 : "small" == this.locationCurType || "" == this.objTown.bg_mid ? canvas.app.location.Const.LOC_SMALL_WIDTH * this.location.scale.x : canvas.app.location.Const.LOC_MID_WIDTH * this.location.scale.x
}
,
canvas.app.location.view.LocSide.prototype.getLocationHeight = function() {
    return null == this.location || "small" == this.locationCurType || "" == this.objTown.bg_mid ? canvas.app.location.Const.LOC_SMALL_HEIGHT : canvas.app.location.Const.LOC_MID_HEIGHT
}
,
canvas.app.location.view.LocSide.prototype.moveToAnimHandler = function(t) {
    var e = t.params
      , a = this.getLocationWidth()
      , s = Math.round(.4 * a)
      , t = Math.round(.6 * a)
      , a = (e.getBounds(e.parent),
    e.x + e.width);
    a <= s ? this.scrollTargetValue = 0 : a - e.width >= t ? this.scrollTargetValue = this.scroll.max : this.scrollTargetValue = Math.round(.5 * this.scroll.max),
    clearTimeout(this.timeOutId),
    this.timeOutId = setTimeout(this.startMoveToAnim.bind(this), 1e3)
}
,
canvas.app.location.view.LocSide.prototype.animOutHandler = function(t) {
    this.timeOutId && clearTimeout(this.timeOutId),
    this.tween && this.tween.stop()
}
,
canvas.app.location.view.LocSide.prototype.startMoveToAnim = function() {
    this.tween = new canvas.px.Tween.Tween(this.scroll).to({
        current: this.scrollTargetValue
    }, 1e3).easing(canvas.px.Tween.Easing.Linear.None).onUpdate(this.scrollHandler.bind(this)).start()
}
,
canvas.app.location.view.LocSide.prototype.start = function() {
    this.location && this.location.location.start()
}
,
canvas.app.location.view.LocSide.prototype.stop = function() {
    this.location_small && this.location_small.location.stop(),
    this.location_mid && this.location_mid.location.stop()
}
,
canvas.app.location.view.LocContents = function(t, e) {
    Object.defineProperty(this, "showOverOnAnim", {
        get: function() {},
        set: function(t) {
            this.overOnAnim(t)
        }
    }),
    Object.defineProperty(this, "showOutOnAnim", {
        get: function() {},
        set: function(t) {
            this.outOnAnim(t)
        }
    }),
    canvas.px.Container.call(this),
    this.location = new canvas.app.location.view.LocationView(t),
    this.items = null == e ? new Object : this.cloneObject(e),
    this.addChild(this.location),
    this.location.ready ? this.preInit() : canvas.EventManager.addEventListener(canvas.app.location.Event.LOCATION_READY, null, this.preInit, this)
}
,
canvas.app.location.view.LocContents.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.LocContents.prototype.cloneObject = function(t) {
    if (t.clone)
        return t.clone();
    var e, a = new Object;
    for (e in t)
        "btn" != e && (a[e] = t[e] && "object" == typeof t[e] ? this.cloneObject(t[e]) : t[e]);
    return a
}
,
canvas.app.location.view.LocContents.prototype.preInit = function() {
    canvas.EventManager.removeEventListener(canvas.app.location.Event.LOCATION_READY, null, this.preInit, this),
    this.init(),
    this.update()
}
,
canvas.app.location.view.LocContents.prototype.init = function() {
    var t, e = canvas.app.location.model, a = {};
    for (t in this.items)
        a[this.items[t].id] = this.items[t];
    for (t in this.location.buttons) {
        var s, i = this.location.buttons[t], n = this.location.anims[t];
        a[t] ? !a[t].hide && a[t].name && (s = a[t].mode == e.MODE_AREA ? 6770493 : a[t].mode == e.MODE_NPC ? 6585600 : a[t].mode == e.MODE_HOUSE ? 11813888 : 6770493,
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
            target: i.button,
            params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(a[t].name,s))
        })) : (i && i.parent && i.parent.removeChild(i),
        n && n.parent && n.parent.removeChild(n))
    }
}
,
canvas.app.location.view.LocContents.prototype.update = function() {
    var t, e, a = !1, s = 0, i = canvas.app.location.model;
    if (i.USER_NUB)
        for (var n in i.OBJ_NUB_LOC_ITEMS)
            n == i.OBJ_TOWN.swf_file && (a = !0,
            s = i.OBJ_NUB_LOC_ITEMS[n]);
    for (e in this.location.anims)
        null != (t = this.location.anims[e]) && (a && parseInt(s) == parseInt(e) || 0 <= i.blinkIds.indexOf(parseInt(e)) ? t.alwaysLight = !0 : t.alwaysLight = !1)
}
,
canvas.app.location.view.LocContents.prototype.overOnAnim = function(t) {
    for (var e in this.location.anims) {
        var a = this.location.anims[e];
        e == t.id ? (a.show(),
        canvas.EventManager.dispatchEvent(canvas.app.location.Event.MOVE_TO_ANIM, null, a)) : a.hide()
    }
}
,
canvas.app.location.view.LocContents.prototype.outOnAnim = function(t) {
    for (var e in this.location.anims) {
        var a = this.location.anims[e];
        if (e == t.id) {
            a.hide();
            break
        }
    }
}
,
canvas.app.location.view.ResurrectWindow = function() {
    this._itemsCount = 0,
    Object.defineProperty(this, "itemsCount", {
        get: function() {
            return this._itemsCount
        },
        set: function(t) {
            if (this._itemsCount !== t) {
                this._itemsCount = t,
                this.items || (this.items = new Array);
                var e, a, s = this.items.length;
                if (s < this._itemsCount)
                    for (e = s; e < this._itemsCount; e++)
                        a = new canvas.app.location.view.elements.ResurrectItem,
                        this.container.addChild(a),
                        this.items.push(a),
                        a.position.set(e % 3 * (a.width - 20), Math.floor(e / 3) * (a.height + 10));
                for (s = this.items.length,
                e = 0; e < s; e++)
                    this.items[e].visible = e < this._itemsCount
            }
        }
    }),
    Object.defineProperty(this, "_width", {
        get: function() {
            return this.back.width
        }
    }),
    canvas.px.Window.call(this),
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "resurrect_back"))),
    this.header = new canvas.px.Container,
    this.addChild(this.header),
    this.header.interactive = !0,
    this.headerField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_16_BOLD_STROKE,16577975,this.back.width,25,"center","top",0,0),
    this.headerField.y = 4,
    this.headerField.text = canvas.Translator.getText(29),
    this.header.addChild(this.headerField),
    this.closeButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "cross")),
    this.closeButton.x = this.back.width - this.closeButton.width,
    this.closeButton.interactive = !0,
    this.addChild(this.closeButton),
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.container.position.set(20, 35);
    var t = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"))
      , e = new canvas.px.Container
      , a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_drag"),[0, 7, 0, 5])
      , s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    s.scale.y = -1,
    s.position.y = 2 - s.height,
    e.addChild(s),
    a.setSize(21, 40),
    this.drag = a,
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,t,e,new canvas.px.Mask(21,100),a,this),
    this.scroll.position.set(this.back.width - 40, 30),
    this.scroll.padding = 13,
    this.scroll.step = 30,
    this.scroll.setSize(21, 176),
    this.containerMask = new canvas.px.Mask(this.back.width,170),
    this.addChild(this.containerMask),
    this.containerMask.position.set(20, 35),
    this.container.mask = this.containerMask,
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this)
}
,
canvas.app.location.view.ResurrectWindow.prototype = Object.create(canvas.px.Window.prototype),
canvas.app.location.view.ResurrectWindow.prototype.scrollHandler = function() {
    this.scroll.parent && (this.container.y = 35 - this.scroll.current)
}
,
canvas.app.location.view.ResurrectWindow.prototype.update = function() {
    var t = canvas.app.location.model;
    if (null != t.resurrectData) {
        for (var e = 0, a = t.resurrectData.length, e = 0; e < a; e++)
            this.items[e].data = t.resurrectData[e];
        this.scroll.max = this.container.height - 170,
        6 < a ? this.addChild(this.scroll) : this.scroll.parent && this.removeChild(this.scroll),
        this.container.x = this.scroll.parent ? 20 : 29
    }
}
,
canvas.app.location.view.ProgressWin = function(t, e, a, s) {
    canvas.px.Container.call(this),
    this.interactive = !0;
    var i, n = canvas.app.location.model;
    null == t && (t = 0),
    null == e && (e = 0),
    null == a && (a = 0),
    null == s && (s = ""),
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "popup_progress_win")),
    0 != t && (t = t - (i = Date.now()),
    this.ctime = i,
    this.ftime = e,
    this.stime = a,
    this.stime -= t,
    this.ftime -= 1 + t,
    this.caption_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,15660470,this.bg.width,20,"center"),
    this.caption_tf.text = s,
    this.caption_tf.y = -4,
    this.header = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"),31,0,31,0),
    this.header.width = Math.round(this.caption_tf.textWidth) + 70,
    this.header.y = -7,
    this.but_cancel = new canvas.app.view.OldButton(12124160),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.but_cancel, this.cancelClickHandler, this),
    this.but_cancel.setTitle(n.STRINGS_ARR[n.S_CANCEL]),
    this.bar_red = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_bar_red")),
    this.bar_green = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_bar_green")),
    this.green_mask = new canvas.ui.Progress,
    this.green_mask.setSize(this.bar_green.width, this.bar_green.height),
    this.bar_green.mask = this.green_mask.sprite,
    this.addChild(this.bg),
    this.addChild(this.header),
    this.addChild(this.caption_tf),
    this.addChild(this.bar_red),
    this.addChild(this.bar_green),
    this.addChild(this.green_mask),
    this.addChild(this.but_cancel),
    this.header.x = Math.round((this.width - this.header.width) / 2),
    this.but_cancel.position.set(Math.round((this.width - this.but_cancel.width) / 2), 51),
    this.bar_red.position.set(Math.round((this.width - this.bar_red.width) / 2), 20),
    this.bar_green.position.set(this.bar_red.x, this.bar_red.y),
    this.green_mask.position.set(this.bar_green.x, this.bar_green.y))
}
,
canvas.app.location.view.ProgressWin.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.ProgressWin.prototype.startProgress = function() {
    this.ctime >= this.ftime ? canvas.EventManager.dispatchEvent(canvas.app.location.Event.PROGRESS_DONE) : canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.location.view.ProgressWin.prototype.frameHandler = function() {
    var t = Date.now();
    this.green_mask.progress = (t - this.stime) / (this.ftime - this.stime),
    1 <= this.green_mask.progress && (canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.PROGRESS_DONE))
}
,
canvas.app.location.view.ProgressWin.prototype.cancelClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.PROGRESS_CANCEL)
}
,
canvas.app.location.view.ProgressWin.prototype.destroy = function() {
    this.parent && this.parent.removeChild(this),
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.location.view.elements.LocationAnim = function(t) {
    this._alwaysLight = !1,
    Object.defineProperty(this, "alwaysLight", {
        get: function() {
            return this._alwaysLight
        },
        set: function(t) {
            (this._alwaysLight = t) ? (this.speed = .1,
            this.show()) : (this.speed = .25,
            this.hide())
        }
    }),
    canvas.px.Container.call(this),
    this.anim = t,
    this.direction = !1,
    this.alpha = 0,
    this.speed = .25
}
,
canvas.app.location.view.elements.LocationAnim.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.elements.LocationAnim.prototype.show = function() {
    this.direction = !0,
    this.addChild(this.anim),
    null != this.anim.gotoAndPlay && this.anim.gotoAndPlay(1),
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.location.view.elements.LocationAnim.prototype.hide = function() {
    this.direction = !1,
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.location.view.elements.LocationAnim.prototype.frameHandler = function() {
    this.direction ? (this.alpha += this.speed,
    1 <= this.alpha && (this.alpha = 1,
    this.alwaysLight ? this.direction = !this.direction : canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this))) : (this.alpha -= this.speed,
    this.alpha <= 0 && (this.alpha = 0,
    this.alwaysLight ? this.direction = !this.direction : (canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.frameHandler, this),
    null != this.anim.stop && this.anim.stop(),
    this.anim.parent && this.removeChild(this.anim))))
}
,
canvas.app.location.view.elements.Clocks = function() {
    canvas.px.Container.call(this),
    this.rect = new canvas.px.RoundRect(0,.4,80,34,10,10),
    this.addChild(this.rect),
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,14540253,80,20,"center"),
    this.title.y = 2,
    this.addChild(this.title),
    this.time = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,14540253,80,20,"center"),
    this.addChild(this.time),
    this.time.y = 18
}
,
canvas.app.location.view.elements.Clocks.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.elements.Clocks.prototype.update = function(t) {
    var e = new Date;
    this.title.text = canvas.Translator.getText(314) + ":",
    0 < t && (e.setTime(1e3 * t),
    this.time.text = canvas.Functions.setNumberLen(e.getMinutes()) + ":" + canvas.Functions.setNumberLen(e.getSeconds()),
    this.visible = !0)
}
,
canvas.app.location.view.elements.MapZoom = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.location.model;
    this.curl = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "zoom_curl")),
    this.openMapBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_map_btn")),
    this.plusBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_plus_btn")),
    this.minusBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_minus_btn")),
    this.refreshBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_refresh_btn")),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.openMapBtn, this.openMapHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.plusBtn, this.zoomInMapHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.minusBtn, this.zoomOutMapHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.refreshBtn, this.refreshMapHandler, this),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.openMapBtn,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(t.STRINGS_ARR[t.S_OPEN_WORLD_MAP]))
    }),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.plusBtn,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(t.STRINGS_ARR[t.S_ZOOM_IN]))
    }),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.minusBtn,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(t.STRINGS_ARR[t.S_ZOOM_OUT]))
    }),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.refreshBtn,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(t.STRINGS_ARR[t.S_REFRESH_MAP]))
    }),
    this.plusBtn.visible = !1,
    this.bgBtn = new canvas.px.Graphics,
    this.bgBtn.beginFill(0, 0),
    this.bgBtn.moveTo(5, -5),
    this.bgBtn.lineTo(this.curl.width + 5, this.curl.height - 5),
    this.bgBtn.lineTo(5, this.bgBtn.height - 5),
    this.bgBtn.lineTo(5, -5),
    this.bgBtn.endFill(),
    this.bgBtn.interactive = !0,
    this.openMapBtn.position.set(7, 56),
    this.plusBtn.position.set(20, 29),
    this.minusBtn.position.set(20, 29),
    this.refreshBtn.position.set(58, 72),
    this.addChild(this.curl),
    this.addChild(this.bgBtn),
    this.addChild(this.openMapBtn),
    this.addChild(this.plusBtn),
    this.addChild(this.minusBtn),
    this.addChild(this.refreshBtn)
}
,
canvas.app.location.view.elements.MapZoom.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.elements.MapZoom.prototype.zoomMode = function(t) {
    1 == t ? (this.plusBtn.visible = !0,
    this.minusBtn.visible = !1) : (this.plusBtn.visible = !1,
    this.minusBtn.visible = !0)
}
,
canvas.app.location.view.elements.MapZoom.prototype.refreshMapHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.REFRESH_MAP, this)
}
,
canvas.app.location.view.elements.MapZoom.prototype.zoomOutMapHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ZOOM_OUT, this)
}
,
canvas.app.location.view.elements.MapZoom.prototype.zoomInMapHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ZOOM_IN, this)
}
,
canvas.app.location.view.elements.MapZoom.prototype.openMapHandler = function() {
    openMap()
}
,
canvas.app.location.view.elements.CurlBack = function() {
    canvas.px.Container.call(this),
    this.curl2_0 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "curl2_0")),
    this.curl2_2 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "curl2_2")),
    this.curl2_5 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "curl2_5")),
    this.curl2_7 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "curl2_7")),
    this.curl2_1 = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "curl2_1"),20,17),
    this.curl2_3 = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "curl2_3"),17,24),
    this.curl2_4 = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "curl2_4"),17,24),
    this.curl2_6 = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "curl2_6"),20,17),
    this.addChild(this.curl2_0),
    this.addChild(this.curl2_1),
    this.addChild(this.curl2_2),
    this.addChild(this.curl2_3),
    this.addChild(this.curl2_4),
    this.addChild(this.curl2_5),
    this.addChild(this.curl2_6),
    this.addChild(this.curl2_7),
    this.setSize(100, 100)
}
,
canvas.app.location.view.elements.CurlBack.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.elements.CurlBack.prototype.setSize = function(t, e) {
    this.curl2_1.position.set(32, 0),
    this.curl2_1.width = t - 64,
    this.curl2_2.position.set(t - 32, 0),
    this.curl2_3.position.set(0, 32),
    this.curl2_3.height = e - 64,
    this.curl2_4.position.set(t - 17, 32),
    this.curl2_4.height = e - 64,
    this.curl2_5.position.set(0, e - 32),
    this.curl2_6.position.set(32, e - 17),
    this.curl2_6.width = t - 64,
    this.curl2_7.position.set(t - 32, e - 32)
}
,
canvas.app.location.view.elements.LocTimer = function(t, e) {
    canvas.px.Container.call(this);
    var a = canvas.app.location.model;
    this.timerIsDone = !1,
    this.ftime = t,
    this.ftime_max = e,
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "timer")),
    this.bar = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "timer_bar")),
    this.bar.position.set(20, 20),
    this.bar_mask = new canvas.px.Mask(this.bar.width,this.bar.height),
    this.bar_mask.position.set(20, 20),
    this.bar.mask = this.bar_mask,
    this.time_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,10551296,60,16,"center"),
    this.time_tf.text = "00:00:00",
    this.time_tf.position.set(69, 34),
    this.title_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,5391675,123,16,"center"),
    this.title_tf.text = canvas.app.location.model.STRINGS_ARR[a.S_TIME_TRANSITION],
    this.title_tf.position.set(38, 2),
    this.addChild(this.bg),
    this.addChild(this.bar),
    this.addChild(this.bar_mask),
    this.addChild(this.time_tf),
    this.addChild(this.title_tf),
    this.timer = setInterval(this.timerHandler.bind(this), 500)
}
,
canvas.app.location.view.elements.LocTimer.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.elements.LocTimer.prototype.timerStart = function() {
    this.bar.texture = canvas.ResourceLoader.getImage("ui", "timer_bar"),
    this.autoDone = !1;
    var t = 1e3 * (this.ftime_max - this.ftime);
    this.cur_time = Date.now(),
    this.start_time = this.cur_time - t,
    this.fin_time = this.cur_time + 1e3 * this.ftime,
    0 == this.ftime_max ? (this.timerDone(),
    this.visible = !1) : (this.intervalId = setInterval(this.timerTik.bind(this), 70),
    this.timerTik())
}
,
canvas.app.location.view.elements.LocTimer.prototype.timerTik = function() {
    this.cur_time = Date.now(),
    this.cur_time <= this.fin_time ? (this.time_tf.text = this.timeToStr(parseInt((this.fin_time - this.cur_time + 999) / 1e3)),
    this.bar_mask.scale.x = Math.min(1, 1 - (this.cur_time - this.start_time) / (this.fin_time - this.start_time))) : (clearInterval(this.intervalId),
    this.timerDone())
}
,
canvas.app.location.view.elements.LocTimer.prototype.timerDone = function() {
    var t = canvas.app.location.model;
    this.bar_mask.scale.x = 0,
    this.title_tf.text = t.STRINGS_ARR[t.S_TRANSITION_POSSIBLE],
    this.time_tf.text = "00:00:00",
    this.timerIsDone = !0,
    this.title_tf.color = 5391675,
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.TIMER_DONE, this)
}
,
canvas.app.location.view.elements.LocTimer.prototype.timeToStr = function(t) {
    var e = Math.floor(t / 3600);
    t -= 3600 * e;
    var a = Math.floor(t / 60)
      , t = t -= 60 * a;
    return canvas.Functions.setNumberLen(e) + ":" + canvas.Functions.setNumberLen(a) + ":" + canvas.Functions.setNumberLen(t)
}
,
canvas.app.location.view.elements.LocTimer.prototype.timerHandler = function() {
    this.timerIsDone ? 0 <= canvas.app.location.model.autoPenalty && !this.autoDone && (this.autoTime ? (this.bar_mask.scale.x = Math.min(1, 1 - (Date.now() - this.fin_time) / (this.autoTime - this.fin_time)),
    this.autoTime <= Date.now() && (canvas.app.location.model.manorAutoEnter ? (canvas.app.location.model.finishSessTarget(),
    canvas.Functions.navigateToURL("estate.php?mode=enter", "_self")) : canvas.EventManager.dispatchEvent(canvas.app.location.Event.AUTO_TURN, this),
    this.bar_mask.scale.x = 0,
    this.autoDone = !0)) : (this.autoTime = this.fin_time + 10 * this.ftime * canvas.app.location.model.autoPenalty,
    this.bar.texture = canvas.ResourceLoader.getImage("ui", "timer_bar_green"))) : this.title_tf.color = 13369344 == this.title_tf.color ? 5391675 : 13369344
}
,
canvas.app.location.view.elements.LocTimer.prototype.destroy = function() {
    clearInterval(this.intervalId),
    clearInterval(this.timer),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.location.view.elements.ListItem = function(t, e, a) {
    Object.defineProperty(this, "id", {
        get: function() {
            return parseInt(a.id)
        },
        set: function(t) {}
    }),
    Object.defineProperty(this, "confirm", {
        get: function() {
            return 1 == parseInt(this.item.confirm)
        },
        set: function(t) {}
    }),
    Object.defineProperty(this, "confirm_text", {
        get: function() {
            return this.item.confirm_text || null
        },
        set: function(t) {}
    }),
    Object.defineProperty(this, "href", {
        get: function() {
            return String(this.item.href)
        },
        set: function(t) {}
    }),
    Object.defineProperty(this, "farm", {
        get: function() {
            return String(this.item.farm)
        },
        set: function(t) {}
    }),
    Object.defineProperty(this, "overloaded", {
        get: function() {
            return 1 == parseInt(this.item.refresh)
        },
        set: function(t) {}
    }),
    Object.defineProperty(this, "select", {
        get: function() {
            return !1
        },
        set: function(t) {
            t ? this.showSelect() : this.hideSelect()
        }
    }),
    Object.defineProperty(this, "light", {
        get: function() {
            return !1
        },
        set: function(t) {
            t ? this.showLight() : this.hideLight(),
            this.compass && (this.compass.visible = t,
            this.compass.visible && (this.clock.visible = !1))
        }
    }),
    Object.defineProperty(this, "gray", {
        get: function() {
            return !1
        },
        set: function(t) {
            t ? this.showGray() : this.hideGray()
        }
    }),
    canvas.px.Container.call(this);
    var s = canvas.app.location.model;
    this.item = {},
    this.start_frame = 0,
    this.cur_frame = 0,
    this.stop_frame = 30,
    this.div = 1,
    this.isDestroyed = !1,
    this.item = a,
    this.ww = t,
    this.hh = e,
    this.cont = new canvas.px.Container,
    this.over_bg = new canvas.px.Graphics,
    this.over_bg.alpha = 0,
    this.light_bg = new canvas.px.Graphics,
    this.light_bg.alpha = 0,
    this.ico_bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", this.item.mode)),
    this.ico_bmp.position.set(4, 4),
    this.item.mode == s.MODE_AREA && (this.clock = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "clock")),
    this.clock.position.set(4, 4),
    this.clock.visible = !1,
    this.addChild(this.clock),
    this.compass = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "compass")),
    this.compass.position.set(3, 3),
    this.compass.visible = !1),
    this.creat_bg(this.over_bg, this.ww - 2, this.hh, 8742487, 16777215),
    this.creat_bg(this.light_bg, this.ww - 2, this.hh, 14243584, 16737792);
    e = this.item.mode == s.MODE_AREA ? 6770493 : this.item.mode == s.MODE_NPC ? 6585600 : this.item.mode == s.MODE_HOUSE ? 11813888 : 6770493;
    this.name_tf = new canvas.ui.Text(s.IsBold ? canvas.Const.FONT_TAHOMA_12_BOLD : canvas.Const.FONT_TAHOMA_12,e,300,20,"left"),
    this.name_tf.text = this.item.name,
    this.name_tf.position.set(22, 1),
    this.name_copy_tf = new canvas.ui.Text(s.IsBold ? canvas.Const.FONT_TAHOMA_12_BOLD : canvas.Const.FONT_TAHOMA_12,e,300,20,"left"),
    this.name_copy_tf.text = this.item.name,
    this.name_copy_tf.position.set(10 + this.name_tf.x + this.name_tf.field.textWidth, 1),
    this.txt_cont = new canvas.px.Container,
    this.txt_cont.addChild(this.name_tf),
    this.name_tf.x + this.name_tf.field.textWidth > this.ww && this.txt_cont.addChild(this.name_copy_tf),
    this.txt_mask = new canvas.px.Mask(this.name_tf._width,this.name_tf._height),
    this.txt_mask.x = 21,
    this.txt_cont.mask = this.txt_mask,
    this.cont.addChild(this.over_bg),
    this.cont.addChild(this.ico_bmp),
    this.cont.addChild(this.txt_cont),
    this.cont.addChild(this.txt_mask),
    this.addChild(this.cont),
    this.addChild(this.light_bg),
    this.compass && this.addChild(this.compass),
    this.buttonMode = !0,
    this.mouseover = this.mouseOverHandler.bind(this),
    this.mouseout = this.mouseOutHandler.bind(this),
    this.click = this.mouseClickHandler.bind(this),
    s.listOveredFlag && this.overList(),
    canvas.EventManager.addEventListener(canvas.app.location.Event.AUTO_TURN, null, this.autoTurnHandler, this)
}
,
canvas.app.location.view.elements.ListItem.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.elements.ListItem.prototype.refresh = function() {
    this.over_bg.alpha = 0
}
,
canvas.app.location.view.elements.ListItem.prototype.overList = function() {
    this.clock && (null == this.cont.filters || 0 == this.cont.filters.length ? (this.clock.visible = !1,
    this.ico_bmp.visible = !0) : (this.clock.visible = !this.compass.visible,
    this.ico_bmp.visible = !1))
}
,
canvas.app.location.view.elements.ListItem.prototype.outList = function() {
    null != this.clock && (this.clock.visible = !1,
    this.ico_bmp.visible = !0)
}
,
canvas.app.location.view.elements.ListItem.prototype.moveTxtHandler = function() {
    this.name_tf.x + this.name_tf.field.textWidth <= this.ww || (this.txt_cont.x < -this.txt_cont.width / 2 ? this.txt_cont.x = 3 : --this.txt_cont.x)
}
,
canvas.app.location.view.elements.ListItem.prototype.creat_bg = function(t, e, a, s, i) {
    t.beginFill(s, .8),
    t.drawRect(1, 0, e - 1, 1),
    t.drawRect(e - 1, 1, 1, a - 1),
    t.drawRect(0, a - 1, e - 1, 1),
    t.drawRect(0, 0, 1, a - 1),
    t.endFill(),
    t.beginFill(i, .15),
    t.drawRect(1, 1, e - 2, a - 2),
    t.endFill()
}
,
canvas.app.location.view.elements.ListItem.prototype.mouseClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ITEM_CLICK, null, this.item)
}
,
canvas.app.location.view.elements.ListItem.prototype.mouseOverHandler = function() {
    this.over_bg.alpha = 1,
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ITEM_OVER, null, this.item),
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this)
}
,
canvas.app.location.view.elements.ListItem.prototype.mouseOutHandler = function() {
    this.over_bg.alpha = 0,
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.ITEM_OUT, null, this.item),
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this),
    this.txt_cont.x = 0
}
,
canvas.app.location.view.elements.ListItem.prototype.showLight = function() {
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.lightBgEnterFrameHandler, this)
}
,
canvas.app.location.view.elements.ListItem.prototype.hideLight = function() {
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.lightBgEnterFrameHandler, this)
}
,
canvas.app.location.view.elements.ListItem.prototype.showSelect = function() {
    this.over_bg.alpha = 1,
    canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this)
}
,
canvas.app.location.view.elements.ListItem.prototype.hideSelect = function() {
    this.over_bg.alpha = 0,
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this),
    this.txt_cont.x = 0
}
,
canvas.app.location.view.elements.ListItem.prototype.showGray = function() {
    this.cont.filters = [canvas.Functions.getGreyScale(.5)],
    canvas.app.location.model.listOveredFlag && this.overList()
}
,
canvas.app.location.view.elements.ListItem.prototype.hideGray = function() {
    this.cont.filters = [],
    canvas.app.location.model.listOveredFlag && this.overList()
}
,
canvas.app.location.view.elements.ListItem.prototype.lightBgEnterFrameHandler = function() {
    this.cur_frame++,
    this.cur_frame < this.stop_frame ? this.light_bg.alpha = (this.div < 0 ? 1 : 0) + this.cur_frame / this.stop_frame * this.div : (this.cur_frame = this.start_frame,
    this.div *= -1),
    this.isDestroyed && canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.lightBgEnterFrameHandler, this)
}
,
canvas.app.location.view.elements.ListItem.prototype.autoTurnHandler = function() {
    this.compass && this.compass.visible && this.mouseClickHandler()
}
,
canvas.app.location.view.elements.ListItem.prototype.destroy = function() {
    this.isDestroyed = !0,
    this.lightBgEnterFrameHandler(),
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.moveTxtHandler, this),
    canvas.EventManager.removeEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.lightBgEnterFrameHandler, this),
    canvas.EventManager.removeEventListener(canvas.app.location.Event.AUTO_TURN, null, this.autoTurnHandler, this),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.location.view.elements.Snow = function(t, e) {
    canvas.px.Container.call(this),
    null == e && (e = canvas.app.location.Event.ENTER_FRAME),
    this.enterFrameEvent = e,
    this.count_snow = t,
    this.arr_snow = [],
    this.gravity = 3,
    this.share = new canvas.app.location.view.elements.SnowShare,
    this.setData(),
    this.id_interval = setInterval(this.setData.bind(this), 3e3)
}
,
canvas.app.location.view.elements.Snow.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.elements.Snow.prototype.setData = function() {
    var t = this.share.getData();
    this.count_snow || (this.count_snow = t.snow_count),
    this.wind = {},
    this.wind.x = t.wind.x,
    this.wind.y = t.wind.y;
    for (var e = this.arr_snow.length, a = 0; a < e; a++)
        2 < Math.abs(this.wind.x) ? this.arr_snow[a].vibration_max = 3 : this.arr_snow[a].vibration_max = 1
}
,
canvas.app.location.view.elements.Snow.prototype.init = function(t, e) {
    this.w = t,
    this.h = e,
    this.arr_snow = [];
    for (var a = 0; a < this.count_snow; a++) {
        var s = this.createSnowFlakes();
        canvas.EventManager.addEventListener(canvas.app.location.Event.SNOWBALL_KILL, s, this.killSnow, this),
        s.y = Math.round(this.h * Math.random()),
        this.addChild(s),
        this.arr_snow.push(s)
    }
}
,
canvas.app.location.view.elements.Snow.prototype.createSnowFlakes = function() {
    var t = new canvas.app.location.view.elements.SnowBall(this.w,this.h,this.wind,this.gravity,this.enterFrameEvent);
    return t.position.set(Math.round(this.w * Math.random()), -t.height),
    t
}
,
canvas.app.location.view.elements.Snow.prototype.killSnow = function(t) {
    t = t.target;
    t.initAlpha(),
    t.position.set(Math.round(this.w * Math.random()), -t.height)
}
,
canvas.app.location.view.elements.Sky = function(t) {
    canvas.px.Container.call(this),
    this.name = t,
    this.stopped = !0,
    this.anims = [],
    this.loopWidth = 1e3,
    t && (this.staticContent = new canvas.px.Container,
    this.dynamicContent = new canvas.px.Container,
    this.addChild(this.staticContent),
    this.addChild(this.dynamicContent),
    this.url = canvas.Config.skyPath + t + "/" + t,
    canvas.ResourceLoader.get(this.url + ".mci") ? this.init() : (canvas.ResourceLoader.add([this.url + ".mci"]),
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.init, this)))
}
,
canvas.app.location.view.elements.Sky.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.elements.Sky.prototype.init = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.init, this),
    this.data = canvas.ResourceLoader.get(this.url + ".mci").data,
    this.data.loopWidth && (this.loopWidth = this.data.loopWidth),
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.ready, this),
    this.data[canvas.px.MovieClipProps.children] ? canvas.ResourceLoader.add([this.url + ".json"]) : canvas.ResourceLoader.add([this.url + ".jpg"])
}
,
canvas.app.location.view.elements.Sky.prototype.ready = function() {
    if (canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.ready, this),
    this.data[canvas.px.MovieClipProps.children]) {
        var t;
        this.atlas = canvas.ResourceLoader.get(this.url + ".json").textures;
        for (var e = this.data[canvas.px.MovieClipProps.children].length, a = 0; a < e; a++)
            for (var s = this.data[canvas.px.MovieClipProps.children][a], i = "dynamic_layer" == s.name, n = 0; n < 3; n++)
                s.mc ? ((t = new canvas.px.MovieClipChild(s.mc,this.atlas,s.name + "/",null)).frameEvent = canvas.app.location.Event.ENTER_FRAME,
                this.anims.push[t],
                this.stopped ? t.gotoAndStop(1) : t.play()) : t = new canvas.px.Sprite(this.atlas[s.name + ".png"]),
                t.position.set(s.x - n * this.loopWidth, s.y),
                (i ? this.dynamicContent : this.staticContent).addChild(t)
    } else
        for (var o = 0; o < 3; o++)
            (t = new canvas.ui.Image(this.url + ".jpg")).position.set(-o * this.loopWidth, 0),
            this.dynamicContent.addChild(t);
    this.dynamicContent.x = this.loopWidth,
    this.data.stop || canvas.EventManager.addEventListener(canvas.app.location.Event.ENTER_FRAME, null, this.updateHandler, this)
}
,
canvas.app.location.view.elements.Sky.prototype.updateHandler = function() {
    this.stopeed || (this.dynamicContent.x >= 2 * this.loopWidth - 1 ? this.dynamicContent.x = this.loopWidth : this.dynamicContent.x += 1)
}
,
canvas.app.location.view.elements.Sky.prototype.stop = function() {
    this.stopped = !0;
    for (var t = 0; t < this.anims.length; t++)
        this.anims[t].stop()
}
,
canvas.app.location.view.elements.Sky.prototype.start = function() {
    this.stopped = !1;
    for (var t = 0; t < this.anims.length; t++)
        this.anims[t].play()
}
,
canvas.app.location.view.elements.SnowBall = function(t, e, a, s, i) {
    canvas.px.Graphics.call(this),
    this.enterFrameEvent = i,
    this.pers_set = .8,
    this.size_min = .5,
    this.size_max = 3,
    this.alpha_min = .2,
    this.alpha_max = 1,
    this.vibration_max = 1,
    this.time = 0,
    this.min_time = 0,
    this.max_time = 30,
    this.max_x = t,
    this.max_y = e,
    this.wind = a,
    this.gravity = s,
    this.init()
}
,
canvas.app.location.view.elements.SnowBall.prototype = Object.create(canvas.px.Graphics.prototype),
canvas.app.location.view.elements.SnowBall.prototype.init = function() {
    canvas.EventManager.addEventListener(this.enterFrameEvent, null, this.enterFrameHandler, this),
    this.initAlpha()
}
,
canvas.app.location.view.elements.SnowBall.prototype.initAlpha = function() {
    this.clear(),
    this.beginFill(16777215, 1);
    var t = Math.random();
    this.size = this.size_min + t * (this.size_max - this.size_min),
    this.drawCircle(0, 0, this.size),
    this.endFill(),
    this.curr_alpha = this.alpha_min + t * (this.alpha_max - this.alpha_min),
    this.alpha = this.curr_alpha,
    this.hide_y = this.max_y - .5 * this.max_y * (1 - t),
    this.vibration = {
        x: 0,
        y: 0
    },
    2 < Math.abs(this.wind.x) ? this.vibration_max = 3 : this.vibration_max = 1
}
,
canvas.app.location.view.elements.SnowBall.prototype.enterFrameHandler = function() {
    this.x += this.vibration.x + this.wind.x,
    this.y += this.vibration.y + this.wind.y + this.gravity,
    this.time--,
    this.time <= 0 && (this.time = this.min_time + Math.random() * (this.max_time - this.min_time),
    this.vibration.x = -this.vibration_max + Math.random() * this.vibration_max * 2,
    this.vibration.y = -this.vibration_max + Math.random() * this.vibration_max * 2),
    this.size < .99 * (this.size_max - this.size_min) && (this.alpha = this.curr_alpha - this.curr_alpha * this.y / this.hide_y),
    this.y > this.max_y && canvas.EventManager.dispatchEvent(canvas.app.location.Event.SNOWBALL_KILL, this),
    this.x > this.max_x - this.width / 2 && (this.size > this.pers_set * this.size_max && canvas.EventManager.dispatchEvent(canvas.app.location.Event.SNOWBALL_DRAW, this),
    this.x = this.width / 2 + 2),
    this.x < this.width / 2 && (this.size > this.pers_set * this.size_max && canvas.EventManager.dispatchEvent(canvas.app.location.Event.SNOWBALL_DRAW, this),
    this.x = this.max_x - this.width / 2 - 2)
}
,
canvas.app.location.view.elements.SnowShare = function() {
    this.save_count = 24;
    var t = new Date;
    this.name = "snow_location_" + t.getMonth() + "_" + t.getDate();
    var e = canvas.app.location.model ? canvas.app.location.model.localStorage : null
      , t = e ? e.get(this.name) : null;
    t ? this.arr_data = JSON.parse(t) : (this.arr_data = this.generationData(),
    e && e.set(this.name, JSON.stringify(this.arr_data)))
}
,
canvas.app.location.view.elements.SnowShare.prototype.clearFunc = function() {
    canvas.app.location.model.localStorage.set(this.name, "")
}
,
canvas.app.location.view.elements.SnowShare.prototype.generationData = function() {
    for (var t = [], e = 0; e < this.save_count; e++) {
        var a = {};
        a.snow_count = Math.round(20 + 60 * Math.random());
        var s = {
            x: 0,
            y: 0
        };
        16 < a.snow_count && (s.x = 7 * Math.random() * 2 - 7,
        s.y = 2 * Math.random() * 2 - 2),
        a.wind = s,
        t.push(a)
    }
    return t
}
,
canvas.app.location.view.elements.SnowShare.prototype.getData = function() {
    var t = new Date
      , e = t.getHours() / this.save_count
      , a = Math.floor(this.arr_data.length * e)
      , s = this.arr_data[a]
      , i = a == this.save_count - 1 ? this.arr_data[a] : this.arr_data[a + 1]
      , a = {}
      , e = t.getMinutes() / 60;
    return a.snow_count = s.snow_count + e * (i.snow_count - s.snow_count),
    a.wind = {},
    a.wind.x = s.wind.x + e * (i.wind.x - s.wind.x),
    a.wind.y = s.wind.y + e * (i.wind.y - s.wind.y),
    a
}
,
canvas.app.location.view.elements.EventPanel = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.location.model;
    this.maxWidth = 0,
    this.bg = new canvas.px.Graphics,
    this.addChild(this.bg),
    this.eventTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16705718,300,20,"left"),
    this.eventTF.text = t.OBJ_EVENT.title,
    this.addChild(this.eventTF),
    this.maxWidth = Math.max(this.eventTF.textWidth, this.maxWidth),
    this.eventTF.y = 2,
    this.eventPointTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,16705718,300,20,"left"),
    this.eventPointTF.text = t.OBJ_EVENT.point_title,
    this.eventPointTF.y = Math.round(this.eventTF.y + this.eventTF.height - 2),
    this.addChild(this.eventPointTF),
    this.maxWidth = Math.max(this.eventPointTF.textWidth, this.maxWidth),
    this.sliser = new canvas.px.Graphics,
    this.sliser.y = Math.round(this.eventPointTF.y + this.eventPointTF.height + 1),
    this.addChild(this.sliser);
    var e, a = this.sliser.y + 2;
    for (e in t.OBJ_EVENT.tasks) {
        var s, i, n = t.OBJ_EVENT.tasks[e];
        0 != n.max_value && (n.noUserValue || ((s = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bullet"))).y = a + 4,
        (i = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,16705718,300,20,"left")).position.set(s.x + s.width + 3, a),
        this.addChild(s),
        i.text = t.STRINGS_ARR[t.S_TO_YOU] + " " + String(n.title) + "  " + n.user_value + String(0 != n.max_user_value ? "/" + n.max_user_value : ""),
        this.addChild(i),
        this.maxWidth = Math.max(i.textWidth, this.maxWidth),
        a += 12),
        (s = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bullet"))).y = a + 4,
        this.addChild(s),
        (i = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,16705718,300,20,"left")).text = t.STRINGS_ARR[t.S_TO_ALL] + " " + String(n.title) + "  " + n.value + String(0 != n.max_value ? "/" + n.max_value : ""),
        i.position.set(s.x + s.width + 3, a),
        this.addChild(i),
        this.maxWidth = Math.max(i.textWidth, this.maxWidth),
        a += 12)
    }
    this.sliser.beginFill(8937019, 1),
    this.sliser.drawRect(-4, 0, this.maxWidth + 5, 1),
    this.sliser.endFill(),
    this.bg.beginFill(0, .55),
    this.bg.moveTo(0, 0),
    this.bg.lineTo(this.maxWidth + 47, 0),
    this.bg.lineTo(this.maxWidth + 47, this.height + 5),
    this.bg.lineTo(0, this.height),
    this.bg.lineTo(-10, this.height - 10),
    this.bg.lineTo(-10, 0),
    this.bg.lineTo(0, 0),
    this.bg.endFill()
}
,
canvas.app.location.view.elements.EventPanel.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.elements.FightButton = function(t) {
    var e = canvas.app.location.model;
    canvas.px.Container.call(this);
    var a = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "big_fight_bg"));
    this.addChild(a),
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "big_fight_btn"),[0, 0, 0, 0]),
    this.addChild(this.button),
    this.button.position.set(7, 20);
    a = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,16758046,20,16,"center");
    a.text = t.toString(),
    this.addChild(a),
    a.position.set(18, 49),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(e.STRINGS_ARR[e.S_GREAT_FIGHT]))
    }),
    this.interactive = !0,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn, this.clickHandler, this)
}
,
canvas.app.location.view.elements.FightButton.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.elements.FightButton.prototype.clickHandler = function() {
    enterGreatFights()
}
,
canvas.app.location.view.elements.FightButton.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn, this.clickHandler, this),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_REMOVE, null, {
        target: this
    }),
    canvas.px.Container.prototype.destroy.apply(this, arguments)
}
,
canvas.app.location.view.elements.ResurrectItem = function() {
    this._enabled = !0,
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t,
            this.button.enabled = t,
            this.image.filters = t ? [] : [canvas.Functions.getGreyScale()]
        }
    }),
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t,
            this.update()
        }
    }),
    canvas.px.Container.call(this),
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.image = new canvas.px.Container,
    this.container.addChild(this.image);
    var t = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "icon_back"));
    this.image.addChild(t),
    this.loader = new canvas.ui.Image,
    this.image.addChild(this.loader),
    this.image.x = 60,
    this.button = new canvas.app.location.view.elements.ResurrectButton,
    this.container.addChild(this.button),
    this.button.y = 40,
    this.button.setSize(190, 0),
    this.container.click = this.clickHandler.bind(this),
    this.container.mouseover = this.overHandler.bind(this),
    this.container.mouseout = this.outHandler.bind(this),
    this.container.buttonMode = !0,
    this.container.interactive = !0,
    this.interactive = !0
}
,
canvas.app.location.view.elements.ResurrectItem.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.elements.ResurrectItem.prototype.update = function() {
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_REMOVE, null, {
        target: this
    }),
    null != this._data ? (1 === this._data.id ? this.button.setTitle(canvas.Translator.getText(731) + " " + this._data.title, canvas.ResourceLoader.getImage("ui", "silver")) : this.button.setTitle(this._data.title),
    this.enabled = this.container.buttonMode = this._data.enabled,
    this._data.error && canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(this._data.error))
    }),
    this.loader.name != this._data.picture && (this.loader.name = this._data.picture,
    this.loader.setImage(this._data.picture))) : this.visible = !1
}
,
canvas.app.location.view.elements.ResurrectItem.prototype.clickHandler = function() {
    this._enabled && resurrect(this._data.id)
}
,
canvas.app.location.view.elements.ResurrectItem.prototype.overHandler = function() {
    this.filters = [canvas.Functions.getBrightness(1.2)]
}
,
canvas.app.location.view.elements.ResurrectItem.prototype.outHandler = function() {
    this.filters = null
}
,
canvas.app.location.view.elements.ResurrectButton = function() {
    canvas.app.view.MainButton.call(this),
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16375713,100,20,"center"),
    this.addChild(this.field),
    this.field.position.set(25, 10),
    this.imageContainer = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.addChild(this.imageContainer)
}
,
canvas.app.location.view.elements.ResurrectButton.prototype = Object.create(canvas.app.view.MainButton.prototype),
canvas.app.location.view.elements.ResurrectButton.prototype.setTitle = function(t, e) {
    this.imageContainer.texture = canvas.px.TextureEmpty,
    null == t && (t = ""),
    this.field.text = t,
    this.field.x = 25,
    null != e && (this.imageContainer.texture = e,
    t = this.field.getLocalBounds(),
    this.imageContainer.x = this.field.x + t.x + t.width + 3 - Math.round(.5 * e.width),
    this.imageContainer.y = Math.round(.5 * (34 - e.height)),
    this.field.x = 25 - Math.round(.5 * e.width))
}
,
canvas.app.location.view.elements.CampaignInfo = function() {
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data !== t && (this._data = t,
            this.update())
        }
    }),
    canvas.px.Container.call(this),
    this.image = new canvas.ui.Image,
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "campaign_back"))),
    this.addChild(this.image),
    this.image.position.set(12, 6),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "campaign_front"))),
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,6236456,66,20,"center"),
    this.timeField.position.set(8, 68),
    this.addChild(this.timeField),
    this.interactive = !0,
    this.buttonMode = !0,
    this.click = this.clickHandler.bind(this),
    this.hint = new canvas.app.view.MappingHint,
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint)
    })
}
,
canvas.app.location.view.elements.CampaignInfo.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.elements.CampaignInfo.prototype.update = function() {
    this.data && (this.image.setImage(this.data.picture),
    this.hint.update(this.data.title),
    this.updateTime())
}
,
canvas.app.location.view.elements.CampaignInfo.prototype.updateTime = function() {
    this.data && (this.timeField.text = canvas.Functions.formatDate(1e3 * (this.data.finishTime - canvas.app.location.model.serverTime.getTime()), "00", 2, !0))
}
,
canvas.app.location.view.elements.CampaignInfo.prototype.clickHandler = function() {
    tProcessMenu("b36", {
        url: "/area_banks.php?mode=user_campaign"
    })
}
,
canvas.app.location.view.elements.CampaignInfo.prototype.destroy = function() {
    this.data = null,
    this.parent && this.parent.removeChild(this)
}
,
canvas.app.location.view.popups.Popups = function(t) {
    canvas.px.Container.call(this),
    this.hintEvent = t
}
,
canvas.app.location.view.popups.Popups.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.popups.Popups.prototype.init = function(t, e) {
    var a, s;
    switch (canvas.Functions.destroyChildren(this),
    t) {
    case canvas.app.location.Const.POPUP_ZERO_LEVEL:
        if (a = new canvas.app.location.view.popups.PopupZeroLevel(1e3 * parseInt(e.time_bonus_online),null == e.time_bonus_message ? "Останься в Легенде и получи подарок!" : e.time_bonus_message),
        s = new canvas.app.view.MappingHint(null == e.time_bonus_hint ? "Оставайтесь в игре и через указанное на таймере время получите подарок!" : e.time_bonus_hint),
        canvas.EventManager.dispatchEvent(this.hintEvent.HINT_ADD, null, {
            target: a,
            params: new canvas.utils.HintParams(s)
        }),
        0 < a.children.length)
            return this.addChild(a);
        break;
    case canvas.app.location.Const.POPUP_ACTIVITY:
        if(top?.document.gameFlags.hideActivities == false) {
            if (a = new canvas.app.location.view.popups.PopupActivity(e),
            s = new canvas.app.view.MappingHint(canvas.Translator.getText(733)),
            canvas.EventManager.dispatchEvent(this.hintEvent.HINT_ADD, null, {
                target: a,
                params: new canvas.utils.HintParams(s)
            }),
            0 < a.children.length)
                return this.addChild(a)
        }
    }
    return null
}
,
canvas.app.location.view.popups.Popups.prototype.removeHint = function(t) {
    canvas.EventManager.dispatchEvent(this.hintEvent.HINT_REMOVE, null, {
        target: t
    })
}
,
canvas.app.location.view.popups.Popup = function() {
    canvas.px.Container.call(this),
    this.container = new canvas.px.Container,
    this.background = new canvas.px.Graphics,
    this.addChild(this.background),
    this.addChild(this.container),
    this.interactive = !0,
    this.container.interactive = !0,
    this.buttonMode = !0,
    this.container.click = this.clickHandler.bind(this),
    this.container.mouseover = this.overHandler.bind(this),
    this.container.mouseout = this.outHandler.bind(this)
}
,
canvas.app.location.view.popups.Popup.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.popups.Popup.prototype.update = function(t, e) {
    null == t && (t = 0),
    null == e && (e = 0),
    this.background.clear(),
    this.background.beginFill(1118481, .5),
    this.background.drawRoundedRect(0, 0, 0 == t ? this.container.width : t, 0 == e ? this.container.height : e, 7),
    this.background.endFill()
}
,
canvas.app.location.view.popups.Popup.prototype.clickHandler = function() {}
,
canvas.app.location.view.popups.Popup.prototype.overHandler = function() {}
,
canvas.app.location.view.popups.Popup.prototype.outHandler = function() {}
,
canvas.app.location.view.popups.Popup.prototype.destroy = function() {
    this.parent && (this.parent.removeHint && this.parent.removeHint(this),
    this.parent.removeChild(this)),
    this.container && (this.container.click = null,
    this.container.mouseover = null,
    this.container.mouseout = null),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.location.view.popups.PopupZeroLevel = function(t, e) {
    canvas.app.location.view.popups.Popup.call(this),
    this.checkPoints = [120, 600, 1500, 3600],
    this.baseTimeStamp = this.timeStamp = t,
    this.next = this.getNext(),
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16777215,64,20,"center"),
    this.timeField.position.set(66, 29),
    this.timeField.text = "?";
    var a = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "chest"));
    a.position.set(18, 6),
    this.container.addChild(a),
    this.container.addChild(this.timeField),
    this.removeChild(this.background),
    this.date = new Date,
    this.baseTime = this.constBaseTime = this.date.getTime(),
    this.diff = this.next - t,
    this.date.setTime(this.diff),
    this.request = new canvas.utils.URLRequest("time_bonus.php","GET",{
        time: 0
    }),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestIOErrorHandler, this),
    this.timer = setInterval(this.timerHandler.bind(this), 1e3),
    this.timerHandler(),
    this.testTime()
}
,
canvas.app.location.view.popups.PopupZeroLevel.prototype = Object.create(canvas.app.location.view.popups.Popup.prototype),
canvas.app.location.view.popups.PopupZeroLevel.prototype.testTime = function() {
    return !(this.timeStamp >= 1e3 * this.checkPoints[this.checkPoints.length - 1]) || (this.destroy(),
    !1)
}
,
canvas.app.location.view.popups.PopupZeroLevel.prototype.getNext = function() {
    for (var t = 0, e = 0; e < this.checkPoints.length; e++)
        if (this.timeStamp < 1e3 * this.checkPoints[e]) {
            t = 1e3 * this.checkPoints[e];
            break
        }
    return t
}
,
canvas.app.location.view.popups.PopupZeroLevel.prototype.timerHandler = function() {
    var t = new Date
      , e = (e = this.date.getTime() - (t.getTime() - this.baseTime)) < 0 ? 0 : e;
    this.date.setTime(e),
    this.baseTime = t.getTime(),
    this.timeField.text = canvas.Functions.setNumberLen(this.date.getMinutes()) + ":" + canvas.Functions.setNumberLen(this.date.getSeconds()),
    this.timeStamp = this.baseTimeStamp + (t.getTime() - this.constBaseTime),
    this.date.getTime() <= 0 && (0 < this.next && (this.request.params.time = Math.round(.001 * this.next).toString(),
    this.request.load()),
    this.next = this.getNext(),
    0 != this.next ? (this.diff = this.next - this.timeStamp,
    this.date.setTime(this.diff),
    this.timerHandler()) : this.destroy())
}
,
canvas.app.location.view.popups.PopupZeroLevel.prototype.requestIOErrorHandler = function() {
    this.destroy()
}
,
canvas.app.location.view.popups.PopupZeroLevel.prototype.destroy = function() {
    this.timer && clearInterval(this.timer),
    this.request && canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestIOErrorHandler, this),
    canvas.app.location.view.popups.Popup.prototype.destroy.apply(this, arguments)
}
,
canvas.app.location.view.popups.PopupActivity = function(t) {
    canvas.app.location.view.popups.Popup.call(this),
    this.url = t,
    this.hitArea = this.container.hitArea = new canvas.px.Circle(40,40,32),
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "activities")))
}
,
canvas.app.location.view.popups.PopupActivity.prototype = Object.create(canvas.app.location.view.popups.Popup.prototype),
canvas.app.location.view.popups.PopupActivity.prototype.clickHandler = function() {
    canvas.app.location.view.popups.Popup.prototype.clickHandler.apply(this, arguments),
    canvas.Functions.navigateToURL(this.url, "_self"),
    this.destroy()
}
,
canvas.app.location.view.popups.PopupActivity.prototype.overHandler = function() {
    canvas.app.location.view.popups.Popup.prototype.overHandler.apply(this, arguments),
    this.filters = [canvas.Functions.getBrightness(1.2)]
}
,
canvas.app.location.view.popups.PopupActivity.prototype.outHandler = function() {
    canvas.app.location.view.popups.Popup.prototype.outHandler.apply(this, arguments),
    this.filters = null
}
,
canvas.app.location.view.popups.HintBtn = function(t, e, a, s, i) {
    canvas.px.Container.call(this),
    null == s && (s = 200),
    null == i && (i = 240),
    this.isNow = !1,
    this.hintText = "",
    this.backgroundColor = 1118481,
    this.textColor = 0,
    this.hintWidth = s,
    this.currentDate = new Date,
    this.currentDate.setTime(a - 6e4 * (-i - this.currentDate.getTimezoneOffset())),
    this.stopDate = new Date,
    this.stopDate.setTime(e - 6e4 * (-i - this.currentDate.getTimezoneOffset())),
    this.testTime() && (this.dateStart = new Date,
    this.dateStart.setTime(t - 6e4 * (-i - this.currentDate.getTimezoneOffset())),
    this.image = new canvas.px.Container,
    this.addChild(this.image),
    0 < Math.floor((this.currentDate.valueOf() - this.dateStart.valueOf()) / 1e3) ? (this.isNow = !0,
    this.timeLeftSec = Math.floor((this.stopDate.valueOf() - this.currentDate.valueOf()) / 1e3)) : this.timeLeftSec = Math.floor((this.dateStart.valueOf() - this.currentDate.valueOf()) / 1e3),
    this.timer = setInterval(this.timerHandler.bind(this), 1e3),
    this.interactive = !0,
    this.image.buttonMode = !0,
    this.image.interactive = !0,
    this.click = this.onClick.bind(this),
    this.image.mouseover = this.onRollOver.bind(this),
    this.image.mouseout = this.onRollOut.bind(this))
}
,
canvas.app.location.view.popups.HintBtn.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.popups.HintBtn.prototype.testTime = function() {
    return this.stopDate.valueOf() >= this.currentDate.valueOf()
}
,
canvas.app.location.view.popups.HintBtn.prototype.onClick = function() {
    this.click = null;
    var t = new canvas.px.Graphics;
    t.beginFill(16777215, .4),
    t.drawRect(-this.image.width, -this.image.height, this.image.width, this.image.height),
    t.endFill(),
    this.addChild(t),
    this.image.mask = t;
    new canvas.px.Tween.Tween(this.image).to({
        y: 50
    }, 4e3).easing(canvas.px.Tween.Easing.Elastic.Out).onUpdate(function() {}).onComplete(this.onRemoveBanner.bind(this)).start()
}
,
canvas.app.location.view.popups.HintBtn.prototype.getTimeLeft = function() {
    return this.timeLeftSec < 60 ? this.getFormattedTimeBySeconds(this.timeLeftSec, !1, !0, !0, !1) : this.getFormattedTimeBySeconds(this.timeLeftSec, !0, !0, !1, !1)
}
,
canvas.app.location.view.popups.HintBtn.prototype.timerHandler = function() {
    if (null != this.image) {
        if (this.timeLeftSec--,
        this.timeLeftSec <= 0)
            return clearInterval(this.timer),
            this.isNow ? (this.removeChild(this.image),
            void (this.image = null)) : (this.isNow = !0,
            this.timeLeftSec = Math.floor((this.stopDate.valueOf() - this.dateStart.valueOf()) / 1e3),
            this.timer = setInterval(this.timerHandler.bind(this), 1e3),
            void this.setHintText(this.updateHint(!0), 1118481, 16705718));
        this.setHintText(this.updateHint(this.isNow), 1118481, 16705718)
    } else
        clearInterval(this.timer)
}
,
canvas.app.location.view.popups.HintBtn.prototype.updateHint = function(t) {
    return null == t && (t = !1),
    ""
}
,
canvas.app.location.view.popups.HintBtn.prototype.onRemoveBanner = function() {
    this.removeChild(this.image),
    this.image.destroy({
        children: !0
    }),
    this.image = null,
    this.destroy()
}
,
canvas.app.location.view.popups.HintBtn.prototype.getFormattedTimeBySeconds = function(t, e, a, s, i) {
    var n = ""
      , o = Math.floor(t)
      , r = Math.floor(1e3 * (t - o))
      , c = Math.floor(o / 60);
    o -= 60 * c;
    t = Math.floor(c / 60);
    return c -= 60 * t,
    e && (n += t < 10 ? "0" : "",
    n += t.toString()),
    a && (e && (n += ":"),
    n += c < 10 ? "0" : "",
    n += c.toString()),
    s && (a && (n += ":"),
    n += o < 10 ? "0" : "",
    n += o.toString()),
    i && (s && (n += ".",
    n += (r < 100 ? "0" : "") + (r < 10 ? "0" : "")),
    n += r.toString()),
    n
}
,
canvas.app.location.view.popups.HintBtn.prototype.getTimeFormated = function(t) {
    var e = new Date;
    e.setTime(1e3 * t);
    t = e.getHours() < 10 ? "0" + e.getHours().toString() : e.getHours().toString();
    return t += ":",
    t += e.getMinutes() < 10 ? "0" + e.getMinutes().toString() : e.getMinutes().toString()
}
,
canvas.app.location.view.popups.HintBtn.prototype.setHintText = function(t, e, a) {
    null == t && (t = ""),
    null == e && (e = 1118481),
    null == a && (a = 0),
    this.hintText = t,
    this.backgroundColor = e,
    this.textColor = a,
    this.updateHintText()
}
,
canvas.app.location.view.popups.HintBtn.prototype.updateHintText = function() {
    var t, e;
    null != this.hint && (canvas.Functions.destroyChildren(this.hint),
    this.hint.clear(),
    this.textField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,this.textColor,this.hintWidth,500,"center"),
    this.textField.text = this.hintText,
    this.hint.beginFill(this.backgroundColor, .55),
    this.textField.getBounds(),
    t = this.hintWidth + 8,
    e = this.textField.textHeight + 14,
    this.hint.drawRoundedRect(-4, 0, t, e, 6),
    this.hint.endFill(),
    this.textField.x = -this.textField.x,
    this.textField.y = 2,
    this.hint.addChild(this.textField),
    this.hint.position.set(-t - 20, -e))
}
,
canvas.app.location.view.popups.HintBtn.prototype.onRollOver = function() {
    "" != this.hintText && (this.hint = new canvas.px.Graphics,
    this.updateHintText(),
    this.addChildAt(this.hint, 0))
}
,
canvas.app.location.view.popups.HintBtn.prototype.onRollOut = function() {
    null != this.hint && this.removeChild(this.hint),
    this.hint = null
}
,
canvas.app.location.view.popups.HintBtn.prototype.destroy = function() {
    clearInterval(this.timer),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.location.view.popups.TechBtn = function(t, e) {
    this.link = "",
    t && (this.start = 1e3 * parseInt(t.tech_works_start),
    this.stop = 1e3 * parseInt(t.tech_works_stop),
    this.curTime = 1e3 * parseInt(t.current_time),
    this.title = t.tech_works_name,
    this.description = t.tech_works_description,
    null != t.tech_works_link && (this.link = t.tech_works_link)),
    canvas.app.location.view.popups.HintBtn.call(this, this.start, this.stop, this.curTime, 200, null == t.time_zone ? 240 : parseInt(t.time_zone)),
    this.testTime() && (this.techBtn = new canvas.app.location.view.popups.TechnicalWorksBtn(e),
    this.image.addChild(this.techBtn),
    this.techBtn.updateTimeLeft("--:--"))
}
,
canvas.app.location.view.popups.TechBtn.prototype = Object.create(canvas.app.location.view.popups.HintBtn.prototype),
canvas.app.location.view.popups.TechBtn.prototype.timerHandler = function() {
    this.techBtn.updateTimeLeft(this.getTimeLeft(), this.isNow),
    canvas.app.location.view.popups.HintBtn.prototype.timerHandler.call(this)
}
,
canvas.app.location.view.popups.TechBtn.prototype.updateHint = function(t) {
    null == t && (t = !1);
    var e = "<font color='#fcb567'><b>" + this.title + "</b></font><br/><br/>";
    return e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + this.description + "</font>",
    e += "<font color='#fcb567'><br/><br/>" + canvas.Translator.getText(2028) + " " + this.getTimeFormated(Math.floor(this.dateStart.getTime() / 1e3)) + " " + canvas.Translator.getText(2029) + " " + this.getTimeFormated(Math.floor(this.stopDate.getTime() / 1e3)) + "</font>",
    t ? (e += "<font color='#FF0000'> (" + canvas.Translator.getText(2032).toLowerCase() + ")<br/></font>",
    e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + canvas.Translator.getText(2030) + ": " + this.getTimeLeft() + "</font>") : e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'><br/>" + canvas.Translator.getText(2031) + ": " + this.getTimeLeft() + "</font>",
    e
}
,
canvas.app.location.view.popups.TechBtn.prototype.updateHintText = function() {
    var t, e;
    canvas.app.location.view.popups.HintBtn.prototype.updateHintText.call(this),
    null != this.hint && (this.hint.clear(),
    this.hint.beginFill(this.backgroundColor, .55),
    t = this.hintWidth + 8,
    e = this.textField.textHeight + 54,
    this.hint.drawRoundedRect(-4, 0, t, e, 6),
    this.hint.endFill(),
    this.hint.position.set(-t - 20, -e),
    this.hint.y = -e)
}
,
canvas.app.location.view.popups.TechBtn.prototype.onClick = function() {
    canvas.app.location.view.popups.HintBtn.prototype.onClick.call(this),
    this.link && canvas.Functions.navigateToURL(this.link, "_blank")
}
,
canvas.app.location.view.popups.InfoBtn = function(t) {
    this.link = "",
    t && (this.start = 1e3 * parseInt(t.info_start),
    this.stop = 1e3 * parseInt(t.info_stop),
    this.curTime = 1e3 * parseInt(t.current_time),
    this.title = t.info_name,
    this.description = t.info_description,
    null != t.info_link && (this.link = t.info_link)),
    canvas.app.location.view.popups.HintBtn.call(this, this.start, this.stop, this.curTime, 200, null == t.time_zone ? 240 : parseInt(t.time_zone)),
    this.testTime() && (this.image.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "info_button"))),
    this.image.position.set(-50, -30))
}
,
canvas.app.location.view.popups.InfoBtn.prototype = Object.create(canvas.app.location.view.popups.HintBtn.prototype),
canvas.app.location.view.popups.InfoBtn.prototype.updateHint = function(t) {
    null == t && (t = !1);
    var e = "<br/><br/><br/><font color='#fcb567'><b>" + this.title + "<br/><br/></b></font>";
    return e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + this.description + "</font>",
    e += "<font color='#fcb567'><br/><br/>" + canvas.Translator.getText(2028) + " " + this.getTimeFormated(Math.floor(this.dateStart.getTime() / 1e3)) + "<br/> " + canvas.Translator.getText(2029) + " " + this.getTimeFormated(Math.floor(this.stopDate.getTime() / 1e3)) + "</font><br/>",
    e += t ? "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + canvas.Translator.getText(2030) + ": " + this.getTimeLeft() + "</font>" : "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'><br/>" + canvas.Translator.getText(2031) + ": " + this.getTimeLeft() + "</font>"
}
,
canvas.app.location.view.popups.InfoBtn.prototype.getTimeFormated = function(t) {
    var e = new Date;
    return e.setTime(1e3 * t),
    canvas.app.location.view.popups.HintBtn.prototype.getTimeFormated.call(this, t) + " " + e.getDate().toString() + " " + canvas.Translator.getText(2004 + e.getMonth())
}
,
canvas.app.location.view.popups.InfoBtn.prototype.updateHintText = function() {
    var t, e;
    canvas.app.location.view.popups.HintBtn.prototype.updateHintText.call(this),
    null != this.hint && (this.hint.clear(),
    this.hint.beginFill(this.backgroundColor, .55),
    t = this.hintWidth + 8,
    e = this.textField.textHeight + 54,
    this.hint.drawRoundedRect(-4, 0, t, e, 6),
    this.hint.endFill(),
    this.hint.x = -this.hintWidth - 20,
    this.hint.y = -this.image.height)
}
,
canvas.app.location.view.popups.InfoBtn.prototype.onClick = function() {
    this.click = null;
    var t = new canvas.px.Mask(this.image.width,this.image.height);
    t.position.set(this.image.x, this.image.y),
    this.addChild(t),
    this.image.mask = t;
    new canvas.px.Tween.Tween(this.image).to({
        x: this.image.x + this.image.width + 20
    }, 4e3).easing(canvas.px.Tween.Easing.Elastic.Out).onUpdate(function() {}).onComplete(this.onRemoveBanner.bind(this)).start();
    this.link && canvas.Functions.navigateToURL(this.link, "_blank")
}
,
canvas.app.location.view.popups.TechnicalWorksBtn = function(t) {
    canvas.px.Container.call(this),
    this.enterFrameEvent = t,
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tech_back"))),
    this.position.set(-this.width - 20, -this.height),
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,15518322,50,20,"right"),
    this.addChild(this.timeField),
    this.timeField.position.set(-17, 26);
    t = new canvas.px.Graphics;
    t.beginFill(16777215, 1),
    t.drawCircle(55, 21, 17),
    t.endFill(),
    this.addChild(t),
    this.container = new canvas.px.Container,
    this.container.mask = t,
    this.wheel1 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tech_wheel")),
    this.wheel2 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tech_wheel")),
    this.container.addChild(this.wheel1),
    this.container.addChild(this.wheel2),
    this.wheel1.anchor.set(.5, .5),
    this.wheel2.anchor.set(.5, .5),
    this.addChild(this.container),
    this.wheel1.position.set(41, 11),
    this.wheel2.position.set(65, 35),
    this.hitArea = new canvas.px.Circle(55,21,20),
    canvas.EventManager.addEventListener(this.enterFrameEvent, null, this.updateHandler, this)
}
,
canvas.app.location.view.popups.TechnicalWorksBtn.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.popups.TechnicalWorksBtn.prototype.updateTimeLeft = function(t, e, a) {
    null == e && (e = !1),
    null == a && (a = 15518322),
    this.speed = e ? 4 : 1,
    this.timeField.color = a,
    this.timeField.text = t
}
,
canvas.app.location.view.popups.TechnicalWorksBtn.prototype.updateHandler = function() {
    this.wheel1.rotation += .02 * this.speed,
    this.wheel2.rotation -= .02 * this.speed
}
,
canvas.app.location.view.popups.TechnicalWorksBtn.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(this.enterFrameEvent, null, this.updateHandler, this),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.location.view.popups.NPCEventBtn = function(t) {
    Object.defineProperty(this, "imageWidth", {
        get: function() {
            return this.image ? this.image.width : 0
        },
        set: function(t) {}
    }),
    this.data = t,
    canvas.app.location.view.popups.HintBtn.call(this, 0, 1e3 * this.data.finishTime, Date.now(), 200, canvas.app.location.model.serverTimeZoneOffset),
    this.testTime() && (this.loader = new canvas.ui.Image(this.data.picture),
    this.image.addChild(this.loader),
    this.loader.ready ? this.completeHandler() : canvas.EventManager.addEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.loader, this.completeHandler, this))
}
,
canvas.app.location.view.popups.NPCEventBtn.prototype = Object.create(canvas.app.location.view.popups.HintBtn.prototype),
canvas.app.location.view.popups.NPCEventBtn.prototype.updateHint = function(t) {
    null == t && (t = !1);
    var e = "<font color='#fcb567'><b>" + this.data.title + "<br/><br/></b></font>";
    return null != this.data.description && (e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + this.data.description + "</font>"),
    1 == t ? (e += "<font size='11' color='#FF0000'> (" + canvas.Translator.getText(2032).toLowerCase() + ")<br/></font>",
    e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'>" + canvas.Translator.getText(2030) + ": " + this.getTimeLeft() + "</font>") : e += "<font face='" + canvas.Const.FONT_TAHOMA_10 + "' color='#e6dc85'><br/>" + canvas.Translator.getText(2031) + ": " + this.getTimeLeft() + "</font>",
    e
}
,
canvas.app.location.view.popups.NPCEventBtn.prototype.updateHintText = function(t) {
    canvas.app.location.view.popups.HintBtn.prototype.updateHintText.call(this),
    this.moveHint()
}
,
canvas.app.location.view.popups.NPCEventBtn.prototype.timerHandler = function() {
    canvas.app.location.view.popups.HintBtn.prototype.timerHandler.call(this),
    this.image || (this.parent && this.parent.removeChild(this),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.UPDATE_NPC_EVENTS))
}
,
canvas.app.location.view.popups.NPCEventBtn.prototype.moveHint = function() {
    this.hint && this.hint.position.set(this.image.width, this.image.height)
}
,
canvas.app.location.view.popups.NPCEventBtn.prototype.onClick = function() {
    canvas.Functions.navigateToURL(this.data.url, "_self")
}
,
canvas.app.location.view.popups.NPCEventBtn.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.loader, this.completeHandler, this),
    delete this.loader,
    this.moveHint(),
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.UPDATE_NPC_EVENTS)
}
,
canvas.app.location.view.popups.PopupWheelFortune = function(t, e, a) {
    canvas.px.Container.call(this),
    this.title = t,
    this.expireTime = e,
    this.url = a,
    this.back = this.addChild(new canvas.px.RoundRect(0,.5,240,45,8,8)),
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16705718,this.back.width,this.back.height,"center","middle")),
    this.interactive = !0,
    this.buttonMode = !0,
    this.click = this.clickHandler.bind(this),
    this.updateTime()
}
,
canvas.app.location.view.popups.PopupWheelFortune.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.popups.PopupWheelFortune.prototype.clickHandler = function() {
    canvas.Functions.navigateToURL(this.url, "_self")
}
,
canvas.app.location.view.popups.PopupWheelFortune.prototype.updateTime = function() {
    var t = this.expireTime - canvas.app.location.model.serverTime.getTime();
    this.field.text = this.title + "\n" + canvas.Functions.formatDate(1e3 * t, "00", 2),
    t <= 0 && this.destroy()
}
,
canvas.app.location.view.popups.PopupWheelFortune.prototype.destroy = function() {
    this.parent && this.parent.removeChild(this),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.location.view.fronts.FrontsIcon = function(t) {
    canvas.px.Container.call(this),
    this.baseLnk = t,
    this.items = [],
    this.infoContainer = new canvas.px.Container,
    this.addChild(this.infoContainer),
    this.infoContainer.x = 35,
    this.infoContainer.y = -70,
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts3"))),
    t = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts4"))),
    this.maskBlue = new canvas.px.Graphics,
    this.maskBlue.beginFill(16777215, 1),
    this.maskBlue.drawRect(0, 0, 40, 40),
    this.maskBlue.endFill(),
    this.maskBlue.position.set(5, 5),
    this.container.addChild(this.maskBlue),
    t.mask = this.maskBlue,
    t = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts5"))),
    this.maskRed = new canvas.px.Graphics,
    this.maskRed.beginFill(16777215, 1),
    this.maskRed.drawRect(-40, 0, 40, 40),
    this.maskRed.endFill(),
    this.maskRed.position.set(45, 5),
    this.container.addChild(this.maskRed),
    t.mask = this.maskRed,
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts6"))),
    this.icons = new canvas.app.location.view.fronts.FrontsIcons,
    this.container.addChild(this.icons),
    this.icons.position.set(13, 33),
    this.infoContainerBack = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "fronts10"),10,0,10,0),
    this.infoContainer.addChild(this.infoContainerBack),
    this.infoContainerBack.width = 200,
    this.locsContainer = new canvas.px.Container,
    this.infoContainer.addChild(this.locsContainer),
    this.locsContainer.position.set(10, 30),
    this.infoHeader = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16769695,200,20,"center"),
    this.infoContainer.addChild(this.infoHeader),
    this.infoHeader.y = 4,
    this.container.buttonMode = !0,
    this.container.interactive = !0,
    this.infoContainer.visible = !1,
    this.click = this.clickHandler.bind(this),
    this.interactive = !0
}
,
canvas.app.location.view.fronts.FrontsIcon.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.fronts.FrontsIcon.prototype.setProgress = function(t, e) {
    this.maskBlue.scale.x = t,
    this.maskRed.scale.x = e
}
,
canvas.app.location.view.fronts.FrontsIcon.prototype.update = function() {
    var t, e, a = 0, s = 0, i = canvas.app.location.model;
    canvas.Functions.clearChildren(this.locsContainer),
    this.infoHeader.text = i.fronts.frontTitle;
    for (var n = i.fronts.locationsData.length, o = 0; o < n; o++)
        t = i.fronts.locationsData[o],
        (e = this.items[s]) || (e = new canvas.app.location.view.fronts.FrontsLoc(this.baseLnk),
        this.items.push(e)),
        e.data = t,
        this.locsContainer.addChild(e),
        e.x = a,
        a += 55,
        s++;
    if (this.infoContainerBack.width = Math.max(a + 15, this.infoHeader.field.textWidth + 20),
    this.infoHeader.setSize(this.infoContainerBack.width),
    this.setProgress(.01 * i.fronts.humLocs, .01 * i.fronts.magLocs),
    this.icons.setIcon(),
    i.fronts.availableLocationData)
        switch (parseInt(i.fronts.availableLocationData.status)) {
        case 0:
            this.icons.setIcon(2);
            break;
        case 1:
            this.icons.setIcon(0);
            break;
        case 2:
            this.icons.setIcon(1);
            break;
        case 3:
            this.icons.setIcon(3)
        }
}
,
canvas.app.location.view.fronts.FrontsIcon.prototype.updateTimer = function() {
    for (var t = this.items.length, e = 0; e < t; e++)
        this.items[e].updateTimer()
}
,
canvas.app.location.view.fronts.FrontsIcon.prototype.clickHandler = function() {
    this.infoContainer.visible = !this.infoContainer.visible
}
,
canvas.app.location.view.fronts.FrontsPanel = function(t) {
    canvas.px.Container.call(this),
    this.baseLnk = t,
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "fronts15"),25,0,20,0),
    this.addChild(this.back),
    this.back.width = 170,
    this.header = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,11730944,300,20,"left"),
    this.addChild(this.header),
    this.header.position.set(34, 13),
    this.actionButton = new canvas.app.view.MainButton,
    this.addChild(this.actionButton),
    this.actionButton.y = 32,
    this.locInfo = new canvas.app.location.view.fronts.FrontsLoc(this.baseLnk,1),
    this.addChild(this.locInfo),
    this.locInfo.position.set(-15, 0),
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "fronts14")),
    this.addChild(this.infoButton),
    this.infoButton.y = 9,
    this.hint = new canvas.app.view.MappingHint(""),
    this.click = this.clickHandler.bind(this),
    this.interactive = !0,
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this.actionButton,
        params: new canvas.utils.HintParams(this.hint)
    })
}
,
canvas.app.location.view.fronts.FrontsPanel.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.fronts.FrontsPanel.prototype.update = function() {
    var t = canvas.app.location.model;
    switch (this.actionButton.enabled = !1,
    t.fronts.currentLocationData.status) {
    case 0:
        this.header.text = canvas.Translator.getText(706),
        this.actionButton.setTitle(canvas.Translator.getText(707)),
        this.hint.update(canvas.Translator.getText(711)),
        this.hint.visible = !0;
        break;
    case 1:
        this.header.text = canvas.Translator.getText(708),
        this.actionButton.enabled = !0,
        this.actionButton.setTitle(canvas.Translator.getText(707)),
        this.hint.visible = !1;
        break;
    case 2:
        this.header.text = canvas.Translator.getText(709),
        this.actionButton.setTitle(canvas.Translator.getText(712)),
        this.actionButton.enabled = !0,
        this.hint.visible = !1;
        break;
    case 3:
        this.header.text = canvas.Translator.getText(710),
        this.actionButton.setTitle(canvas.Translator.getText(712)),
        this.hint.update(canvas.Translator.getText(713)),
        this.hint.visible = !0
    }
    this.updateBack(),
    this.updateTimer(),
    this.locInfo.data = t.fronts.currentLocationData,
    this.resize()
}
,
canvas.app.location.view.fronts.FrontsPanel.prototype.updateBack = function() {
    this.back.width = this.header.field.textWidth + 56,
    this.back.width < 160 && (this.back.width = 160),
    this.infoButton.x = this.back.width - 15,
    this.actionButton.width = this.actionButton.field.field.textWidth + 80,
    this.actionButton.x = Math.round(.5 * (this.back.width - this.actionButton.width)),
    this.resize()
}
,
canvas.app.location.view.fronts.FrontsPanel.prototype.resize = function() {
    this.x = Math.round(.5 * (this.baseLnk.locSide.width - this.back.width)) + (this.baseLnk.mapSide.visible ? this.baseLnk.mapSide.width : 0)
}
,
canvas.app.location.view.fronts.FrontsPanel.prototype.updateTimer = function() {
    var t, e, a = canvas.app.location.model;
    if (0 <= a.fronts.currentLocationData.status && a.fronts.currentLocationData.status <= 2) {
        switch (a.fronts.currentLocationData.status) {
        case 0:
            e = canvas.Translator.getText(706);
            break;
        case 1:
            e = canvas.Translator.getText(708);
            break;
        case 2:
            e = canvas.Translator.getText(709)
        }
        t = a.fronts.currentLocationData.cooldown - Date.now(),
        this.header.text = e + " " + canvas.Functions.formatDate(t, "", 0, !0, !0),
        t <= 0 && this.baseLnk.main.loadFrontsData(),
        this.updateBack()
    }
}
,
canvas.app.location.view.fronts.FrontsPanel.prototype.clickHandler = function(t) {
    var e = canvas.app.location.model;
    if (canvas.Functions.findParent(this.infoButton, t.target))
        canvas.Functions.navigateToURL(canvas.Translator.getText(721), "_blank");
    else if (canvas.Functions.findParent(this.locInfo.icons, t.target))
        this.locInfo.icons.currentIcon;
    else if (canvas.Functions.findParent(this.actionButton, t.target))
        switch (e.fronts.currentLocationData.status) {
        case 1:
            this.baseLnk.showStartBattleConfirm(e.fronts.currentLocationData.title, e.fronts.currentLocationData.id, e.fronts.currentLocationData.cooldown);
            break;
        case 2:
            this.baseLnk.showEnterBattleConfirm(e.fronts.currentLocationData.title, e.fronts.currentLocationData.id, e.fronts.currentLocationData.cooldown)
        }
}
,
canvas.app.location.view.fronts.FrontsIcons = function() {
    canvas.px.Container.call(this),
    this.currentIcon = -1,
    this.sprite = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.addChild(this.sprite),
    this.interactive = !0,
    this.setIcon(),
    this.icons = ["fronts1", "fronts2", "fronts19", "fronts18"]
}
,
canvas.app.location.view.fronts.FrontsIcons.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.fronts.FrontsIcons.prototype.setIcon = function(t) {
    switch (null == t && (t = -1),
    this.sprite.texture = t < 0 ? canvas.px.TextureEmpty : canvas.ResourceLoader.getImage("ui", this.icons[t]),
    t) {
    case 1:
    case 3:
        this.buttonMode = !0;
        break;
    default:
        this.buttonMode = !1
    }
    this.currentIcon = t
}
,
canvas.app.location.view.fronts.FrontsLoc = function(t, e) {
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            null != t && (null != this._data && this._data.image == t.image || this.loader.setImage(t.image),
            this._data = t,
            this.update())
        }
    }),
    canvas.px.Container.call(this),
    this.baseLnk = t,
    null == e && (e = 0),
    this.hintType = parseInt(e);
    e = 0 == this.hintType ? 10 : 0;
    this.back = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
    this.clock = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
    this.clock.position.set(6, e - 11),
    this.back.y = e,
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fronts12"))).position.set(4, 5 + e),
    this.shape = new canvas.px.Graphics,
    this.shape.beginFill(0, 1),
    this.shape.drawCircle(25, 25 + e, 19),
    this.shape.endFill(),
    this.addChild(this.shape),
    this.loader = new canvas.ui.Image,
    this.addChild(this.loader),
    this.loader.position.set(4, 5 + e),
    this.loader.mask = this.shape,
    this.icons = new canvas.app.location.view.fronts.FrontsIcons,
    this.addChild(this.icons),
    this.icons.position.set(13, 33 + e),
    this.header = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,13021302,50,20,"left"),
    this.header.position.set(18, e - 12),
    0 == this.hintType ? this.addChild(this.header) : this.removeChild(this.clock),
    this.click = this.clickHandler.bind(this),
    this.interactive = !0
}
,
canvas.app.location.view.fronts.FrontsLoc.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.location.view.fronts.FrontsLoc.prototype.update = function() {
    var t = 726
      , e = 4473924;
    switch (this.back.visible = this.clock.visible = !1,
    this.icons.setIcon(),
    parseInt(this._data.status)) {
    case 0:
        switch (parseInt(this._data.owner)) {
        case 1:
            t = 724,
            e = 1210068;
            break;
        case -1:
            t = 725,
            e = 11730944;
            break;
        default:
            t = 726,
            e = 4473924
        }
        this.icons.setIcon(2);
        break;
    case 1:
        this.icons.setIcon(0),
        t = 727;
        break;
    case 2:
        this.icons.setIcon(this._data.fightAvail ? 1 : -1),
        t = 728;
        break;
    case 3:
        t = 710,
        this.icons.setIcon(3)
    }
    switch (parseInt(this._data.owner)) {
    case 0:
        this.back.texture = canvas.ResourceLoader.getImage("ui", "fronts9"),
        this.clock.texture = canvas.ResourceLoader.getImage("ui", "timer_none"),
        this.back.visible = this.clock.visible = !0;
        break;
    case 1:
        this.back.texture = canvas.ResourceLoader.getImage("ui", "fronts8"),
        this.clock.texture = canvas.ResourceLoader.getImage("ui", "timer_hum"),
        this.back.visible = this.clock.visible = !0;
        break;
    case -1:
        this.back.texture = canvas.ResourceLoader.getImage("ui", "fronts7"),
        this.clock.texture = canvas.ResourceLoader.getImage("ui", "timer_mag"),
        this.back.visible = this.clock.visible = !0
    }
    this.hint || (0 == this.hintType ? this.hint = new canvas.app.location.view.fronts.FrontsHint(this._data.title,"") : this.hint = new canvas.app.view.MappingHint,
    canvas.EventManager.dispatchEvent(canvas.app.location.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint,!0)
    })),
    0 === this.hintType ? (this.hint.update(canvas.Translator.getText(723) + "<br/><br/>" + this._data.description),
    this.hint.icons.setIcon(this.icons.currentIcon),
    this.hint.updateTop(canvas.Translator.getText(t), e)) : this.hint.update(0 < this._data.owner ? canvas.Translator.getText(703) : this._data.owner < 0 ? canvas.Translator.getText(702) : canvas.Translator.getText(704), 0 < this._data.owner ? 1210068 : this._data.owner < 0 ? 11730944 : 4010799, canvas.Const.FONT_TAHOMA_12_BOLD),
    3 == parseInt(this._data.status) ? (this.clock.visible = !1,
    this.header.visible = !1) : this.header.visible = !0,
    this.updateTimer()
}
,
canvas.app.location.view.fronts.FrontsLoc.prototype.updateTimer = function() {
    var t = this.data.cooldown - Date.now();
    this.header.text = canvas.Functions.formatDate(t, "", 0, !0, !0),
    0 === this.hintType && this.hint.updateTime(3 == this._data.status ? 0 : t)
}
,
canvas.app.location.view.fronts.FrontsLoc.prototype.clickHandler = function(t) {
    if (canvas.Functions.findParent(this.icons, t.target))
        switch (parseInt(this.icons.currentIcon)) {
        case 1:
            this.baseLnk.showEnterBattleConfirm(this.data.title, this.data.id, this.data.cooldown);
            break;
        case 3:
            "" != this.data.fightID && showFightInfo(this.data.fightID)
        }
}
,
canvas.app.location.view.fronts.FrontsHint = function(t, e) {
    canvas.app.view.BigHint.call(this, t, e),
    this.iconsContainer = new canvas.px.Container,
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,869915,Math.round(this.width - 15),20,"right"),
    this.addChild(this.timeField),
    this.timeField.y = 47,
    this.wall = new canvas.px.Mask(this.width - 28,15,15973005,1),
    this.addChildAt(this.wall, 1),
    this.wall.position.set(14, 47),
    this.topField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,4010799,this.width,20,"center"),
    this.addChild(this.iconsContainer),
    this.icons = new canvas.app.location.view.fronts.FrontsIcons,
    this.iconsContainer.addChild(this.icons),
    this.iconsContainer.y = 24,
    this.addChild(this.topField),
    this.topField.position.set(0, 27),
    this.infoField.position.set(22, 47)
}
,
canvas.app.location.view.fronts.FrontsHint.prototype = Object.create(canvas.app.view.BigHint.prototype),
canvas.app.location.view.fronts.FrontsHint.prototype.updateTop = function(t, e) {
    this.topField.color = e,
    this.topField.text = t,
    this.iconsContainer.x = Math.round(.5 * (this.width - this.topField.textWidth)) - this.iconsContainer.width - 4
}
,
canvas.app.location.view.fronts.FrontsHint.prototype.updateTime = function(t) {
    this.timeField.text = 0 < t ? canvas.Functions.formatDate(t, "00", 1) : "--"
}
,
canvas.app.location.view.fronts.FrontsHint.prototype.update = function(t, e, a) {
    null == e && (e = 4010799),
    null == a && (a = canvas.Const.FONT_TAHOMA_12),
    this.infoField.color = e,
    this.infoField.font = a,
    this.infoField.text = t,
    this.back.height = this.infoField.textHeight + 60
}
,
canvas.app.manor.Const = {
    REQUESTS_ON_PAGE: 10,
    REQUESTS_ON_PAGE_SHORT: 6,
    FLAG_AFTER_BUILD: 1,
    STORAGE_MAX_CELLS: 6,
    REQ_CONFIG: "config",
    REQ_BUILD: "build",
    REQ_CREATE_WORK_REQUEST: "createWorkRequest",
    REQ_LOAD_USER_REQUESTS: "loadUserRequests",
    REQ_REMOVE_WORK_REQUEST: "removeWorkRequest",
    REQ_WORK_USE: "workUse",
    REQ_BUY_CEMENT: "buyCement",
    REQ_USE_PETS_DATA: "usePetsData",
    REQ_USE_PETS_ACTION: "usePetsAction",
    REQ_USE_EXP_DATA: "useExpData",
    REQ_USE_EXP_ACTION: "useExpAction",
    REQ_USE_EXP2_DATA: "useExp2Data",
    REQ_USE_EXP2_ACTION: "useExp2Action",
    REQ_USE_VALOUR_DATA: "useValourData",
    REQ_USE_VALOUR_ACTION: "useValourAction",
    REQ_USE_HOSPITAL_DATA: "useHospitalData",
    REQ_USE_HOSPITAL_ACTION: "useHospitalAction",
    REQ_USE_STORAGE_ACTION: "useStorageAction",
    REQ_USE_BANK_DATA: "useBankData",
    REQ_USE_BANK_ACTION: "useBankAction",
    REQ_USE_WORKSHOP_DATA: "useWorkshopData",
    REQ_USE_WORKSHOP_ACTION: "useWorkshopAction",
    REQ_USE_MINE_DATA: "useMineData",
    REQ_USE_MINE_ACTION: "useMineAction",
    REQ_DESTROY_BUILDING: "destroyBuilding",
    REQ_GET_AVAILABLE_BUILDINGS: "getAvailableBuildings",
    REQ_EXIT: "exit",
    REQ_USE_KENNEL_DATA: "useKennelData",
    REQ_USE_KENNEL_ACTION: "useKennelAction",
    TITLES: ["main", "exp", "obelisk", "pets", "storage", "workshop", "mail", "hospital", "market", "wall", "tree", "mine1", "mine2", "mine3", "make1", "make2", "make3", "portal", "halloween", "kennel", "exp2", "camp"],
    MAP_POINTS: {
        1: [[5, 1804, 176], [11, 1724, 316], [19, 1724, 316], [20, 768, 409], [1, 1338, 274], [6, 1852, 372], [7, 1668, 412], [2, 1964, 508], [9, 1820, 519], [3, 1643, 540], [4, 1210, 610], [8, 1674, 625], [10, 1898, 630], [12, 311, 241], [18, 644, 95], [22, 435, 583]],
        2: [[4, 214, 136], [1, 678, 274], [5, 190, 340], [7, 324, 436], [2, 108, 484], [9, 242, 486], [3, 524, 542], [11, 620, 573], [19, 621, 573], [20, 1212, 413], [6, 732, 598], [8, 426, 638], [10, 106, 640], [12, 1691, 243], [18, 1342, 100], [22, 1643, 551]]
    },
    WIDTH_MIN: 800,
    HEIGHT_MIN: 400,
    WIDTH_MAX: 2024,
    HEIGHT_MAX: 724,
    MAP_ORIGINAL_WIDTH: 2e3,
    MAP_ORIGINAL_HEIGHT: 700,
    CURL_DX: 12,
    CURL_DY: 12,
    BUILDING_COUNT: 22,
    BUILDING_MAX_COUNT: 30,
    ENERGY_COURSE: 5,
    THRONE_ROOM_WIDTH: 1e3,
    THRONE_ROOM_HEIGHT: 300
},
canvas.app.manor.Controller = function(t) {
    if (this.main = t,
    this.view = this.main.view,
    canvas.EventManager.addEventListener(canvas.app.manor.Event.SELECT_BUILDING, null, this.thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_THRONE_ROOM, null, this.thisHandler, this),
    !canvas.app.manor.model.guestMode) {
        for (var e = [canvas.app.manor.Event.CLOSE_BUILDING, canvas.app.manor.Event.CLOSE_LABOUR, canvas.app.manor.Event.OPEN_LABOUR, canvas.app.manor.Event.OPEN_HIRE, canvas.app.manor.Event.CLOSE_HIRE, canvas.app.manor.Event.OPEN_PORTAL_RESET, canvas.app.manor.Event.CLOSE_PORTAL_RESET, canvas.app.manor.Event.OPEN_WORK, canvas.app.manor.Event.CLOSE_WORK, canvas.app.manor.Event.OPEN_CONFIRM, canvas.app.manor.Event.OPEN_MESSAGE, canvas.app.manor.Event.OPEN_CEMENT, canvas.app.manor.Event.CLOSE_CEMENT, canvas.app.manor.Event.BUY_CEMENT, canvas.app.manor.Event.CREATE_WORK_REQUEST, canvas.app.manor.Event.LOAD_WORK_REQUESTS, canvas.app.manor.Event.REMOVE_WORK_REQUEST, canvas.app.manor.Event.WORK_USE, canvas.app.manor.Event.BUILD, canvas.app.manor.Event.USE_PETS_DATA, canvas.app.manor.Event.USE_PETS_ACTION, canvas.app.manor.Event.USE_EXP_DATA, canvas.app.manor.Event.USE_EXP_ACTION, canvas.app.manor.Event.USE_EXP2_DATA, canvas.app.manor.Event.USE_EXP2_ACTION, canvas.app.manor.Event.USE_HOSPITAL_DATA, canvas.app.manor.Event.USE_HOSPITAL_ACTION, canvas.app.manor.Event.USE_STORAGE_DATA, canvas.app.manor.Event.USE_STORAGE_ACTION, canvas.app.manor.Event.USE_VALOUR_DATA, canvas.app.manor.Event.USE_VALOUR_ACTION, canvas.app.manor.Event.OPEN_BANK, canvas.app.manor.Event.OPEN_HUNT_CAMP, canvas.app.manor.Event.OPEN_COUNT, canvas.app.manor.Event.USE_BANK_ACTION, canvas.app.manor.Event.USE_WORKSHOP_DATA, canvas.app.manor.Event.USE_WORKSHOP_ACTION, canvas.app.manor.Event.USE_MINE_DATA, canvas.app.manor.Event.USE_MINE_ACTION, canvas.app.manor.Event.USE_PORTAL_DATA, canvas.app.manor.Event.USE_PORTAL_ACTION, canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FARM, canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FORGE, canvas.app.manor.Event.USE_HUNT_CAMP_DATA_SEARCH, canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, canvas.app.manor.Event.LOAD_CONFIG, canvas.app.manor.Event.DESTROY_BUILDING, canvas.app.manor.Event.GET_AVAILABLE_BUILDINGS, canvas.app.manor.Event.BACK_TO_CHOOSE_BUILDING, canvas.app.manor.Event.USE_KENNEL_DATA, canvas.app.manor.Event.USE_KENNEL_ACTION, canvas.app.manor.Event.OPEN_CHOOSE_PET, canvas.app.manor.Event.CLOSE_CHOOSE_PET, canvas.app.manor.Event.EXIT, canvas.app.manor.Event.THRONE_ROOM_INSTALL, canvas.app.manor.Event.THRONE_ROOM_REMOVE, canvas.app.manor.Event.THRONE_ROOM_UPDATE, canvas.app.manor.Event.THRONE_ROOM_BUY], a = e.length, s = 0; s < a; s++)
            canvas.EventManager.addEventListener(e[s], null, this.thisHandler, this);
        canvas.EventManager.addEventListener(canvas.app.manor.Event.LIST_SHOW_HIDE, null, this.listHandler, this),
        this.request = new canvas.utils.URLRequest,
        canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.completeHandler, this),
        canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.errorHandler, this),
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.exitButton, this.exit, this),
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.workButton, this.workButtonClickHandler, this),
        this.timer = setInterval(this.timerHandler.bind(this), 6e4),
        this.timerHandler(),
        this.timer1000 = setInterval(this.timerHandler1000.bind(this), 1e3)
    }
}
,
canvas.app.manor.Controller.prototype.workButtonClickHandler = function() {
    this.view.labourWin.open(),
    this.view.labourWin.panel.path = "all"
}
,
canvas.app.manor.Controller.prototype.testError = function(t) {
    return !!t.error && (this.view.showError(t.error),
    !0)
}
,
canvas.app.manor.Controller.prototype.completeHandler = function(t) {
    var e, a = canvas.app.manor.model;
    this.main.interactiveChildren = !0;
    var s, i = t ? JSON.parse(this.request.request.responseText) : JSON.parse(canvas.ResourceLoader.get("conf").data), n = "";
    for (s in i["user|view"] && swfObject("lvl", i),
    i) {
        if ("estate" == s.substr(0, 6)) {
            i = i[s],
            n = "estate";
            break
        }
        if ("store" == s.substr(0, 5)) {
            i = i[s],
            n = "store";
            break
        }
    }
    if (1 == parseInt(i.reload) && (a.needUpdate = !0),
    i.redirect)
        canvas.Functions.navigateToURL(i.redirect, "_self");
    else {
        if (this.request.info.name) {
            if (this.testError(i))
                return void (this.request.info.name === canvas.app.manor.Const.REQ_USE_KENNEL_ACTION && this.view.buildingWin.useKennel.update());
            switch (this.request.info.name) {
            case canvas.app.manor.Const.REQ_CONFIG:
                a.parseConf(i),
                this.loadUserRequests(),
                this.view.update(),
                this.timerHandler1000(),
                e = a.user.buildings.portal,
                !a.portals && e && 0 < e.level && this.usePortalData();
                break;
            case canvas.app.manor.Const.REQ_BUILD:
                0 < parseInt(i.amount) && (a.user.labour -= parseInt(i.amount.toString()),
                a.user.cement -= parseInt(i.amount.toString()),
                e = a.user.buildings[a.selectedBuilding],
                a.buildings[a.selectedBuilding][e.level],
                e.labour += parseInt(i.amount.toString())),
                this.view.update(canvas.app.manor.Const.FLAG_AFTER_BUILD);
                break;
            case canvas.app.manor.Const.REQ_CREATE_WORK_REQUEST:
                break;
            case canvas.app.manor.Const.REQ_LOAD_USER_REQUESTS:
                a.parseUserRequests(i),
                this.view.labourWin.allRequests.update();
                break;
            case canvas.app.manor.Const.REQ_REMOVE_WORK_REQUEST:
                this.view.labourWin.myRequests.update();
                break;
            case canvas.app.manor.Const.REQ_WORK_USE:
                for (var o, r = a.labourRequests.length, c = 0; c < r; c++)
                    if ((o = a.labourRequests[c]) && o.id == a.selectedRequestID) {
                        a.user.labour -= o.labour - i.amount,
                        o.labour = i.amount,
                        this.view.labourWin.update();
                        break
                    }
                break;
            case canvas.app.manor.Const.REQ_USE_PETS_DATA:
                a.parsePets(i),
                this.view.buildingWin.usePets.update();
                break;
            case canvas.app.manor.Const.REQ_USE_PETS_ACTION:
                return void this.usePetsData();
            case canvas.app.manor.Const.REQ_USE_EXP_DATA:
                a.parseExp(i),
                this.view.buildingWin.useExp.update();
                break;
            case canvas.app.manor.Const.REQ_USE_EXP_ACTION:
                return void this.useExpData();
            case canvas.app.manor.Const.REQ_USE_EXP2_DATA:
                a.parseExp2(i),
                this.view.buildingWin.useExp2.update();
                break;
            case canvas.app.manor.Const.REQ_USE_EXP2_ACTION:
                return void this.useExpData("21", canvas.app.manor.Const.REQ_USE_EXP2_DATA);
            case canvas.app.manor.Const.REQ_USE_VALOUR_DATA:
                a.parseValour(i),
                this.view.buildingWin.useObelisk.update();
                break;
            case canvas.app.manor.Const.REQ_USE_VALOUR_ACTION:
                return void this.useValourData();
            case canvas.app.manor.Const.REQ_USE_HOSPITAL_DATA:
                a.parseHospital(i),
                this.view.buildingWin.useHospital.update();
                break;
            case canvas.app.manor.Const.REQ_USE_HOSPITAL_ACTION:
                return void this.useHospitalData();
            case canvas.app.manor.Const.REQ_USE_STORAGE_ACTION:
                a.storageArtToPut ? (this.useStorageAction(a.storageArtToPut, "", 0 == a.storageArtToPutCount ? 1 : a.storageArtToPutCount),
                a.storageArtToPut = "",
                a.storageArtToPutCount = 1) : this.useBankData();
                break;
            case canvas.app.manor.Const.REQ_USE_BANK_DATA:
                a.parseBank(i),
                this.view.bankWin.update();
                break;
            case canvas.app.manor.Const.REQ_USE_BANK_ACTION:
                this.useBankData();
                break;
            case canvas.app.manor.Const.REQ_USE_WORKSHOP_DATA:
                a.parseWorkshop(i),
                this.view.buildingWin.useWorkshop.update(),
                this.view.buildingWin.useWorkshop2.update();
                break;
            case canvas.app.manor.Const.REQ_USE_WORKSHOP_ACTION:
                this.useWorkshopData();
                break;
            case canvas.app.manor.Const.REQ_USE_MINE_DATA:
                switch (a.parseMine(i),
                a.getSelectedBuildingBase()) {
                case "mine":
                    this.view.buildingWin.useMine.update();
                    break;
                case "make":
                    this.view.buildingWin.useMake.update()
                }
                this.view.buildingWin.useMine2.update();
                break;
            case canvas.app.manor.Const.REQ_USE_MINE_ACTION:
                this.useMineData();
                break;
            case canvas.app.manor.Const.REQ_DESTROY_BUILDING:
                a.craftData = null,
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.BACK_TO_CHOOSE_BUILDING);
                break;
            case canvas.app.manor.Const.REQ_GET_AVAILABLE_BUILDINGS:
                a.parseAvailableBuildings(i.buildings_id_list.toString()),
                a.availableBuildings.length < 2 ? 1 == a.availableBuildings.length && canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_BUILDING, null, {
                    params: "chooser",
                    object: a.availableBuildings[0]
                }) : (this.view.buildingWin.close(),
                this.view.chooseBuildingWin.update(),
                this.view.chooseBuildingWin.open());
                break;
            case canvas.app.manor.Const.REQ_USE_KENNEL_DATA:
                a.parseKennel(i),
                this.view.buildingWin.useKennel.update();
                break;
            case canvas.app.manor.Const.REQ_USE_KENNEL_ACTION:
                this.useBuildingData(canvas.app.manor.Const.REQ_USE_KENNEL_DATA)
            }
        } else
            switch (n) {
            case "estate":
                if ("building" === this.request.info.action) {
                    if (18 === parseInt(this.request.params.type_id))
                        if ("teleport" === this.request.params.building_action)
                            if (i.need_confirm && i.error)
                                return void canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
                                    params: i.error,
                                    object: {
                                        name: canvas.app.manor.Event.USE_PORTAL_ACTION,
                                        params: {
                                            object: {
                                                building_action: "teleport",
                                                number: this.request.params.number,
                                                confirmed: !0
                                            }
                                        }
                                    }
                                });
                    switch (parseInt(this.request.params.type_id)) {
                    case 1:
                        if (this.testError(i))
                            return;
                        switch (this.request.params.building_action) {
                        case "throneroom_conf":
                            a.throneRoomData.parseConf(i),
                            a.throneRoomData.shopItems ? this.view.throneRoom.update() : this.throneRoomStoreList();
                            break;
                        case "throneroom_install":
                        case "throneroom_remove":
                        case "throneroom_buy_artikul":
                            a.throneRoomData.mergeItems(i.change_items),
                            this.view.throneRoom.update()
                        }
                        break;
                    case 18:
                        if (this.testError(i))
                            return;
                        switch (this.request.params.building_action) {
                        case "conf":
                            a.parsePortal(i),
                            this.view.buildingWin.usePortal.update(),
                            this.view.updateMenu();
                            break;
                        case "bind":
                        case "reset_bind_timer":
                            this.usePortalData()
                        }
                        break;
                    case 22:
                        if (this.testError(i))
                            return;
                        switch (this.request.params.building_action) {
                        case "confSearch":
                        case "confFarm":
                        case "confForge":
                            a.parseHuntCamp(i),
                            this.view.huntCampWin.update();
                            break;
                        case "missionGetRewards":
                            a.campData.parsePets(i.pets),
                            a.campData.removeActiveMission(a.campData.currentActiveMission),
                            this.view.huntCampWin.updateFarm();
                            break;
                        case "missionSendPets":
                            a.campData.parsePets(i.pets),
                            a.campData.parseActiveMissions(i.missions),
                            a.campData.changeArtifactsCount(),
                            this.view.huntCampWin.updateFarm();
                            break;
                        case "destructItem":
                            a.campData.parseDestructResult(i),
                            this.view.huntCampWin.activate(),
                            this.view.huntCampWin.equipment.update();
                            break;
                        case "buildItemRandom":
                            if (a.campData.deltaFragment(),
                            i.new)
                                for (s in i.new)
                                    a.campData.addForgeItem(i.new[s], !0);
                            this.view.huntCampWin.equipment.update();
                            break;
                        case "buildItemLevel":
                            if (a.campData.deltaFragment(a.campData.currentForgeLevel),
                            i.new)
                                for (s in i.new)
                                    a.campData.addForgeItem(i.new[s], !0);
                            this.view.huntCampWin.equipment.update()
                        }
                        this.view.huntCampWin.showLoader()
                    }
                }
                break;
            case "store":
                if (this.testError(i))
                    switch (this.request.info.action) {
                    case "cart_add":
                    case "purchase":
                        this.throneRoomStoreClear()
                    }
                else
                    switch (this.request.info.action) {
                    case "list":
                        a.throneRoomData.parseShopItems(i),
                        a.throneRoomData.userData.restrictions = i.restrictions,
                        this.view.throneRoom.update(),
                        a.throneRoomData.loadHints();
                        break;
                    case "cart_add":
                        this.throneRoomStorePurchase();
                        break;
                    case "purchase":
                    case "purchase_in_one_step":
                        this.throneRoomConf()
                    }
            }
        a.needUpdate && this.loadConfig(),
        i.js_code && getArtifactAlt(i.js_code.replace("<![CDATA[", "").replace("]]>", ""))
    }
}
,
canvas.app.manor.Controller.prototype.errorHandler = function(t) {
    this.main.interactiveChildren = !0
}
,
canvas.app.manor.Controller.prototype.timerHandler = function() {
    this.sendRequest("last_active")
}
,
canvas.app.manor.Controller.prototype.timerHandler1000 = function() {
    var t, e = canvas.app.manor.model;
    if ("workshop" == e.selectedBuilding && null != e.workShopRequests && null != (t = e.workShopRequests[0]) && (t.duration++,
    t.duration >= t.durationMax ? this.useWorkshopData() : this.view.buildingWin.useWorkshop2.updateRequests()),
    null != e.craftData && ("mine" == e.getSelectedBuildingBase() || "make" == e.getSelectedBuildingBase()) && null != e.craftData.requests && null != (t = e.craftData.requests[0]))
        if (t.duration++,
        t.duration >= t.durationMax)
            this.useMineData();
        else
            switch (e.getSelectedBuildingBase()) {
            case "mine":
                this.view.buildingWin.useMine.updateRequests();
                break;
            case "make":
                this.view.buildingWin.useMake.updateRequests()
            }
    switch (0 == e.user.labourMax ? (this.view.labour.setLabour(0, 0),
    this.view.labour.tf.text = canvas.Functions.formatDate(1e3 * e.user.workRefreshTime, "00", 2, !0),
    e.user.workRefreshTime--,
    e.user.workRefreshTime < 0 && (e.user.workRefreshTime = 0),
    0 == e.user.workRefreshTime && this.loadConfig()) : this.view.labour.setLabour(e.user.labour, e.user.labourMax),
    e.getSelectedBuildingBase()) {
    case "portal":
        this.view.buildingWin.usePortal.updateTime();
        break;
    case "kennel":
        this.view.buildingWin.useKennel.updateTime()
    }
    this.view.huntCampWin.parent && this.view.huntCampWin.updateTime(),
    this.view.throneRoom.parent && this.view.throneRoom.updateTime(),
    0 <= canvas.Functions.getSessTarget().autoPenalty && this.exit()
}
,
canvas.app.manor.Controller.prototype.updateCurrentBuilding = function() {
    this.view.updateCurrentBuildingPath()
}
,
canvas.app.manor.Controller.prototype.update = function() {
    this.view.update()
}
,
canvas.app.manor.Controller.prototype.sendRequest = function(t, e, a, s) {
    var i, n = this.request.stack.length;
    if (0 < n)
        for (i = 0; i < n; i++)
            if (this.request.stack[i][2].name == a)
                return;
    null == a && (a = ""),
    null == s && (s = "estate");
    var o = canvas.Config.entryPoint + "?object=" + s + "&json_mode_on=1&action=" + t;
    if (e)
        for (var r in e)
            o += "&" + r + "=" + e[r];
    else
        e = new Object;
    this.request.busy && this.request.url == o || this.request.load(o, e, {
        name: a,
        action: t
    })
}
,
canvas.app.manor.Controller.prototype.listHandler = function() {
    canvas.app.manor.model.localStorage.set("menuOpened", this.view.menu.showed ? "1" : "0")
}
,
canvas.app.manor.Controller.prototype.loadConfig = function() {
    var t, e;
    canvas.app.manor.model.needUpdate = !1,
    canvas.ResourceLoader.get("conf") ? (t = this.request.info,
    e = this.request.params,
    this.request.info = {
        name: canvas.app.manor.Const.REQ_CONFIG,
        action: "conf"
    },
    this.request.params = null,
    this.completeHandler(),
    canvas.ResourceLoader.remove("conf"),
    this.request.info = t,
    this.request.params = e) : this.sendRequest("conf", null, canvas.app.manor.Const.REQ_CONFIG)
}
,
canvas.app.manor.Controller.prototype.loadUserRequests = function() {
    var t = new Object;
    t.page = canvas.app.manor.model.requestCurPage + 1,
    this.sendRequest("work_requests", t, canvas.app.manor.Const.REQ_LOAD_USER_REQUESTS)
}
,
canvas.app.manor.Controller.prototype.build = function() {
    var t = new Object;
    t.index = canvas.app.manor.model.selectedDich,
    t.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1,
    t.amount = this.view.buildingWin.upgrade.labourInput.input.text,
    this.sendRequest("build", t, canvas.app.manor.Const.REQ_BUILD)
}
,
canvas.app.manor.Controller.prototype.createWorkRequest = function(t, e, a, s) {
    var i = new Object
      , n = canvas.app.manor.model.user.buildings[t];
    i.amount = e,
    i.index = n.dichIndex.toString(),
    i.type_id = canvas.app.manor.Const.TITLES.indexOf(t) + 1,
    i.work_request_price = a,
    this.sendRequest(s ? "work_request_update" : "build", i, canvas.app.manor.Const.REQ_CREATE_WORK_REQUEST)
}
,
canvas.app.manor.Controller.prototype.removeWorkRequest = function(t) {
    var e = new Object;
    e.work_request_id = t,
    this.sendRequest("cancel_request", e, canvas.app.manor.Const.REQ_REMOVE_WORK_REQUEST)
}
,
canvas.app.manor.Controller.prototype.workUse = function(t) {
    var e = new Object;
    e.work_request_id = canvas.app.manor.model.selectedRequestID,
    e.amount = t,
    this.sendRequest("work", e, canvas.app.manor.Const.REQ_WORK_USE)
}
,
canvas.app.manor.Controller.prototype.buyCement = function(t, e) {
    var a = new Object;
    a.amount = t,
    a.energy = e ? "1" : "0",
    this.sendRequest("buy_cement", a, canvas.app.manor.Const.REQ_BUY_CEMENT)
}
,
canvas.app.manor.Controller.prototype.usePetsData = function() {
    var t = new Object;
    t.building_action = "conf",
    t.type_id = "4",
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_PETS_DATA)
}
,
canvas.app.manor.Controller.prototype.usePetsAction = function(t, e) {
    var a = new Object
      , e = canvas.app.manor.model.petTrainingTypes[e];
    a.building_action = "train",
    a.type_id = "4",
    a.pet_id = t,
    a.training_type = e.id,
    this.sendRequest("building", a, canvas.app.manor.Const.REQ_USE_PETS_ACTION)
}
,
canvas.app.manor.Controller.prototype.useExpData = function(t, e) {
    var a = new Object;
    a.building_action = "conf",
    a.type_id = null == t ? "2" : t,
    this.sendRequest("building", a, null == e ? canvas.app.manor.Const.REQ_USE_EXP_DATA : e)
}
,
canvas.app.manor.Controller.prototype.useExpAction = function(t, e, a, s) {
    var i = new Object;
    i.building_action = t,
    i.type_id = null == a ? "2" : a,
    i.energy = e ? "1" : "0",
    "set_direction" == t && (i.dir = e ? "1" : "0"),
    this.sendRequest("building", i, null == s ? canvas.app.manor.Const.REQ_USE_EXP_ACTION : s)
}
,
canvas.app.manor.Controller.prototype.useValourData = function() {
    var t = new Object;
    t.building_action = "conf",
    t.type_id = "3",
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_VALOUR_DATA)
}
,
canvas.app.manor.Controller.prototype.useValourAction = function(t, e) {
    var a = new Object;
    a.building_action = t,
    a.type_id = "3",
    a.energy = e ? "1" : "0",
    this.sendRequest("building", a, canvas.app.manor.Const.REQ_USE_VALOUR_ACTION)
}
,
canvas.app.manor.Controller.prototype.useHospitalData = function() {
    var t = new Object;
    t.building_action = "conf",
    t.type_id = "8",
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_HOSPITAL_DATA)
}
,
canvas.app.manor.Controller.prototype.useHospitalAction = function() {
    var t = new Object;
    t.building_action = "use_buff",
    t.type_id = "8",
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_HOSPITAL_ACTION)
}
,
canvas.app.manor.Controller.prototype.useStorageAction = function(t, e, a) {
    null == a && (a = 1);
    var s = new Object;
    s.type_id = "5",
    s.cnt = a,
    e ? (s.building_action = "give_art",
    s.artifact_id = e) : t && (s.building_action = "put_art",
    s.artifact_id = t),
    this.sendRequest("building", s, canvas.app.manor.Const.REQ_USE_STORAGE_ACTION)
}
,
canvas.app.manor.Controller.prototype.useBankData = function() {
    var t = new Object;
    t.building_action = "conf",
    t.type_id = "1",
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_BANK_DATA)
}
,
canvas.app.manor.Controller.prototype.useBankAction = function(t) {
    null == t && (t = 1);
    var e = new Object;
    e.building_action = "move_art",
    e.type_id = "1",
    e.artifact_id = canvas.app.manor.model.bankItemFrom.id,
    e.cnt = t,
    e.area_id_from = canvas.app.manor.model.bankItemFrom.area,
    e.area_id_to = canvas.app.manor.model.bankItemToArea,
    this.sendRequest("building", e, canvas.app.manor.Const.REQ_USE_BANK_ACTION)
}
,
canvas.app.manor.Controller.prototype.useWorkshopData = function() {
    var t = new Object;
    t.building_action = "conf",
    t.type_id = "6",
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_WORKSHOP_DATA)
}
,
canvas.app.manor.Controller.prototype.useWorkshopAction = function(t) {
    t.type_id = "6",
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_WORKSHOP_ACTION)
}
,
canvas.app.manor.Controller.prototype.useMineData = function() {
    var t = new Object;
    t.building_action = "conf",
    t.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1,
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_MINE_DATA)
}
,
canvas.app.manor.Controller.prototype.useMineAction = function(t) {
    t.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1,
    this.sendRequest("building", t, canvas.app.manor.Const.REQ_USE_MINE_ACTION)
}
;
canvas.app.manor.Controller.prototype.usePortalData = function() {
    this.sendRequest("building", {
        type_id: 18,
        building_action: "conf"
    })
}
,
canvas.app.manor.Controller.prototype.useBuildingData = function(t) {
    var e = new Object;
    e.building_action = "conf",
    e.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1,
    this.sendRequest("building", e, t)
}
,
canvas.app.manor.Controller.prototype.useBuildingAction = function(t, e) {
    t.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1,
    this.sendRequest("building", t, e)
}
,
canvas.app.manor.Controller.prototype.destroyBuilding = function() {
    var t = new Object;
    t.index = canvas.app.manor.model.selectedDich,
    t.type_id = canvas.app.manor.Const.TITLES.indexOf(canvas.app.manor.model.selectedBuilding) + 1,
    this.sendRequest("destroy_building", t, canvas.app.manor.Const.REQ_DESTROY_BUILDING)
}
,
canvas.app.manor.Controller.prototype.getAvailableBuildings = function() {
    var t = new Object;
    t.index = canvas.app.manor.model.selectedDich,
    this.sendRequest("buildings_list", t, canvas.app.manor.Const.REQ_GET_AVAILABLE_BUILDINGS)
}
,
canvas.app.manor.Controller.prototype.throneRoomConf = function() {
    var t = new Object;
    t.type_id = 1,
    t.building_action = "throneroom_conf",
    this.sendRequest("building", t)
}
,
canvas.app.manor.Controller.prototype.throneRoomStoreList = function() {
    this.sendRequest("list", {
        is_throne_room: "1",
        with_badges: "1",
        with_restrictions: "1"
    }, null, "store")
}
,
canvas.app.manor.Controller.prototype.throneRoomStorePurchase = function() {
    this.sendRequest("purchase", {
        is_throne_room: "1"
    }, null, "store")
}
,
canvas.app.manor.Controller.prototype.throneRoomStoreClear = function() {
    this.sendRequest("cart_clear", {
        is_throne_room: "1"
    }, null, "store")
}
,
canvas.app.manor.Controller.prototype.exit = function() {
    this.sendRequest("exit", null, canvas.app.manor.Const.REQ_EXIT)
}
,
canvas.app.manor.Controller.prototype.thisHandler = function(t) {
    var e, a, s = t.params, i = canvas.app.manor.model;
    switch (t.name) {
    case canvas.app.manor.Event.SELECT_BUILDING:
        if (i.guestMode)
            "1" == s.params && this.view.openGuestThroneRoom();
        else {
            if ("exit" == s.params)
                return void this.exit();
            this.view.bankWin.close(),
            "chooser" == s.params ? (i.selectedBuilding = s.object.name,
            this.view.buildingWin.open(),
            this.view.chooseBuildingWin.close()) : (i.selectedDich = parseInt(s.params),
            (a = i.user.buildingsByIndex[parseInt(s.params)]) ? (i.selectedBuilding = a.name,
            this.view.buildingWin.open()) : this.getAvailableBuildings())
        }
        break;
    case canvas.app.manor.Event.BACK_TO_CHOOSE_BUILDING:
        this.view.buildingWin.close(),
        this.getAvailableBuildings();
        break;
    case canvas.app.manor.Event.CLOSE_BUILDING:
        this.view.buildingWin.close();
        break;
    case canvas.app.manor.Event.CLOSE_LABOUR:
        this.view.labourWin.close();
        break;
    case canvas.app.manor.Event.OPEN_LABOUR:
        this.view.labourWin.open();
        break;
    case canvas.app.manor.Event.BUILD:
        this.build();
        break;
    case canvas.app.manor.Event.OPEN_HIRE:
        this.view.hireWin.open(!1),
        s.object && (e = s.object,
        this.view.hireWin.combo.setSelectedItem("name", e.building),
        this.view.hireWin.inputLabour.text = e.labour.toString(),
        this.view.hireWin.inputPrice.text = e.price.toString(),
        this.view.hireWin.changeHandler());
        break;
    case canvas.app.manor.Event.CLOSE_HIRE:
        this.view.hireWin.close();
        break;
    case canvas.app.manor.Event.OPEN_PORTAL_RESET:
        this.view.portalResetWin.open();
        break;
    case canvas.app.manor.Event.CLOSE_PORTAL_RESET:
        this.view.portalResetWin.close();
        break;
    case canvas.app.manor.Event.CLOSE_WORK:
        this.view.workWin.close();
        break;
    case canvas.app.manor.Event.OPEN_WORK:
        this.view.workWin.open(!1);
        break;
    case canvas.app.manor.Event.OPEN_CONFIRM:
        this.view.openConfirm(s.params, s.object);
        break;
    case canvas.app.manor.Event.OPEN_MESSAGE:
        this.view.showError(s.params);
        break;
    case canvas.app.manor.Event.OPEN_CEMENT:
        this.view.cementWin.open();
        break;
    case canvas.app.manor.Event.CLOSE_CEMENT:
        this.view.cementWin.close();
        break;
    case canvas.app.manor.Event.CREATE_WORK_REQUEST:
        this.createWorkRequest(s.object.type, s.object.labour, s.object.price, "boolean" == typeof s.object.edit && s.object.edit);
        break;
    case canvas.app.manor.Event.LOAD_WORK_REQUESTS:
        this.loadUserRequests();
        break;
    case canvas.app.manor.Event.REMOVE_WORK_REQUEST:
        this.removeWorkRequest(s.params);
        break;
    case canvas.app.manor.Event.WORK_USE:
        this.workUse(t.params);
        break;
    case canvas.app.manor.Event.BUY_CEMENT:
        this.view.cementWin.close(),
        this.buyCement(parseInt(s.params), s.flag);
        break;
    case canvas.app.manor.Event.USE_PETS_DATA:
        this.usePetsData();
        break;
    case canvas.app.manor.Event.USE_PETS_ACTION:
        this.usePetsAction(s.object.pet, s.object.type);
        break;
    case canvas.app.manor.Event.USE_EXP_DATA:
        this.useExpData();
        break;
    case canvas.app.manor.Event.USE_EXP_ACTION:
        this.useExpAction(s.params, s.flag);
        break;
    case canvas.app.manor.Event.USE_EXP2_DATA:
        this.useExpData("21", canvas.app.manor.Const.REQ_USE_EXP2_DATA);
        break;
    case canvas.app.manor.Event.USE_EXP2_ACTION:
        this.useExpAction(s.params, s.flag, "21", canvas.app.manor.Const.REQ_USE_EXP2_ACTION);
        break;
    case canvas.app.manor.Event.USE_VALOUR_DATA:
        this.useValourData();
        break;
    case canvas.app.manor.Event.USE_VALOUR_ACTION:
        this.useValourAction(s.params, s.flag);
        break;
    case canvas.app.manor.Event.USE_HOSPITAL_DATA:
        this.useHospitalData();
        break;
    case canvas.app.manor.Event.USE_HOSPITAL_ACTION:
        this.useHospitalAction();
        break;
    case canvas.app.manor.Event.USE_STORAGE_DATA:
        this.useBankData();
        break;
    case canvas.app.manor.Event.USE_STORAGE_ACTION:
        e = null == s.object.putItem && null != s.object.getItem ? s.object.getItem : s.object.putItem,
        null != s.object.putItem && null != s.object.getItem && (i.storageArtToPut = e.id,
        e.equals(s.object.getItem) ? i.storageArtToPutCount = (0 == canvas.app.manor.view.controls.CountWin.count ? 1 : canvas.app.manor.view.controls.CountWin.count) + s.object.getItem.count : i.storageArtToPutCount = canvas.app.manor.view.controls.CountWin.count),
        e && 1 < e.count && 0 == canvas.app.manor.view.controls.CountWin.count ? (canvas.app.manor.view.controls.CountWin.event = [canvas.app.manor.Event.USE_STORAGE_ACTION, null, {
            object: {
                putItem: s.object.putItem,
                getItem: s.object.getItem
            }
        }],
        canvas.app.manor.view.controls.CountWin.maxCount = e.count,
        this.view.countWin.open()) : null != s.object.putItem && null != s.object.getItem ? this.useStorageAction("", s.object.getItem.id, s.object.getItem.count) : this.useStorageAction(null == s.object.putItem ? "" : s.object.putItem.id, null == s.object.getItem ? "" : s.object.getItem.id, 0 == canvas.app.manor.view.controls.CountWin.count ? 1 : canvas.app.manor.view.controls.CountWin.count);
        break;
    case canvas.app.manor.Event.USE_PORTAL_DATA:
        this.sendRequest("building", {
            type_id: 18,
            building_action: "conf"
        });
        break;
    case canvas.app.manor.Event.USE_PORTAL_ACTION:
        s.object.type_id = 18,
        this.sendRequest("building", s.object);
        break;
    case canvas.app.manor.Event.USE_HUNT_CAMP_DATA_SEARCH:
        this.sendRequest("building", {
            type_id: 22,
            building_action: "confSearch"
        });
        break;
    case canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FARM:
        this.sendRequest("building", {
            type_id: 22,
            building_action: "confFarm"
        });
        break;
    case canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FORGE:
        this.sendRequest("building", {
            type_id: 22,
            building_action: "confForge"
        });
        break;
    case canvas.app.manor.Event.USE_HUNT_CAMP_ACTION:
        s.object.type_id = 22,
        this.view.huntCampWin.showLoader(!0),
        this.sendRequest("building", s.object);
        break;
    case canvas.app.manor.Event.OPEN_BANK:
        this.view.bankWin.open(),
        this.useBankData(),
        this.view.bankWin.panels.path = s.flag ? "storage" : "cells";
        break;
    case canvas.app.manor.Event.USE_BANK_DATA:
        this.useBankData();
        break;
    case canvas.app.manor.Event.USE_BANK_ACTION:
        if (i.bankItemFrom = s.object.from,
        i.bankItemToArea = "firstFree" == s.object.toArea ? i.findFirstFreeArea(i.bankItemFrom.stackable ? i.bankItemFrom : null) : s.object.toArea,
        "" == i.bankItemToArea)
            return;
        1 < i.bankItemFrom.count && 0 == canvas.app.manor.view.controls.CountWin.count ? (canvas.app.manor.view.controls.CountWin.event = [canvas.app.manor.Event.USE_BANK_ACTION, null, {
            object: {
                from: i.bankItemFrom,
                toArea: i.bankItemToArea
            }
        }],
        canvas.app.manor.view.controls.CountWin.maxCount = i.bankItemFrom.count,
        this.view.countWin.open()) : this.useBankAction(0 == canvas.app.manor.view.controls.CountWin.count ? 1 : canvas.app.manor.view.controls.CountWin.count);
        break;
    case canvas.app.manor.Event.OPEN_HUNT_CAMP:
        this.view.huntCampWin.open();
        break;
    case canvas.app.manor.Event.OPEN_COUNT:
        this.view.countWin.open();
        break;
    case canvas.app.manor.Event.USE_WORKSHOP_DATA:
        this.useWorkshopData();
        break;
    case canvas.app.manor.Event.USE_WORKSHOP_ACTION:
        this.useWorkshopAction(s.object);
        break;
    case canvas.app.manor.Event.USE_MINE_DATA:
        this.useMineData();
        break;
    case canvas.app.manor.Event.USE_MINE_ACTION:
        this.useMineAction(s.object);
        break;
    case canvas.app.manor.Event.LOAD_CONFIG:
        this.loadConfig();
        break;
    case canvas.app.manor.Event.DESTROY_BUILDING:
        this.destroyBuilding();
        break;
    case canvas.app.manor.Event.GET_AVAILABLE_BUILDINGS:
        this.getAvailableBuildings();
        break;
    case canvas.app.manor.Event.OPEN_THRONE_ROOM:
        i.throneRoomData.userData.items = null,
        this.view.throneRoom.open(),
        this.throneRoomConf();
        break;
    case canvas.app.manor.Event.USE_KENNEL_DATA:
        this.useBuildingData(canvas.app.manor.Const.REQ_USE_KENNEL_DATA);
        break;
    case canvas.app.manor.Event.USE_KENNEL_ACTION:
        this.useBuildingAction(s.object, canvas.app.manor.Const.REQ_USE_KENNEL_ACTION);
        break;
    case canvas.app.manor.Event.OPEN_CHOOSE_PET:
        s.object.type ? i.campData.selectedType = s.object.type : i.campData.selectedType = 0,
        i.campData.selectedSlot = s.object.index,
        this.view.choosePetWin.excludePets = s.object.excludePets,
        this.view.choosePetWin.open();
        break;
    case canvas.app.manor.Event.CLOSE_CHOOSE_PET:
        i.campData.selectedType ? (this.view.huntCampWin.mineTalismans.list.items[i.campData.selectedType - 4].pets[i.campData.selectedSlot].data = s.object,
        this.view.huntCampWin.mineTalismans.list.items[i.campData.selectedType - 4].update()) : this.view.huntCampWin.mineResources.list.items[i.campData.selectedSlot].pet = s.object,
        this.view.choosePetWin.close();
        break;
    case canvas.app.manor.Event.EXIT:
        this.exit();
        break;
    case canvas.app.manor.Event.THRONE_ROOM_INSTALL:
        this.sendRequest("building", {
            type_id: 1,
            building_action: "throneroom_install",
            id: s.id
        });
        break;
    case canvas.app.manor.Event.THRONE_ROOM_REMOVE:
        this.sendRequest("building", {
            type_id: 1,
            building_action: "throneroom_remove",
            id: s.id
        });
        break;
    case canvas.app.manor.Event.THRONE_ROOM_UPDATE:
        this.view.throneRoom.update();
        break;
    case canvas.app.manor.Event.THRONE_ROOM_BUY:
        this.sendRequest("purchase_in_one_step", {
            "form[item_id]": s.id,
            "form[amount]": 1,
            is_throne_room: 1
        }, null, "store")
    }
}
,
canvas.app.manor.Event = {
    ENTER_FRAME: "Manor.ENTER_FRAME",
    ENTER_FRAME_ANIM: "Manor.ENTER_FRAME_ANIM",
    HINT_ADD: "Manor.HINT_ADD",
    HINT_REMOVE: "Manor.HINT_REMOVE",
    SELECT_BUILDING: "Manor.SELECT_BUILDING",
    CLOSE_BUILDING: "Manor.CLOSE_BUILDING",
    BUILD: "Manor.BUILD",
    CLOSE_LABOUR: "Manor.CLOSE_LABOUR",
    OPEN_LABOUR: "Manor.OPEN_LABOUR",
    OPEN_HIRE: "Manor.OPEN_HIRE",
    CLOSE_HIRE: "Manor.CLOSE_HIRE",
    OPEN_PORTAL_RESET: "Manor.OPEN_PORTAL_RESET",
    CLOSE_PORTAL_RESET: "Manor.CLOSE_PORTAL_RESET",
    OPEN_WORK: "Manor.OPEN_WORK",
    CLOSE_WORK: "Manor.CLOSE_WORK",
    OPEN_CONFIRM: "Manor.OPEN_CONFIRM",
    OPEN_MESSAGE: "Manor.OPEN_MESSAGE",
    OPEN_CEMENT: "Manor.OPEN_CEMENT",
    CLOSE_CEMENT: "Manor.CLOSE_CEMENT",
    CREATE_WORK_REQUEST: "Manor.CREATE_WORK_REQUEST",
    LOAD_WORK_REQUESTS: "Manor.LOAD_WORK_REQUESTS",
    REMOVE_WORK_REQUEST: "Manor.REMOVE_WORK_REQUEST",
    WORK_USE: "Manor.WORK_USE",
    OPEN_MARKET_BUY: "Manor.OPEN_MARKET_BUY",
    OPEN_MARKET_SELL: "Manor.OPEN_MARKET_SELL",
    CLOSE_MARKET: "Manor.CLOSE_MARKET",
    LOAD_SELL_REQUESTS: "Manor.LOAD_SELL_REQUESTS",
    LOAD_SELL_REQUESTS2: "Manor.LOAD_SELL_REQUESTS2",
    BUY_AREA: "Manor.BUY_AREA",
    SELL_AREA: "Manor.SELL_AREA",
    SELL_AREA_CANCEL: "Manor.SELL_AREA_CANCEL",
    SELECT_LOCATION: "Manor.SELECT_LOCATION",
    BUY_CEMENT: "Manor.BUY_CEMENT",
    USE_PETS_DATA: "Manor.USE_PETS_DATA",
    USE_PETS_ACTION: "Manor.USE_PETS_ACTION",
    USE_EXP_DATA: "Manor.USE_EXP_DATA",
    USE_EXP_ACTION: "Manor.USE_EXP_ACTION",
    USE_EXP2_DATA: "Manor.USE_EXP2_DATA",
    USE_EXP2_ACTION: "Manor.USE_EXP2_ACTION",
    USE_VALOUR_DATA: "Manor.USE_VALOUR_DATA",
    USE_VALOUR_ACTION: "Manor.USE_VALOUR_ACTION",
    USE_HOSPITAL_DATA: "Manor.USE_HOSPITAL_DATA",
    USE_HOSPITAL_ACTION: "Manor.USE_HOSPITAL_ACTION",
    USE_STORAGE_DATA: "Manor.USE_STORAGE_DATA",
    USE_STORAGE_ACTION: "Manor.USE_STORAGE_ACTION",
    USE_PORTAL_DATA: "Manor.USE_PORTAL_DATA",
    USE_PORTAL_ACTION: "Manor.USE_PORTAL_ACTION",
    USE_HUNT_CAMP_DATA_SEARCH: "Manor.USE_HUNT_CAMP_DATA_SEARCH",
    USE_HUNT_CAMP_DATA_FARM: "Manor.USE_HUNT_CAMP_DATA_FARM",
    USE_HUNT_CAMP_DATA_FORGE: "Manor.USE_HUNT_CAMP_DATA_FORGE",
    USE_HUNT_CAMP_ACTION: "Manor.USE_HUNT_CAMP_ACTION",
    OPEN_HUNT_CAMP: "Manor.OPEN_HUNT_CAMP",
    OPEN_CHOOSE_PET: "Manor.OPEN_CHOOSE_PET",
    CLOSE_CHOOSE_PET: "Manor.CLOSE_CHOOSE_PET",
    OPEN_BANK: "Manor.OPEN_BANK",
    USE_BANK_DATA: "Manor.USE_BANK_DATA",
    USE_BANK_ACTION: "Manor.USE_BANK_ACTION",
    OPEN_COUNT: "Manor.OPEN_COUNT",
    USE_WORKSHOP_DATA: "Manor.USE_WORKSHOP_DATA",
    USE_WORKSHOP_ACTION: "Manor.USE_WORKSHOP_ACTION",
    USE_MINE_DATA: "Manor.USE_MINE_DATA",
    USE_MINE_ACTION: "Manor.USE_MINE_ACTION",
    LOAD_CONFIG: "Manor.LOAD_CONFIG",
    MOVE_AREA: "Manor.MOVE_AREA",
    DESTROY_BUILDING: "Manor.DESTROY_BUILDING",
    GET_AVAILABLE_BUILDINGS: "Manor.GET_AVAILABLE_BUILDINGS",
    BACK_TO_CHOOSE_BUILDING: "Manor.BACK_TO_CHOOSE_BUILDING",
    OPEN_THRONE_ROOM: "Manor.OPEN_THRONE_ROOM",
    USE_KENNEL_DATA: "Manor.USE_KENNEL_DATA",
    USE_KENNEL_ACTION: "Manor.USE_KENNEL_ACTION",
    PANELS_PATH: "Manor.PANELS_PATH",
    PANELS_CLICK: "Manor.PANELS_CLICK",
    EXIT: "Manor.EXIT",
    THRONE_ROOM_INSTALL: "Manor.THRONE_ROOM_INSTALL",
    THRONE_ROOM_REMOVE: "Manor.THRONE_ROOM_REMOVE",
    THRONE_ROOM_UPDATE: "Manor.THRONE_ROOM_UPDATE",
    THRONE_ROOM_BUY: "Manor.THRONE_ROOM_BUY",
    HIDE_BUILDING_LOADER: "Manor.HIDE_BUILDING_LOADER"
},
canvas.app.manor.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.hintManager = new canvas.utils.HintManager,
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    canvas.EventManager.addEventListener(canvas.app.manor.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    this.windowsContainer = new canvas.px.Container,
    this.view = this.addChild(new canvas.app.manor.View),
    this.addChild(this.windowsContainer),
    this.addChild(this.hintContainer),
    this.windowsManager = new canvas.utils.WindowsManager,
    this.controller = new canvas.app.manor.Controller(this),
    this.model.guestMode ? (this.view.hideGuestControls(),
    this.view.update(),
    this.x -= 10,
    this.model.showThroneRoom && this.view.openGuestThroneRoom()) : this.controller.loadConfig(),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.openWinHandler, this),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.closeWinHandler, this)
}
,
canvas.app.manor.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.manor.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.manor.Main.prototype.resize = function(t, e) {
    this.view.resize(),
    this.windowsManager.init(this.windowsContainer, t, e, this.view.container),
    this.hintManager.init(this.hintContainer, t, e),
    this.view.position.set(Math.round(.5 * (t - this.model.width)), canvas.app.manor.Const.CURL_DY + Math.round(.5 * (e - this.model.height)))
}
,
canvas.app.manor.Main.prototype.openWinHandler = function(t) {
    this.hintManager.hide(),
    this.model.paused = !0,
    this.view.manor.deactivate()
}
,
canvas.app.manor.Main.prototype.closeWinHandler = function(t) {
    this.model.paused = this.windowsManager.haveActiveWindows,
    this.windowsManager.haveActiveWindows || this.view.manor.activate()
}
,
canvas.app.manor.Model = function(t) {
    this.par = t,
    this.paused = !1,
    this.showThroneRoom = "1" == t.show_throne_room,
    this.requestCurPage = 0,
    this.mapMode = !1,
    this.selectedBuilding = "",
    this.selectedRequest = 0,
    this.selectedRequestID = "",
    this.requestNumPages = 1,
    this.selectedPet = "",
    this.expUse = !1,
    this.expCost = 0,
    this.exp2Use = !1,
    this.exp2Cost = 0,
    this.valourCost = 0,
    this.storageArtToPut = "",
    this.storageArtToPutCount = 1,
    this.bankCells = [],
    this.bankItems = [],
    this.needUpdate = !1,
    this.selectedDich = 0,
    this.globalDrag = !1,
    this.buildingPanelsStatus = {},
    this.kennelData = new canvas.data.manor.DKennel,
    this.campData = new canvas.data.manor.DCampData,
    this.throneRoomData = new canvas.data.manor.DThroneRoomData(t),
    this.requestToRemove = "",
    this.winScale = 1,
    this.user = new canvas.data.manor.DUser,
    this.backImage = null != t.BackImage ? canvas.Functions.extractSwfName(t.BackImage) : "manor_back_hum",
    this.cementImage = null != t.CementImage ? t.CementImage : "",
    this.favoriteImage = null != t.FavoriteImage ? t.FavoriteImage : "images/favorite.png",
    this.cementID = null != t.CementArtikulId ? t.CementArtikulId : "",
    this.dicURL = null != t.DicUrl ? t.DicUrl : "dic.xml",
    this.requestURL = null != t.RequestUrl ? t.RequestUrl : "manor_conf.xml",
    this.cementCost = null != t.CementCost ? parseInt(t.CementCost) : 1,
    this.user.race = null != t.Race ? parseInt(t.Race) : 1,
    this.guestMode = null != t.Guest && "1" == t.Guest,
    this.guestBuildings = null != t.Buildings ? t.Buildings.toString() : "",
    this.winterMode = null != t.winterMode && "1" == t.winterMode,
    this.user.labourMax = 100,
    this.labourRequests = new Array,
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.MANOR),
    this.serverTime = new canvas.utils.ServerTime(parseInt(t.current_time),parseInt(t.time_zone));
    for (var e = canvas.app.manor.Const.TITLES.length + 1; e <= canvas.app.manor.Const.BUILDING_MAX_COUNT; e++)
        canvas.app.manor.Const.TITLES.push("b" + e);
    this.labourPrognosisData = new Object,
    null != t.WorkAvgTimes && (this.labourPrognosisData = JSON.parse(t.WorkAvgTimes)),
    canvas.Functions.getSessTarget().manor && canvas.Functions.deleteSessTarget()
}
,
canvas.app.manor.Model.prototype.getSelectedBuildingBase = function() {
    return "mine" == this.selectedBuilding.substr(0, 4) ? "mine" : "make" == this.selectedBuilding.substr(0, 4) ? "make" : this.selectedBuilding
}
,
canvas.app.manor.Model.prototype.parseDic = function() {
    var t, e, a, s, i, n = canvas.ResourceLoader.get("dic").data, o = 0;
    this.buildings = new Object,
    this.diches = new Array,
    this.multiBuildingTypes = new Array;
    var r, c, p = (s = n.getElementsByTagName("building")).length;
    for (r = 0; r < p; r++)
        t = s[r],
        (e = new canvas.data.manor.DBuilding).cost = parseInt(canvas.Functions.getChildValueByName(t, "cost")) || 0,
        e.desc = canvas.Functions.getChildValueByName(t, "description"),
        i = 1 == this.user.race ? this.winterMode ? canvas.Functions.getChildNodeByName(t, "building_swf3") : canvas.Functions.getChildNodeByName(t, "building_swf1") : this.winterMode ? canvas.Functions.getChildNodeByName(t, "building_swf4") : canvas.Functions.getChildNodeByName(t, "building_swf2"),
        e.image = i ? canvas.Functions.extractSwfName(i[0].innerHTML) : "",
        e.dx = i ? parseInt(canvas.Functions.getAttribute(i[0], "dx")) : 0,
        e.dy = i ? parseInt(canvas.Functions.getAttribute(i[0], "dy")) : 0,
        e.picture = 1 == this.user.race ? canvas.Functions.getChildValueByName(t, "building_picture3") : canvas.Functions.getChildValueByName(t, "building_picture4"),
        e.picture.indexOf(".") < 0 ? e.picture = "" : e.picture = e.picture.substr(0, e.picture.length - 4),
        e.level = parseInt(canvas.Functions.getChildValueByName(t, "level")),
        e.type = parseInt(canvas.Functions.getChildValueByName(t, "type_id")),
        e.type > o && (o = e.type),
        e.name = canvas.app.manor.Const.TITLES[e.type - 1],
        e.title = canvas.Functions.getChildValueByName(t, "title"),
        (i = canvas.Functions.getChildValueByName(t, "flags")) && (i = parseInt(i),
        e.enabled = !canvas.Functions.testFlag(i, 1),
        e.destroyEnabled = !canvas.Functions.testFlag(i, 4)),
        null == this.buildings[e.name] ? ((a = new Array)[e.level] = e,
        this.buildings[e.name] = a) : (a = this.buildings[e.name])[e.level] = e,
        0 == e.level && (i = parseInt(canvas.Functions.getChildValueByName(t, "index")),
        null != this.diches[i] && this.multiBuildingTypes.push(e.type),
        0 != e.type && null != this.diches[i] || ((this.diches[i] = e).ownDichIndex = i));
    if (canvas.app.manor.Const.BUILDING_COUNT = o,
    this.guestMode && "" != this.guestBuildings)
        for (t = JSON.parse(this.guestBuildings),
        this.user.buildings = new Object,
        this.user.buildingsByIndex = new Array,
        r = 1; r <= canvas.app.manor.Const.BUILDING_COUNT; r++)
            (c = new canvas.data.manor.DUserBuilding).level = null == t[r] ? 0 : parseInt(t[r].level),
            c.type = r,
            c.dichIndex = null == t[r] ? 0 : parseInt(t[r].map_index),
            c.name = canvas.app.manor.Const.TITLES[c.type - 1],
            this.user.buildings[c.name] = c,
            this.user.buildingsByIndex[c.dichIndex] = c
}
,
canvas.app.manor.Model.prototype.parseConf = function(t) {
    var e, a, s, i, n, o;
    for (this.user.buildings = new Object,
    this.user.buildingsById = new Object,
    this.user.buildingsByIndex = new Array,
    a = 0; a < canvas.app.manor.Const.BUILDING_COUNT; a++)
        if (null != this.buildings[canvas.app.manor.Const.TITLES[a]]) {
            switch (n = this.buildings[canvas.app.manor.Const.TITLES[a]][0],
            (i = new canvas.data.manor.DUserBuilding).labour = 0,
            i.level = 0,
            i.type = a + 1,
            i.name = canvas.app.manor.Const.TITLES[a],
            i.dichIndex = n.ownDichIndex,
            i.type) {
            case canvas.data.manor.DBuilding.TYPE_TREE:
                i.params = t.tree_url;
                break;
            case canvas.data.manor.DBuilding.TYPE_HALLOWEEN:
                i.params = t.halloween_url
            }
            this.user.buildings[i.name] = i
        }
    for (s = t.buildings.length,
    a = 0; a < s; a++) {
        switch (e = t.buildings[a],
        (i = new canvas.data.manor.DUserBuilding).labour = parseInt(e.work),
        i.level = parseInt(e.level),
        i.type = parseInt(e.type_id),
        i.id = parseInt(e.id),
        i.dichIndex = parseInt(e.index),
        i.name = canvas.app.manor.Const.TITLES[i.type - 1],
        i.type) {
        case canvas.data.manor.DBuilding.TYPE_TREE:
            i.params = t.tree_url;
            break;
        case canvas.data.manor.DBuilding.TYPE_HALLOWEEN:
            i.params = t.halloween_url
        }
        this.user.buildings[i.name] = i,
        this.user.buildingsById[i.id] = i,
        (this.user.buildingsByIndex[i.dichIndex] = i).hirePrice = 10,
        this.buildingPanelsStatus["bs_" + i.name] = this.localStorage.get("bs_" + i.name)
    }
    for (this.user.requests = new Array,
    s = t.work_requests.length,
    a = 0; a < s; a++)
        e = t.work_requests[a],
        o = new canvas.data.manor.DWorkRequest,
        null != (i = this.user.buildingsById[parseInt(e.building_id)]) && (o.building = i.name,
        o.id = e.id,
        o.labour = parseInt(e.amount),
        o.price = parseInt(e.price),
        this.user.requests.push(o));
    this.user.labour = parseInt(t.current_work),
    this.user.cement = parseInt(t.current_cement),
    this.user.money = parseInt(t.money),
    this.user.labourMax = parseInt(t.work_max),
    this.user.ghost = "1" == t.ghost,
    this.user.workRefreshTime = parseInt(t.work_refresh_time)
}
,
canvas.app.manor.Model.prototype.parseUserRequests = function(t) {
    var e, a;
    this.requestNumPages = t.pages,
    this.labourRequests = new Array;
    for (var s = t.work_requests.length, i = 0; i < s; i++)
        a = t.work_requests[i],
        (e = new canvas.data.manor.DLabourRequest).user = new canvas.data.manor.DUserGame,
        e.user.login = a.nick,
        e.user.level = a.level,
        e.labour = a.amount,
        e.price = a.price,
        e.id = a.id,
        this.labourRequests[this.requestCurPage * canvas.app.manor.Const.REQUESTS_ON_PAGE + i] = e
}
,
canvas.app.manor.Model.prototype.parsePets = function(t) {
    var e, a, s;
    this.pets = new Array,
    this.petTrainingTypes = new Array;
    for (var i = t.pets.length, n = 0; n < i; n++)
        s = t.pets[n],
        (e = new canvas.data.manor.DPet).id = s.id.toString(),
        e.title = s.title.toString(),
        e.image = s.picture2.toString(),
        e.level = parseInt(s.level.toString()),
        e.swf = s.picture.toString(),
        e.exp = parseInt(s.exp.toString()),
        e.expUp = parseInt(s.exp_max.toString()),
        e.time = parseInt(s.time_left.toString()),
        e.timeFull = parseInt(s.time_total.toString()),
        e.error = s.error.toString(),
        e.color = parseInt(s.quality.toString()),
        this.pets.push(e);
    for (i = t.training_types.length,
    n = 0; n < i; n++)
        s = t.training_types[n],
        (a = new canvas.data.manor.DPetTrainingType).id = s.id.toString(),
        a.duration = parseInt(s.duration.toString()),
        a.exp = parseInt(s.exp.toString()),
        a.feedCost = parseInt(s.feed_cost.toString()),
        this.petTrainingTypes.push(a)
}
,
canvas.app.manor.Model.prototype.parseExp = function(t) {
    this.expCount = parseInt(t.exp.toString()),
    this.expDecrease = 1 == parseInt(t.exp_decr.toString()),
    this.expMax = parseInt(t.exp_limit.toString()),
    this.expPercent = parseInt(t.exp_percent.toString()),
    this.expUse = "1" == t.exp_use.toString(),
    this.expCost = parseInt(t.cost.toString())
}
,
canvas.app.manor.Model.prototype.parseExp2 = function(t) {
    this.exp2Count = parseInt(t.exp.toString()),
    this.exp2Decrease = 1 == parseInt(t.exp_decr.toString()),
    this.exp2Max = parseInt(t.exp_limit.toString()),
    this.exp2Percent = parseInt(t.exp_percent.toString()),
    this.exp2Use = "1" == t.exp_use.toString(),
    this.exp2Cost = parseInt(t.cost.toString())
}
,
canvas.app.manor.Model.prototype.parseValour = function(t) {
    this.valourCount = parseInt(t.honor.toString()),
    this.valourMax = parseInt(t.honor_limit.toString()),
    this.valourPercent = parseInt(t.honor_percent.toString()),
    this.valourUse = "1" == t.honor_use.toString(),
    this.valourCost = parseInt(t.cost.toString())
}
,
canvas.app.manor.Model.prototype.parseHospital = function(t) {
    var e, a;
    this.hospitalItems = new Array;
    var s, i = t.injuries.length;
    for (this.hospitalRegeneratePercent = .01 * t.reg_percent,
    s = 0; s < i; s++)
        e = t.injuries[s],
        (a = new canvas.data.manor.DItem).id = e.id.toString(),
        a.title = e.title.toString(),
        a.image = e.picture.toString(),
        a.time = Math.round(e.expires * (1 - this.hospitalRegeneratePercent)).toString(),
        this.hospitalItems.push(a);
    this.hospitalBuffItem = new canvas.data.manor.DItem,
    this.hospitalBuffItem.id = this.hospitalBuffItem.aid = t.buff_id.toString(),
    this.hospitalBuffItem.image = t.buff_picture.toString(),
    this.hospitalBuffItem.time = parseInt(t.buff_time.toString()),
    this.hospitalBuffItem.timeFull = parseInt(t.buff_cooldown.toString())
}
,
canvas.app.manor.Model.prototype.parseKennel = function(t) {
    var e, a, s;
    this.kennelData.bots = new Array;
    t.bot_list.length;
    for (s in t.bot_list)
        if ("function" != typeof (e = t.bot_list[s])) {
            if (!e)
                break;
            (a = new canvas.data.manor.DKennelBot).id = e.id,
            a.nick = e.nick,
            a.picture = canvas.Config.dataPath + "bots/" + e.picture,
            a.moneyMin = parseInt(e.money_min),
            a.moneyMax = parseInt(e.money_max),
            a.price = parseInt(e.price),
            a.exp = parseInt(e.exp),
            this.kennelData.bots.push(a)
        }
    for (s in t.user_times)
        switch (e = t.user_times[s],
        s) {
        case "KENNEL_TIME":
            this.kennelData.killTime = e;
            break;
        case "KENNEL_BIG_TIME":
            this.kennelData.killBigTime = e
        }
    for (s in t.settings)
        switch (e = t.settings[s],
        s) {
        case "KILL10_PRICE_EXT":
            this.kennelData.killPriceExt = e;
            break;
        case "KILL10_TIMER":
            this.kennelData.killBigCooldown = parseInt(e) + 1;
            break;
        case "KILL1_TIMER":
            this.kennelData.killColldown = parseInt(e) + 1
        }
    this.kennelData.canKill = t.can_kill,
    this.kennelData.canKillTotal = t.kill_cnt
}
,
canvas.app.manor.Model.prototype.parseStorage = function(t) {
    var e, a;
    this.storageItems = new Array,
    this.storageUserItems = new Array;
    for (var s = t.tmp_artifacts.length, i = 0; i < s; i++)
        e = t.tmp_artifacts[i],
        (a = new canvas.data.manor.DItem).id = e.id.toString(),
        a.aid = e.aid.toString(),
        a.title = e.title.toString(),
        a.image = e.picture.toString(),
        a.time = e.expires.toString(),
        a.count = parseInt(e.cnt.toString()),
        this.storageUserItems.push(a);
    for (s = t.current_artifacts.length,
    i = 0; i < s; i++)
        e = t.current_artifacts[i],
        (a = new canvas.data.manor.DItem).id = e.id.toString(),
        a.aid = e.aid.toString(),
        a.title = e.title.toString(),
        a.image = e.picture.toString(),
        a.time = e.expires.toString(),
        a.count = parseInt(e.cnt.toString()),
        storageItems.push(a);
    for (this.storageSlots = parseInt(t.fridge_cnt.toString()); i < this.storageSlots; )
        a = new canvas.data.manor.DItem,
        this.storageItems.push(a),
        a.id = "empty",
        i++
}
,
canvas.app.manor.Model.prototype.parseBank = function(t) {
    var e, a, s, i;
    this.bankItems = new Array;
    for (var n, o, r = t.bag_artifacts.length, c = 0; c < r; c++)
        e = t.bag_artifacts[c],
        (s = new canvas.data.manor.DItem(e)).area = "0",
        this.bankItems.push(s);
    for (this.storageItems = new Array,
    r = t.cell_storage.length,
    c = 0; c < r; c++)
        e = t.cell_storage[c],
        s = new canvas.data.manor.DItem(e),
        this.storageItems.push(s);
    for (this.bankCells = new Array,
    r = t.cells.length,
    c = 0; c < r; c++) {
        for (e = t.cells[c],
        (i = new canvas.data.manor.DItemCell).size = parseInt(e.cell_capacity.toString()),
        i.area = e.cell_area_id.toString(),
        i.title = e.cell_area_title.toString(),
        i.items = new Array,
        o = e.cell_artifacts.length,
        n = 0; n < o; n++)
            a = e.cell_artifacts[n],
            s = new canvas.data.manor.DItem(a),
            i.items.push(s),
            s.area = i.area;
        this.bankCells.push(i)
    }
}
,
canvas.app.manor.Model.prototype.parseWorkshop = function(t) {
    var e, a, s, i, n;
    this.workShopTimeLeft = parseInt(t.duration_left.toString()),
    this.workShopReduceKoef = parseFloat(t.reduce_duration.toString()),
    this.workShopReduceKoef || (this.workShopReduceKoef = 1),
    this.workShopRecepts = new Object,
    this.workShopReceptsArray = new Array;
    for (var o = t.recipes.length, r = 0; r < o; r++) {
        e = t.recipes[r],
        (s = new canvas.data.manor.DRecipe).id = e.recipe_id.toString(),
        s.title = e.title.toString(),
        s.duration = parseInt(e.duration.toString()),
        s.image = e.picture.toString(),
        s.resultCount = parseInt(e.cnt.toString()),
        s.resultAid = e.artikul_id.toString(),
        s.favorite = "1" == e.favorite,
        s.items = new Array;
        for (var c = e.parts.length, p = 0; p < c; p++)
            a = e.parts[p],
            (i = new canvas.data.manor.DItem).id = i.aid = a.artikul_id.toString(),
            i.title = a.title.toString(),
            i.image = a.picture.toString(),
            i.count = parseInt(a.cnt.toString()),
            s.items.push(i);
        this.workShopRecepts[s.id] = s,
        this.workShopReceptsArray.push(s)
    }
    for (this.workShopBugArtefacts = new Object,
    o = t.bag_artifacts.length,
    r = 0; r < o; r++)
        e = t.bag_artifacts[r],
        (i = new canvas.data.manor.DItem).id = i.aid = e.artikul_id.toString(),
        i.image = e.picture.toString(),
        i.title = e.title.toString(),
        i.count = parseInt(e.cnt.toString()),
        this.workShopBugArtefacts[i.id] = i;
    for (this.workShopRequests = new Array,
    this.workShopRequestsCompleted = new Array,
    o = t.craft_requests.length,
    r = 0; r < o; r++)
        e = t.craft_requests[r],
        (n = new canvas.data.manor.DCraftRequest).id = e.id.toString(),
        n.recipe = e.recipe_id.toString(),
        n.count = parseInt(e.amount.toString()),
        n.durationMax = Math.round(parseInt(e.duration.toString()) * this.workShopReduceKoef),
        n.duration = parseInt(e.time.toString()),
        (n.duration >= n.durationMax ? this.workShopRequestsCompleted : this.workShopRequests).push(n)
}
,
canvas.app.manor.Model.prototype.parseMine = function(t) {
    var e, a;
    this.craftData = new canvas.data.manor.DCraftData,
    this.craftData.item = new canvas.data.manor.DItem,
    t.hasOwnProperty("artikul_id") ? (this.craftData.item.count = parseInt(t.artikul_quantity),
    this.craftData.item.aid = this.craftData.item.id = t.artikul_id,
    this.craftData.item.image = t.picture,
    this.craftData.item.title = t.title) : (this.craftData.item.count = parseInt(t.material_artikul_quantity),
    this.craftData.item.aid = this.craftData.item.id = t.material_artikul_id,
    this.craftData.item.image = t.material_picture,
    this.craftData.item.title = t.material_title,
    this.craftData.item2 = new canvas.data.manor.DItem,
    this.craftData.item2.count = parseInt(t.result_artikul_quantity),
    this.craftData.item2.aid = this.craftData.item2.id = t.result_artikul_id,
    this.craftData.item2.image = t.result_picture,
    this.craftData.item2.title = t.result_title),
    this.craftData.price = parseInt(t.cost),
    this.craftData.queueSizeMax = parseInt(t.max_queue_length),
    this.craftData.requests = new Array,
    this.craftData.requestsCompleted = new Array,
    this.craftData.materialCount = parseInt(t.material_cnt);
    for (var s = t.craft_requests.length, i = 0; i < s; i++)
        a = t.craft_requests[i],
        (e = new canvas.data.manor.DCraftRequest).item = null == this.craftData.item2 ? this.craftData.item : this.craftData.item2,
        e.id = a.id.toString(),
        e.durationMax = parseInt(t.max_time_to_produce),
        e.duration = parseInt(a.time.toString()),
        (e.duration >= e.durationMax ? this.craftData.requestsCompleted : this.craftData.requests).push(e);
    this.craftData.requests.sort(function(t, e) {
        return parseInt(e.duration) - parseInt(t.duration)
    })
}
,
canvas.app.manor.Model.prototype.parsePortal = function(t) {
    var e, a, s;
    this.portals = new Array,
    this.portalLocations = new Array,
    this.portalRebindTime = Math.round(.001 * Date.now()) + t.rebind_left_time,
    this.portalRebindCooldown = t.rebind_cooldown,
    this.portalJumpCost = t.energy_per_jump;
    for (var i = t.available_areas.length, n = 0; n < i; n++)
        s = t.available_areas[n],
        (a = new canvas.data.manor.DLocation).id = s.id,
        a.areaID = s.area_id,
        a.title = s.title,
        a.picture = s.picture,
        a.error = s.error,
        this.portalLocations[a.id] = a;
    var o = new Array
      , i = t.user_areas.length;
    for (n = 0; n < i; n++)
        o[(s = t.user_areas[n]).num] = s.value;
    var r = this.user.buildings.portal;
    for (n = 1; n <= 6; n++)
        a = this.portalLocations[o[n]],
        (e = new canvas.data.manor.DPortal).status = r.level < n ? 0 : a ? 1 : -1,
        e.level = n,
        e.locationID = a ? a.id : 0,
        this.portals.push(e);
    this.portalResetItem = new canvas.data.manor.DItem,
    this.portalResetItem.id = t.artifact_reset_timer.id,
    this.portalResetItem.title = t.artifact_reset_timer.title,
    this.portalResetItem.image = t.artifact_reset_timer.picture,
    this.portalResetItem.count2 = parseInt(t.artifact_reset_timer.cnt)
}
,
canvas.app.manor.Model.prototype.parseHuntCamp = function(t) {
    this.campData.parse(t)
}
,
canvas.app.manor.Model.prototype.getLabourPrognosis = function(t, e) {
    var a, s, i = 1, n = 1e3;
    for (a in this.labourPrognosisData)
        Math.abs(parseInt(a) - t) < n && (n = Math.abs(parseInt(a) - t),
        i = parseFloat(this.labourPrognosisData[a]));
    return 1e3 == n || 0 == t || 0 == e ? canvas.Translator.getText(117) + "." : 86400 <= (s = Math.round(e / i)) ? canvas.Translator.getText(118) + "." : s < 3600 ? Math.ceil(s / 60).toString() + " " + canvas.Translator.getText(2016) + "." : (e = s % 3600,
    Math.floor(s / 3600).toString() + " " + canvas.Translator.getText(2001) + ". " + Math.ceil(e / 60).toString() + " " + canvas.Translator.getText(2016) + ".")
}
,
canvas.app.manor.Model.prototype.parseAvailableBuildings = function(t) {
    if (this.availableBuildings = new Array,
    "" != t)
        for (var e, a = t.split(","), s = a.length, i = 0; i < s; i++)
            e = a[i],
            this.availableBuildings.push(this.buildings[canvas.app.manor.Const.TITLES[parseInt(e) - 1]][1])
}
,
canvas.app.manor.Model.prototype.findFirstFreeArea = function(t) {
    var e, a = this.bankCells.length;
    if (a < 1)
        return "";
    for (var s = "", i = 0; i < a; i++)
        if (e = this.bankCells[i],
        "" == s && e.items.length < e.size && (s = e.area),
        t)
            for (var n = e.items.length, o = 0; o < n; o++)
                if (e.items[o].equals(t))
                    return e.area;
    return "" == s ? this.bankCells[0].area : s
}
,
canvas.app.manor.Model.prototype.getFilteredItems = function(t, e) {
    for (var a, s = new Array, i = t.length, n = 0; n < i; n++)
        (a = t[n]).flags[e] && s.push(a);
    return s
}
,
canvas.app.manor.Model.prototype.storageHaveFreeCells = function() {
    return this.user.buildings.storage.level > this.storageItems.length
}
,
canvas.app.manor.Model.prototype.getDragScale = function() {
    return 1 - this.winScale + 1
}
,
canvas.app.manor.View = function() {
    canvas.px.Container.call(this),
    this.container = this.addChild(new canvas.px.Container),
    this.manor = this.container.addChild(new canvas.app.manor.view.Map),
    this.manor.position.set(canvas.app.manor.Const.CURL_DX, canvas.app.manor.Const.CURL_DY),
    this.curls = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "contour"),49,49,49,49)),
    this.header = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_header"),30,0,30,0)),
    this.header.width = 150,
    this.header.y = -16,
    this.title = this.header.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD,16118721,150,20,"center")),
    this.title.text = canvas.Translator.getText(148),
    this.title.y = 9,
    this.labour = this.container.addChild(new canvas.app.manor.view.controls.elements.Labour(canvas.Translator.getText(149))),
    this.labour.setLabour(0, 100),
    this.windows = [],
    this.buildingWin = new canvas.app.manor.view.controls.BuildingWin,
    this.buildingWin.position.set(20, 0),
    this.windows.push(this.buildingWin),
    this.labourWin = new canvas.app.manor.view.controls.LabourWin,
    this.labourWin.position.set(475, 0),
    this.windows.push(this.labourWin),
    this.hireWin = new canvas.app.manor.view.controls.HireWin,
    this.hireWin.position.set(200, 100),
    this.windows.push(this.hireWin),
    this.portalResetWin = new canvas.app.manor.view.controls.PortalResetWin,
    this.portalResetWin.position.set(200, 100),
    this.windows.push(this.portalResetWin),
    this.workWin = new canvas.app.manor.view.controls.WorkWin,
    this.workWin.position.set(475, 0),
    this.windows.push(this.workWin),
    this.messageWin = new canvas.app.manor.view.controls.MessageWindow,
    this.windows.push(this.messageWin),
    this.confirmWin = new canvas.app.manor.view.controls.ConfirmWindow,
    this.windows.push(this.confirmWin),
    this.cementWin = new canvas.app.manor.view.controls.BuyCementWin,
    this.cementWin.position.set(200, 100),
    this.windows.push(this.cementWin),
    this.huntCampWin = new canvas.app.manor.view.controls.HuntCampWin,
    this.huntCampWin.position.set(20, 0),
    this.windows.push(this.huntCampWin),
    this.countWin = new canvas.app.manor.view.controls.CountWin,
    this.countWin.position.set(200, 100),
    this.windows.push(this.countWin),
    this.chooseBuildingWin = new canvas.app.manor.view.controls.ChooseBuildingWin,
    this.chooseBuildingWin.position.set(20, 0),
    this.windows.push(this.chooseBuildingWin),
    this.choosePetWin = new canvas.app.manor.view.controls.ChoosePetWin,
    this.choosePetWin.position.set(20, 0),
    this.windows.push(this.choosePetWin),
    this.bankWin = new canvas.app.manor.view.controls.BankWin,
    this.bankWin.position.set(20, 0),
    this.windows.push(this.bankWin),
    this.throneRoom = new canvas.app.manor.view.controls.ThroneRoom,
    this.throneRoom.position.set(20, 20),
    this.windows.push(this.throneRoom),
    this.menu = this.addChild(new canvas.app.manor.view.controls.Menu(parseInt(canvas.app.manor.model.localStorage.get("menuOpened")))),
    this.menu.y = 25,
    this.exitButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "exit_button_base"),canvas.ResourceLoader.getImage("ui", "exit_button_over"),canvas.ResourceLoader.getImage("ui", "exit_button_down"))),
    this.exitButton.y = -2,
    this.exitButton.sprite.hitArea = new canvas.px.Circle(20,20,20),
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.exitButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(150)))
    }),
    this.workButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "work_button_base"),canvas.ResourceLoader.getImage("ui", "work_button_over"),canvas.ResourceLoader.getImage("ui", "work_button_down"))),
    this.workButton.y = -2,
    this.workButton.sprite.hitArea = new canvas.px.Circle(22,22,22),
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.workButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(151)))
    }),
    this.techBtn = this.addChild(new canvas.app.location.view.popups.TechBtn(canvas.app.manor.model.par,canvas.app.manor.Event.ENTER_FRAME)),
    this.infoBtn = this.addChild(new canvas.app.location.view.popups.InfoBtn(canvas.app.manor.model.par)),
    this.infoBtn.y = 50
}
,
canvas.app.manor.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.View.prototype.hideGuestControls = function() {
    this.workButton.parent.removeChild(this.workButton),
    this.exitButton.parent.removeChild(this.exitButton),
    this.menu.parent.removeChild(this.menu),
    this.labour.parent.removeChild(this.labour),
    this.curls.parent.removeChild(this.curls),
    this.title.parent.removeChild(this.title)
}
,
canvas.app.manor.View.prototype.resize = function() {
    var t = canvas.app.manor.model
      , e = t.width
      , a = t.height;
    this.curls.width = e,
    this.curls.height = a - 12,
    this.manor.setSize(e - 2 * canvas.app.manor.Const.CURL_DX, a - 3 * canvas.app.manor.Const.CURL_DY),
    this.header.x = Math.round(.5 * (e - this.header.width)),
    this.labour.position.set(e - this.labour.width - 13, a - 50),
    this.exitButton.x = e - 41,
    this.techBtn && this.techBtn.parent && this.techBtn.position.set(e - 45, a - 40),
    this.infoBtn && this.infoBtn.parent && (this.infoBtn.x = e - 25),
    this.resizeMenu(),
    canvas.utils.WindowsManager.instance.resizeWindows();
    var s, i, n = this.windows.length;
    if (a)
        for (s = 0; s < n; s++)
            (i = this.windows[s]).back.height && (i.back.height < a + 20 ? t.winScale = 1 : t.winScale = a / i.back.height,
            i.scale.set(t.winScale, t.winScale))
}
,
canvas.app.manor.View.prototype.resizeMenu = function() {
    this.menu.x = canvas.app.manor.model.width - this.menu._width + 3,
    this.menu.resize()
}
,
canvas.app.manor.View.prototype.update = function(t) {
    null == t && (t = 0),
    this.updateMenu(),
    this.manor.updateMap();
    for (var e, a = this.windows.length, s = 0; s < a; s++)
        (e = this.windows[s]).parent && e.update(t);
    this.resize(),
    this.filters = canvas.app.manor.model.user.ghost ? [canvas.Functions.getGreyScale()] : null
}
,
canvas.app.manor.View.prototype.updateMenu = function() {
    for (var t, e, a, s, i, n, o = canvas.app.manor.model, r = new Array, c = new Array, p = canvas.app.manor.Const.TITLES.length, h = 0; h < p; h++)
        n = canvas.app.manor.Const.TITLES[h],
        null != (t = o.user.buildings[n]) && 0 != t.level && o.buildings[t.name] && null != (e = o.buildings[t.name][t.level]) && e.enabled && (r.push(e.title + " [" + t.level.toString() + "]"),
        c.push(t.dichIndex));
    for (r.push(""),
    c.push(""),
    h = 0; h < p; h++)
        n = canvas.app.manor.Const.TITLES[h],
        null == (t = o.user.buildings[n]) || 0 < t.level || t.isUnknownDich() || o.buildings[t.name] && (e = o.buildings[t.name][t.level],
        a = o.buildings[t.name][t.level + 1],
        null == e || !e.enabled || null == a || a.cost < 1 || (r.push(e.title),
        c.push(t.dichIndex)));
    if (r.push(""),
    c.push(""),
    r.push(canvas.Translator.getText(152)),
    c.push("exit"),
    o.portals)
        for (p = o.portals.length,
        h = 0; h < p; h++)
            1 == (s = o.portals[h]).status && (i = o.portalLocations[s.locationID]) && (r.push(i.title),
            c.push("prt" + s.level));
    this.menu.update(r, c),
    this.resizeMenu()
}
,
canvas.app.manor.View.prototype.openConfirm = function(t, e) {
    this.confirmWin.init(t, e),
    this.confirmWin.open(!1, !1, !0)
}
,
canvas.app.manor.View.prototype.showError = function(t) {
    this.messageWin.init(t),
    this.messageWin.open(!1, !1, !0)
}
,
canvas.app.manor.View.prototype.openGuestThroneRoom = function() {
    var t = canvas.app.manor.model.user.buildings.main;
    t && 0 < t.level && this.throneRoom.open()
}
,
canvas.app.manor.view.Back = function() {
    for (var t in canvas.px.Container.call(this),
    this.mc = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + canvas.app.manor.model.backImage)),
    this.mc.frameEvent = canvas.app.manor.Event.ENTER_FRAME_ANIM,
    this.mc.mcChildsCache)
        this.mc.mcChildsCache[t].loop = !0,
        this.mc.mcChildsCache[t].frameEvent = canvas.app.manor.Event.ENTER_FRAME_ANIM,
        this.mc.mcChildsCache[t].play()
}
,
canvas.app.manor.view.Back.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.BuildingRenderer = function(t) {
    canvas.ui.ListRenderer.call(this),
    this.type = t,
    this.hint = new canvas.app.view.MappingHint,
    this.mouseover = this.overHandler.bind(this),
    this.mouseout = this.outHandler.bind(this)
}
,
canvas.app.manor.view.BuildingRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.BuildingRenderer.prototype.update = function() {
    var t;
    this.data != this.oldData && (this.clear(),
    this.data && (t = canvas.Functions.extractSwfName(this.data.image),
    canvas.ResourceLoader.get(canvas.Config.manorBuildingsPath + t + "/" + t + ".mci") ? this.readyHandler() : (canvas.ResourceLoader.add([canvas.Config.manorBuildingsPath + t + "/" + t + ".mci", canvas.Config.manorBuildingsPath + t + "/" + t + ".json", canvas.Config.manorBuildingsPath + t + "/" + t + ".png"]),
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.readyHandler, this))))
}
,
canvas.app.manor.view.BuildingRenderer.prototype.readyHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.readyHandler, this);
    var t = canvas.Functions.extractSwfName(this.data.image)
      , e = canvas.ResourceLoader.get(canvas.Config.manorBuildingsPath + t + "/" + t + ".mci");
    if (e) {
        for (var a, s, i = canvas.Config.manorBuildingsPath + t + "/" + t + ".json", t = e.data, n = t[canvas.px.MovieClipProps.children], o = n.length, r = -Math.round(.5 * parseInt(t.w)) + parseInt(this.data.dx), c = -Math.round(.5 * parseInt(t.h)) + parseInt(this.data.dy), p = 0; p < o; p++)
            if ((s = n[p]).polygon)
                a = this.polygon = this.addChild(new canvas.px.Polygon(s.polygon)),
                this.addPolygon(a),
                a.position.set(s.x + r, s.y + c);
            else if (s.isImage)
                (a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage(i, s.name)))).position.set(s.x + r, s.y + c);
            else {
                if (a = this.addChild(new canvas.px.MovieClipChild(s.mc,canvas.ResourceLoader.get(i).textures,null,null,!1)),
                s.x2 && a.scale.set(2, 2),
                a.frameEvent = canvas.app.manor.Event.ENTER_FRAME_ANIM,
                a.loop = !0,
                a.play(),
                a.mcChildsCache)
                    for (e in a.mcChildsCache)
                        a.mcChildsCache[e].frameEvent = a.frameEvent,
                        a.mcChildsCache[e].play();
                a.position.set(r, c)
            }
        this.polygon || this.addPolygon(this)
    }
}
,
canvas.app.manor.view.BuildingRenderer.prototype.addPolygon = function(t) {
    t.interactive = !0,
    t.buttonMode = !0,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: t,
        params: new canvas.utils.HintParams(this.hint)
    }),
    this.hint.update(this.data.title + (0 < this.data.level ? " [" + this.data.level + "]" : ""))
}
,
canvas.app.manor.view.BuildingRenderer.prototype.removePolygon = function(t) {
    t.interactive = !1,
    t.buttonMode = !1,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
        target: t
    })
}
,
canvas.app.manor.view.BuildingRenderer.prototype.clear = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.readyHandler, this),
    this.polygon ? (this.removePolygon(this.polygon),
    this.removeIfExist(this.polygon),
    this.polygon.destroy(),
    this.polygon = null) : this.removePolygon(this),
    canvas.Functions.destroyChildren(this)
}
,
canvas.app.manor.view.BuildingRenderer.prototype.overHandler = function() {
    this.filters = [canvas.Functions.getBrightness()]
}
,
canvas.app.manor.view.BuildingRenderer.prototype.outHandler = function() {
    this.filters = null
}
,
canvas.app.manor.view.Map = function() {
    canvas.px.Container.call(this),
    this._width = 0,
    this._height = 0,
    this.container = this.addChild(new canvas.px.Container),
    this.msk = this.addChild(new canvas.px.Mask(100,100)),
    this.container.mask = this.msk,
    this.back = this.container.addChild(new canvas.app.manor.view.Back),
    this.buildingsContainer = this.container.addChild(new canvas.px.Container);
    for (var t = canvas.app.manor.Const.MAP_POINTS[canvas.app.manor.model.user.race], e = t.length, a = 0; a < e; a++)
        this.buildingsContainer.addChild(new canvas.app.manor.view.BuildingRenderer(t[a][0])).position.set(t[a][1], t[a][2]);
    this.scrollV = this.addChild(new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,null,null,new canvas.px.Sprite(canvas.px.TextureEmpty),new canvas.px.Sprite(canvas.px.TextureEmpty),this.container,!0)),
    this.scrollV.step = 40,
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollV, this.scrollHandler, this),
    this.scrollH = this.addChild(new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL,null,null,new canvas.px.Sprite(canvas.px.TextureEmpty),new canvas.px.Sprite(canvas.px.TextureEmpty),this,!0,!1)),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollH, this.scrollHandler, this),
    this.firstResize = !0,
    this.interactive = !0,
    this.dragIndex = 0,
    this.click = this.clickHandler.bind(this),
    canvas.app.manor.model.winterMode && (this.snow = this.container.addChild(new canvas.app.location.view.elements.Snow(null,canvas.app.manor.Event.ENTER_FRAME_ANIM)),
    this.snow.init(canvas.app.manor.Const.MAP_ORIGINAL_WIDTH, canvas.app.manor.Const.MAP_ORIGINAL_HEIGHT))
}
,
canvas.app.manor.view.Map.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.Map.prototype.setSize = function(t, e) {
    this._width = t,
    this._height = e,
    this.msk.setSize(this._width, this._height),
    this.scrollV.max = canvas.app.manor.Const.MAP_ORIGINAL_HEIGHT - this._height,
    this.scrollH.max = canvas.app.manor.Const.MAP_ORIGINAL_WIDTH - this._width,
    this.firstResize && 0 < this.scrollH.max && (this.firstResize = !1,
    this.scrollH.current = Math.round(this.scrollH.max * (1 == parseInt(canvas.app.manor.model.user.race) ? .9 : .2)),
    this.scrollV.current = Math.round(.5 * this.scrollV.max)),
    this.updateScrollPos(),
    this.scrollHandler()
}
,
canvas.app.manor.view.Map.prototype.updateMap = function() {
    for (var t, e, a, s, i = canvas.app.manor.model, n = canvas.app.manor.Const.MAP_POINTS[i.user.race], o = n.length, r = 0; r < o; r++) {
        if (e = n[r][0],
        s = this.buildingsContainer.getChildAt(r),
        t = i.user.buildingsByIndex[e]) {
            if (!(a = i.buildings[t.name]))
                continue;
            a = a[t.level]
        } else
            a = i.diches[e];
        a && a.enabled ? s.data = a : s.data = null
    }
}
,
canvas.app.manor.view.Map.prototype.scrollHandler = function() {
    2 < this.dragIndex++ && (this.wasDragged = !0),
    this.updateScrollPos(),
    canvas.app.manor.model.guestMode && (this.scrollH.isDisabled() ? (hideArrow("left"),
    hideArrow("right"),
    this.scrollStop()) : 0 == this.scrollH.current ? (hideArrow("left"),
    showArrow("right"),
    this.direction || this.scrollStop()) : this.scrollH.current == this.scrollH.max ? (showArrow("left"),
    hideArrow("right"),
    this.direction && this.scrollStop()) : (showArrow("right"),
    showArrow("left")))
}
,
canvas.app.manor.view.Map.prototype.activate = function() {
    this.scrollV.handlerWheelTargetOver()
}
,
canvas.app.manor.view.Map.prototype.deactivate = function() {
    this.scrollV.handlerWheelTargetOut()
}
,
canvas.app.manor.view.Map.prototype.updateScrollPos = function() {
    this.container.position.set(-this.scrollH.current, -this.scrollV.current)
}
,
canvas.app.manor.view.Map.prototype.clickHandler = function(t) {
    if (this.wasDragged)
        return this.wasDragged = !1,
        void (this.dragIndex = 0);
    t.target.parent && t.target.parent.hasOwnProperty("type") && canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_BUILDING, null, {
        params: t.target.parent.type
    })
}
,
canvas.app.manor.view.Map.prototype.scrollMove = function(t, e) {
    this.direction = t,
    e ? this.scrollStart() : this.scrollStop()
}
,
canvas.app.manor.view.Map.prototype.scrollStart = function() {
    canvas.EventManager.addEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.manor.view.Map.prototype.scrollStop = function() {
    canvas.EventManager.removeEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.manor.view.Map.prototype.frameHandler = function() {
    this.direction ? this.scrollH.current += 10 : this.scrollH.current -= 10,
    this.scrollHandler()
}
,
canvas.app.manor.view.UseBuilding = function() {
    canvas.px.Container.call(this),
    this.alpha = 0
}
,
canvas.app.manor.view.UseBuilding.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.UseBuilding.prototype.update = function() {
    this.alpha || (this.alpha = 1,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HIDE_BUILDING_LOADER))
}
,
canvas.app.manor.view.WindowManorBase = function(t, e, a) {
    canvas.px.Window.call(this),
    this._baseHeight = 520,
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "main_window"),19,42,39,23)),
    this.header = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_S_15_BOLD,16118721,t - 40,20,"center","top",0),
    this.header.position.set(20, 4),
    this.header.text = null == a ? "" : a,
    this.header.interactive = !0,
    this.sliceLeft = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_left"),18,20),
    this.sliceRight = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_right"),39,20),
    this.sliceTop = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_top"),20,41),
    this.sliceBot = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "main_window_bot"),20,24),
    this.addChild(this.sliceLeft),
    this.addChild(this.sliceRight),
    this.addChild(this.sliceTop),
    this.addChild(this.sliceBot),
    this.addChild(this.header),
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "main_window_close_base"),canvas.ResourceLoader.getImage("ui", "main_window_close_over"),canvas.ResourceLoader.getImage("ui", "main_window_close_down"),null)),
    this.setSize(t, e),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this._show, this),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this._hide, this)
}
,
canvas.app.manor.view.WindowManorBase.prototype = Object.create(canvas.px.Window.prototype),
canvas.app.manor.view.WindowManorBase.prototype.setSize = function(t, e) {
    this.header.setSize(t - 40),
    this.closeButton.position.set(t - 32, 0),
    this.back.width = t,
    this.back.height = e,
    this.sliceLeft.position.set(0, 41),
    this.sliceLeft.height = e - 63,
    this.sliceRight.position.set(t - 38, 41),
    this.sliceRight.height = e - 63,
    this.sliceTop.position.set(18, 0),
    this.sliceTop.width = t - 56,
    this.sliceBot.position.set(18, e - 22),
    this.sliceBot.width = t - 56
}
,
canvas.app.manor.view.WindowManorBase.prototype._show = function(t) {
    null != t && t.params == this && this.show()
}
,
canvas.app.manor.view.WindowManorBase.prototype._hide = function(t) {
    null != t && t.params == this && this.hide()
}
,
canvas.app.manor.view.WindowManorBase.prototype.show = function(t) {
    this._onTop(),
    this.update(),
    canvas.utils.HintManager.instance && canvas.utils.HintManager.instance.hide()
}
,
canvas.app.manor.view.WindowManorBase.prototype.open = function(t, e, a, s) {
    null == t && (t = !1),
    null == e && (e = !1),
    null == a && (a = !1),
    null == s && (s = !1),
    canvas.utils.WindowsManager.instance.openWindow(this, t, e, a, s)
}
,
canvas.app.manor.view.WindowManorBase.prototype.close = function() {
    canvas.utils.WindowsManager.instance.closeWindow(this),
    this.hide()
}
,
canvas.app.manor.view.WindowManorBase.prototype.hide = function(t) {
    this.deactivate()
}
,
canvas.app.manor.view.WindowManorBase.prototype._onTop = function() {
    this.parent && this.parent.setChildIndex(this, this.parent.numChildren - 1);
    for (var t, e = canvas.utils.WindowsManager.instance.activeWindows.length, a = 0; a < e; a++)
        (t = canvas.utils.WindowsManager.instance.activeWindows[a]) != this && t.deactivate();
    this.activate()
}
,
canvas.app.manor.view.WindowManorBase.prototype.update = function() {}
,
canvas.app.manor.view.WindowManorBase.prototype.downHandler = function(t) {
    this._onTop(),
    canvas.px.Window.prototype.downHandler.call(this, t)
}
,
canvas.app.manor.view.WindowManorBase.prototype.activate = function() {}
,
canvas.app.manor.view.WindowManorBase.prototype.deactivate = function() {}
,
canvas.app.manor.view.WindowManorBase.prototype.destroy = function() {
    canvas.px.Window.prototype.destroy.call(this)
}
,
canvas.app.manor.view.controls.AllRequests = function() {
    canvas.px.Container.call(this),
    this.container = new canvas.px.Container,
    this.listContainer = new canvas.px.Container,
    this.addChild(this.container),
    this.container.addChild(this.listContainer),
    this.listContainer.position.set(20, 64),
    this.fieldTitle = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7092753,400,18,"center"),
    this.fieldTitle.position.set(6, 17),
    this.container.addChild(this.fieldTitle);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,73,18,"center");
    t.position.set(2, 39),
    t.text = canvas.Translator.getText(153),
    this.container.addChild(t),
    (t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"left")).position.set(80, 39),
    t.text = canvas.Translator.getText(154),
    this.container.addChild(t),
    (t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,94,18,"center")).position.set(243, 39),
    t.text = canvas.Translator.getText(107),
    this.container.addChild(t),
    (t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"center")).position.set(330, 39),
    t.text = canvas.Translator.getText(155),
    this.container.addChild(t),
    this.pager = new canvas.app.manor.view.controls.elements.Pager,
    this.container.addChild(this.pager),
    this.pager.position.set(207, 360),
    canvas.EventManager.addEventListener(canvas.ui.PagerEvent.EVENT_CHANGE, this.pager, this._pagerHandler, this);
    for (var e, a = 0, s = [], i = 0; i < canvas.app.manor.Const.REQUESTS_ON_PAGE; i++)
        e = new canvas.app.manor.view.controls.elements.WorkRequestLine(i,s),
        s.push(e.check),
        this.listContainer.addChild(e),
        e.y = a,
        a += 29,
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_SELECT, e.check, this._itemClickHandler, this);
    this.workButton = new canvas.app.view.MainButton,
    this.workButton.setTitle(canvas.Translator.getText(151)),
    this.workButton.setSize(180),
    this.container.addChild(this.workButton),
    this.workButton.position.set(18, 390),
    this.cancelButton = new canvas.app.view.MainButton,
    this.cancelButton.setTitle(canvas.Translator.getText(156)),
    this.cancelButton.setSize(180),
    this.container.addChild(this.cancelButton),
    this.cancelButton.position.set(218, 390),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this._cancelClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.workButton, this._workClickHandler, this)
}
,
canvas.app.manor.view.controls.AllRequests.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.AllRequests.prototype._pagerHandler = function(t) {
    canvas.app.manor.model.requestCurPage = this.pager.currentPage,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_WORK_REQUESTS)
}
,
canvas.app.manor.view.controls.AllRequests.prototype._itemClickHandler = function(t) {
    canvas.app.manor.model.selectedRequest = this.pager.currentPage * canvas.app.manor.Const.REQUESTS_ON_PAGE + t.target.parent.index
}
,
canvas.app.manor.view.controls.AllRequests.prototype._cancelClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_WORK_REQUESTS)
}
,
canvas.app.manor.view.controls.AllRequests.prototype._workClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_WORK)
}
,
canvas.app.manor.view.controls.AllRequests.prototype._updateList = function() {
    for (var t, e, a = canvas.app.manor.model, s = 0, i = !1, n = this.pager.startIndex; n < this.pager.endIndex; n++)
        t = a.labourRequests[n],
        (e = this.listContainer.getChildAt(s)).check.checked = 0 == s,
        null != (e.data = t) ? (i = !0,
        e.visible = !0) : e.visible = !1,
        s++;
    0 == a.user.labour && (i = !1),
    this.workButton.enabled = i
}
,
canvas.app.manor.view.controls.AllRequests.prototype.update = function() {
    var t = canvas.app.manor.model;
    1 < t.requestNumPages ? (this.pager.init(t.requestNumPages * canvas.app.manor.Const.REQUESTS_ON_PAGE, canvas.app.manor.Const.REQUESTS_ON_PAGE),
    this.pager.currentPage = t.requestCurPage,
    this.pager.visible = !0) : (this.pager.init(t.labourRequests.length, canvas.app.manor.Const.REQUESTS_ON_PAGE),
    this.pager.visible = !1),
    this._updateList(),
    t.selectedRequest = this.pager.currentPage * canvas.app.manor.Const.REQUESTS_ON_PAGE,
    0 < canvas.app.manor.Const.REQUESTS_ON_PAGE && (this.listContainer.getChildAt(0).check.checked = !0)
}
,
canvas.app.manor.view.controls.BankWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 900, 496, ""),
    this.leftPagerMemory = {},
    this.container = this.addChild(new canvas.px.Container);
    var t, e, a = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_back"),20,20,20,20));
    for (a.width = 415,
    a.height = 400,
    a.position.set(30, 65),
    (a = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tab_white"),37,0,37,0))).width = 180,
    a.position.set(140, 39),
    this.bagTitle = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,7092753,150,20,"center")),
    this.bagTitle.position.set(155, 46),
    this.leftTitle = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD,7092753,300,20,"left")),
    this.leftTitle.position.set(46, 75),
    this.bankItems = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,5)),
    this.bankItems.setSize(400, 360),
    this.bankItems.position.set(45, 100),
    t = this.bankItems._paddingH = this.bankItems._paddingV = 0; t < 25; t++)
        e = new canvas.app.manor.view.controls.elements.Item(!0,!0,canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT),
        this.bankItems.add(e, !1),
        e.name = "bank";
    for (this.bankItems.update(),
    this.leftScroll = this.container.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL,!0,!0,this.bankItems.container,2)),
    this.leftScroll.position.set(407, 100),
    this.leftScroll.setSize(20, 350),
    this.storageContent = new canvas.px.Container,
    this.storageContent.position.set(0, 14),
    this.storageItems = this.storageContent.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,5)),
    this.storageItems.setSize(400, 360),
    t = this.storageItems._paddingH = this.storageItems._paddingV = 0; t < canvas.app.manor.Const.STORAGE_MAX_CELLS; t++)
        e = new canvas.app.manor.view.controls.elements.Item(!0,!0,canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_GET,canvas.Translator.getText(248) + " " + (t + 1).toString() + " " + canvas.Translator.getText(249)),
        this.storageItems.add(e, !1),
        e.name = "storage";
    this.storageItems.update(),
    this.cellsContent = new canvas.px.Container,
    this.tree = this.cellsContent.addChild(new canvas.app.manor.view.controls.elements.Tree),
    this.tree.setSize(330, 365),
    this.tree._scrollPadding = 40,
    this.panels = this.container.addChild(new canvas.app.manor.view.controls.elements.Panels([this.cellsContent, this.storageContent],["cells", "storage"],["", ""],1)),
    this.panels.position.set(455, 39),
    this.panels.setSize(420, 400),
    this.panels.contentContainer.x += 20,
    this.panels.contentContainer.y += 20,
    this.rightScroll = this.cellsContent.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL,!0,!0,this.cellsContent,2)),
    this.rightScroll.position.set(362, 20),
    this.rightScroll.setSize(20, 365),
    this.rightScroll.dragView.setSize = function() {}
    ,
    this.rightScroll._step = 50,
    this.tree.scroll = this.rightScroll,
    this.filterSortControl = new canvas.app.manor.view.controls.elements.FilterSortControl([new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_DEFAULT,canvas.Translator.getText(280)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_TITLE,canvas.Translator.getText(272)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_COLOR,canvas.Translator.getText(273)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_TYPE,canvas.Translator.getText(274)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_TIME,canvas.Translator.getText(275))],"",canvas.app.manor.model.localStorage.get("sortType"),"1" == canvas.app.manor.model.localStorage.get("sortDirection"),canvas.Translator.getText(276)),
    this.filterSortControl.name = "filter",
    this.addChild(this.filterSortControl),
    this.filterSortControl.position.set(430, 70),
    this.updateFilterAndSort(),
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.filterSortControl, this.filterChangeHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.leftScroll, this.leftScrollHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.panels, this.panelsHandler, this),
    this.panelsHandler()
}
,
canvas.app.manor.view.controls.BankWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.BankWin.CONTENT_HEIGHT = 342,
canvas.app.manor.view.controls.BankWin.prototype.update = function() {
    var t, e, a, s, i, n, o = canvas.app.manor.model, r = new Array, c = new Array, p = o.bankCells.length;
    for (n in this.lists)
        this.lists[n].destroy();
    for (this.lists = new Object,
    this.updateLeft(),
    l = 0; l < p; l++) {
        for (t = o.bankCells[l],
        r.push(t.title),
        (i = new canvas.ui.List(canvas.ui.ListType.VERTICAL,4))._paddingH = i._paddingV = 0,
        i.setSize(300, 70 * Math.ceil(t.size / 4)),
        this.lists[t.area] = i,
        e = 0; e < t.size; e++)
            a = new canvas.app.manor.view.controls.elements.Item(!0,!0,canvas.app.manor.view.controls.elements.Item.MODE_BANK_GET),
            i.add(a, !1),
            a.name = "cell" + t.area,
            a.data = t.items[e];
        c.push(i),
        i.update()
    }
    this.tree.init(r, c),
    !this.inited && 0 < r.length && (this.inited = !0,
    this.tree.openAll()),
    this.tree.update();
    for (var h = o.user.buildings.storage, l = 0; l < canvas.app.manor.Const.STORAGE_MAX_CELLS; l++)
        a = this.storageItems.items[l],
        null == (s = null == o.storageItems ? null : o.storageItems[l]) && l < h.level && ((s = new canvas.data.manor.DItem).title = "",
        s.id = "empty"),
        a.data = s;
    r = [this.cellsContent, this.storageContent],
    c = ["<b>" + canvas.Translator.getText(101) + " (" + o.bankCells.length + ")</b>", "<b>" + canvas.Translator.getText(103) + "</b>"],
    this.panels.init(r, ["cells", "storage"], c),
    this.panelsHandler()
}
,
canvas.app.manor.view.controls.BankWin.prototype.updateLeft = function() {
    var t, e, a, s = canvas.app.manor.model, i = "storage" === this.panels.path ? s.getFilteredItems(s.bankItems, "storage") : s.getFilteredItems(s.bankItems, "cell");
    if (2 < this.filterSortControl.filterText.length)
        for (this.leftItems = new Array,
        a = i.length,
        e = 0; e < a; e++)
            0 <= (t = i[e]).title.toLowerCase().search(this.filterSortControl.filterText.toLowerCase()) && this.leftItems.push(t);
    else
        this.leftItems = i;
    switch (this.filterSortControl.sortType) {
    case canvas.data.manor.DSortData.TYPE_TITLE:
        this.leftItems.sort(this.sortOnTitle.bind(this));
        break;
    case canvas.data.manor.DSortData.TYPE_TIME:
        this.leftItems.sort(this.sortOnTime.bind(this));
        break;
    case canvas.data.manor.DSortData.TYPE_TYPE:
        this.leftItems.sort(this.sortOnType.bind(this));
        break;
    case canvas.data.manor.DSortData.TYPE_COLOR:
        this.leftItems.sort(this.sortOnColor.bind(this));
        break;
    default:
        this.filterSortControl.sortDirection && this.leftItems.reverse()
    }
    this.leftScroll.max = Math.ceil(this.leftItems.length / 5) - 5,
    this.leftScroll.current = this.leftPagerMemory[this.panels.path] || this.leftScroll.current,
    this.leftScrollHandler(),
    this.bagTitle.text = "<b>" + canvas.Translator.getText(102) + " (" + this.leftItems.length + ")</b>"
}
,
canvas.app.manor.view.controls.BankWin.prototype.sortOnType = function(t, e) {
    return t.type > e.type ? this.filterSortControl.sortDirection ? -1 : 1 : t.type < e.type ? this.filterSortControl.sortDirection ? 1 : -1 : 0
}
,
canvas.app.manor.view.controls.BankWin.prototype.sortOnTime = function(t, e) {
    return t.time > e.time ? this.filterSortControl.sortDirection ? -1 : 1 : t.time < e.time ? this.filterSortControl.sortDirection ? 1 : -1 : 0
}
,
canvas.app.manor.view.controls.BankWin.prototype.sortOnTitle = function(t, e) {
    return t.title.toLowerCase() > e.title.toLowerCase() ? this.filterSortControl.sortDirection ? -1 : 1 : t.title.toLowerCase() < e.title.toLowerCase() ? this.filterSortControl.sortDirection ? 1 : -1 : 0
}
,
canvas.app.manor.view.controls.BankWin.prototype.sortOnColor = function(t, e) {
    return t.color > e.color ? this.filterSortControl.sortDirection ? -1 : 1 : t.color < e.color ? this.filterSortControl.sortDirection ? 1 : -1 : 0
}
,
canvas.app.manor.view.controls.BankWin.prototype.updateFilterAndSort = function() {
    this.updateLeft()
}
,
canvas.app.manor.view.controls.BankWin.prototype.filterChangeHandler = function() {
    canvas.app.manor.model.localStorage.set("sortType", this.filterSortControl.sortType),
    canvas.app.manor.model.localStorage.set("sortDirection", this.filterSortControl.sortDirection ? "1" : "0"),
    this.updateFilterAndSort()
}
,
canvas.app.manor.view.controls.BankWin.prototype.leftScrollHandler = function() {
    var t = 5 * this.leftScroll.current;
    this.leftPagerMemory[this.panels.path] = this.leftScroll.current;
    for (var e = this.bankItems.items.length, a = 0; a < e; a++)
        this.bankItems.items[a].data = this.leftItems[t++]
}
,
canvas.app.manor.view.controls.BankWin.prototype.downHandler = function(t) {
    canvas.app.manor.view.WindowManorBase.prototype.downHandler.call(this, t),
    canvas.Functions.findParentByName("filter", t.target) || (this.filterSortControl.mode = "");
    t = canvas.Functions.findParentByName("bank", t.target) || canvas.Functions.findParentByName("storage", t.target) || canvas.Functions.findParentByName("cell", t.target);
    null != t && null != t.data && "empty" != t.data.id && this.dragItem(t),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.mouseMoveHandler, this)
}
,
canvas.app.manor.view.controls.BankWin.prototype.dragItem = function(t) {
    var e = canvas.app.manor.model
      , a = null;
    return this.currentDragItem && (this.currentDragItem.filters = [],
    this.currentDragItem.stopDrag(),
    this.removeChild(this.currentDragItem),
    this.currentDragItem = null,
    a = canvas.app.manor.view.controls.elements.Item.overedItem,
    e.globalDrag = !1),
    null != t && (this.currentDragItem = t.clone(),
    this.currentDragItem.interactive = this.currentDragItem.interactiveChildren = !1,
    this.currentDragItem.removeHints(),
    this.addChild(this.currentDragItem),
    this.currentDragItem.startDrag(new canvas.px.Point(35 * e.winScale,35 * e.winScale), new canvas.px.Rectangle(0,0,800,400), canvas.app.CanvasManor.App.renderer.plugins.interaction.mouse.global, e.getDragScale()),
    t = this.toLocal(new canvas.px.Point(0,0), t),
    this.currentDragItem.position.set(t.x, t.y),
    e.globalDrag = !0),
    a
}
,
canvas.app.manor.view.controls.BankWin.prototype.upHandler = function(t) {
    var e, a;
    this.currentDragItem && (e = this.currentDragItem,
    this.dragItem(),
    null == (a = canvas.app.manor.view.controls.elements.Item.overedItem) || a.lockedImage.visible || a.name == e.name || ("storage" === this.panels.path ? "bank" == a.name ? canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_STORAGE_ACTION, null, {
        object: {
            getItem: e.data
        }
    }) : canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_STORAGE_ACTION, null, {
        object: {
            putItem: e.data,
            getItem: null == a.data || "empty" == a.data.id || a.data.equals(e.data) && a.data.stackable ? null : a.data
        }
    }) : canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_BANK_ACTION, null, {
        object: {
            from: e.data,
            toArea: "bank" == a.name ? "0" : a.name.substr(4)
        }
    }))),
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler),
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.mouseMoveHandler)
}
,
canvas.app.manor.view.controls.BankWin.prototype.mouseMoveHandler = function(t) {
    var e;
    this.currentDragItem && (null == (e = canvas.app.manor.view.controls.elements.Item.overedItem) || e.name == this.currentDragItem.name || e.lockedImage.visible ? this.currentDragItem.filters = null : this.currentDragItem.filters = [canvas.Functions.getBrightness(1.5)])
}
,
canvas.app.manor.view.controls.BankWin.prototype.panelsHandler = function(t) {
    var e, a = this.bankItems.items.length;
    if ("storage" === this.panels.path)
        for (this.leftTitle.text = canvas.Translator.getText(247) + ":",
        e = 0; e < a; e++)
            this.bankItems.items[e].mode = canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_PUT;
    else
        for (this.leftTitle.text = canvas.Translator.getText(246) + ":",
        e = 0; e < a; e++)
            this.bankItems.items[e].mode = canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT;
    null != t && this.updateLeft()
}
,
canvas.app.manor.view.controls.BankWin.prototype.activate = function() {
    this.filterSortControl.input.input = canvas.app.manor.view.input8
}
,
canvas.app.manor.view.controls.BankWin.prototype.deactivate = function() {
    this.filterSortControl.input.input = null
}
,
canvas.app.manor.view.controls.BankWin.prototype.hide = function() {
    this.filterSortControl.filterText = ""
}
,
canvas.app.manor.view.controls.BuildingWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 600, 500, ""),
    this.container = this.addChild(new canvas.px.Container),
    this.useContainer = new canvas.px.Container,
    this.useContainer2 = new canvas.px.Container,
    this.useModules = {},
    this.fieldDesc = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7026733,350,164,"left")),
    this.fieldDesc.position.set(218, 35),
    this.image = this.container.addChild(new canvas.ui.Image),
    this.image.position.set(20, 27),
    this.level = this.container.addChild(new canvas.app.manor.view.controls.elements.Level),
    this.level.position.set(45, 140),
    this.upgrade = new canvas.app.manor.view.controls.Upgrade,
    this.panel = this.container.addChild(new canvas.app.manor.view.controls.elements.Panels([this.upgrade, this.useContainer],["upgrade", "use"],[canvas.Translator.getText(114), canvas.Translator.getText(115)],1)),
    this.panel.position.set(22, 185),
    this.panel.setSize(555),
    this.useKennel = new canvas.app.manor.view.controls.UseKennel,
    this.useObelisk = new canvas.app.manor.view.controls.UseObelisk,
    this.useExp = new canvas.app.manor.view.controls.UseExp,
    this.useExp2 = new canvas.app.manor.view.controls.UseExp2,
    this.usePets = new canvas.app.manor.view.controls.UsePets,
    this.useHospital = new canvas.app.manor.view.controls.UseHospital,
    this.useWorkshop = new canvas.app.manor.view.controls.UseWorkshop,
    this.useWorkshop2 = new canvas.app.manor.view.controls.UseWorkshop2,
    this.useMine = new canvas.app.manor.view.controls.UseMine,
    this.useMine2 = new canvas.app.manor.view.controls.UseMine2,
    this.useMake = new canvas.app.manor.view.controls.UseMake,
    this.usePortal = new canvas.app.manor.view.controls.UsePortal,
    this.useModules.kennel = this.useKennel,
    this.useModules.obelisk = this.useObelisk,
    this.useModules.exp = this.useExp,
    this.useModules.exp2 = this.useExp2,
    this.useModules.pets = this.usePets,
    this.useModules.hospital = this.useHospital,
    this.useModules.workshop = this.useWorkshop,
    this.useModules.workshop2 = this.useWorkshop2,
    this.useModules.mine = this.useMine,
    this.useModules.mine2 = this.useMine2,
    this.useModules.make = this.useMake,
    this.useModules.portal = this.usePortal,
    this.enterButton = this.container.addChild(new canvas.app.view.MainButton),
    this.enterButton.setTitle(canvas.Translator.getText(104)),
    this.enterButton.y = 145,
    this.enterButton.visible = !1,
    this.enterButton.setSize(120),
    this.enterButton2 = this.container.addChild(new canvas.app.view.MainButton),
    this.enterButton2.y = 145,
    this.enterButton2.visible = !1,
    this.loader = new canvas.px.MovieClip(canvas.Config.effectsPath + "hourglass"),
    this.loader.frameEvent = canvas.app.manor.Event.ENTER_FRAME,
    this.loader.loop = !0,
    this.loader.position.set(208, 300),
    this.updateButtonsPositions(),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.enterButton, this.enterClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.enterButton2, this.enter2ClickHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.panel, this.pathHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_CLICK, this.panel, this.panelsClickHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.HIDE_BUILDING_LOADER, null, this.hideLoaderHandler, this)
}
,
canvas.app.manor.view.controls.BuildingWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.BuildingWin.prototype.update = function(t) {
    null == t && (t = 0);
    var e, a = canvas.app.manor.model, s = a.buildings[a.selectedBuilding], i = a.user.buildings[a.selectedBuilding], n = s[i.level], s = s[i.level + 1];
    if (null != n) {
        if (this.level.level = i.level.toString(),
        "" == n.picture ? this.image.clear() : this.image.setImage(n.picture + ".png"),
        this.header.text = n.title,
        this.fieldDesc.text = n.desc.replace("\r", ""),
        null != s && s.enabled)
            this.upgrade.labour.setLabour(i.labour, s.cost, canvas.Functions.testFlag(t, canvas.app.manor.Const.FLAG_AFTER_BUILD)),
            this.upgrade.labourInput.maxValue = Math.min(a.user.labour, a.user.cement, s.cost - i.labour),
            this.upgrade.setTitlePercent(Math.round(i.labour / s.cost * 100)),
            this.upgrade.labourInput.update(),
            this.upgrade.cementInput.update(null, a.user.cement.toString()),
            this.upgrade.clear(),
            this.upgrade.testRequires(),
            this.upgrade.labour.visible = !0,
            this.upgrade.labourInput.interactiveChildren = !0;
        else {
            switch (i.name) {
            case "storage":
            case "mail":
            case "market":
            case "camp":
                return void canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_CLICK, this.enterButton)
            }
            this.upgrade.labour.setLabour(i.labour, 0),
            this.upgrade.setTitlePercent(0),
            this.upgrade.labourInput.update(),
            this.upgrade.cementInput.update(null, a.user.cement),
            this.upgrade.clear(),
            this.upgrade.buildButton.enabled = !1,
            this.upgrade.labour.visible = !1,
            this.upgrade.labourInput.interactiveChildren = !1,
            this.upgrade.fieldTopTitle.text = canvas.Translator.getText(113) + "."
        }
        this.upgrade.destroyButton.visible = 0 < i.level || 0 < i.labour,
        this.upgrade.backButton.visible = this.upgrade.fieldBack.visible = !this.upgrade.destroyButton.visible && null != a.availableBuildings && 1 < a.availableBuildings.length,
        n.destroyEnabled || (this.upgrade.destroyButton.visible = !1)
    }
    switch (a.getSelectedBuildingBase()) {
    case "tree":
    case "halloween":
        this.panel.visible = !1;
        break;
    case "workshop":
    case "mine":
    case "make":
        switch (a.getSelectedBuildingBase()) {
        case "workshop":
            e = 115;
            break;
        case "mine":
            e = 234;
            break;
        case "make":
            e = 237
        }
        if (0 < i.level) {
            this.panel.init([this.upgrade, this.useContainer, this.useContainer2], ["upgrade", "use", "use2"], [canvas.Translator.getText(114), canvas.Translator.getText(e), canvas.Translator.getText(116)]),
            this.panel.visible = !0;
            break
        }
    default:
        this.panel.init([this.upgrade, this.useContainer], ["upgrade", "use"], [canvas.Translator.getText(114), canvas.Translator.getText(115)]),
        this.panel.visible = !0
    }
    if (null != i && 0 != i.level && -1 == ["main", "storage", "mail", "market", "wall", "tree", "halloween", "camp"].indexOf(i.name) || this.panel.init([this.upgrade], ["upgrade"], [canvas.Translator.getText(114)]),
    this.enterButton.visible = this.enterButton2.visible = !1,
    null != i)
        switch (i.name) {
        case "main":
            0 < i.level && (this.enterButton2.visible = !0);
        case "camp":
        case "storage":
        case "mail":
        case "market":
            0 < i.level && (this.enterButton.visible = !0);
            break;
        case "tree":
        case "halloween":
            this.enterButton.visible = !0
        }
    this.upgrade.hireButton.enabled = !i.isUnknownDich()
}
,
canvas.app.manor.view.controls.BuildingWin.prototype.show = function() {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this);
    var t = canvas.app.manor.model
      , e = this.panel.visible ? this.panel : null;
    null != e && null != t.buildingPanelsStatus["bs_" + t.selectedBuilding] && "" != t.buildingPanelsStatus["bs_" + t.selectedBuilding] && this.panel.getEnabled(t.buildingPanelsStatus["bs_" + t.selectedBuilding]) ? e.path = t.buildingPanelsStatus["bs_" + t.selectedBuilding] : null != e && e.setDefaultPath(),
    this.pathHandler(),
    this.activate()
}
,
canvas.app.manor.view.controls.BuildingWin.prototype.hide = function() {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this),
    this.deactivate(),
    this.usePets.petView.pet && this.usePets.petView.pet.stop()
}
,
canvas.app.manor.view.controls.BuildingWin.prototype.enterClickHandler = function() {
    var t = canvas.app.manor.model
      , e = t.user.buildings[t.selectedBuilding];
    switch (t.selectedBuilding) {
    case "main":
    case "storage":
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_BANK, null, {
            flag: "storage" == t.selectedBuilding
        });
        break;
    case "mail":
        canvas.Functions.navigateToURL("area_post.php", "_self");
        break;
    case "tree":
    case "halloween":
        null != e && "" != e.params && canvas.Functions.navigateToURL(e.params, "_self");
        break;
    case "market":
        canvas.Functions.navigateToURL("area_store.php", "_self");
        break;
    case "camp":
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_HUNT_CAMP)
    }
    this.close()
}
,
canvas.app.manor.view.controls.BuildingWin.prototype.enter2ClickHandler = function() {
    "main" === canvas.app.manor.model.selectedBuilding && canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_THRONE_ROOM),
    this.close()
}
,
canvas.app.manor.view.controls.BuildingWin.prototype.panelsClickHandler = function() {
    var t = canvas.app.manor.model;
    t.localStorage.set("bs_" + t.selectedBuilding, this.panel.path),
    t.buildingPanelsStatus["bs_" + t.selectedBuilding] = this.panel.path
}
,
canvas.app.manor.view.controls.BuildingWin.prototype.pathHandler = function() {
    var t, e = canvas.app.manor.model, a = this.panel.visible ? this.panel : null;
    canvas.Functions.clearChildren(this.useContainer),
    canvas.Functions.clearChildren(this.useContainer2);
    switch (null != a && "upgrade" == a.path && (this.upgrade.destroyButton.visible || this.upgrade.backButton.visible) ? (this.setSize(600, 500),
    this.fieldDesc.setSize(350),
    a.setSize(556)) : (this.setSize(460, 500),
    this.fieldDesc.setSize(210),
    null != a && a.setSize(416)),
    this.enterButton.setTitle(canvas.Translator.getText(104)),
    this.enterButton2.setTitle(""),
    null != a && a.setSize(0, 265),
    e.selectedBuilding) {
    case "main":
        this.enterButton.setTitle(canvas.Translator.getText(253)),
        this.enterButton2.setTitle(canvas.Translator.getText(252));
        break;
    case "tree":
    case "halloween":
        this.setSize(this.back.width, 215),
        this.enterButton.setTitle(canvas.Translator.getText(226)),
        this.enterButton.x = this.back.width - this.enterButton._width - 10,
        this.baseHeight = 300;
        break;
    default:
        this.baseHeight = 520
    }
    if (this.updateButtonsPositions(),
    null != this.useModules[e.getSelectedBuildingBase()] && null != a)
        switch (a.path) {
        case "use":
            if (null != (t = e.user.buildings[e.selectedBuilding]) && 0 < t.level) {
                switch (e.getSelectedBuildingBase()) {
                case "pets":
                    this.setSize(this.back.width, 526),
                    a.setSize(0, 295),
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PETS_DATA);
                    break;
                case "exp":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_EXP_DATA);
                    break;
                case "exp2":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_EXP2_DATA);
                    break;
                case "obelisk":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_VALOUR_DATA);
                    break;
                case "hospital":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HOSPITAL_DATA);
                    break;
                case "workshop":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_WORKSHOP_DATA);
                    break;
                case "mine":
                case "make":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_DATA);
                    break;
                case "portal":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_DATA);
                    break;
                case "kennel":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_KENNEL_DATA)
                }
                this.useContainer.addChild(this.useModules[e.getSelectedBuildingBase()])
            }
            break;
        case "use2":
            if (null != (t = e.user.buildings[e.selectedBuilding]) && 0 < t.level)
                switch (e.getSelectedBuildingBase()) {
                case "workshop":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_WORKSHOP_DATA),
                    this.useContainer2.addChild(this.useWorkshop2);
                    break;
                case "mine":
                case "make":
                    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_DATA),
                    this.useContainer2.addChild(this.useMine2)
                }
        }
    var s = null;
    0 < this.useContainer.numChildren && (s = this.useContainer.getChildAt(0)),
    0 < this.useContainer2.numChildren && (s = this.useContainer2.getChildAt(0)),
    s && 0 == s.alpha ? (this.addChild(this.loader),
    this.loader.play()) : this.hideLoaderHandler(),
    this.deactivate(),
    this.activate()
}
,
canvas.app.manor.view.controls.BuildingWin.prototype.updatePath = function() {
    this.pathHandler()
}
,
canvas.app.manor.view.controls.BuildingWin.prototype.updateButtonsPositions = function() {
    this.enterButton.x = this.back.width - this.enterButton._width - 10,
    this.enterButton2.x = this.enterButton.x - this.enterButton2._width + 20
}
,
canvas.app.manor.view.controls.BuildingWin.prototype.activate = function() {
    this.parent && (this.upgrade.parent && (this.upgrade.labourInput.input.input = canvas.app.manor.view.input4),
    this.usePets.parent && (this.usePets.filterSortControl.input.input = canvas.app.manor.view.input1),
    this.useWorkshop.parent && !this.useWorkshop.combo.isOpened() && (this.useWorkshop.input.input = canvas.app.manor.view.input5),
    this.useWorkshop.parent && (this.useWorkshop.search.input = canvas.app.manor.view.input7),
    this.usePortal.parent && this.usePortal.activate())
}
,
canvas.app.manor.view.controls.BuildingWin.prototype.deactivate = function() {
    this.upgrade.labourInput.input.input = null,
    this.usePets.filterSortControl.input.input = null,
    this.useWorkshop.input.input = null,
    this.useWorkshop.search.input = null,
    this.usePortal.deactivate()
}
,
canvas.app.manor.view.controls.BuildingWin.prototype.hideLoaderHandler = function() {
    this.loader.stop(),
    this.removeIfExist(this.loader)
}
,
canvas.app.manor.view.controls.BuyArea = function() {
    canvas.px.Container.call(this),
    this._selectedRequest = 0,
    Object.defineProperty(this, "selectedRequest", {
        get: function() {
            return this._requests[this._selectedRequest]
        }
    }),
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.listContainer = new canvas.px.Container,
    this.container.addChild(this.listContainer),
    this.listContainer.position.set(20, 64),
    this.fieldTitle = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7092753,400,18,"center"),
    this.container.addChild(this.fieldTitle),
    this.fieldTitle.position.set(6, 17);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,73,18,"center");
    this.container.addChild(t),
    t.position.set(-2, 39),
    t.text = canvas.Translator.getText(153),
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"left"),
    this.container.addChild(t),
    t.position.set(75, 39),
    t.text = canvas.Translator.getText(123),
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"center"),
    this.container.addChild(t),
    t.position.set(323, 39),
    t.text = canvas.Translator.getText(121),
    this.pager = new canvas.app.manor.view.controls.elements.Pager,
    this.container.addChild(this.pager),
    this.pager.position.set(207, 360),
    this.pager.visible = !1,
    canvas.EventManager.addEventListener(canvas.ui.PagerEvent.EVENT_CHANGE, this.pager, this._pagerHandler, this);
    for (var e, a = 0, s = [], i = 0; i < canvas.app.manor.Const.REQUESTS_ON_PAGE; i++)
        (e = new canvas.app.manor.view.controls.elements.WorkRequestLine(i,s,"money_gold")).visible = !1,
        s.push(e.check),
        this.listContainer.addChild(e),
        e.y = a,
        a += 29,
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_SELECT, e.check, this._itemClickHandler, this);
    this.buyButton = new canvas.app.view.MainButton,
    this.buyButton.setTitle(canvas.Translator.getText(167)),
    this.buyButton.setSize(180),
    this.container.addChild(this.buyButton),
    this.buyButton.position.set(18, 390),
    this.cancelButton = new canvas.app.view.MainButton,
    this.cancelButton.setTitle(canvas.Translator.getText(2019)),
    this.cancelButton.setSize(180),
    this.container.addChild(this.cancelButton),
    this.cancelButton.position.set(218, 390),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this._cancelClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this._buyClickHandler, this)
}
,
canvas.app.manor.view.controls.BuyArea.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.BuyArea.prototype._pagerHandler = function(t) {
    this.requestCurPage = this.pager.currentPage,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_SELL_REQUESTS)
}
,
canvas.app.manor.view.controls.BuyArea.prototype._itemClickHandler = function(t) {
    this._selectedRequest = t.target.parent.index
}
,
canvas.app.manor.view.controls.BuyArea.prototype._updateList = function() {
    for (var t, e, a = 0, s = 0; s < canvas.app.manor.Const.REQUESTS_ON_PAGE; s++)
        t = this._requests[s],
        (e = this.listContainer.getChildAt(a)).check.checked = 0 == a,
        e.data = t,
        e.visible = null != t,
        a++;
    this._selectedRequest = 0
}
,
canvas.app.manor.view.controls.BuyArea.prototype.update = function(t, e, a, s) {
    this._requests = t,
    this._requestNumPages = e,
    1 < this._requestNumPages ? (this.pager.init(this._requestNumPages * canvas.app.manor.Const.REQUESTS_ON_PAGE),
    this.pager.currentPage = this._requestCurPage,
    this.pager.visible = !0) : this.pager.visible = !1,
    this.fieldTitle.text = "<b>" + canvas.Translator.getText(127) + ":</b> " + a + "     <b>" + canvas.Translator.getText(128) + ":</b> " + s,
    this._updateList()
}
,
canvas.app.manor.view.controls.BuyArea.prototype._cancelClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CLOSE_MARKET)
}
,
canvas.app.manor.view.controls.BuyArea.prototype._buyClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        text: canvas.Translator.getText(168) + " <b>" + this.selectedRequest.price + "</b> <img src='money_gold' atlas='ui' yOffset='1'/> ?",
        event: {
            name: canvas.app.manor.Event.BUY_AREA,
            params: {
                areaId: "",
                requestId: this.selectedRequest.id,
                price: this.selectedRequest.price
            }
        }
    })
}
,
canvas.app.manor.view.controls.BuyCementWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 390, 194, ""),
    this.container = this.addChild(new canvas.px.Container);
    var t = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    t.width = 153,
    t.height = 104,
    t.position.set(31, 38);
    t = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,85,38,"left"));
    t.position.set(119, 51),
    t.text = canvas.Translator.getText(169),
    (t = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,95,18,"right"))).position.set(175, 57),
    t.text = canvas.Translator.getText(170) + ":",
    this.title1 = t,
    (t = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,95,18,"right"))).position.set(175, 81),
    t.text = canvas.Translator.getText(171) + ":",
    this.item = this.container.addChild(new canvas.app.manor.view.controls.elements.Item(!1,!0)),
    this.item.position.set(38, 44),
    this.item.data = new canvas.data.manor.DItem({
        id: canvas.app.manor.model.cementID,
        picture: canvas.app.manor.model.cementImage,
        title: canvas.Translator.getText(169)
    }),
    this.item.buttonMode = !1,
    this.input = this.container.addChild(new canvas.app.manor.view.controls.elements.Input("center",!0,41,null,null,null,null,!0)),
    this.input.leftArrow.x += 6,
    this.input.rightArrow.x -= 4,
    this.input.onlyNumbers = !0,
    this.input.maxChars = 10,
    this.input.position.set(53, 116),
    this.radioArray = [],
    this.checkMoney = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),this.radioArray)),
    this.radioArray.push(this.checkMoney),
    this.checkMoney.position.set(113, 68),
    this.coins1 = this.checkMoney.sprite.addChild(new canvas.app.view.Money(null,canvas.Const.FONT_TAHOMA_11_BOLD,null,40,null,null,null,!1,0,0)),
    this.coins1.position.set(32, 8),
    this.checkMoney.checked = !0,
    this.checkEnergy = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),this.radioArray)),
    this.radioArray.push(this.checkEnergy),
    this.checkEnergy.position.set(113, 95),
    this.energy1 = this.checkEnergy.sprite.addChild(new canvas.app.manor.view.controls.elements.Energy),
    this.energy1.position.set(32, 8),
    this.coins2 = this.addChild(new canvas.app.view.Money(null,canvas.Const.FONT_TAHOMA_11_BOLD,null,110,null,null,null,!1)),
    this.coins2.position.set(275, 56),
    this.coins2.interactive = !1,
    this.coins3 = this.addChild(new canvas.app.view.Money(null,canvas.Const.FONT_TAHOMA_11_BOLD,null,110,null,null,null,!1)),
    this.coins3.position.set(275, 80),
    this.coins3.interactive = !1,
    this.energy2 = this.addChild(new canvas.app.manor.view.controls.elements.Energy),
    this.energy2.position.set(275, 56),
    this.energy2.interactive = !1,
    this.energy3 = this.addChild(new canvas.app.manor.view.controls.elements.Energy),
    this.energy3.position.set(275, 80),
    this.energy3.interactive = !1,
    this.container.x = -10;
    for (var e = this.radioArray.length, a = 0; a < e; a++)
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_SELECT, this.radioArray[a], this.selectHandler, this);
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this),
    this.buyButton = this.addChild(new canvas.app.view.MainButton),
    this.buyButton.setTitle(canvas.Translator.getText(167)),
    this.buyButton.position.set(140, 142),
    this.buyButton.setSize(120),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this.buyClickHandler, this),
    this.selectHandler()
}
,
canvas.app.manor.view.controls.BuyCementWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.BuyCementWin.prototype.show = function(t) {
    this.activate(),
    this.input.text = "0",
    canvas.app.manor.view.WindowManorBase.prototype.show.apply(this)
}
,
canvas.app.manor.view.controls.BuyCementWin.prototype.hide = function(t) {
    this.deactivate(),
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, t)
}
,
canvas.app.manor.view.controls.BuyCementWin.prototype.activate = function() {
    this.input.input = canvas.app.manor.view.input3
}
,
canvas.app.manor.view.controls.BuyCementWin.prototype.deactivate = function() {
    this.input.input = null
}
,
canvas.app.manor.view.controls.BuyCementWin.prototype.update = function() {
    var t = canvas.app.manor.model;
    this.coins1.money = 100 * t.cementCost,
    this.coins2.money = 100 * t.user.money,
    this.coins3.money = this.input.text ? t.cementCost * parseInt(this.input.text) * 100 : 0,
    this.energy1.update(t.cementCost),
    this.energy2.update(t.user.labour),
    this.energy3.update(this.input.text ? t.cementCost * parseInt(this.input.text) : 0),
    this.buyButton.enabled = 0 < parseInt(this.input.text) && (this.checkEnergy.checked ? this.energy3.energy <= this.energy2.energy : this.coins3.money <= this.coins2.money)
}
,
canvas.app.manor.view.controls.BuyCementWin.prototype.selectHandler = function() {
    this.checkMoney.checked ? (this.removeIfExist(this.energy2),
    this.removeIfExist(this.energy3),
    this.addChild(this.coins2),
    this.addChild(this.coins3),
    this.title1.text = canvas.Translator.getText(170) + ":",
    this.item.data.count = 1,
    this.item.update(),
    this.item.interactive = !1,
    this.input.text = "0") : (this.removeIfExist(this.coins2),
    this.removeIfExist(this.coins3),
    this.addChild(this.energy2),
    this.addChild(this.energy3),
    this.item.data.count = canvas.app.manor.Const.ENERGY_COURSE,
    this.item.update(),
    this.item.interactive = !1,
    this.title1.text = canvas.Translator.getText(205) + ":",
    this.input.text = Math.floor(canvas.app.manor.model.user.labour / canvas.app.manor.model.cementCost)),
    this.update()
}
,
canvas.app.manor.view.controls.BuyCementWin.prototype.changeHandler = function() {
    this.update()
}
,
canvas.app.manor.view.controls.BuyCementWin.prototype.buyClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(109),
        object: {
            name: canvas.app.manor.Event.BUY_CEMENT,
            params: {
                params: this.input.text,
                flag: this.checkEnergy.checked
            }
        }
    })
}
,
canvas.app.manor.view.controls.ChooseBuildingWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 460, 510, canvas.Translator.getText(230)),
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1)),
    this.list.setSize(420, 446),
    this.list.scroll = new canvas.app.manor.view.controls.elements.Scroll(this.list.container),
    this.list.position.set(20, 40),
    this.list._scrollPadding = 3,
    this.list.scroll._step = 100
}
,
canvas.app.manor.view.controls.ChooseBuildingWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.ChooseBuildingWin.prototype.update = function() {
    var t = canvas.app.manor.model;
    this.list.clear(!1);
    for (var e = t.availableBuildings.length, a = 0; a < e; a++)
        this.list.add(new canvas.app.manor.view.controls.elements.ChoseBuildingItem(t.availableBuildings[a]), !1);
    this.list.update()
}
,
canvas.app.manor.view.controls.ChoosePetWin = function() {
    var t;
    for (this._selectedIndex = -1,
    Object.defineProperty(this, "selectedIndex", {
        get: function() {
            return this._selectedIndex
        },
        set: function(t) {
            this._selectedIndex = t,
            this.updateSorButtons(),
            this.updateView()
        }
    }),
    canvas.app.manor.view.WindowManorBase.call(this, 630, 524, canvas.Translator.getText(327)),
    this.container = this.addChild(new canvas.px.Container),
    this.container.y = 30,
    this.topList = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1)),
    this.topList._paddingV = this.topList._paddingH = 0,
    this.topList.setSize(440, canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH),
    t = 0; t < canvas.data.manor.DCampData.TYPE_COUNT; t++)
        this.topList.add(new canvas.app.manor.view.controls.camp.SortButtonRenderer(t), !1);
    this.topList.update(),
    this.topList.position.set(canvas.app.manor.view.controls.ChoosePetWin.FIRST_CELL_WIDTH, 0);
    var e = this.container.addChild(new canvas.px.RoundRect(16576940,1,this.back.width - 13,427,15,15));
    e.position.set(6, 61),
    (e = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_gradient"),10,0,10,0))).width = this.back.width - 24,
    e.position.set(12, 60),
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1)),
    this.list._paddingV = this.list._paddingH = 0,
    this.list._scrollPadding = 20,
    this.list.position.set(6, 91),
    this.list.setSize(599, 420),
    this.list.scroll = new canvas.app.manor.view.controls.elements.Scroll(this.list.container),
    this.filterSortControl = this.addChild(new canvas.app.manor.view.controls.elements.FilterSortControlPets([],"","",!1,canvas.Translator.getText(281))),
    this.filterSortControl.container.removeChild(this.filterSortControl.filterButton),
    this.filterSortControl.position.set(54, 65),
    this.excludePets = null,
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.filterSortControl, this.filterChangeHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.topList, this.topSelectHandler, this)
}
,
canvas.app.manor.view.controls.ChoosePetWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.ChoosePetWin.FIRST_CELL_WIDTH = 170,
canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH = 72,
canvas.app.manor.view.controls.ChoosePetWin.prototype.updateView = function() {
    this.pets.sort(this.sortFunction.bind(this));
    for (var t, e = this.pets.length, a = 0; a < e; a++)
        (t = this.list.items[a]).selectedIndex = this.selectedIndex,
        t.data = this.pets[a]
}
,
canvas.app.manor.view.controls.ChoosePetWin.prototype.updateSorButtons = function() {
    for (var t, e = 0; e < canvas.data.manor.DCampData.TYPE_COUNT; e++)
        (t = this.topList.items[e]).id == this.selectedIndex ? t.changeSort() : t.sortValue = 0
}
,
canvas.app.manor.view.controls.ChoosePetWin.prototype.sortFunction = function(t, e) {
    return t.getSkillByIndex(this.selectedIndex + 1) > e.getSkillByIndex(this.selectedIndex + 1) ? -this.topList.items[this.selectedIndex].sortValue : t.getSkillByIndex(this.selectedIndex + 1) < e.getSkillByIndex(this.selectedIndex + 1) ? this.topList.items[this.selectedIndex].sortValue : 0
}
,
canvas.app.manor.view.controls.ChoosePetWin.prototype.update = function() {
    var t = canvas.app.manor.model;
    if (t.campData.pets) {
        var e, a;
        for (a in this.pets = new Array,
        this.list.clear(!1),
        t.campData.pets)
            (e = t.campData.pets[a]).mission || !e.canQuest || this.excludePets && 0 <= this.excludePets.indexOf(e.id) || 2 < this.filterSortControl.filterText.length && e.title.toLowerCase().search(this.filterSortControl.filterText.toLowerCase()) < 0 || (this.list.add(new canvas.app.manor.view.controls.camp.PetLineRenderer(this.back.width - 13,e), !1),
            this.pets.push(e));
        this.list.update(),
        this._selectedIndex < 0 ? this.selectedIndex = 0 : this.updateView()
    }
}
,
canvas.app.manor.view.controls.ChoosePetWin.prototype.topSelectHandler = function(t) {
    t.params && (this.selectedIndex = t.params.id)
}
,
canvas.app.manor.view.controls.ChoosePetWin.prototype.filterChangeHandler = function(t) {
    this.update()
}
,
canvas.app.manor.view.controls.ChoosePetWin.prototype.activate = function() {
    this.filterSortControl.input.input = canvas.app.manor.view.input11
}
,
canvas.app.manor.view.controls.ChoosePetWin.prototype.deactivate = function() {
    this.filterSortControl.input.input = null
}
,
canvas.app.manor.view.controls.ConfirmWindow = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 166, canvas.Translator.getText(2020)),
    this.messageField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7026733,250,70,"center","middle"),
    this.messageField._lineSpace = 4,
    this.messageField.position.set(40, 40),
    this.addChild(this.messageField),
    this.okButton = new canvas.app.view.MainButton,
    this.okButton.setTitle(canvas.Translator.getText(2018)),
    this.okButton.setSize(120),
    this.okButton.position.set(Math.round(.5 * this.width - this.okButton.width - 10), 105),
    this.addChild(this.okButton),
    this.cancelButton = new canvas.app.view.MainButton,
    this.cancelButton.setTitle(canvas.Translator.getText(2019)),
    this.cancelButton.setSize(120),
    this.cancelButton.position.set(Math.round(.5 * this.width + 10), 105),
    this.addChild(this.cancelButton)
}
,
canvas.app.manor.view.controls.ConfirmWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.ConfirmWindow.prototype.clickHandler = function(t) {
    if (canvas.Functions.findParent(this.okButton, t.target))
        return canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this),
        void (null != this.e && (this.e.func ? this.e.func.apply(null, this.e.params) : this.e.name && canvas.EventManager.dispatchEvent(this.e.name, null, this.e.params)));
    canvas.Functions.findParent(this.cancelButton, t.target) ? canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this) : canvas.px.Window.prototype.clickHandler.call(this, t)
}
,
canvas.app.manor.view.controls.ConfirmWindow.prototype.init = function(t, e, a, s) {
    null != a && this.okButton.setTitle(a),
    null != s && this.cancelButton.setTitle(s),
    null == e && (e = null),
    this.messageField.text = t,
    this.e = e
}
,
canvas.app.manor.view.controls.CountWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 166, ""),
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,240,18,"center")),
    this.title.position.set(40, 53),
    this.title.text = canvas.Translator.getText(186) + ":",
    this.input = this.addChild(new canvas.app.manor.view.controls.elements.Input("center",!0,41,null,null,null,null,!0)),
    this.input.leftArrow.x += 6,
    this.input.rightArrow.x -= 4,
    this.input.onlyNumbers = !0,
    this.input.maxChars = 10,
    this.input.position.set(135, 80),
    this.okButton = this.addChild(new canvas.app.view.MainButton),
    this.okButton.setTitle(canvas.Translator.getText(2018)),
    this.okButton.position.set(50, 110),
    this.okButton.setSize(100),
    this.allButton = this.addChild(new canvas.app.view.MainButton),
    this.allButton.setTitle(canvas.Translator.getText(187)),
    this.allButton.position.set(165, 110),
    this.allButton.setSize(100),
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.okButton, this.okHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.allButton, this.allHandler, this)
}
,
canvas.app.manor.view.controls.CountWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.CountWin.count = 0,
canvas.app.manor.view.controls.CountWin.maxCount = 0,
canvas.app.manor.view.controls.CountWin.event = null,
canvas.app.manor.view.controls.CountWin.prototype.update = function() {
    this.okButton.enabled = 0 < parseInt(this.input.text)
}
,
canvas.app.manor.view.controls.CountWin.prototype.changeHandler = function() {
    this.update()
}
,
canvas.app.manor.view.controls.CountWin.prototype.okHandler = function() {
    canvas.app.manor.view.controls.CountWin.count = parseInt(this.input.text),
    canvas.EventManager.dispatchEvent.apply(canvas.EventManager, canvas.app.manor.view.controls.CountWin.event),
    this.close()
}
,
canvas.app.manor.view.controls.CountWin.prototype.allHandler = function() {
    canvas.app.manor.view.controls.CountWin.count = canvas.app.manor.view.controls.CountWin.maxCount,
    canvas.EventManager.dispatchEvent.apply(canvas.EventManager, canvas.app.manor.view.controls.CountWin.event),
    this.close()
}
,
canvas.app.manor.view.controls.CountWin.prototype.activate = function() {
    this.input.input = canvas.app.manor.view.input9
}
,
canvas.app.manor.view.controls.CountWin.prototype.deactivate = function() {
    this.input.input = null
}
,
canvas.app.manor.view.controls.CountWin.prototype.show = function() {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this),
    this.input.text = "1",
    this.update()
}
,
canvas.app.manor.view.controls.CountWin.prototype.hide = function() {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this),
    canvas.app.manor.view.controls.CountWin.count = 0,
    canvas.app.manor.view.controls.CountWin.maxCount = 1,
    this.input.input = null
}
,
canvas.app.manor.view.controls.HireWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 307, canvas.Translator.getText(105)),
    this.container = this.addChild(new canvas.px.Container);
    var t = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,96,18,"right"));
    t.position.set(5, 46),
    t.text = canvas.Translator.getText(106) + ":";
    t = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,96,18,"right"));
    t.position.set(5, 76),
    t.text = canvas.Translator.getText(107) + ":";
    t = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,96,18,"right"));
    t.position.set(107, 76),
    t.text = canvas.Translator.getText(108),
    this.prognosisField = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11,7026733,283,18,"center")),
    this.prognosisField.position.set(23, 102),
    this.inputLabour = this.container.addChild(new canvas.app.manor.view.controls.elements.Input),
    this.inputLabour.onlyNumbers = !0,
    this.inputLabour.maxChars = 4,
    this.inputLabour.position.set(104, 74),
    this.inputPrice = this.container.addChild(new canvas.app.manor.view.controls.elements.Input),
    this.inputPrice.onlyNumbers = !0,
    this.inputPrice.maxChars = 2,
    this.inputPrice.position.set(206, 74),
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "money_silver"))).position.set(240, 78),
    this.cementInput = this.container.addChild(new canvas.app.manor.view.controls.elements.CementInput),
    this.cementInput.position.set(80, 125),
    this.buyCementButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(109),2)),
    this.buyCementButton.position.set(20, 252),
    this.saveButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(110),4)),
    this.saveButton.position.set(159, 252),
    this.combo = this.container.addChild(new canvas.app.manor.view.controls.elements.Combo),
    this.combo.position.set(105, 40),
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_OPEN, this.combo, this.comboOpenHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_CLOSE, this.combo, this.comboCloseHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.inputLabour, this.changeHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.inputPrice, this.changeHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyCementButton, this.buyClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.saveButton, this.saveClickHandler, this),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.closeHandler, this)
}
,
canvas.app.manor.view.controls.HireWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.HireWin.prototype.show = function(t) {
    this.activate(),
    canvas.app.manor.view.WindowManorBase.prototype.show.apply(this)
}
,
canvas.app.manor.view.controls.HireWin.prototype.hide = function(t) {
    this.deactivate(),
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, t)
}
,
canvas.app.manor.view.controls.HireWin.prototype.comboOpenHandler = function(t) {
    this.deactivate()
}
,
canvas.app.manor.view.controls.HireWin.prototype.comboCloseHandler = function(t) {
    this.parent && this.activate()
}
,
canvas.app.manor.view.controls.HireWin.prototype.activate = function() {
    this.inputLabour.input = canvas.app.manor.view.input,
    this.inputPrice.input = canvas.app.manor.view.input2
}
,
canvas.app.manor.view.controls.HireWin.prototype.deactivate = function() {
    this.inputLabour.input = null,
    this.inputPrice.input = null
}
,
canvas.app.manor.view.controls.HireWin.prototype.update = function(t) {
    null == t && (t = 0);
    var e, a, s, i = canvas.app.manor.model, n = new Array;
    for (s in i.user.buildings)
        e = i.user.buildings[s],
        null != (a = i.buildings[e.name][e.level + 1]) && !e.isUnknownDich() && 0 < a.cost && n.push({
            name: a.name,
            title: a.title
        });
    n.length < 1 ? (canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_MESSAGE, null, {
        params: canvas.Translator.getText(250)
    }),
    this.close()) : (this.combo.init(n),
    this.inputLabour.text = "0",
    this.cementInput.clear(),
    this.inputPrice.text = "5",
    this.updateLight(),
    this.saveButton.setTitle("" != i.requestToRemove ? canvas.Translator.getText(111) : canvas.Translator.getText(110)),
    this.combo.enabled = "" == i.requestToRemove,
    this.updatePrognosis())
}
,
canvas.app.manor.view.controls.HireWin.prototype.updateLight = function() {
    var t, e = canvas.app.manor.model;
    "" != e.requestToRemove ? null != (t = e.user.getRequestById(e.requestToRemove)) && this.cementInput.update(null, e.user.cement + t.labour) : this.cementInput.update(),
    this.saveButton.enabled = this.cementInput.testRequires() && 0 < parseInt(this.inputPrice.text)
}
,
canvas.app.manor.view.controls.HireWin.prototype.updatePrognosis = function() {
    this.prognosisField.text = canvas.Translator.getText(112) + ": <b>" + canvas.app.manor.model.getLabourPrognosis(parseInt(this.inputPrice.text), parseInt(this.inputLabour.text)) + "</b>"
}
,
canvas.app.manor.view.controls.HireWin.prototype.changeHandler = function() {
    this.cementInput.update(this.inputLabour.text),
    this.saveButton.enabled = this.cementInput.testRequires() && 0 < parseInt(this.inputPrice.text),
    this.updatePrognosis()
}
,
canvas.app.manor.view.controls.HireWin.prototype.buyClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CEMENT)
}
,
canvas.app.manor.view.controls.HireWin.prototype.saveClickHandler = function(t) {
    var e = new Object;
    e.type = this.combo.selectedItem.name,
    e.labour = this.inputLabour.text,
    e.price = this.inputPrice.text,
    "" != canvas.app.manor.model.requestToRemove ? (e.edit = !0,
    canvas.app.manor.model.requestToRemove = "") : e.edit = !1,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CREATE_WORK_REQUEST, null, {
        object: e
    }),
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CLOSE_HIRE)
}
,
canvas.app.manor.view.controls.HireWin.prototype.closeHandler = function(t) {
    t.params == this && (canvas.app.manor.model.requestToRemove = "")
}
,
canvas.app.manor.view.controls.HuntCampWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 926, 524, canvas.Translator.getText(292)),
    this.container = this.addChild(new canvas.px.Container),
    this.container.position.set(20, 32),
    this.mineResources = new canvas.app.manor.view.controls.camp.MineResources,
    this.mineTalismans = new canvas.app.manor.view.controls.camp.MineTalismans,
    this.equipment = new canvas.app.manor.view.controls.camp.Equipment,
    this.panels = this.container.addChild(new canvas.app.manor.view.controls.elements.Panels([this.mineTalismans, this.mineResources, this.equipment],["talismans", "resources", "equipment"],[canvas.Translator.getText(294), canvas.Translator.getText(293), canvas.Translator.getText(295)],1)),
    this.panels.setSize(886, 443),
    this.panels.contentContainer.x += 16,
    this.panels.contentContainer.y += 20,
    this.panels.path = "talismans",
    this.loader = new canvas.px.MovieClip(canvas.Config.effectsPath + "hourglass"),
    this.loader.frameEvent = canvas.app.manor.Event.ENTER_FRAME,
    this.loader.loop = !0,
    this.loader.position.set(450, 270),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.panels, this.pathHandler, this)
}
,
canvas.app.manor.view.controls.HuntCampWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.HuntCampWin.prototype.update = function() {
    this.mineResources.inited || "resources" != this.panels.path || this.mineResources.update(),
    this.mineTalismans.inited || "talismans" != this.panels.path || this.mineTalismans.update(),
    this.equipment.inited || "equipment" != this.panels.path || (this.equipment.update(),
    this.activate()),
    this.testLoader()
}
,
canvas.app.manor.view.controls.HuntCampWin.prototype.updateFarm = function() {
    this.mineResources.update(),
    this.mineTalismans.update()
}
,
canvas.app.manor.view.controls.HuntCampWin.prototype.show = function() {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this),
    this.testInited()
}
,
canvas.app.manor.view.controls.HuntCampWin.prototype.testLoader = function() {
    var t = !1;
    switch (this.panels.path) {
    case "resources":
        t = !this.mineResources.inited;
        break;
    case "talismans":
        t = !this.mineTalismans.inited;
        break;
    case "equipment":
        t = !this.equipment.inited
    }
    this.showLoader(t)
}
,
canvas.app.manor.view.controls.HuntCampWin.prototype.showLoader = function(t) {
    t ? (this.loader.play(),
    this.addChild(this.loader),
    this.interactiveChildren = !1) : (this.loader.stop(),
    this.removeIfExist(this.loader),
    this.interactiveChildren = !0)
}
,
canvas.app.manor.view.controls.HuntCampWin.prototype.updateTime = function() {
    this.mineResources.updateTime(),
    this.mineTalismans.updateTime()
}
,
canvas.app.manor.view.controls.HuntCampWin.prototype.pathHandler = function() {
    this.activate(),
    this.testLoader(),
    this.testInited()
}
,
canvas.app.manor.view.controls.HuntCampWin.prototype.testInited = function() {
    switch (this.panels.path) {
    case "resources":
        this.mineResources.inited || canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FARM);
        break;
    case "talismans":
        this.mineTalismans.inited || canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_DATA_SEARCH);
        break;
    case "equipment":
        this.equipment.inited || canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_DATA_FORGE)
    }
}
,
canvas.app.manor.view.controls.HuntCampWin.prototype.activate = function() {
    this.parent && this.equipment.input && "equipment" == this.panels.path ? this.equipment.input.input = canvas.app.manor.view.input10 : this.deactivate()
}
,
canvas.app.manor.view.controls.HuntCampWin.prototype.deactivate = function() {
    this.equipment.input && (this.equipment.input.input = null)
}
,
canvas.app.manor.view.controls.HuntCampWin.prototype.hide = function() {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this),
    this.equipment.input && (this.equipment.input.input = null)
}
,
canvas.app.manor.view.controls.LabourWin = function(t) {
    canvas.app.manor.view.WindowManorBase.call(this, 461, 496, canvas.Translator.getText(157) + ":"),
    null == t && (t = !1),
    this.header.hAlign = "left",
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.allRequests = new canvas.app.manor.view.controls.AllRequests,
    t ? this.panel = new canvas.app.manor.view.controls.elements.Panels([this.allRequests],["all"],[canvas.Translator.getText(158)],null,null,100) : (this.myRequests = new canvas.app.manor.view.controls.MyRequests,
    this.panel = new canvas.app.manor.view.controls.elements.Panels([this.allRequests, this.myRequests],["all", "my"],[canvas.Translator.getText(158), canvas.Translator.getText(159)],null,null,100)),
    this.panel.setSize(415, 440),
    this.container.addChild(this.panel),
    this.panel.position.set(22, 10),
    canvas.app.manor.model.mapMode && this.position.set(30, 70)
}
,
canvas.app.manor.view.controls.LabourWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.LabourWin.prototype.show = function(t) {
    this.panel.path = "my",
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this, t)
}
,
canvas.app.manor.view.controls.LabourWin.prototype.update = function(t) {
    null == t && (t = 0);
    t = canvas.app.manor.model;
    this.allRequests.fieldTitle.text = canvas.Translator.getText(160) + " <b>" + t.user.labour + "</b> " + canvas.Translator.getText(161),
    this.allRequests.update(),
    this.myRequests && (this.myRequests.fieldTitle.text = this.allRequests.fieldTitle.text,
    this.myRequests.update())
}
,
canvas.app.manor.view.controls.MarketWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 461, 496, canvas.Translator.getText(173) + ":"),
    this.header.hAlign = "left",
    this.header.field.x += 20,
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.buyArea = new canvas.app.manor.view.controls.BuyArea,
    this.sellArea = new canvas.app.manor.view.controls.SellArea,
    this.panel = new canvas.app.manor.view.controls.elements.Panels([this.buyArea, this.sellArea],["buy", "sell"],[canvas.Translator.getText(174), canvas.Translator.getText(175)],null,null,100),
    this.panel.setSize(415, 440),
    this.container.addChild(this.panel),
    this.panel.position.set(22, 10),
    canvas.app.manor.model.mapMode && this.position.set(30, 70),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.panel, this.pathHandler, this)
}
,
canvas.app.manor.view.controls.MarketWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.MarketWin.prototype.show = function(t) {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this, t),
    this.panel.path = "buy",
    this.sellArea.input.input = canvas.app.manor.view.input,
    this.sellArea.input.input.text = "10"
}
,
canvas.app.manor.view.controls.MarketWin.prototype.hide = function(t) {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, t),
    this.sellArea.input.input = null
}
,
canvas.app.manor.view.controls.MarketWin.prototype.activate = function(t) {
    "sell" == this.panel.path && (this.sellArea.input.input = canvas.app.manor.view.input),
    canvas.app.manor.view.WindowManorBase.prototype.activate.call(this, t)
}
,
canvas.app.manor.view.controls.MarketWin.prototype.deactivate = function(t) {
    this.sellArea.input.input = null,
    canvas.app.manor.view.WindowManorBase.prototype.deactivate.call(this, t)
}
,
canvas.app.manor.view.controls.MarketWin.prototype.pathHandler = function(t) {
    switch (this.panel.path) {
    case "buy":
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_SELL_REQUESTS),
        this.sellArea.input.input = null;
        break;
    case "sell":
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_SELL_REQUESTS2),
        this.sellArea.input.input = canvas.app.manor.view.input
    }
}
,
canvas.app.manor.view.controls.Menu = function(t) {
    this._showed = !0,
    Object.defineProperty(this, "showed", {
        get: function() {
            return this._showed
        },
        set: function(t) {
            this._showed = t,
            this.updatePos()
        }
    }),
    canvas.px.Container.call(this),
    null != t && !isNaN(t) || (t = !0),
    this._width = 250,
    this.container = this.addChild(new canvas.px.Container),
    this.container.position.set(-17, 0),
    this.button = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "panel_button_back"))),
    this.button.position.set(this._width - 35, 80),
    this.arrow = this.button.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "panel_button_arrow"))),
    this.arrow.position.set(14, 21),
    this.hint = new canvas.app.view.MappingHint,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.button,
        params: new canvas.utils.HintParams(this.hint)
    }),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this),
    this.back = this.container.addChild(new canvas.px.RoundRect(0,.5,this._width,200,5,5)),
    this.msk = this.addChild(new canvas.px.Mask(this.back.width,this.back.height)),
    this.msk.position.set(this.container.x, this.container.y),
    this.container.mask = this.msk,
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1)),
    this.list.position.set(6, 10),
    this.list._paddingV = 0;
    var e = new canvas.px.Sprite(canvas.px.TextureEmpty)
      , a = new canvas.px.Sprite(canvas.px.TextureEmpty)
      , s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "menu_scroll_drag"));
    s.setSize = function() {}
    ;
    s = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,e,a,new canvas.px.Mask(6,100,0,.6),s,this);
    s.padding = 13,
    s.backPadding = 20,
    s.step = 30,
    s.setSize(5),
    this.list.scrollPadding = -20,
    this.list.scrollMaxAdd = 10,
    this.list.scroll = s,
    this.showed = t,
    this.container.x = this.targetPos
}
,
canvas.app.manor.view.controls.Menu.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.Menu.prototype.updatePos = function() {
    this.button && (this.showed ? (this.addChildAt(this.msk, 0),
    this.addChildAt(this.container, 0),
    this.arrow.scale.x = 1,
    this.arrow.x = 14,
    this.hint.update(canvas.Translator.getText(188)),
    this.targetPos = -15) : (this.arrow.scale.x = -1,
    this.arrow.x = 29,
    this.hint.update(canvas.Translator.getText(189)),
    this.targetPos = this._width),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.frameHandler, this))
}
,
canvas.app.manor.view.controls.Menu.prototype.update = function(t, e, a) {
    null == a && (a = canvas.app.manor.Event.SELECT_BUILDING),
    this.list.clear(!1);
    for (var s, i = t.length, n = 0; n < i; n++)
        s = new canvas.app.manor.view.MenuItemRenderer({
            title: t[n],
            link: e[n].toString(),
            event: a
        }),
        this.list.add(s, !1);
    this.list.update()
}
,
canvas.app.manor.view.controls.Menu.prototype.resize = function() {
    var t = canvas.app.manor.model.height;
    this.list.setSize(this._width, t - 80),
    this.back.h = this.list.container.height + 18,
    this.msk.setSize(-1, this.back.h),
    this.button.y = Math.round(.5 * this.back.h) - 40
}
,
canvas.app.manor.view.controls.Menu.prototype.buttonClickHandler = function() {
    this.showed = !this.showed,
    canvas.app.manor.model.localStorage.set("menuOpened", this.showed ? "1" : "0")
}
,
canvas.app.manor.view.controls.Menu.prototype.frameHandler = function() {
    this.container.x != this.targetPos ? this.container.x < this.targetPos ? this.container.x = Math.min(this.container.x + 30, this.targetPos) : this.container.x = Math.max(this.container.x - 30, this.targetPos) : (canvas.EventManager.removeEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.showed || (this.removeIfExist(this.container),
    this.removeIfExist(this.msk)))
}
,
canvas.app.manor.view.controls.MessageWindow = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 166),
    this.messageField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,250,70,"center","middle"),
    this.messageField.position.set(40, 40),
    this.addChild(this.messageField),
    this.okButton = new canvas.app.view.MainButton,
    this.okButton.setTitle(canvas.Translator.getText(2018)),
    this.okButton.setSize(120),
    this.okButton.position.set(Math.round(.5 * this.width - .5 * this.okButton.width), 105),
    this.addChild(this.okButton)
}
,
canvas.app.manor.view.controls.MessageWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.MessageWindow.prototype.clickHandler = function(t) {
    canvas.Functions.findParent(this.okButton, t.target) && canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this),
    canvas.px.Window.prototype.clickHandler.call(this, t)
}
,
canvas.app.manor.view.controls.MessageWindow.prototype.init = function(t, e) {
    null != e && this.okButton.setTitle(e),
    this.messageField.text = t
}
,
canvas.app.manor.view.controls.MyRequests = function() {
    canvas.px.Container.call(this),
    this.container = new canvas.px.Container,
    this.listContainer = new canvas.px.Container,
    this.addChild(this.container),
    this.container.addChild(this.listContainer),
    this.listContainer.position.set(20, 64),
    this.fieldTitle = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7092753,400,18,"center"),
    this.fieldTitle.position.set(6, 17),
    this.container.addChild(this.fieldTitle);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,73,18,"center");
    t.position.set(9, 39),
    t.text = canvas.Translator.getText(106),
    this.container.addChild(t),
    (t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"left")).position.set(174, 39),
    t.text = canvas.Translator.getText(162),
    this.container.addChild(t),
    (t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,94,18,"center")).position.set(230, 39),
    t.text = canvas.Translator.getText(107),
    this.container.addChild(t),
    (t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"center")).position.set(300, 39),
    t.text = canvas.Translator.getText(155),
    this.container.addChild(t),
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1)),
    this.list.position.set(20, 60),
    this.list.setSize(380, 330),
    this.createButton = new canvas.app.view.MainButton,
    this.createButton.setTitle(canvas.Translator.getText(163)),
    this.createButton.setSize(180),
    this.container.addChild(this.createButton),
    this.createButton.position.set(18, 390),
    this.cancelButton = new canvas.app.view.MainButton,
    this.cancelButton.setTitle(canvas.Translator.getText(156)),
    this.cancelButton.setSize(180),
    this.container.addChild(this.cancelButton),
    this.cancelButton.position.set(218, 390),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this.cancelClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.createButton, this.createClickHandler, this)
}
,
canvas.app.manor.view.controls.MyRequests.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.MyRequests.prototype.update = function() {
    var t, e, a = canvas.app.manor.model;
    this.list.clear(!1);
    for (var s = a.user.requests.length, i = 0; i < s; i++)
        t = a.user.requests[i],
        (e = a.user.buildings[t.building]) && a.buildings[e.name][e.level + 1] && this.list.add(new canvas.app.manor.view.controls.elements.MyRequestLine(t), !1);
    this.list.update()
}
,
canvas.app.manor.view.controls.MyRequests.prototype.cancelClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_CONFIG)
}
,
canvas.app.manor.view.controls.MyRequests.prototype.createClickHandler = function(t) {
    var e = canvas.app.manor.model;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_HIRE, null, "" == e.selectedBuilding ? {} : {
        params: e.selectedBuilding
    })
}
,
canvas.app.manor.view.controls.PortalResetWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 307, canvas.Translator.getText(263)),
    this.container = this.addChild(new canvas.px.Container),
    this.titleField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7092268,300,20,"center")),
    this.titleField.text = canvas.Translator.getText(260),
    this.titleField.position.set(10, 40),
    this.cooldown = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(200)),
    this.cooldown.position.set(65, 60),
    this.buyButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(266),6)),
    this.buyButton.position.set(20, 250),
    this.goButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(267),7)),
    this.goButton.position.set(160, 250),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this.buyClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.goButton, this.goClickHandler, this)
}
,
canvas.app.manor.view.controls.PortalResetWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.PortalResetWin.prototype.update = function() {
    var t = canvas.app.manor.model
      , e = t.portalRebindTime - Math.round(.001 * Date.now());
    this.cooldown.setLabour(e, t.portalRebindCooldown),
    this.cooldown.setTitle(canvas.Functions.formatDate(1e3 * e, "00", 2, !0)),
    this.cementInput && this.cementInput.destroy(),
    this.cementInput = this.container.addChild(new canvas.app.manor.view.controls.elements.CementInput(t.portalResetItem)),
    this.cementInput.position.set(80, 110),
    this.cementInput.update(1, t.portalResetItem.count2),
    this.goButton.enabled = 0 < t.portalResetItem.count2
}
,
canvas.app.manor.view.controls.PortalResetWin.prototype.updateLight = function() {
    this.cementInput.update()
}
,
canvas.app.manor.view.controls.PortalResetWin.prototype.buyClickHandler = function() {
    canvas.Functions.navigateToURL("area_store.php?source=premium&mode=store", "_self")
}
,
canvas.app.manor.view.controls.PortalResetWin.prototype.goClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_ACTION, null, {
        object: {
            building_action: "reset_bind_timer"
        }
    }),
    this.close()
}
,
canvas.app.manor.view.controls.SellArea = function() {
    canvas.px.Container.call(this),
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.listContainer = new canvas.px.Container,
    this.container.addChild(this.listContainer),
    this.listContainer.position.set(10, 204),
    this.fieldTitle = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7092753,235,48,"left"),
    this.container.addChild(this.fieldTitle),
    this.fieldTitle.position.set(172, 31),
    this.label0 = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7092753,70,18,"right"),
    this.container.addChild(this.label0),
    this.label0.position.set(7, 39),
    this.label0.text = "<b>" + canvas.Translator.getText(121) + ":</b> <img src='money_gold' atlas='ui' yOffset='1'/>";
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7092753,403,18,"center");
    this.container.addChild(t),
    t.position.set(5, 152),
    t.text = canvas.Translator.getText(122) + ":",
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"left"),
    this.container.addChild(t),
    t.position.set(65, 179),
    t.text = canvas.Translator.getText(123),
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,65,18,"center"),
    this.container.addChild(t),
    t.position.set(313, 179),
    t.text = canvas.Translator.getText(121);
    t = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "line_0"),1,0,1,0);
    this.container.addChild(t),
    t.width = 381,
    t.position.set(15, 142),
    this.pager = new canvas.app.manor.view.controls.elements.Pager,
    this.container.addChild(this.pager),
    this.pager.position.set(207, 385),
    this.pager.visible = !1,
    canvas.EventManager.addEventListener(canvas.ui.PagerEvent.EVENT_CHANGE, this.pager, this._pagerHandler, this);
    for (var e, a = 0, s = [], i = 0; i < canvas.app.manor.Const.REQUESTS_ON_PAGE_SHORT; i++)
        (e = new canvas.app.manor.view.controls.elements.WorkRequestLine(i,s,"money_gold")).visible = !1,
        s.push(e.check),
        this.listContainer.addChild(e),
        e.y = a,
        a += 29,
        e.check.visible = !1,
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_SELECT, e.check, this._itemClickHandler, this);
    this.input = new canvas.app.manor.view.controls.elements.Input(canvas.app.manor.view.input,!0,45),
    this.container.addChild(this.input),
    this.input.onlyNumbers = !0,
    this.input.maxChars = 10,
    this.input.text = "10",
    this.sellButton = new canvas.app.view.MainButton,
    this.sellButton.setTitle(canvas.Translator.getText(124)),
    this.sellButton.setSize(180),
    this.container.addChild(this.sellButton),
    this.sellButton.position.set(18, 90),
    this.cancelButton = new canvas.app.view.MainButton,
    this.cancelButton.setTitle(canvas.Translator.getText(2019)),
    this.cancelButton.setSize(180),
    this.container.addChild(this.cancelButton),
    this.cancelButton.position.set(218, 90),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this._cancelClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.sellButton, this._sellClickHandler, this),
    this.hideSellView()
}
,
canvas.app.manor.view.controls.SellArea.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.SellArea.prototype._pagerHandler = function(t) {
    this.requestCurPage = this.pager.currentPage,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.LOAD_SELL_REQUESTS2)
}
,
canvas.app.manor.view.controls.SellArea.prototype._updateList = function() {
    for (var t, e, a = 0, s = 0; s < canvas.app.manor.Const.REQUESTS_ON_PAGE_SHORT; s++)
        t = this._requests[s],
        (e = this.listContainer.getChildAt(a)).check.checked = 0 == a,
        e.data = t,
        e.visible = null != t,
        a++
}
,
canvas.app.manor.view.controls.SellArea.prototype.update = function(t, e, a, s, i) {
    null == i && (i = !0),
    this._requests = t,
    this._requestNumPages = e,
    1 < this._requestNumPages ? (this.pager.init(this._requestNumPages * canvas.app.manor.Const.REQUESTS_ON_PAGE_SHORT),
    this.pager.currentPage = this.requestCurPage,
    this.pager.visible = !0) : this.pager.visible = !1,
    this.fieldTitle.text = "<b>" + canvas.Translator.getText(127) + ":</b> " + a + "<br/><b>" + canvas.Translator.getText(128) + ":</b> " + s,
    this._updateList(),
    i ? this.showSellView() : this.hideSellView()
}
,
canvas.app.manor.view.controls.SellArea.prototype.showSellView = function() {
    this.label0.visible = !0,
    this.input.visible = !0,
    this.sellButton.visible = !0,
    this.cancelButton.visible = !0,
    this.input.position.set(86, 36)
}
,
canvas.app.manor.view.controls.SellArea.prototype.hideSellView = function() {
    this.label0.visible = !1,
    this.input.visible = !1,
    this.sellButton.visible = !1,
    this.cancelButton.visible = !1,
    this.input.position.set(86, -2e3)
}
,
canvas.app.manor.view.controls.SellArea.prototype._cancelClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CLOSE_MARKET)
}
,
canvas.app.manor.view.controls.SellArea.prototype._sellClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        text: canvas.Translator.getText(126) + "?",
        event: {
            name: canvas.app.manor.Event.SELL_AREA
        }
    })
}
,
canvas.app.manor.view.controls.ThroneRoom = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 1054, 356, canvas.Translator.getText(254)),
    this.container = this.addChild(new canvas.px.Container),
    this.container.position.set(25, 35),
    this.back = this.container.addChild(new canvas.ui.Image),
    this.back.interactive = !0,
    this.back.click = this.backClickHandler.bind(this),
    this.throneRoom = this.container.addChild(new canvas.app.manor.view.controls.throne.ThroneRoomView),
    this.viewButton = this.container.addChild(new canvas.app.view.MainButton),
    this.viewButton.setSize(200),
    this.viewButton.setTitle(canvas.Translator.getText(1500)),
    this.viewButton.position.set(0, canvas.app.manor.Const.THRONE_ROOM_HEIGHT - 40),
    this.tabsPanel = new canvas.app.manor.view.controls.throne.ItemsWindow;
    var t = this.toGlobal(new canvas.px.Point(canvas.app.manor.Const.THRONE_ROOM_WIDTH - this.tabsPanel.width - 20,20));
    this.tabsPanel.position.set(t.x, t.y);
    t = this.addChild(new canvas.px.Mask(canvas.app.manor.Const.THRONE_ROOM_WIDTH,canvas.app.manor.Const.THRONE_ROOM_HEIGHT));
    t.position.set(this.container.x, this.container.y),
    this.container.mask = t,
    canvas.app.manor.model.throneRoomData.guestMode && (this.container.interactiveChildren = !1),
    this.preloader = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "preloader")),
    this.preloader.gotoAndStop(1),
    this.preloader.position.set(Math.round(.5 * canvas.app.manor.Const.THRONE_ROOM_WIDTH) + 25, Math.round(.5 * canvas.app.manor.Const.THRONE_ROOM_HEIGHT) + 25),
    this.throneRoom.interactive = !0,
    this.throneRoom.click = this.throneClickHandler.bind(this),
    this.container.interactive = !0,
    this.container.click = this.containerClickHandler.bind(this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.PANELS_PATH, this.tabsPanel.panels, this.pathHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.viewButton, this.viewClickHandler, this)
}
,
canvas.app.manor.view.controls.ThroneRoom.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.ThroneRoom.prototype.update = function() {
    var t = canvas.app.manor.model.throneRoomData;
    if (t.userData.items) {
        this.back.setImage(t.userData.throneRoomBack);
        var e, a, s, i = t.userData.items.filter(t.filterActiveItems), n = canvas.data.manor.throne.Prototypes.getTypePrototype(t.currentType), o = t.userData.items.filter(t.filterTypeItems.bind(t)), r = t.shopItems.filter(t.filterTypeItems.bind(t)), c = new Array;
        for (p = i.length,
        a = 0; a < p; a++)
            s = i[a],
            c.push(s.proto.type);
        for (e in canvas.data.manor.throne.Prototypes.typePrototypes)
            c.indexOf(parseInt(e)) < 0 && ((s = new canvas.data.manor.throne.ItemData(0)).id = parseInt(e),
            i.push(s));
        if (t.watchMode ? (canvas.utils.WindowsManager.instance.closeWindow(this.tabsPanel),
        this.viewButton.visible = !1,
        this.throneRoom.bMode = !1) : (this.throneRoom.bMode = !0,
        !(0 < t.currentType) || n && n.disabled ? canvas.utils.WindowsManager.instance.closeWindow(this.tabsPanel) : (canvas.utils.WindowsManager.instance.openWindow(this.tabsPanel, !1, !1, !1),
        "shop" == this.tabsPanel.panels.path ? this.tabsPanel.data = r : this.tabsPanel.data = o),
        this.viewButton.visible = !0),
        0 < t.userData.redressItemID) {
            var p, h = new canvas.data.manor.throne.ItemData(t.userData.redressItemID);
            if (p = i.length)
                for (a = 0; a < p; a++)
                    if ((s = i[a]).proto.type == h.proto.type || !s.artikulID && s.id == h.proto.type) {
                        i.splice(a, 1);
                        break
                    }
            i.push(h)
        }
        i.sort(t.compareItemDataIndex),
        this.throneRoom.data = i,
        this.preloader && (canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.progressHandler, this),
        canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this))
    }
}
,
canvas.app.manor.view.controls.ThroneRoom.prototype.progressHandler = function(t) {
    this.preloader.gotoAndStop(Math.round(t.params.progress))
}
,
canvas.app.manor.view.controls.ThroneRoom.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_PROGRESS, null, this.progressHandler, this),
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this),
    this.preloader.destroy(),
    this.preloader = null
}
,
canvas.app.manor.view.controls.ThroneRoom.prototype.throneClickHandler = function(t) {
    t = canvas.Functions.findParentByName("item", t.target);
    t && (canvas.app.manor.model.throneRoomData.currentType = parseInt(0 < t.data.artikulID ? t.data.proto.type : t.data.id),
    this.update())
}
,
canvas.app.manor.view.controls.ThroneRoom.prototype.pathHandler = function() {
    "shop" != this.tabsPanel.panels.path && (canvas.app.manor.model.throneRoomData.userData.redressItemID = 0),
    this.update()
}
,
canvas.app.manor.view.controls.ThroneRoom.prototype.updateTime = function() {
    this.tabsPanel.updateTime(),
    canvas.app.manor.model.throneRoomData.testExpiredItems() && this.update()
}
,
canvas.app.manor.view.controls.ThroneRoom.prototype.containerClickHandler = function(t) {
    var e = canvas.app.manor.model.throneRoomData;
    e.watchMode && !e.guestMode && (e.watchMode = !1,
    this.update())
}
,
canvas.app.manor.view.controls.ThroneRoom.prototype.backClickHandler = function(t) {
    var e = canvas.app.manor.model.throneRoomData;
    e.watchMode || e.guestMode || (e.currentType = 0,
    this.update())
}
,
canvas.app.manor.view.controls.ThroneRoom.prototype.viewClickHandler = function(t) {
    t.params.stopPropagation();
    t = canvas.app.manor.model.throneRoomData;
    t.watchMode = !0,
    t.currentType = 0,
    this.update()
}
,
canvas.app.manor.view.controls.ThroneRoom.prototype.show = function() {
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this),
    this.throneRoom.stopAndPlay()
}
,
canvas.app.manor.view.controls.ThroneRoom.prototype.hide = function() {
    canvas.utils.WindowsManager.instance.closeAllWindows(),
    canvas.app.manor.model.throneRoomData.currentType = 0,
    this.update(),
    this.throneRoom.stopAndPlay(!0)
}
,
canvas.app.manor.view.controls.ThroneRoom.prototype.activate = function() {
    this.tabsPanel.parent && this.tabsPanel.parent.addChild(this.tabsPanel)
}
,
canvas.app.manor.view.controls.Upgrade = function() {
    canvas.px.Container.call(this),
    this.container = this.addChild(new canvas.px.Container),
    this.fieldTopTitle = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7026733,394,18,"center")),
    this.fieldTopTitle.position.set(12, 14),
    this.fieldBack = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7026733,138,18,"left")),
    this.fieldBack.position.set(412, 90),
    this.fieldBack.text = canvas.Translator.getText(233),
    this.requiresField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,394,18,"center")),
    this.requiresField.position.set(10, 67),
    this.requiresField.text = canvas.Translator.getText(144) + ":",
    this.labourInput = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourInput),
    this.labourInput.position.set(23, 90),
    this.cementInput = this.container.addChild(new canvas.app.manor.view.controls.elements.CementInput),
    this.cementInput.position.set(220, 90);
    var t = new Object;
    t.back = "labour3_progress_back",
    t.front = "labour3_progress",
    t.font = canvas.Const.FONT_TAHOMA_10,
    t.color = 6499081,
    t.pos = new canvas.px.Point(16,9),
    t.textPos = new canvas.px.Point(0,0),
    this.labour = this.container.addChild(new canvas.app.manor.view.controls.elements.Labour(canvas.Translator.getText(176),t)),
    this.labour.position.set(28, 30),
    this.labour.setLabour(0, 0);
    t = 0;
    this.hireButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(177),1)),
    this.hireButton.position.set(0, 220),
    t += Math.round(this.hireButton.width - 20),
    this.buyCementButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(109),2)),
    this.buyCementButton.position.set(t, 220),
    t += Math.round(this.buyCementButton.width - 20),
    this.buildButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(178),3)),
    this.buildButton.position.set(t, 220),
    t += Math.round(this.buildButton.width - 20),
    this.destroyButton = this.container.addChild(new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(228),5)),
    this.destroyButton.position.set(t, 220),
    this.backButton = this.addChild(new canvas.app.view.MainButton),
    this.backButton.setTitle(canvas.Translator.getText(232)),
    this.backButton.setSize(120),
    this.backButton.position.set(410, 30),
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.labourInput, this.changeHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buildButton, this.buildClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hireButton, this.hireClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyCementButton, this.buyClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.destroyButton, this.destroyClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.backButton, this.backClickHandler, this)
}
,
canvas.app.manor.view.controls.Upgrade.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.Upgrade.prototype.setTitlePercent = function(t) {
    this.fieldTopTitle.text = canvas.Translator.getText(179) + " " + t + "%:"
}
,
canvas.app.manor.view.controls.Upgrade.prototype.changeHandler = function() {
    this.cementInput.update(this.labourInput.input.text),
    this.testRequires()
}
,
canvas.app.manor.view.controls.Upgrade.prototype.buildClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.BUILD)
}
,
canvas.app.manor.view.controls.Upgrade.prototype.hireClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_LABOUR),
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_HIRE, null, "" == canvas.app.manor.model.selectedBuilding ? {} : {
        params: canvas.app.manor.model.selectedBuilding
    })
}
,
canvas.app.manor.view.controls.Upgrade.prototype.buyClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CEMENT)
}
,
canvas.app.manor.view.controls.Upgrade.prototype.destroyClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(229) + "?",
        object: {
            name: canvas.app.manor.Event.DESTROY_BUILDING
        }
    })
}
,
canvas.app.manor.view.controls.Upgrade.prototype.backClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.BACK_TO_CHOOSE_BUILDING)
}
,
canvas.app.manor.view.controls.Upgrade.prototype.testRequires = function() {
    this.buildButton.enabled = this.labourInput.testRequires() && this.cementInput.testRequires()
}
,
canvas.app.manor.view.controls.Upgrade.prototype.clear = function() {
    this.labourInput.clear(),
    this.cementInput.clear()
}
,
canvas.app.manor.view.controls.UseExp = function() {
    canvas.app.manor.view.UseBuilding.call(this),
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,391,18,"center")),
    this.title.position.set(12, 19),
    this.title.text = canvas.Translator.getText(129),
    this.description = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,360,56,"left")),
    this.description.position.set(27, 155),
    this.description.text = canvas.Translator.getText(132),
    this.leftLabel = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,100,18,"right")),
    this.leftLabel.position.set(45, 108),
    this.leftLabel.text = canvas.Translator.getText(130),
    this.rightLabel = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,100,18,"left")),
    this.rightLabel.position.set(265, 108),
    this.rightLabel.text = canvas.Translator.getText(131),
    this.exp = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(360)),
    this.exp.position.set(29, 40),
    this.exp.setLabour(0, 0),
    this.checker = this.addChild(new canvas.app.manor.view.controls.elements.Checker),
    this.checker.position.set(155, 110),
    this.checker.enabled = !1,
    this.modeButton = this.addChild(new canvas.app.view.MainButton),
    this.modeButton.position.set(130, 220),
    this.modeButton.enabled = !1,
    this.checkContainer = new canvas.px.Container,
    this.checkContainer.y = 190,
    this.checkContainer.interactiveChildren = !1,
    this.radioArray = [],
    this.checkMoney = this.checkContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),this.radioArray)),
    this.radioArray.push(this.checkMoney),
    this.checkMoney.position.set(70, 0),
    this.coins = this.checkMoney.sprite.addChild(new canvas.app.view.Money(null,canvas.Const.FONT_TAHOMA_11_BOLD,null,80,null,null,null,!1,0,0)),
    this.coins.position.set(32, 8),
    this.checkMoney.checked = !0,
    this.checkEnergy = this.checkContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),this.radioArray)),
    this.radioArray.push(this.checkEnergy),
    this.checkEnergy.position.set(268, 0),
    this.energy = this.checkEnergy.sprite.addChild(new canvas.app.manor.view.controls.elements.Energy),
    this.energy.position.set(32, 8),
    this.orField = this.checkContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,40,18,"center")),
    this.orField.position.set(180, 8),
    this.orField.text = canvas.Translator.getText(206),
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.checker, this.checkerHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.modeButton, this.clickHandler, this)
}
,
canvas.app.manor.view.controls.UseExp.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype),
canvas.app.manor.view.controls.UseExp.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.update2(t.expCount, t.expMax, t.expDecrease, t.expUse, t.expCost)
}
,
canvas.app.manor.view.controls.UseExp.prototype.update2 = function(t, e, a, s, i) {
    this.exp.setLabour(t, e),
    this.checker.checked = a,
    s ? (this.exp.filters = [],
    this.modeButton.setTitle(canvas.Translator.getText(133)),
    this.removeIfExist(this.checkContainer),
    this.checker.enabled = !0) : (this.exp.filters = [canvas.Functions.getBlackAndWhite()],
    this.modeButton.setTitle(canvas.Translator.getText(115)),
    this.addChild(this.checkContainer),
    this.checker.enabled = !1),
    this.coins.money = 100 * i,
    this.energy.energy = Math.round(i / canvas.app.manor.Const.ENERGY_COURSE),
    this.coins.visible = !s,
    this.modeButton.enabled = !0,
    this.checkContainer.interactiveChildren = !0
}
,
canvas.app.manor.view.controls.UseExp.prototype.clickHandler = function() {
    var t = canvas.app.manor.model;
    this.clickAction(canvas.app.manor.Event.USE_EXP_ACTION, t.expUse, t.expCost)
}
,
canvas.app.manor.view.controls.UseExp.prototype.clickAction = function(t, e, a) {
    var s;
    e ? canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(134),
        object: {
            name: t,
            params: {
                params: "store"
            }
        }
    }) : (s = this.checkEnergy.checked ? " <b>" + Math.round(a / canvas.app.manor.Const.ENERGY_COURSE) + "</b> <img src='energy_icon' yOffset='2' atlas='ui'/>" : " <b>" + (s = canvas.Functions.getMoneyForText(a)).value + "</b> <img src='" + s.icon + "' yOffset='2' atlas='ui'/>",
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(135) + s,
        object: {
            name: t,
            params: {
                params: "use",
                flag: this.checkEnergy.checked
            }
        }
    }))
}
,
canvas.app.manor.view.controls.UseExp.prototype.checkerHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_EXP_ACTION, null, {
        params: "set_direction",
        flag: this.checker.checked
    })
}
,
canvas.app.manor.view.controls.UseExp2 = function() {
    canvas.app.manor.view.controls.UseExp.call(this),
    this.removeChild(this.checker),
    this.removeChild(this.leftLabel),
    this.removeChild(this.rightLabel)
}
,
canvas.app.manor.view.controls.UseExp2.prototype = Object.create(canvas.app.manor.view.controls.UseExp.prototype),
canvas.app.manor.view.controls.UseExp2.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.update2(t.exp2Count, t.exp2Max, t.exp2Decrease, t.exp2Use, t.exp2Cost)
}
,
canvas.app.manor.view.controls.UseExp2.prototype.clickHandler = function() {
    var t = canvas.app.manor.model;
    this.clickAction(canvas.app.manor.Event.USE_EXP2_ACTION, t.exp2Use, t.exp2Cost)
}
,
canvas.app.manor.view.controls.UseExp2.prototype.checkerHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_EXP2_ACTION, null, {
        params: "set_direction",
        flag: this.checker.checked
    })
}
,
canvas.app.manor.view.controls.UseHospital = function() {
    canvas.app.manor.view.UseBuilding.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tab_single"))).position.set(0, 97),
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.HORIZONTAL,!1,!1,null,!0)),
    this.pager.setSize(395, 20),
    this.pager.position.set(10, 40);
    var t, e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7092753,204,20,"center"));
    e.position.set(107, 105),
    e.text = canvas.Translator.getText(180),
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1)),
    this.list.position.set(34, 15),
    this.list.setSize(350, 80),
    this.list._paddingH = -1;
    for (var a = 0; a < canvas.app.manor.view.controls.UseHospital.ON_PAGE; a++)
        (t = new canvas.app.manor.view.controls.elements.Item).buttonMode = !1,
        this.list.add(t, !1);
    this.list.update(),
    this.targetItem = this.addChild(new canvas.app.manor.view.controls.elements.Item),
    this.targetItem.position.set(175, 135),
    this.getButton = this.addChild(new canvas.app.view.MainButton),
    this.getButton.position.set(137, 215),
    this.getButton.setTitle(canvas.Translator.getText(181)),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.getButton, this.getClickHandler, this)
}
,
canvas.app.manor.view.controls.UseHospital.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype),
canvas.app.manor.view.controls.UseHospital.ON_PAGE = 5,
canvas.app.manor.view.controls.UseHospital.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.pager.max = t.hospitalItems.length - canvas.app.manor.view.controls.UseHospital.ON_PAGE,
    this.pager.current = 0,
    this.pagerHandler(),
    this.targetItem.data = t.hospitalBuffItem,
    this.getButton.enabled = 0 == t.hospitalBuffItem.time
}
,
canvas.app.manor.view.controls.UseHospital.prototype.pagerHandler = function() {
    for (var t, e, a = canvas.app.manor.model, s = 0, i = this.pager.current; i < this.pager.current + canvas.app.manor.view.controls.UseHospital.ON_PAGE; i++)
        t = this.list.items[s++],
        e = a.hospitalItems[i],
        t.data = e
}
,
canvas.app.manor.view.controls.UseHospital.prototype.getClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HOSPITAL_ACTION)
}
,
canvas.app.manor.view.controls.UseKennel = function() {
    canvas.app.manor.view.UseBuilding.call(this),
    this.defaultBot = parseInt(canvas.app.manor.model.localStorage.get("kennelBot"));
    var t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    t.width = 390,
    t.height = 80,
    t.position.set(12, 10),
    (t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_back")))).position.set(21, 20),
    this.image = this.addChild(new canvas.ui.Image),
    this.image.position.set(21, 20),
    this.image.scale.set(1.2, 1.2),
    (t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_border")))).position.set(15, 15),
    this.infoField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,4594699,300,40,"left")),
    this.infoField.position.set(92, 44),
    this.infoField._lineSpace = 5,
    this.leftButton = this.addChild(new canvas.app.view.MainButton(null,null,null,null,null,!0)),
    this.leftButton.setSize(170),
    this.leftButton.position.set(5, 100),
    this.rightButton = this.addChild(new canvas.app.view.MainButton(null,null,null,null,null,!0)),
    this.rightButton.setSize(240),
    this.rightButton.position.set(170, 100),
    this.leftText = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,4594699,170,18,"center")),
    this.leftText.position.set(5, 137),
    this.rightText = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,4594699,170,18,"center")),
    this.rightText.position.set(205, 137),
    this.rightText.text = canvas.Translator.getText(288),
    this.combo = this.addChild(new canvas.app.manor.view.controls.elements.Combo(305,96)),
    this.combo.position.set(90, 15),
    this.progress = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(360)),
    this.progress.position.set(27, 165),
    this.progress.removeChild(this.progress.tf),
    (t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4))).width = 390,
    t.height = 30,
    t.position.set(12, 210),
    this.bottomText = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_12_BOLD,4594699,370,18,"left")),
    this.bottomText.position.set(20, 218),
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboSelectHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftButton, this.leftClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightButton, this.rightClickHandler, this)
}
,
canvas.app.manor.view.controls.UseKennel.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype),
canvas.app.manor.view.controls.UseKennel.prototype.comboSelectHandler = function() {
    var t = parseInt(this.combo.selectedItem.id);
    0 < t && t != this.defaultBot && (canvas.app.manor.model.localStorage.set("kennelBot", t.toString()),
    this.defaultBot = t),
    this.updateMonsterView()
}
,
canvas.app.manor.view.controls.UseKennel.prototype.updateMonsterView = function() {
    var t = canvas.app.manor.model
      , e = t.kennelData.getBotById(parseInt(this.combo.selectedItem.id));
    e ? (this.infoField.text = canvas.Translator.getText(286) + "<br/><img src='money_silver' yOffset='1' atlas='ui'/> <b>" + e.moneyMin + "-" + e.moneyMax + "</b>   " + canvas.Translator.getText(142) + ": <b>" + e.exp + "</b>",
    this.image.setImage(e.picture),
    this.leftButton.setTitle(canvas.Translator.getText(290) + "  <img src='money_silver' yOffset='2' xOffset='-2' atlas='ui'/>" + e.price),
    this.rightButton.setTitle(canvas.Translator.getText(291) + "  <img src='money_silver' yOffset='2' xOffset='-2' atlas='ui'/>" + 10 * e.price + "  <img src='money_crystal' yOffset='2' xOffset='-2' atlas='ui'/>" + t.kennelData.killPriceExt)) : (this.image.clear(),
    this.infoField.text = canvas.Translator.getText(286) + "<br/><img src='money_silver' yOffset='1' atlas='ui'/> <b>0</b>   " + canvas.Translator.getText(142) + ": <b>0</b>"),
    this.updateButtonsEnabled()
}
,
canvas.app.manor.view.controls.UseKennel.prototype.updateButtonsEnabled = function() {
    var t, e, a;
    this.combo.selectedItem && (t = (a = canvas.app.manor.model).kennelData.getBotById(parseInt(this.combo.selectedItem.id)),
    a = !this.lockBeforeUpdate && t && a.kennelData.getFinishTime() < a.serverTime.getTime() ? (e = a.kennelData.canKillTotal && a.kennelData.canKill,
    9 < a.kennelData.canKillTotal) : e = !1,
    this.leftButton.enabled != e && (this.leftButton.enabled = e),
    this.rightButton.enabled != a && (this.rightButton.enabled = a))
}
,
canvas.app.manor.view.controls.UseKennel.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.lockBeforeUpdate = !1;
    var e, a = new Array, s = t.kennelData.bots.length;
    for (a.push({
        id: 0,
        title: canvas.Translator.getText(289)
    }),
    e = 0; e < s; e++)
        a.push({
            id: parseInt(t.kennelData.bots[e].id),
            title: t.kennelData.bots[e].nick
        });
    this.combo.init(a),
    this.defaultBot && this.combo.setSelectedItem("id", this.defaultBot),
    this.leftText.text = canvas.Translator.getText(287) + ": <b><font color='#c20000'>" + t.kennelData.canKill + "</font></b>",
    this.bottomText.text = canvas.Translator.getText(507) + ": <b>" + t.kennelData.canKillTotal + "</b>",
    this.updateMonsterView(),
    this.updateTime()
}
,
canvas.app.manor.view.controls.UseKennel.prototype.leftClickHandler = function() {
    var t = canvas.app.manor.model.kennelData.getBotById(parseInt(this.combo.selectedItem.id));
    t && (canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_KENNEL_ACTION, null, {
        object: {
            building_action: "use",
            kennel_bot_id: t.id,
            big_hunt: 0
        }
    }),
    this.lockBeforeUpdate = !0,
    this.updateButtonsEnabled())
}
,
canvas.app.manor.view.controls.UseKennel.prototype.rightClickHandler = function() {
    var t = canvas.app.manor.model.kennelData.getBotById(parseInt(this.combo.selectedItem.id));
    t && (canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_KENNEL_ACTION, null, {
        object: {
            building_action: "use",
            kennel_bot_id: t.id,
            big_hunt: 1
        }
    }),
    this.lockBeforeUpdate = !0,
    this.updateButtonsEnabled())
}
,
canvas.app.manor.view.controls.UseKennel.prototype.updateTime = function() {
    var t = canvas.app.manor.model;
    t.serverTime.getTime() > t.kennelData.getFinishTime() ? this.progress.setLabour(1, 1) : this.progress.setLabour(1 == this.progress.progress ? 0 : t.serverTime.getTime() - t.kennelData.getStartTime(), t.kennelData.getFinishTime() - t.kennelData.getStartTime()),
    this.updateButtonsEnabled()
}
,
canvas.app.manor.view.controls.UseMine = function(t) {
    canvas.app.manor.view.UseBuilding.call(this),
    this.make = t;
    var e, t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tab_single")));
    t.position.set(0, 97),
    this.title = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,7092753,204,20,"center")),
    this.title.position.set(107, 105),
    this.hint = new canvas.app.view.MappingHint,
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1)),
    this.list.position.set(20, 135),
    this.list.setSize(350, 120);
    for (var a = this.list._paddingV = 0; a < canvas.app.manor.view.controls.UseMine.ON_PAGE; a++)
        e = new canvas.app.manor.view.controls.elements.TaskItem2,
        this.list.add(e, !1);
    this.list.update(),
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL,!0,!0,this.list)),
    this.pager.setSize(20, 120),
    this.pager.position.set(375, 135),
    (t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4))).width = t.height = 85,
    t.position.set(this.make ? 20 : 100, 8),
    this.make && (this.arrow = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "big_arrow"))),
    this.arrow.position.set(109, 3)),
    this.button = this.addChild(new canvas.app.view.MainButton(null,null,null,null,null,!0)),
    this.button.position.set(this.make ? 120 : 200, 30),
    this.button.setSize(170),
    this.item = this.addChild(new canvas.app.manor.view.controls.elements.Item(!0)),
    this.item.position.set(this.make ? 27 : 107, 15),
    this.make && ((t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4))).width = t.height = 85,
    t.position.set(310, 8),
    this.item2 = this.addChild(new canvas.app.manor.view.controls.elements.Item(!0)),
    this.item2.position.set(317, 15),
    this.hint = new canvas.app.view.MappingHint(canvas.Translator.getText(238))),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this)
}
,
canvas.app.manor.view.controls.UseMine.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype),
canvas.app.manor.view.controls.UseMine.ON_PAGE = 4,
canvas.app.manor.view.controls.UseMine.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.updateRequests(),
    this.pager.current = 0,
    this.item.data = t.craftData.item,
    null != this.item2 && (this.item2.data = t.craftData.item2),
    this.button.setTitle(canvas.Translator.getText(this.make ? 236 : 235) + " " + t.craftData.price + " <img src='energy_icon' atlas='ui' yOffset='1'/>"),
    this.button.enabled = t.craftData.requests.length + t.craftData.requestsCompleted.length < t.craftData.queueSizeMax,
    null != this.arrow && canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
        target: this.button
    }),
    this.make && t.craftData.materialCount < t.craftData.item.count && (this.button.enabled = !1,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.button,
        params: new canvas.utils.HintParams(this.hint)
    })),
    this.title.text = canvas.Translator.getText(191) + " <b>(" + t.craftData.requests.length.toString() + "/" + t.craftData.queueSizeMax.toString() + ")</b>"
}
,
canvas.app.manor.view.controls.UseMine.prototype.pagerHandler = function() {
    for (var t, e, a = canvas.app.manor.model, s = 0, i = this.pager.current; i < this.pager.current + canvas.app.manor.view.controls.UseMine.ON_PAGE; i++)
        t = this.list.items[s++],
        e = a.craftData.requests[i],
        t.name = (i + 1).toString(),
        t.data = e
}
,
canvas.app.manor.view.controls.UseMine.prototype.updateRequests = function() {
    var t = canvas.app.manor.model.craftData.requests.length - canvas.app.manor.view.controls.UseMine.ON_PAGE;
    t != this.pager.max && (this.pager.max = t),
    this.pagerHandler()
}
,
canvas.app.manor.view.controls.UseMine.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_ACTION, null, {
        object: {
            building_action: "produce"
        }
    })
}
,
canvas.app.manor.view.controls.UseMake = function() {
    canvas.app.manor.view.controls.UseMine.call(this, !0)
}
,
canvas.app.manor.view.controls.UseMake.prototype = Object.create(canvas.app.manor.view.controls.UseMine.prototype),
canvas.app.manor.view.controls.UseMine2 = function() {
    var t;
    canvas.app.manor.view.UseBuilding.call(this),
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.HORIZONTAL,!1,!1,null,!0)),
    this.pager.setSize(395, 20),
    this.pager.position.set(10, 40),
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1)),
    this.list.position.set(34, 15),
    this.list.setSize(350, 80),
    this.list._paddingH = -1;
    for (var e = 0; e < canvas.app.manor.view.controls.UseMine2.ON_PAGE; e++)
        (t = new canvas.app.manor.view.controls.elements.Item(!1)).click = this.selectHandler.bind(this),
        t.buttonMode = !1,
        this.list.add(t, !1);
    this.list.update(),
    this.hint = new canvas.app.view.MappingHint(canvas.Translator.getText(192)),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.selectHandler, this)
}
,
canvas.app.manor.view.controls.UseMine2.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype),
canvas.app.manor.view.controls.UseMine2.ON_PAGE = 5,
canvas.app.manor.view.controls.UseMine2.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this),
    this.pager.max = canvas.app.manor.model.craftData.requestsCompleted.length - canvas.app.manor.view.controls.UseMine2.ON_PAGE,
    this.pager.current = 0,
    this.pagerHandler()
}
,
canvas.app.manor.view.controls.UseMine2.prototype.pagerHandler = function() {
    for (var t, e, a, s = canvas.app.manor.model, i = 0, n = this.pager.current; n < this.pager.current + canvas.app.manor.view.controls.UseMine2.ON_PAGE; n++)
        (t = this.list.items[i++]).data = null,
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
            target: t
        }),
        null != (a = s.craftData.requestsCompleted[n]) && ((e = new canvas.data.manor.DItem).image = a.item.image,
        e.title = a.item.title,
        e.count = a.item.count,
        e.id = a.id,
        t.data = e,
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
            target: t,
            params: new canvas.utils.HintParams(this.hint)
        }))
}
,
canvas.app.manor.view.controls.UseMine2.prototype.selectHandler = function(t) {
    t = t.currentTarget;
    t.data && canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_MINE_ACTION, null, {
        object: {
            building_action: "pick",
            craft_id: t.data.id
        }
    })
}
,
canvas.app.manor.view.controls.UseObelisk = function() {
    canvas.app.manor.view.UseBuilding.call(this),
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,391,18,"center")),
    this.title.position.set(12, 19),
    this.title.text = canvas.Translator.getText(136),
    this.description = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,360,56,"left")),
    this.description.position.set(27, 105),
    this.description.text = canvas.Translator.getText(137),
    this.valour = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(360)),
    this.valour.position.set(29, 40),
    this.valour.setLabour(0, 0),
    this.modeButton = this.addChild(new canvas.app.view.MainButton),
    this.modeButton.position.set(130, 190),
    this.modeButton.enabled = !1,
    this.checkContainer = new canvas.px.Container,
    this.checkContainer.y = 160,
    this.checkContainer.interactiveChildren = !1,
    this.radioArray = [],
    this.checkMoney = this.checkContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),this.radioArray)),
    this.radioArray.push(this.checkMoney),
    this.checkMoney.position.set(110, 0),
    this.coins = this.checkMoney.sprite.addChild(new canvas.app.view.Money(null,canvas.Const.FONT_TAHOMA_11_BOLD,null,40,null,null,null,!1,0,0)),
    this.coins.position.set(32, 8),
    this.checkMoney.checked = !0,
    this.checkEnergy = this.checkContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),this.radioArray)),
    this.radioArray.push(this.checkEnergy),
    this.checkEnergy.position.set(228, 0),
    this.energy = this.checkEnergy.sprite.addChild(new canvas.app.manor.view.controls.elements.Energy),
    this.energy.position.set(32, 8),
    this.orField = this.checkContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,40,18,"center")),
    this.orField.position.set(180, 8),
    this.orField.text = canvas.Translator.getText(206),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.modeButton, this.clickHandler, this)
}
,
canvas.app.manor.view.controls.UseObelisk.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype),
canvas.app.manor.view.controls.UseObelisk.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.valour.setLabour(t.valourCount, t.valourMax),
    t.valourUse ? (this.valour.filters = [],
    this.modeButton.setTitle(canvas.Translator.getText(133)),
    this.removeIfExist(this.checkContainer)) : (this.valour.filters = [canvas.Functions.getBlackAndWhite()],
    this.modeButton.setTitle(canvas.Translator.getText(115)),
    this.addChild(this.checkContainer)),
    this.coins.money = 100 * t.valourCost,
    this.energy.energy = Math.round(t.valourCost / canvas.app.manor.Const.ENERGY_COURSE),
    this.coins.visible = !t.valourUse,
    this.modeButton.enabled = !0,
    this.checkContainer.interactiveChildren = !0
}
,
canvas.app.manor.view.controls.UseObelisk.prototype.clickHandler = function() {
    var t, e = canvas.app.manor.model;
    e.valourUse ? canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(138),
        object: {
            name: canvas.app.manor.Event.USE_VALOUR_ACTION,
            params: {
                params: "store"
            }
        }
    }) : (t = this.checkEnergy.checked ? " <b>" + Math.round(e.valourCost / canvas.app.manor.Const.ENERGY_COURSE) + "</b> <img src='energy_icon' yOffset='2' atlas='ui'/>" : " <b>" + (t = canvas.Functions.getMoneyForText(e.valourCost)).value + "</b> <img src='" + t.icon + "' yOffset='2' atlas='ui'/>",
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(139) + t,
        object: {
            name: canvas.app.manor.Event.USE_VALOUR_ACTION,
            params: {
                params: "use",
                flag: this.checkEnergy.checked
            }
        }
    }))
}
,
canvas.app.manor.view.controls.UsePets = function() {
    this._curPage = 0,
    Object.defineProperty(this, "curPage", {
        get: function() {
            return this._curPage
        },
        set: function(t) {
            this._curPage = t < 0 ? 0 : t >= this._numPages ? this._numPages - 1 : t,
            this._numPages < 2 ? this.leftArrow.visible = this.rightArrow.visible = !1 : 0 == this._curPage ? (this.leftArrow.visible = !1,
            this.rightArrow.visible = !0) : this._curPage == this._numPages - 1 ? (this.rightArrow.visible = !1,
            this.leftArrow.visible = !0) : this.leftArrow.visible = this.rightArrow.visible = !0;
            for (var e, a = 0, s = this._curPage; s < this._curPage + canvas.app.manor.view.controls.UsePets.ON_PAGE; s++)
                (e = this.pets[a++]).data = this.sortedPetsData[s],
                e.selector.visible = s == this._selectedPet,
                e.interactive = null != e.data;
            this.testTraining()
        }
    }),
    this._selectedPet = 0,
    Object.defineProperty(this, "selectedPet", {
        get: function() {
            return this._selectedPet
        },
        set: function(t) {
            var e, a, s;
            for (this._selectedPet = t,
            a = 0; a < canvas.app.manor.view.controls.UsePets.ON_PAGE; a++)
                (e = this.pets[a]).selector.visible = !1,
                e.interactive = null != e.data;
            if (canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
                target: this.trainButton
            }),
            s = this.sortedPetsData[this.selectedPet],
            e = this.pets[this.selectedPet - this.curPage],
            s) {
                if (this.titleField.text = s.title + " [" + s.level + "]",
                190 < this.titleField.textWidth)
                    for (a = s.title.length - 1; 190 < this.titleField.textWidth; )
                        this.titleField.text = s.title.substr(0, --a) + "... [" + s.level + "]";
                this.exp.setLabour(s.exp, s.expUp),
                canvas.app.manor.model.selectedPet = s.id,
                this.isTrainingNow || (this.trainButton.enabled = !0),
                this.petView.update({
                    src: s.swf
                }),
                s.error && (this.hint.update(s.error),
                canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
                    target: this.trainButton,
                    params: new canvas.utils.HintParams(this.hint)
                }),
                this.trainButton.enabled = !1),
                e && (e.selector.visible = !0,
                e.interactive = !1,
                this.list.container.setChildIndex(e, this.list.container.numChildren - 1))
            } else
                this.exp.setLabour(0, 0),
                this.titleField.text = "",
                canvas.app.manor.model.selectedPet = "",
                this.trainButton.enabled = !1,
                this.petView.update()
        }
    }),
    canvas.app.manor.view.UseBuilding.call(this),
    this.isTrainingNow = !1,
    this._numPages = 1,
    this.container = this.addChild(new canvas.px.Container),
    this.titleField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_BOLD,7026733,210,20,"left")),
    this.titleField.position.set(200, 10),
    this.descField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,394,35,"left")),
    this.descField.position.set(12, 220),
    this.petView = this.container.addChild(new canvas.animation.Pet(null,canvas.app.manor.Event.ENTER_FRAME)),
    this.petView.position.set(11, 20),
    this.petTop = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pet_top"))),
    this.petTop.position.set(12, 20),
    this.hint = new canvas.app.view.MappingHint,
    this.exp = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(200)),
    this.exp.position.set(195, 35),
    this.exp.setLabour(0, 0);
    var t = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    t.width = 192,
    t.height = 54,
    t.position.set(200, 72);
    t = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7026733,40,18,"left"));
    t.position.set(212, 84),
    t.text = canvas.Translator.getText(723) + ":",
    this.infoField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7026733,200,18,"left")),
    this.infoField.position.set(212, 106),
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1)),
    this.list._paddingH = 3,
    this.list.container.x = 10,
    this.list.setSize(360, 80),
    this.list.position.set(30, 205);
    for (var e = 0; e < canvas.app.manor.view.controls.UsePets.ON_PAGE; e++)
        this.list.add(new canvas.app.manor.view.controls.elements.PetItem, !1);
    this.list.update(),
    this.pets = this.list.items,
    this.leftArrow = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left"))),
    this.leftArrow.position.set(10, 225),
    this.rightArrow = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left"))),
    this.rightArrow.position.set(408, 225),
    this.rightArrow.scale.x = -1,
    this.trainButton = this.container.addChild(new canvas.app.view.MainButton),
    this.trainButton.setTitle(canvas.Translator.getText(143)),
    this.trainButton.position.set(222, 135),
    this.filterSortControl = new canvas.app.manor.view.controls.elements.FilterSortControlPets([new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_DEFAULT,canvas.Translator.getText(282)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_TITLE,canvas.Translator.getText(283)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_LEVEL,canvas.Translator.getText(284)), new canvas.data.manor.DSortData(canvas.data.manor.DSortData.TYPE_COLOR,canvas.Translator.getText(273))],"",canvas.app.manor.model.localStorage.get("sortTypePets"),"1" == canvas.app.manor.model.localStorage.get("sortDirectionPets"),canvas.Translator.getText(281)),
    this.addChild(this.filterSortControl),
    this.filterSortControl.position.set(250, 175),
    this.combo = this.container.addChild(new canvas.app.manor.view.controls.elements.Combo(110,96)),
    this.combo.position.set(266, 79),
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.filterSortControl, this.filterChangeHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboSelectHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.listSelectHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.trainButton, this.trainClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.leftClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.rightClickHandler, this)
}
,
canvas.app.manor.view.controls.UsePets.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype),
canvas.app.manor.view.controls.UsePets.ON_PAGE = 5,
canvas.app.manor.view.controls.UsePets.prototype.update = function() {
    if (canvas.app.manor.view.UseBuilding.prototype.update.call(this),
    canvas.app.manor.model.petTrainingTypes) {
        var t;
        this.updateFilterAndSort(),
        this.testTraining(),
        this._numPages = this.sortedPetsData.length - canvas.app.manor.view.controls.UsePets.ON_PAGE + 1,
        this._numPages < 1 && (this._numPages = 1),
        this.curPage = this._curPage,
        0 < this.sortedPetsData.length ? this.container.interactiveChildren = !0 : this.container.interactiveChildren = !1,
        this.selectedPet = this.selectedPet;
        for (var e = 0, a = new Array, e = 0; e < 4; e++)
            null != (t = canvas.app.manor.model.petTrainingTypes[e]) && a.push({
                title: canvas.Functions.getNumberName(t.duration, canvas.Translator.getText(2023), canvas.Translator.getText(2024), canvas.Translator.getText(140)),
                value: e
            });
        this.combo.init(a),
        this.comboSelectHandler(),
        this.petView.pet && this.petView.pet.play()
    }
}
,
canvas.app.manor.view.controls.UsePets.prototype.updateFilterAndSort = function() {
    var t = canvas.app.manor.model;
    if (t.pets) {
        for (var e, a, s, i = new Array, n = t.pets.length, o = 0; o < n; o++)
            i.push(t.pets[o]);
        if (2 < this.filterSortControl.filterText.length)
            for (this.sortedPetsData = new Array,
            e = i.length,
            a = 0; a < e; a++)
                0 <= (s = i[a]).title.toLowerCase().search(this.filterSortControl.filterText.toLowerCase()) && this.sortedPetsData.push(s);
        else
            this.sortedPetsData = i;
        switch (this.filterSortControl.sortType) {
        case canvas.data.manor.DSortData.TYPE_DEFAULT:
            this.sortedPetsData.sort(this.sortOnReadyAndLevel.bind(this));
            break;
        case canvas.data.manor.DSortData.TYPE_TITLE:
            this.sortedPetsData.sort(this.sortOnTitle.bind(this));
            break;
        case canvas.data.manor.DSortData.TYPE_LEVEL:
            this.sortedPetsData.sort(this.sortOnLevel.bind(this));
            break;
        case canvas.data.manor.DSortData.TYPE_COLOR:
            this.sortedPetsData.sort(this.sortOnColor.bind(this));
            break;
        default:
            this.filterSortControl.sortDirection && this.sortedPetsData.reverse()
        }
    }
}
,
canvas.app.manor.view.controls.UsePets.prototype.sortOnReadyAndLevel = function(t, e) {
    var a = "" == t.error ? 1 : 0
      , s = "" == e.error ? 1 : 0;
    return s < a ? -1 : a < s ? 1 : t.level > e.level ? this.filterSortControl.sortDirection ? -1 : 1 : t.level < e.level ? this.filterSortControl.sortDirection ? 1 : -1 : 0
}
,
canvas.app.manor.view.controls.UsePets.prototype.sortOnLevel = function(t, e) {
    return t.level > e.level ? this.filterSortControl.sortDirection ? -1 : 1 : t.level < e.level ? this.filterSortControl.sortDirection ? 1 : -1 : 0
}
,
canvas.app.manor.view.controls.UsePets.prototype.sortOnTitle = function(t, e) {
    return t.title.toLowerCase() > e.title.toLowerCase() ? this.filterSortControl.sortDirection ? -1 : 1 : t.title.toLowerCase() < e.title.toLowerCase() ? this.filterSortControl.sortDirection ? 1 : -1 : 0
}
,
canvas.app.manor.view.controls.UsePets.prototype.sortOnColor = function(t, e) {
    return t.color > e.color ? this.filterSortControl.sortDirection ? -1 : 1 : t.color < e.color ? this.filterSortControl.sortDirection ? 1 : -1 : 0
}
,
canvas.app.manor.view.controls.UsePets.prototype.filterChangeHandler = function() {
    canvas.app.manor.model.localStorage.set("sortTypePets", this.filterSortControl.sortType),
    canvas.app.manor.model.localStorage.set("sortDirectionPets", this.filterSortControl.sortDirection ? "1" : "0"),
    this.update()
}
,
canvas.app.manor.view.controls.UsePets.prototype.testTraining = function() {
    this.isTrainingNow = !1;
    for (var t, e = canvas.app.manor.model.pets.length, a = 0; a < e; a++)
        if (0 < canvas.app.manor.model.pets[a].time) {
            this.isTrainingNow = !0;
            break
        }
    for (a = 0; a < canvas.app.manor.view.controls.UsePets.ON_PAGE; a++)
        t = this.pets[a],
        this.isTrainingNow && null != t.data && 0 == t.data.time ? t.alpha = .5 : t.alpha = 1;
    this.trainButton.enabled = !this.isTrainingNow
}
,
canvas.app.manor.view.controls.UsePets.prototype.comboSelectHandler = function() {
    var t = canvas.app.manor.model.petTrainingTypes[this.combo.selectedIndex];
    this.infoField.text = t ? canvas.Translator.getText(141) + ": " + t.feedCost + "   " + canvas.Translator.getText(142) + ": " + t.exp : ""
}
,
canvas.app.manor.view.controls.UsePets.prototype.listSelectHandler = function(t) {
    this.selectedPet = this.sortedPetsData.indexOf(t.params.data)
}
,
canvas.app.manor.view.controls.UsePets.prototype.trainClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PETS_ACTION, null, {
        object: {
            pet: this.sortedPetsData[this.selectedPet].id,
            type: this.combo.selectedIndex
        }
    })
}
,
canvas.app.manor.view.controls.UsePets.prototype.leftClickHandler = function() {
    this.curPage--,
    this.selectedPet = this.selectedPet
}
,
canvas.app.manor.view.controls.UsePets.prototype.rightClickHandler = function() {
    this.curPage++,
    this.selectedPet = this.selectedPet
}
,
canvas.app.manor.view.controls.UsePortal = function() {
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t,
            this.updateContent()
        }
    }),
    canvas.app.manor.view.UseBuilding.call(this),
    this.portalList = this.addChild(new canvas.app.manor.view.controls.elements.PortalList),
    this.portalList.position.set(15, 0);
    var t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_7"),48,0,48,0));
    t.width = 330,
    t.position.set(40, 115),
    this.statusField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,4594699,320,20,"center")),
    this.statusField.position.set(40, 120),
    this.disabledField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7092268,320,20,"center")),
    this.disabledField.position.set(40, 177),
    this.disabledField.text = canvas.Translator.getText(258),
    this.enabledContainer = this.addChild(new canvas.px.Container),
    this.enabledContainer.position.set(17, 143),
    (t = this.enabledContainer.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4))).width = 380,
    t.height = 60,
    this.search = this.enabledContainer.addChild(new canvas.app.manor.view.controls.elements.Input("left",!1,210,null,null,null,canvas.Translator.getText(259),!1)),
    this.search.position.set(8, 6),
    this.search.maxChars = 30,
    this.search.paddingLeft = 16,
    this.search.topField.x += 16,
    this.search.topField.font = canvas.Const.FONT_TAHOMA_11,
    (t = this.search.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "search_icon")))).position.set(2, 3),
    this.titleField = this.enabledContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7092268,320,20,"left")),
    this.titleField.position.set(5, 7),
    this.titleField.text = canvas.Translator.getText(260),
    this.combo = this.enabledContainer.addChild(new canvas.app.manor.view.controls.elements.Combo(210,96)),
    this.combo.position.set(8, 30),
    this.actionButton = this.enabledContainer.addChild(new canvas.app.view.MainButton),
    this.actionButton.position.set(225, 22),
    this.actionButton.setSize(150),
    this.cooldown = this.enabledContainer.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(200)),
    this.cooldown.position.set(8, 25),
    this.cooldown.setLabour(0, 0),
    this.cooldown.setTitle(),
    this.confirmField = this.enabledContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9788490,180,40,"left")),
    this.confirmField.position.set(5, 74),
    this.confirmField.text = canvas.Translator.getText(264),
    this.confirmCheck = this.enabledContainer.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "checker_back"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "checker_front")))),
    this.confirmCheck.position.set(190, 77),
    this.confirmCheck.checked = "1" != canvas.app.manor.model.localStorage.get("portalConfirm"),
    this.locationButton = this.enabledContainer.addChild(new canvas.app.view.MainButton(null,null,null,null,null,!0)),
    this.locationButton.position.set(225, 70),
    this.locationButton.setSize(150),
    canvas.EventManager.addEventListener(canvas.ui.Event.EVENT_CHANGE, this.portalList, this.changeHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.actionButton, this.actionClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.locationButton, this.locationClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.confirmCheck, this.checkClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboSelectHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.search, this.inputSearchHandler, this)
}
,
canvas.app.manor.view.controls.UsePortal.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype),
canvas.app.manor.view.controls.UsePortal.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.portalList.data = t.portals;
    var e, a = new Array, s = new Array;
    a.push({
        id: 0,
        title: canvas.Translator.getText(268),
        description: ""
    });
    for (var i = t.portalLocations.length, n = 0; n < i; n++)
        t.portalLocations[n] && s.push(t.portalLocations[n]);
    for (s.sort(function(t, e) {
        return t.name - e.name
    }),
    i = s.length,
    n = 0; n < i; n++)
        e = s[n],
        ("" == this.search.text || 0 <= e.title.toLowerCase().search(this.search.text.toLowerCase())) && a.push({
            id: e.id,
            title: e.title,
            description: e.error
        });
    this.combo.init(a),
    0 < t.portalJumpCost ? this.locationButton.setTitle(canvas.Translator.getText(265) + " " + t.portalJumpCost + " <img src='energy_icon' atlas='ui' yOffset='2'/>") : this.locationButton.setTitle(canvas.Translator.getText(270)),
    this.changeHandler(null)
}
,
canvas.app.manor.view.controls.UsePortal.prototype.updateContent = function() {
    var t, e = canvas.app.manor.model, a = e.portalRebindTime - Math.round(.001 * Date.now());
    if (this.disabledField.visible = !1,
    this.addChild(this.enabledContainer),
    this.actionButton.enabled = !0,
    this.data) {
        switch (t = e.portalLocations[this.data.locationID],
        this.data.status) {
        case 1:
            this.statusField.text = t ? t.title : "",
            this.actionButton.setTitle(canvas.Translator.getText(262));
            break;
        case -1:
            this.statusField.text = canvas.Translator.getText(255),
            this.actionButton.setTitle(canvas.Translator.getText(261));
            break;
        default:
            this.statusField.text = canvas.Translator.getText(256) + " " + this.data.level + " " + canvas.Translator.getText(249),
            this.disabledField.visible = !0,
            this.removeIfExist(this.enabledContainer)
        }
        this.cooldown.visible = this.titleField.visible = 0 < a && 1 == this.data.status,
        this.cooldown.visible ? (this.enabledContainer.removeIfExist(this.search),
        this.enabledContainer.removeIfExist(this.combo),
        this.actionButton.setTitle(canvas.Translator.getText(263)),
        this.updateTime()) : (this.enabledContainer.addChild(this.search),
        this.enabledContainer.addChild(this.combo),
        this.actionButton.enabled = 0 < this.combo.selectedIndex && !this.combo.selectedItem.description),
        this.locationButton.enabled = 1 == this.data.status
    }
}
,
canvas.app.manor.view.controls.UsePortal.prototype.select = function(t) {
    this.portalList.select(t)
}
,
canvas.app.manor.view.controls.UsePortal.prototype.changeHandler = function() {
    this.data = this.portalList.selectedItem
}
,
canvas.app.manor.view.controls.UsePortal.prototype.updateTime = function() {
    var t = canvas.app.manor.model
      , e = t.portalRebindTime - Math.round(.001 * Date.now());
    0 < e ? (this.cooldown.setLabour(e, t.portalRebindCooldown),
    this.cooldown.setTitle(canvas.Functions.formatDate(1e3 * e, "00", 2, !0))) : this.cooldown.visible && this.updateContent()
}
,
canvas.app.manor.view.controls.UsePortal.prototype.actionClickHandler = function() {
    this.cooldown.visible ? canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_PORTAL_RESET) : canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_ACTION, null, {
        object: {
            building_action: "bind",
            area_id: this.combo.selectedItem.id,
            number: this.data.level
        }
    })
}
,
canvas.app.manor.view.controls.UsePortal.prototype.locationClickHandler = function() {
    var t = canvas.app.manor.model;
    this.confirmCheck.checked ? canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(269) + " <b>" + this.statusField.text + "</b>?<br/>" + canvas.Translator.getText(271) + " " + t.portalJumpCost + " <img src='energy_icon' atlas='ui' yOffset='2'/>",
        object: {
            name: canvas.app.manor.Event.USE_PORTAL_ACTION,
            params: {
                object: {
                    building_action: "teleport",
                    number: this.data.level
                }
            }
        }
    }) : canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_ACTION, null, {
        object: {
            building_action: "teleport",
            number: this.data.level
        }
    })
}
,
canvas.app.manor.view.controls.UsePortal.prototype.checkClickHandler = function() {
    canvas.app.manor.model.localStorage.set("portalConfirm", this.confirmCheck.checked ? "" : "1")
}
,
canvas.app.manor.view.controls.UsePortal.prototype.comboSelectHandler = function() {
    this.updateContent()
}
,
canvas.app.manor.view.controls.UsePortal.prototype.inputSearchHandler = function() {
    this.update(),
    this.combo.open()
}
,
canvas.app.manor.view.controls.UsePortal.prototype.activate = function() {
    this.isActive = !0,
    this.search.input = canvas.app.manor.view.input6
}
,
canvas.app.manor.view.controls.UsePortal.prototype.deactivate = function() {
    this.isActive = !1,
    this.search.input = null
}
,
canvas.app.manor.view.controls.UseWorkshop = function() {
    this._favoriteEnabled = !1,
    Object.defineProperty(this, "favoriteEnabled", {
        get: function() {
            return this._favoriteEnabled
        },
        set: function(t) {
            this._favoriteEnabled = t,
            this.favoriteButton.baseTexture = this.favoriteButton.sprite.texture = canvas.ResourceLoader.getImage("ui", "favorite" + (t ? "" : "_disabled")),
            this.favoriteHint.update(canvas.Translator.getText(t ? 245 : 244)),
            this.update()
        }
    }),
    canvas.app.manor.view.UseBuilding.call(this),
    this.lastComboSelected = "",
    this.lastSearchValue = "";
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tab_single")));
    t.position.set(0, 97),
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.HORIZONTAL,!1,!1,null,!0)),
    this.pager.setSize(395, 20),
    this.pager.position.set(10, 160),
    (t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4))).width = 384,
    t.height = 80,
    t.position.set(15, 30),
    (t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tab_white"),37,0,37,0))).width = 220,
    t.position.set(97, 97);
    var e, a = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7092753,204,20,"center"));
    a.position.set(107, 105),
    a.text = canvas.Translator.getText(144),
    (a = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,132,18,"center"))).position.set(143, 10),
    a.text = canvas.Translator.getText(145),
    this.recipeItem = this.addChild(new canvas.app.manor.view.controls.elements.Item),
    this.recipeItem.position.set(20, 35),
    this.recipeItem.buttonMode = !1,
    this.input = this.addChild(new canvas.app.manor.view.controls.elements.Input("center",!1,40,null,null,null,null,!0)),
    this.input.position.set(100, 72),
    this.input.maxChars = 4,
    this.input.onlyNumbers = !0,
    this.input.leftArrow.x += 6,
    this.input.rightArrow.x -= 4,
    this.search = this.addChild(new canvas.app.manor.view.controls.elements.Input("left",!1,112,null,null,null,canvas.Translator.getText(227),!1)),
    this.search.position.set(15, 7),
    this.search.maxChars = 30,
    this.search.paddingLeft = 16,
    this.search.topField.x += 16,
    this.search.topField.font = canvas.Const.FONT_TAHOMA_11,
    (t = this.search.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "search_icon")))).position.set(2, 3),
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1)),
    this.list.position.set(34, 135),
    this.list.setSize(350, 90),
    this.list._paddingH = -1;
    for (var s = 0; s < canvas.app.manor.view.controls.UseWorkshop.ON_PAGE; s++)
        (e = new canvas.app.manor.view.controls.elements.Item).buttonMode = !1,
        this.list.add(e, !1);
    this.list.update(),
    this.progress = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(130)),
    this.progress.position.set(272, 0),
    this.progress.setLabour(0, 0),
    this.progress.setTitle(),
    this.maxButton = this.addChild(new canvas.app.view.MainButton),
    this.maxButton.position.set(295, 65),
    this.maxButton.setSize(100),
    this.maxButton.setTitle("MAX"),
    this.goButton = this.addChild(new canvas.app.view.MainButton),
    this.goButton.position.set(134, 220),
    this.goButton.setTitle(canvas.Translator.getText(146)),
    this.goButton.enabled = !1,
    this.favoriteButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "favorite"))),
    this.favoriteButton.position.set(375, 41),
    this.favoriteHint = new canvas.app.view.MappingHint(canvas.Translator.getText(245)),
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.favoriteButton,
        params: new canvas.utils.HintParams(this.favoriteHint)
    }),
    this.favoriteEnabled = !1,
    this.combo = this.addChild(new canvas.app.manor.view.controls.elements.Combo(275,130)),
    this.combo.position.set(95, 38),
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_OPEN, this.combo, this.comboOpenHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_CLOSE, this.combo, this.comboCloseHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.inputHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.search, this.inputSearchHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.maxButton, this.maxClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.goButton, this.goClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.favoriteButton, this.favoriteClickHandler, this)
}
,
canvas.app.manor.view.controls.UseWorkshop.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype),
canvas.app.manor.view.controls.UseWorkshop.ON_PAGE = 5,
canvas.app.manor.view.controls.UseWorkshop.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    if (t.workShopReceptsArray) {
        var e, a = new Array;
        a.push({
            id: 0,
            title: canvas.Translator.getText(147)
        });
        for (var s = t.workShopReceptsArray.length, i = 0; i < s; i++)
            e = t.workShopReceptsArray[i],
            (!this.favoriteEnabled || e.favorite) && 0 <= e.title.toLowerCase().search(this.search.text.toLowerCase()) && a.push({
                id: e.id,
                title: e.title
            });
        this.combo.init(a),
        this.combo.setSelectedItem("id", this.lastComboSelected),
        this.comboHandler()
    }
}
,
canvas.app.manor.view.controls.UseWorkshop.prototype.comboHandler = function() {
    var t, e, a, s = canvas.app.manor.model;
    for (a in this.lastComboSelected = this.combo.selectedItem.id,
    s.workShopSelectedRecipe = null,
    this.recipeItem.data = null,
    s.workShopRecepts)
        if ((t = s.workShopRecepts[a]).id == this.combo.selectedItem.id) {
            s.workShopSelectedRecipe = t,
            (e = new canvas.data.manor.DItem).image = t.image,
            e.title = t.title,
            e.aid = t.resultAid,
            this.recipeItem.data = e;
            break
        }
    this.updatePager()
}
,
canvas.app.manor.view.controls.UseWorkshop.prototype.updatePager = function() {
    var t = canvas.app.manor.model;
    null != t.workShopSelectedRecipe && (this.pager.max = t.workShopSelectedRecipe.items.length - canvas.app.manor.view.controls.UseWorkshop.ON_PAGE,
    this.pager.current = 0),
    this.pagerHandler(null)
}
,
canvas.app.manor.view.controls.UseWorkshop.prototype.pagerHandler = function() {
    for (var t, e, a = canvas.app.manor.model, s = 0, i = !0, n = this.pager.current; n < this.pager.current + canvas.app.manor.view.controls.UseWorkshop.ON_PAGE; n++)
        t = this.list.items[s],
        null != a.workShopSelectedRecipe ? (null != (e = a.workShopSelectedRecipe.items[n]) ? ((e = e.clone()).count = e.count * parseInt(this.input.text),
        null != a.workShopBugArtefacts[e.id] && a.workShopBugArtefacts[e.id].count >= e.count ? t.setColor(1) : (t.setColor(2),
        i = !1)) : t.setColor(0),
        t.data = e) : (t.data = null,
        t.setColor(0)),
        s++;
    null != a.workShopSelectedRecipe ? (this.progress.setLabour(Math.round(a.workShopSelectedRecipe.duration * parseInt(this.input.text) * a.workShopReduceKoef), a.workShopTimeLeft),
    this.progress.tf.text = canvas.Functions.formatDate(Math.round(a.workShopSelectedRecipe.duration * parseInt(this.input.text) * a.workShopReduceKoef * 1e3), "00", 2, !0) + " / " + (0 == a.workShopTimeLeft ? "0" : canvas.Functions.formatDate(1e3 * a.workShopTimeLeft, "00", 2, !0)),
    this.progress.backImage.texture = canvas.ResourceLoader.getImage("ui", "labour4_progress" + (Math.round(a.workShopSelectedRecipe.duration * parseInt(this.input.text) * a.workShopReduceKoef) <= a.workShopTimeLeft ? "" : "_red"))) : (this.progress.setLabour(0, a.workShopTimeLeft),
    this.progress.tf.text = "",
    this.progress.backImage.texture = canvas.ResourceLoader.getImage("ui", "labour4_progress")),
    this.goButton.enabled = null != a.workShopSelectedRecipe && (!(Math.round(a.workShopSelectedRecipe.duration * parseInt(this.input.text) * a.workShopReduceKoef) > a.workShopTimeLeft) && i),
    null != this.recipeItem.data && null != a.workShopSelectedRecipe && (this.recipeItem.data.count = parseInt(this.input.text.toString()) * a.workShopSelectedRecipe.resultCount,
    this.recipeItem.data = this.recipeItem.data)
}
,
canvas.app.manor.view.controls.UseWorkshop.prototype.inputHandler = function() {
    "" == this.input.text || parseInt(this.input.text) < 2 ? this.input.text = "1" : 9999 < parseInt(this.input.text) && (this.input.text = "9999"),
    this.updatePager()
}
,
canvas.app.manor.view.controls.UseWorkshop.prototype.inputSearchHandler = function() {
    this.lastSearchValue != this.search.text && (this.lastSearchValue = this.search.text,
    this.update(),
    this.combo.open())
}
,
canvas.app.manor.view.controls.UseWorkshop.prototype.maxClickHandler = function() {
    if (null != canvas.app.manor.model.workShopSelectedRecipe) {
        for (this.input.text = "0",
        this.inputHandler(); this.goButton.enabled; )
            this.input.text = (parseInt(this.input.text) + 1).toString(),
            this.inputHandler();
        this.input.text = (parseInt(this.input.text) - 1).toString(),
        this.inputHandler(null)
    }
}
,
canvas.app.manor.view.controls.UseWorkshop.prototype.goClickHandler = function() {
    var t = canvas.app.manor.model;
    this.lastComboSelected = "",
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_WORKSHOP_ACTION, null, {
        object: {
            building_action: "craft",
            recipe_id: null == t.workShopSelectedRecipe ? "" : t.workShopSelectedRecipe.id,
            amount: this.input.text
        }
    }),
    this.input.text = "1"
}
,
canvas.app.manor.view.controls.UseWorkshop.prototype.favoriteClickHandler = function() {
    this.favoriteEnabled = !this.favoriteEnabled
}
,
canvas.app.manor.view.controls.UseWorkshop.prototype.comboOpenHandler = function() {
    this.input.input = null
}
,
canvas.app.manor.view.controls.UseWorkshop.prototype.comboCloseHandler = function() {
    this.input.input = canvas.app.manor.view.input5,
    this.inputHandler()
}
,
canvas.app.manor.view.controls.UseWorkshop2 = function() {
    var t;
    canvas.app.manor.view.UseBuilding.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tab_single"))).position.set(0, 97),
    this.pager = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.HORIZONTAL,!1,!1,null,!0)),
    this.pager.setSize(395, 20),
    this.pager.position.set(10, 40),
    this.title = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,7092753,204,20,"center")),
    this.title.position.set(107, 105),
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1)),
    this.list.position.set(34, 15),
    this.list.setSize(350, 80),
    this.list._paddingH = -1;
    for (var e = 0; e < canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE; e++)
        (t = new canvas.app.manor.view.controls.elements.Item(!1)).click = this.selectHandler.bind(this),
        t.buttonMode = !1,
        this.list.add(t, !1);
    this.list.update(),
    this.hint = new canvas.app.view.MappingHint(canvas.Translator.getText(192)),
    this.list2 = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1)),
    this.list2.position.set(20, 135),
    this.list2.setSize(350, 120);
    for (e = this.list2._paddingV = 0; e < canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE2; e++)
        t = new canvas.app.manor.view.controls.elements.TaskItem,
        this.list2.add(t, !1);
    this.list2.update(),
    this.pager2 = this.addChild(new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL,!0,!0,this.list2)),
    this.pager2.setSize(20, 120),
    this.pager2.position.set(375, 135),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager2, this.pager2Handler, this),
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.selectHandler, this)
}
,
canvas.app.manor.view.controls.UseWorkshop2.prototype = Object.create(canvas.app.manor.view.UseBuilding.prototype),
canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE = 5,
canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE2 = 4,
canvas.app.manor.view.controls.UseWorkshop2.prototype.update = function() {
    canvas.app.manor.view.UseBuilding.prototype.update.call(this);
    var t = canvas.app.manor.model;
    this.pager.max = t.workShopRequestsCompleted.length - canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE,
    this.pager.current = 0,
    this.pagerHandler(),
    this.updateRequests(),
    this.pager2.current = 0,
    this.title.text = canvas.Translator.getText(191) + " <b>(" + t.workShopRequests.length + ")</b>"
}
,
canvas.app.manor.view.controls.UseWorkshop2.prototype.updateRequests = function() {
    var t = canvas.app.manor.model.workShopRequests.length - canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE2;
    t != this.pager2.max && (this.pager2.max = t),
    this.pager2Handler()
}
,
canvas.app.manor.view.controls.UseWorkshop2.prototype.pagerHandler = function() {
    for (var t, e, a, s, i = canvas.app.manor.model, n = 0, o = this.pager.current; o < this.pager.current + canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE; o++)
        (t = this.list.items[n++]).data = null,
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
            target: t
        }),
        null != (a = i.workShopRequestsCompleted[o]) && null != (s = i.workShopRecepts[a.recipe]) && ((e = new canvas.data.manor.DItem).image = s.image,
        e.title = s.title,
        e.count = a.count * s.resultCount,
        e.id = a.id,
        t.data = e,
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
            target: t,
            params: new canvas.utils.HintParams(this.hint)
        }))
}
,
canvas.app.manor.view.controls.UseWorkshop2.prototype.pager2Handler = function() {
    for (var t, e, a = canvas.app.manor.model, s = 0, i = this.pager2.current; i < this.pager2.current + canvas.app.manor.view.controls.UseWorkshop2.ON_PAGE2; i++)
        t = this.list2.items[s++],
        e = a.workShopRequests[i],
        t.name = (i + 1).toString(),
        t.data = e
}
,
canvas.app.manor.view.controls.UseWorkshop2.prototype.selectHandler = function(t) {
    t = t.currentTarget;
    t.data && canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_WORKSHOP_ACTION, null, {
        object: {
            building_action: "pick",
            craft_request_id: t.data.id
        }
    })
}
,
canvas.app.manor.view.controls.WorkWin = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 327, 307);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7026733,275,20,"center");
    t.text = canvas.Translator.getText(182) + ":",
    t.position.set(26, 51),
    this.addChild(t),
    (t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7026733,128,20,"right")).text = canvas.Translator.getText(183) + ":",
    t.position.set(26, 183),
    this.addChild(t),
    this.labourInput = new canvas.app.manor.view.controls.elements.LabourInput,
    this.addChild(this.labourInput),
    this.labourInput.position.set(75, 85),
    this.workButton = new canvas.app.manor.view.controls.elements.ButtonImage(canvas.Translator.getText(151)),
    this.addChild(this.workButton),
    this.workButton.position.set(Math.round(.5 * (this.width - this.workButton.width)), 252),
    this.coins = new canvas.app.view.Money,
    this.addChild(this.coins),
    this.coins.position.set(158, 183),
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.labourInput, this.changeHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.workButton, this.workHandler, this),
    canvas.app.manor.model.mapMode && this.position.set(90, 130)
}
,
canvas.app.manor.view.controls.WorkWin.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.manor.view.controls.WorkWin.prototype.update = function(t) {
    null == t && (t = 0);
    var e = canvas.app.manor.model
      , t = e.labourRequests[e.selectedRequest];
    e.selectedRequestID = t.id,
    null != t ? this.header.text = canvas.Translator.getText(184) + " " + t.user.login + " [" + t.user.level + "]" : header.text = "",
    this.labourInput.update(),
    this.labourInput.maxValue = Math.min(e.user.labour, t.labour),
    this.coins.money = t.price * parseInt(this.labourInput.input.input.text.toString()) * 100,
    this.workButton.enabled = this.labourInput.testRequires()
}
,
canvas.app.manor.view.controls.WorkWin.prototype.show = function(t) {
    this.labourInput.input.input = canvas.app.manor.view.input,
    this.labourInput.input.input.text = 0,
    this.labourInput.changeHandler(),
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this, t)
}
,
canvas.app.manor.view.controls.WorkWin.prototype.hide = function(t) {
    this.labourInput.input.input = null,
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, t)
}
,
canvas.app.manor.view.controls.WorkWin.prototype.activate = function(t) {
    this.labourInput.input.input = canvas.app.manor.view.input,
    canvas.app.manor.view.WindowManorBase.prototype.activate.call(this, t)
}
,
canvas.app.manor.view.controls.WorkWin.prototype.deactivate = function(t) {
    this.labourInput.input.input = null,
    canvas.app.manor.view.WindowManorBase.prototype.deactivate.call(this, t)
}
,
canvas.app.manor.view.controls.WorkWin.prototype.changeHandler = function() {
    this.update()
}
,
canvas.app.manor.view.controls.WorkWin.prototype.workHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.WORK_USE, null, this.labourInput.input.text),
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this)
}
,
canvas.app.manor.view.controls.WorkWin.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.labourInput, this.changeHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.workButton, this.workHandler, this),
    canvas.px.Container.prototype.destroy.call(this, {
        children: !0
    })
}
,
canvas.app.manor.view.controls.camp.Equipment = function() {
    canvas.px.Container.call(this),
    this.inited = this.visible = !1
}
,
canvas.app.manor.view.controls.camp.Equipment.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.camp.Equipment.VISIBLE_LINES = 5,
canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE = 5,
canvas.app.manor.view.controls.camp.Equipment.prototype.init = function() {
    if (!this.inited) {
        this.inited = this.visible = !0;
        var t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
        t.width = 400,
        t.height = 190,
        t.y = 22,
        (t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4))).width = 400,
        t.height = 190,
        t.y = 218,
        (t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4))).width = 400,
        t.height = 386,
        t.position.set(412, 22),
        this.title1 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,200,20,"right")),
        this.title1.position.set(280, -3),
        this.title1.text = canvas.Translator.getText(299) + ":",
        this.image1 = this.addChild(new canvas.ui.Image(canvas.app.manor.model.campData.fragmentItem.image)),
        this.image1.position.set(492, -8),
        this.image1.scale.set(.4, .4),
        this.title2 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left")),
        this.title2.position.set(519, -3),
        this.title3 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,400,20,"center")),
        this.title3.position.set(0, 72),
        this.title3.text = canvas.Translator.getText(324),
        this.title4 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"right")),
        this.title4.position.set(82, 112),
        this.title4.text = canvas.Translator.getText(121) + ":",
        this.image2 = this.addChild(new canvas.ui.Image(canvas.app.manor.model.campData.fragmentItem.image)),
        this.image2.position.set(192, 108),
        this.image2.scale.set(.4, .4),
        this.title5 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left")),
        this.title5.position.set(218, 112),
        this.button1 = this.addChild(new canvas.app.view.MainButton),
        this.button1.position.set(112, 136),
        this.button1.setTitle(canvas.Translator.getText(2034)),
        this.button1.setSize(180),
        this.title6 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,400,20,"center")),
        this.title6.position.set(-30, 266),
        this.title6.text = canvas.Translator.getText(325),
        this.input = this.addChild(new canvas.app.manor.view.controls.elements.Input("center",!0,41,null,null,null,null,!0)),
        this.input.leftArrow.x += 6,
        this.input.rightArrow.x -= 4,
        this.input.onlyNumbers = !0,
        this.input.maxChars = 2,
        this.input.position.set(this.title6._width - Math.round(.5 * (this.title6._width - this.title6.textWidth)) - 10, 264),
        this.title7 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"right")),
        this.title7.position.set(82, 308),
        this.title7.text = canvas.Translator.getText(121) + ":",
        this.image3 = this.addChild(new canvas.ui.Image(canvas.app.manor.model.campData.fragmentItem.image)),
        this.image3.position.set(192, 304),
        this.image3.scale.set(.4, .4),
        this.title8 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left")),
        this.title8.position.set(218, 308),
        this.button2 = this.addChild(new canvas.app.view.MainButton),
        this.button2.position.set(112, 332),
        this.button2.setTitle(canvas.Translator.getText(2034)),
        this.button2.setSize(180),
        this.title9 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,400,20,"center")),
        this.title9.position.set(411, 30),
        this.title9.text = canvas.Translator.getText(326),
        this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE)),
        this.list._paddingV = this.list._paddingH = 0,
        this.list.position.set(435, 50),
        this.list.setSize(350, 350);
        for (var e, a = canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE * canvas.app.manor.view.controls.camp.Equipment.VISIBLE_LINES, s = 0; s < a; s++)
            e = new canvas.app.manor.view.controls.elements.Item(!1,!0,null,null,null,null,!0),
            this.list.add(e, !1),
            e.name = "item" + s;
        this.list.update(),
        this.pager = new canvas.app.manor.view.controls.elements.PagerSimple(canvas.ui.ScrollType.VERTICAL,!0,!0,this.list.container,2),
        this.pager.position.set(830, 50),
        this.pager.setSize(20, 350),
        this.image1.mouseover = this.image2.mouseover = this.image3.mouseover = this.imageOverHandler.bind(this),
        this.image1.mouseout = this.image2.mouseout = this.image3.mouseout = this.imageOutHandler.bind(this),
        canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this),
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button1, this.button1ClickHandler, this),
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button2, this.button2ClickHandler, this),
        canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.pager, this.pagerHandler, this),
        this.interactive = !0,
        this.click = this.clickHandler.bind(this)
    }
}
,
canvas.app.manor.view.controls.camp.Equipment.prototype.updateScroll = function() {
    var t = canvas.app.manor.model.campData.forgeItems.length;
    this.pager.max = t <= canvas.app.manor.view.controls.camp.Equipment.VISIBLE_LINES * canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE ? 0 : Math.ceil((t - canvas.app.manor.view.controls.camp.Equipment.VISIBLE_LINES * canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE) / canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE),
    this.pagerHandler(),
    this.pager.isDisabled() ? this.removeIfExist(this.pager) : this.addChild(this.pager)
}
,
canvas.app.manor.view.controls.camp.Equipment.prototype.update = function() {
    var t = canvas.app.manor.model;
    t.campData.forgeItems && (this.init(),
    this.updateScroll(),
    this.title2.text = t.campData.fragmentItem.count.toString(),
    this.title5.text = t.campData.forgeLevels[0] + " " + canvas.Translator.getText(2022),
    t = t.campData.fragmentItem.count >= t.campData.forgeLevels[0],
    this.button1.enabled = t,
    this.title5.color = t ? 9526348 : 16711680,
    this.changeHandler())
}
,
canvas.app.manor.view.controls.camp.Equipment.prototype.updateData = function() {
    for (var t = this.list.items.length, e = 0; e < t; e++)
        this.list.items[e].data = canvas.app.manor.model.campData.forgeItems[e + this.pager.current * canvas.app.manor.view.controls.camp.Equipment.LINE_SIZE]
}
,
canvas.app.manor.view.controls.camp.Equipment.prototype.button1ClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, {
        object: {
            building_action: "buildItemRandom"
        }
    }),
    this.button1.enabled = this.button2.enabled = !1
}
,
canvas.app.manor.view.controls.camp.Equipment.prototype.button2ClickHandler = function() {
    canvas.app.manor.model.campData.currentForgeLevel = parseInt(this.input.text),
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, {
        object: {
            building_action: "buildItemLevel",
            level: canvas.app.manor.model.campData.currentForgeLevel
        }
    }),
    this.button1.enabled = this.button2.enabled = !1
}
,
canvas.app.manor.view.controls.camp.Equipment.prototype.clickHandler = function(t) {
    item = canvas.Functions.findParentByName("item", t.target),
    item && item.data && (canvas.app.manor.model.campData.currentDestructItemAid = item.data.aid,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(334),
        object: {
            name: canvas.app.manor.Event.USE_HUNT_CAMP_ACTION,
            params: {
                object: {
                    building_action: "destructItem",
                    artikul_id: item.data.aid
                }
            }
        }
    }))
}
,
canvas.app.manor.view.controls.camp.Equipment.prototype.pagerHandler = function() {
    this.updateData()
}
,
canvas.app.manor.view.controls.camp.Equipment.prototype.changeHandler = function() {
    var t = canvas.app.manor.model
      , e = parseInt(this.input.text)
      , a = t.campData.forgeLevels[e];
    if (0 < e && !a)
        return this.input.text = (t.campData.forgeLevels.length - 1).toString(),
        void this.changeHandler();
    if (0 == e)
        return this.input.text = "1",
        void this.changeHandler();
    t = t.campData.fragmentItem.count >= a;
    this.button2.enabled = 0 < parseInt(this.input.text) && a && t,
    this.title8.text = (a || 0) + " " + canvas.Translator.getText(2022),
    this.title8.color = t ? 9526348 : 16711680
}
,
canvas.app.manor.view.controls.camp.Equipment.prototype.imageOverHandler = function() {
    artifactAltSimple(canvas.app.manor.model.campData.fragmentItem.id, 2)
}
,
canvas.app.manor.view.controls.camp.Equipment.prototype.imageOutHandler = function() {
    artifactAltSimple(canvas.app.manor.model.campData.fragmentItem.id, 0)
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer = function(t) {
    this._pet = null,
    Object.defineProperty(this, "pet", {
        get: function() {
            return this._pet
        },
        set: function(t) {
            this._pet = t,
            this.update(!1)
        }
    }),
    canvas.ui.ListRenderer.call(this, null, 814, 122),
    this.state = 0,
    this.index = t,
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4)),
    this.back.width = this._width,
    this.back.height = this._height,
    this.petView = this.addChild(new canvas.app.manor.view.controls.camp.PetView(!0)),
    this.petView.position.set(26, 8),
    this.title3 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,150,20,"left")),
    this.title3.position.set(150, 10),
    this.title3.text = canvas.Translator.getText(296),
    this.title4 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,150,20,"left")),
    this.title4.position.set(150, 60),
    this.title4.text = canvas.Translator.getText(297),
    this.combo2 = this.addChild(new canvas.app.manor.view.controls.elements.Combo(226,110)),
    this.combo2.position.set(150, 75),
    this.combo2.list.scroll.step = 14,
    this.combo1 = this.addChild(new canvas.app.manor.view.controls.elements.Combo(226,80)),
    this.combo1.position.set(150, 25),
    this.combo1.init([{
        title: canvas.Translator.getText(328),
        type: 1
    }, {
        title: canvas.Translator.getText(329),
        type: 2
    }, {
        title: canvas.Translator.getText(330),
        type: 3
    }]),
    this.item2 = this.addChild(new canvas.app.manor.view.controls.elements.Item(!1,!0,"","",!1)),
    this.item2.position.set(415, 26),
    this.title5 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,124,20,"center")),
    this.title5.position.set(389, 97),
    this.title6 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left")),
    this.title6.position.set(525, 8),
    this.title6.text = canvas.Translator.getText(121) + ":",
    this.title7 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left")),
    this.title7.position.set(555, 32),
    this.title8 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left")),
    this.title8.position.set(555, 63),
    this.button = this.addChild(new canvas.app.view.MainButton),
    this.button.position.set(650, 56),
    this.button.setTitle(canvas.Translator.getText(2033)),
    this.progress = this.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(131)),
    this.progress.position.set(660, 22),
    this.progress.setLabour(0, 0),
    this.image1 = this.addChild(new canvas.ui.Image),
    this.image1.position.set(525, 27),
    this.image1.interactive = !0,
    this.image1.scale.set(.4, .4),
    this.image2 = this.addChild(new canvas.ui.Image),
    this.image2.position.set(525, 58),
    this.image2.interactive = !0,
    this.image2.scale.set(.4, .4),
    this.state = 0,
    this.clear(),
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo1, this.combo1SelectHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo2, this.combo2SelectHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this),
    this.petView.item.click = this.petClickHandler.bind(this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.petView.crossButton, this.petCrossClickHandler, this),
    this.image1.mouseover = this.image1OverHandler.bind(this),
    this.image1.mouseout = this.image1OutHandler.bind(this),
    this.image2.mouseover = this.image2OverHandler.bind(this),
    this.image2.mouseout = this.image2OutHandler.bind(this)
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.update = function(t) {
    var e = canvas.app.manor.model;
    null == t && (t = !0),
    t && this.pet && !this.pet.mission && (this.pet = null);
    var a, s, i, n = new Array, o = this.combo1.selectedItem, t = this.combo2.selectedItem;
    if (this.pet && this.pet.mission) {
        if (this.combo1.setSelectedItem("type", this.pet.mission.type),
        o = this.combo1.selectedItem,
        a = e.campData.missions[this.pet.mission.type])
            for (i in a.objects)
                if (s = parseInt(i),
                this.pet.mission.objectId == s && e.campData.artifacts[s]) {
                    n.push({
                        title: e.campData.artifacts[s].title,
                        id: e.campData.artifacts[s].aid
                    });
                    break
                }
    } else if (a = e.campData.missions[parseInt(this.combo1.selectedItem.type)])
        for (i in a.objects)
            s = parseInt(i),
            e.campData.artifacts[s] && n.push({
                title: e.campData.artifacts[s].title,
                id: e.campData.artifacts[s].aid
            });
    0 < n.length ? (n.sort(this.sortOnTitle),
    this.combo2.init(n)) : this.combo2.init([{
        title: "",
        id: 0
    }]),
    o && this.combo1.setSelectedItem("type", o.type),
    t && this.combo2.setSelectedItem("id", t.id),
    this.updateInfo()
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.sortOnTitle = function(t, e) {
    return t.title.toLowerCase() > e.title.toLowerCase() ? 1 : t.title.toLowerCase() < e.title.toLowerCase() ? -1 : 0
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.updateInfo = function() {
    var t = canvas.app.manor.model
      , e = t.campData.missions[parseInt(this.combo1.selectedItem.type)];
    this.image1.clear(),
    this.image2.clear(),
    e ? (this.petView.index = parseInt(this.combo1.selectedItem.type),
    this.pet && this.combo2.selectedItem && this.combo2.selectedItem.id ? (this.petView.data = this.pet,
    this.tmpPrice1 = Math.ceil(e.price1Amount * Math.max(.5, 1 - this.pet.getSkill(canvas.data.manor.DCampData.PET_A_DISCIPLINE) / 1e3)),
    this.title7.text = this.tmpPrice1 + " " + canvas.Translator.getText(2022),
    this.title7.color = t.campData.artifacts[e.price1Id].count < this.tmpPrice1 ? 16711680 : 9526348,
    this.image1.setImage(t.campData.artifacts[e.price1Id].image),
    this.tmpPrice2 = Math.ceil(e.price2Amount * Math.max(.5, 1 - this.pet.getSkill(canvas.data.manor.DCampData.PET_A_DISCIPLINE) / 1e3)),
    this.title8.text = this.tmpPrice2 + " " + canvas.Translator.getText(2022),
    0 < e.price2Amount ? this.title8.color = t.campData.artifacts[e.price2Id].count < this.tmpPrice2 ? 16711680 : 9526348 : this.title8.color = 9526348,
    0 < e.price2Amount && this.image2.setImage(t.campData.artifacts[e.price2Id].image),
    this.title5.text = Math.floor(.8 * this.pet.getSkillByIndex(parseInt(this.combo1.selectedItem.type)) / e.objects[this.combo2.selectedItem.id]) + "-" + Math.floor(1.2 * this.pet.getSkillByIndex(parseInt(this.combo1.selectedItem.type)) / e.objects[this.combo2.selectedItem.id]) + " " + canvas.Translator.getText(2022),
    this.tmpTime = Math.ceil(e.duration * Math.max(.5, 1 - this.pet.getSkill(canvas.data.manor.DCampData.PET_A_STEALTH) / 1e3)),
    this.updateTime()) : (this.clear(),
    this.petView.title1.text = canvas.Translator.getText(338) + ":",
    this.petView.updateTitle(!0)),
    this.item2.data = t.campData.artifacts[parseInt(this.combo2.selectedItem.id)],
    this.item2.buttonMode = !1) : (this.item2.data = null,
    this.clear()),
    this.updateButton()
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.updateButton = function() {
    var t, e = canvas.app.manor.model;
    this.pet && this.pet.mission ? (this.combo1.enabled = !1,
    this.combo2.enabled = !1,
    this.petView.interactiveChildren = !1,
    this.button.enabled = this.pet.missionIsComplete(),
    this.button.setTitle(canvas.Translator.getText(192))) : (this.combo1.enabled = !0,
    this.combo2.enabled = !0,
    this.petView.interactiveChildren = !0,
    t = e.campData.missions[parseInt(this.combo1.selectedItem.type)],
    this.button.enabled = !1,
    this.button.setTitle(canvas.Translator.getText(2033)),
    t && this.pet && e.campData.artifacts[t.price1Id].count >= this.tmpPrice1 && (0 == t.price2Id || e.campData.artifacts[t.price2Id].count >= this.tmpPrice2) && 0 < Math.floor(1.2 * this.pet.getSkillByIndex(parseInt(this.combo1.selectedItem.type)) / t.objects[this.combo2.selectedItem.id]) && (this.button.enabled = !0))
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.updateTime = function() {
    var t = canvas.app.manor.model.serverTime.getTime();
    this.pet && this.pet.mission ? t >= this.pet.mission.dtime ? 2 != this.state && (this.state = 2,
    this.progress.setLabour(1, 1),
    this.progress.setTitle(),
    this.updateInfo()) : (this.progress.setLabour(t - this.pet.mission.stime, this.pet.mission.dtime - this.pet.mission.stime),
    this.progress.setTitle(t >= this.pet.mission.dtime ? "" : canvas.Functions.formatDate(1e3 * (this.pet.mission.dtime - t), "00", 3, !1, !0)),
    1 != this.state && (this.state = 1)) : (0 != this.state && (this.state = 0),
    this.tmpTime && (this.progress.setLabour(0, 0),
    this.progress.setTitle(canvas.Functions.formatDate(1e3 * this.tmpTime, "00", 3, !1, !0))))
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.clear = function() {
    this.tmpTime = 0,
    this.title7.text = "",
    this.title8.text = "",
    this.title5.text = "",
    this.progress.setLabour(0, 0),
    this.progress.setTitle(),
    this.petView.data = null
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.combo1SelectHandler = function() {
    this.update(!1)
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.combo2SelectHandler = function() {
    this.updateInfo()
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.petClickHandler = function() {
    0 < parseInt(this.combo2.selectedItem.id) && canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CHOOSE_PET, null, {
        object: {
            index: this.index,
            excludePets: this.pet ? [this.pet.id] : null
        }
    })
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.petCrossClickHandler = function() {
    canvas.utils.HintManager.instance.hide(),
    this.pet = null,
    this.update()
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.image1OverHandler = function(t) {
    0 != t && (t = 2);
    var e = canvas.app.manor.model.campData.missions[parseInt(this.combo1.selectedItem.type)];
    e && e.price1Id && artifactAltSimple(canvas.app.manor.model.campData.artifacts[e.price1Id].id, t)
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.image1OutHandler = function() {
    this.image1OverHandler(0)
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.image2OverHandler = function(t) {
    0 != t && (t = 2);
    var e = canvas.app.manor.model.campData.missions[parseInt(this.combo1.selectedItem.type)];
    e && e.price2Id && artifactAltSimple(canvas.app.manor.model.campData.artifacts[e.price2Id].id, t)
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.image2OutHandler = function() {
    this.image2OverHandler(0)
}
,
canvas.app.manor.view.controls.camp.MineResourceRenderer.prototype.buttonClickHandler = function() {
    var t = canvas.app.manor.model
      , e = t.campData.missions[parseInt(this.combo1.selectedItem.type)];
    e && this.pet && (this.button.enabled = !1,
    this.pet.mission ? (t.campData.currentActiveMission = this.pet.mission,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, {
        object: {
            building_action: "missionGetRewards",
            id: this.pet.mission.id
        }
    })) : (t.campData.currentActiveMission = new canvas.data.manor.DCampActiveMission,
    t.campData.currentActiveMission.id = e.id,
    t.campData.currentActiveMission.type = e.type,
    t.campData.currentActiveMission.objectId = parseInt(this.combo2.selectedItem.id),
    t.campData.currentActiveMission.pet1 = this.pet.id,
    t.campData.currentActiveMission.stime = t.serverTime.getTime(),
    t.campData.currentActiveMission.dtime = t.campData.currentActiveMission.stime + this.tmpTime,
    t.campData.waitChangeCountArtifacts = {},
    0 < this.tmpPrice1 && (t.campData.waitChangeCountArtifacts[e.price1Id] = this.tmpPrice1),
    0 < this.tmpPrice2 && (t.campData.waitChangeCountArtifacts[e.price2Id] = this.tmpPrice2),
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, {
        object: {
            building_action: "missionSendPets",
            pet1: this.pet.id,
            mission_id: e.id,
            farm_id: parseInt(this.combo2.selectedItem.id)
        }
    })))
}
,
canvas.app.manor.view.controls.camp.MineResources = function() {
    canvas.px.Container.call(this),
    this.inited = this.visible = !1;
    this.addChild(new canvas.px.Mask(850,410));
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1)),
    this.list._paddingV = 7,
    this.list.reverseLayers = !0,
    this.list.setSize(850, 445),
    this.info = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_16_BOLD,9526348,800,40,"left"),
    this.info.text = canvas.Translator.getText(339)
}
,
canvas.app.manor.view.controls.camp.MineResources.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.camp.MineResources.prototype.update = function() {
    var t, e = canvas.app.manor.model;
    if (e.campData.haveResourceMission()) {
        this.inited = this.visible = !0,
        0 < e.campData.resourceSlots ? this.removeIfExist(this.info) : this.addChild(this.info);
        var a, s = [];
        for (a in e.campData.pets)
            (t = e.campData.pets[a]).mission && t.mission.isResource() && s.push(t);
        for (var i = 0; i < e.campData.resourceSlots; i++)
            this.list.items[i] || this.list.add(new canvas.app.manor.view.controls.camp.MineResourceRenderer(i)),
            this.list.items[i].pet = 0 < s.length ? s.shift() : null
    }
}
,
canvas.app.manor.view.controls.camp.MineResources.prototype.updateTime = function() {
    for (var t = this.list.items.length, e = 0; e < t; e++)
        this.list.items[e].updateTime()
}
,
canvas.app.manor.view.controls.camp.MineTalismanRenderer = function(t) {
    switch (this._activeMission = null,
    Object.defineProperty(this, "activeMission", {
        get: function() {
            return this._activeMission
        },
        set: function(t) {
            this._activeMission = t
        }
    }),
    canvas.ui.ListRenderer.call(this, null, 814, 130),
    this.state = 0,
    this.type = t,
    this.title8 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_S_15_BOLD,9526348,300,20,"left")),
    this.title8.position.set(2, 0),
    canvas.app.manor.model.campData.getTypeByIndex(this.type)) {
    case canvas.data.manor.DCampData.PET_S_ITEMS:
        this.title8.text = canvas.Translator.getText(333);
        break;
    case canvas.data.manor.DCampData.PET_S_TALISMANS:
        this.title8.text = canvas.Translator.getText(331);
        break;
    case canvas.data.manor.DCampData.PET_S_VALUE:
        this.title8.text = canvas.Translator.getText(332)
    }
    var e;
    this.container = this.addChild(new canvas.px.Container),
    this.container.y = 20,
    this.back = this.container.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4)),
    this.back.width = this._width,
    this.back.height = this._height - 12,
    this.pets = new Array;
    for (var a = 0; a < canvas.data.manor.DCampData.ARTIFACT_PETS_MAX; a++)
        (e = this.container.addChild(new canvas.app.manor.view.controls.camp.PetView(!0))).position.set(26 + 90 * a, 5),
        this.pets.push(e),
        e.index = this.type,
        e.item.click = this.petClickHandler.bind(this),
        e.crossButton.click = this.petCrossClickHandler.bind(this),
        e.hideSkill = 1 != a;
    this.title4 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,124,20,"center")),
    this.title4.position.set(389, 10),
    this.title4.text = canvas.Translator.getText(298),
    this.item2 = this.container.addChild(new canvas.app.manor.view.controls.elements.Item(!1,!0,"","",!1)),
    this.item2.position.set(415, 26),
    this.title5 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,124,20,"center")),
    this.title5.position.set(389, 97),
    this.title6 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left")),
    this.title6.position.set(525, 8),
    this.title6.text = canvas.Translator.getText(121) + ":",
    this.title7 = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,100,20,"left")),
    this.title7.position.set(555, 32),
    this.button = this.container.addChild(new canvas.app.view.MainButton),
    this.button.position.set(650, 56),
    this.progress = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(131)),
    this.progress.position.set(660, 22),
    this.progress.setLabour(0, 0),
    this.image1 = this.container.addChild(new canvas.ui.Image),
    this.image1.position.set(525, 27),
    this.image1.interactive = !0,
    this.image1.scale.set(.4, .4),
    this.clear(),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this),
    this.image1.mouseover = this.image1OverHandler.bind(this),
    this.image1.mouseout = this.image1OutHandler.bind(this)
}
,
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.update = function() {
    var t, e = canvas.app.manor.model;
    this.mission = e.campData.missions[this.type],
    this.selectedPets = [],
    this.petsCommonSkill = 0,
    this.petsCommonSkillDiscipline = 0,
    this.petsCommonSkillStealth = 0;
    for (var a = this.pets.length, s = 0; s < a; s++)
        (t = this.pets[s]).data && !t.locked && (this.selectedPets.indexOf(t.data) < 0 ? (this.selectedPets.push(t.data),
        this.petsCommonSkill += t.data.getSkillByIndex(this.type),
        this.petsCommonSkillDiscipline += t.data.getSkill(canvas.data.manor.DCampData.PET_A_DISCIPLINE),
        this.petsCommonSkillStealth += t.data.getSkill(canvas.data.manor.DCampData.PET_A_STEALTH)) : t.data = null);
    this.updateInfo()
}
,
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.updateInfo = function() {
    var t, e = canvas.app.manor.model;
    this.image1.clear(),
    this.tmpTime = 0,
    this.mission ? (t = this.mission.getRewardBySkill(this.petsCommonSkill)) && (this.selectedPets.length ? (this.pets[0].update(),
    this.pets[1].title2.text = "<img src='" + this.pets[1].iconName + "' atlas='ui' yOffset='2'/> " + this.petsCommonSkill,
    this.tmpPrice = Math.ceil(this.mission.price1Amount * Math.max(.5, 1 - this.petsCommonSkillDiscipline / 1e3) * this.selectedPets.length),
    this.title7.text = this.tmpPrice + " " + canvas.Translator.getText(2022),
    this.title7.color = e.campData.artifacts[this.mission.price1Id].count < this.tmpPrice ? 16711680 : 9526348,
    this.image1.setImage(e.campData.artifacts[this.mission.price1Id].image),
    this.title5.text = Math.floor(.8 * this.petsCommonSkill / t.bonusDifficulty) + "-" + Math.floor(1.2 * this.petsCommonSkill / t.bonusDifficulty) + " " + canvas.Translator.getText(2022),
    this.tmpTime = Math.ceil(this.mission.duration * Math.max(.5, 1 - this.petsCommonSkillStealth / 1e3)),
    this.updateTime()) : (this.clear(),
    this.pets[0].title1.text = canvas.Translator.getText(338) + ":",
    this.pets[1].updateTitle(!0)),
    this.item2.data = t.item,
    this.item2.buttonMode = !1) : (this.item2.data = null,
    this.clear()),
    this.updateButton()
}
,
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.clear = function() {
    this.title7.text = "",
    this.title5.text = "",
    this.progress.setLabour(0, 0),
    this.progress.setTitle();
    for (var t = this.pets.length, e = 0; e < t; e++)
        this.pets[e].data = null;
    this.pets[1].title2.text = ""
}
,
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.updateButton = function() {
    var t, e, a = canvas.app.manor.model, s = this.pets.length;
    if (this.selectedPets.length && this.selectedPets[0].mission) {
        for (e = 0; e < s; e++)
            this.pets[e].interactiveChildren = !1;
        this.button.enabled = this.selectedPets[0].missionIsComplete(),
        this.button.setTitle(canvas.Translator.getText(192))
    } else {
        for (e = 0; e < s; e++)
            this.pets[e].interactiveChildren = !this.pets[e].locked;
        this.button.enabled = !1,
        this.button.setTitle(canvas.Translator.getText(2033)),
        this.mission && this.selectedPets.length && (t = this.mission.getRewardBySkill(this.petsCommonSkill)) && a.campData.artifacts[this.mission.price1Id].count >= this.tmpPrice && 0 < Math.floor(1.2 * this.petsCommonSkill / t.bonusDifficulty) && (this.button.enabled = !0)
    }
}
,
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.updateTime = function() {
    var t = canvas.app.manor.model.serverTime.getTime();
    this.activeMission ? t >= this.activeMission.dtime ? 2 != this.state && (this.state = 2,
    this.progress.setLabour(1, 1),
    this.progress.setTitle(),
    this.updateInfo()) : (this.progress.setLabour(t - this.activeMission.stime, this.activeMission.dtime - this.activeMission.stime),
    this.progress.setTitle(t >= this.activeMission.dtime ? "" : canvas.Functions.formatDate(1e3 * (this.activeMission.dtime - t), "00", 3, !1, !0)),
    1 != this.state && (this.state = 1)) : (0 != this.state && (this.state = 0),
    this.tmpTime && (this.progress.setLabour(0, 0),
    this.progress.setTitle(canvas.Functions.formatDate(1e3 * this.tmpTime, "00", 3, !1, !0))))
}
,
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.petClickHandler = function(t) {
    for (var e, a = null, s = this.pets.length, i = 0; i < s; i++)
        (e = this.pets[i]).data && (a = a || new Array).push(e.data.id);
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CHOOSE_PET, null, {
        object: {
            index: this.pets.indexOf(t.currentTarget.parent),
            type: this.type,
            excludePets: a
        }
    })
}
,
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.petCrossClickHandler = function(t) {
    canvas.utils.HintManager.instance.hide();
    t = t.currentTarget.parent.parent.parent;
    t && (t.data = null,
    this.update())
}
,
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.image1OverHandler = function(t) {
    this.mission && (0 != t && (t = 2),
    this.mission.price1Id && artifactAltSimple(canvas.app.manor.model.campData.artifacts[this.mission.price1Id].id, t))
}
,
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.image1OutHandler = function() {
    this.image1OverHandler(0)
}
,
canvas.app.manor.view.controls.camp.MineTalismanRenderer.prototype.buttonClickHandler = function() {
    var t, e = canvas.app.manor.model;
    if (this.mission && this.selectedPets.length)
        if (this.button.enabled = !1,
        this.activeMission)
            e.campData.currentActiveMission = this.activeMission,
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, {
                object: {
                    building_action: "missionGetRewards",
                    id: this.activeMission.id
                }
            });
        else {
            e.campData.currentActiveMission = new canvas.data.manor.DCampActiveMission,
            e.campData.currentActiveMission.id = this.mission.id,
            e.campData.currentActiveMission.type = this.mission.type,
            e.campData.currentActiveMission.pet1 = this.selectedPets[0].id,
            e.campData.currentActiveMission.pet2 = this.selectedPets[1] ? this.selectedPets[1].id : 0,
            e.campData.currentActiveMission.pet3 = this.selectedPets[2] ? this.selectedPets[2].id : 0,
            e.campData.currentActiveMission.stime = e.serverTime.getTime(),
            e.campData.currentActiveMission.dtime = e.campData.currentActiveMission.stime + this.tmpTime,
            e.campData.waitChangeCountArtifacts = {},
            0 < this.tmpPrice && (e.campData.waitChangeCountArtifacts[this.mission.price1Id] = this.tmpPrice),
            t = {
                building_action: "missionSendPets",
                mission_id: this.mission.id
            };
            for (var a = this.selectedPets.length, s = 0; s < a; s++)
                t["pet" + (s + 1).toString()] = this.selectedPets[s].id;
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_HUNT_CAMP_ACTION, null, {
                object: t
            })
        }
}
,
canvas.app.manor.view.controls.camp.MineTalismans = function() {
    canvas.px.Container.call(this),
    this.inited = this.visible = !1,
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1)),
    this.list._paddingV = 7,
    this.list.setSize(850, 415);
    for (var t = 0; t < canvas.data.manor.DCampData.ARTIFACT_TYPE_COUNT; t++)
        this.list.add(new canvas.app.manor.view.controls.camp.MineTalismanRenderer(t + 4), !1);
    this.list.update()
}
,
canvas.app.manor.view.controls.camp.MineTalismans.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.camp.MineTalismans.prototype.update = function() {
    var t, e, a = canvas.app.manor.model;
    if (a.campData.haveArtifactMission()) {
        this.inited = this.visible = !0;
        var s, i = {};
        for (s in a.campData.pets)
            (e = a.campData.pets[s]).mission && e.mission.isArtifact() && (i[e.mission.type] || (i[e.mission.type] = []),
            i[e.mission.type].push(e));
        for (var n, o = this.list.items.length, r = 0; r < o; r++) {
            for (t = this.list.items[r],
            n = 0; n < canvas.data.manor.DCampData.ARTIFACT_PETS_MAX; n++)
                t.pets[n].data = i[t.type] && i[t.type][n] ? i[t.type][n] : null,
                t.pets[n].locked = n >= a.campData.artifactSlots;
            t.activeMission = i[t.type] ? i[t.type][0].mission : null,
            t.update()
        }
    }
}
,
canvas.app.manor.view.controls.camp.MineTalismans.prototype.updateTime = function() {
    for (var t = this.list.items.length, e = 0; e < t; e++)
        this.list.items[e].updateTime()
}
,
canvas.app.manor.view.controls.camp.PetLineRenderer = function(t, e) {
    this._selectedIndex = 0,
    Object.defineProperty(this, "selectedIndex", {
        get: function() {
            return this._selectedIndex
        },
        set: function(t) {
            this._selectedIndex = t,
            this.selector.x = this.fields[this._selectedIndex].x + 1
        }
    }),
    canvas.ui.ListRenderer.call(this, null, t, 100);
    var a, s, i, n;
    this.addChild(new canvas.px.Mask(this._width - 20,this._height,0,0));
    for (this.overWall = new canvas.px.Mask(this._width - 20,this._height,16303994,1),
    this.addChild(new canvas.px.Mask(this._width - 20,1,14065526,1)).y = this._height - 1,
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,canvas.app.manor.view.controls.ChoosePetWin.FIRST_CELL_WIDTH,20,"left")),
    this.title.position.set(10, 8),
    this.imagesContainer = this.addChild(new canvas.px.Container),
    this.image = this.imagesContainer.addChild(new canvas.ui.Image),
    this.image.position.set(10, 26),
    this.images = new Array,
    a = 0; a < 4; a++)
        (s = this.imagesContainer.addChild(new canvas.ui.Image)).position.set(a % 2 == 0 ? 80 : 110, a < 2 ? 26 : 56),
        s.scale.x = s.scale.y = .48,
        this.images.push(s),
        s.mouseover = this.imgOverHandler.bind(this),
        s.mouseout = this.imgOutHandler.bind(this);
    for (this.selector = this.addChild(new canvas.px.Mask(canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH - 2,this._height - 2,16775110,1)),
    this.selector.y = 1,
    this.fields = new Array,
    a = 0; a <= canvas.data.manor.DCampData.TYPE_COUNT; a++)
        (n = this.addChild(new canvas.px.Graphics)).lineStyle(1, 14065526),
        n.moveTo(0, 0),
        n.lineTo(0, this._height - 1),
        n.x = canvas.app.manor.view.controls.ChoosePetWin.FIRST_CELL_WIDTH - 5 + a * canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH,
        a != canvas.data.manor.DCampData.TYPE_COUNT && ((i = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH,20,"center"))).position.set(n.x, 40),
        this.fields.push(i));
    this.buttonMode = !0,
    this.data = e,
    this.interactiveChildren = !0
}
,
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.update = function() {
    if (this.data) {
        this.title.text = this.data.title,
        this.image.setImage(this.data.image);
        for (var t, e = this.images.length, a = 0; a < e; a++)
            t = this.images[a],
            this.data.artifacts[a] ? (t.setImage(this.data.artifacts[a].image),
            t.name = this.data.artifacts[a].aid) : (t.clear(),
            t.name = "");
        for (a = 0; a < canvas.data.manor.DCampData.TYPE_COUNT; a++)
            this.fields[a].text = this.data.getSkillByIndex(a + 1)
    }
}
,
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.CLOSE_CHOOSE_PET, null, {
        object: this.data
    }),
    this.outHandler(),
    this.imgOutHandler()
}
,
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.overHandler = function(t) {
    this.addChildAt(this.overWall, 0)
}
,
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.outHandler = function() {
    this.removeIfExist(this.overWall)
}
,
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.imgOverHandler = function(t) {
    t.currentTarget.name && (this.curOverImage = t.currentTarget.name,
    artifactAltSimple(this.curOverImage, 2))
}
,
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.imgOutHandler = function(t) {
    this.curOverImage && (artifactAltSimple(this.curOverImage, 0),
    this.curOverImage = null)
}
,
canvas.app.manor.view.controls.camp.PetLineRenderer.prototype.destroy = function() {
    for (var t = this.images.length, e = 0; e < t; e++)
        img = this.images[e],
        img.mouseover = null,
        img.mouseout = null;
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
,
canvas.app.manor.view.controls.camp.PetView = function(t) {
    this._locked = !1,
    Object.defineProperty(this, "locked", {
        get: function() {
            return this._locked
        },
        set: function(t) {
            this._locked = t,
            this.lockIcon.visible = this._locked,
            this.interactiveChildren = !this._locked
        }
    }),
    this._hideSkill = !1,
    Object.defineProperty(this, "hideSkill", {
        get: function() {
            return this._hideSkill
        },
        set: function(t) {
            this._hideSkill = t,
            this._hideSkill ? this.removeIfExist(this.title2) : this.addChild(this.title2)
        }
    }),
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t,
            this.update()
        }
    }),
    this._index = 0,
    Object.defineProperty(this, "index", {
        get: function() {
            return this._index
        },
        set: function(t) {
            this._index = t,
            this.iconName = "camp_icons/camp_icon_" + (this._index - 1),
            this.updateTitle()
        }
    }),
    canvas.px.Container.call(this),
    this.title1 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,9526348,124,18,"center")),
    this.title1.position.set(-26, 2),
    this.item = this.addChild(new canvas.app.manor.view.controls.elements.Item(!1,!1)),
    this.item.y = 18,
    this.title2 = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD,canvas.Const.FONT_TAHOMA_11_BOLD,9526348,108,18,"center")),
    this.title2.position.set(-18, 89),
    this.iconName = "",
    this.lockIcon = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "lock_icon"))),
    this.lockIcon.position.set(-2, 14),
    this.lockIcon.visible = !1,
    t && (this.crossButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "delete_button")),
    this.crossButton.position.set(43, 2),
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.crossButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(1e3)))
    }),
    this.item.container.mouseover = this.overHandler.bind(this),
    this.item.container.mouseout = this.outHandler.bind(this)),
    this.update()
}
,
canvas.app.manor.view.controls.camp.PetView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.camp.PetView.prototype.update = function() {
    this.data ? (this.item.data = this.data.item,
    this.title1.text = this.data.title) : (this.item.data = null,
    this.item.buttonMode = !0,
    this.title1.text = "",
    this.outHandler()),
    this.updateTitle()
}
,
canvas.app.manor.view.controls.camp.PetView.prototype.updateTitle = function(t) {
    var e = "<img src='" + this.iconName + "' atlas='ui' yOffset='2'/> ";
    this.data ? this.title2.text = e + this.data.getSkillByIndex(this.index) : this.title2.text = (t ? e : "") + "0"
}
,
canvas.app.manor.view.controls.camp.PetView.prototype.overHandler = function() {
    this.data && this.item.container.addChild(this.crossButton)
}
,
canvas.app.manor.view.controls.camp.PetView.prototype.outHandler = function() {
    this.crossButton && this.item.container.removeIfExist(this.crossButton)
}
,
canvas.app.manor.view.controls.camp.SortButtonRenderer = function(t) {
    this._sortValue = 0,
    Object.defineProperty(this, "sortValue", {
        get: function() {
            return this._sortValue
        },
        set: function(t) {
            this._sortValue = t,
            this.update()
        }
    }),
    canvas.ui.ListRenderer.call(this, null, canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH, canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH),
    this.id = t,
    this.selector = this.addChild(new canvas.px.Mask(canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH,60,16775110,1)),
    this.selector.position.set(1, -2),
    this.selector.visible = !1,
    this.button = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "camp_icons/button_" + this.id + "/camp_button_" + this.id + "_base"),canvas.ResourceLoader.getImage("ui", "camp_icons/button_" + this.id + "/camp_button_" + this.id + "_over"),canvas.ResourceLoader.getImage("ui", "camp_icons/button_" + this.id + "/camp_button_" + this.id + "_down"),canvas.ResourceLoader.getImage("ui", "camp_icons/button_" + this.id + "/camp_button_" + this.id + "_disabled")),
    this.addChild(this.button),
    this.button.x = 8;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line_0")));
    this.id == canvas.data.manor.DCampData.TYPE_COUNT - 1 && (this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "line_0"))).x = canvas.app.manor.view.controls.ChoosePetWin.CELL_WIDTH),
    this.arrowUp = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "filter_sort_arrow"))),
    this.arrowUp.scale.y = -1,
    this.arrowUp.position.set(60, 48),
    this.arrowDown = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "filter_sort_arrow"))),
    this.arrowDown.position.set(60, 48),
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.app.manor.model.campData.getTitleByIndex(this.id + 1)))
    })
}
,
canvas.app.manor.view.controls.camp.SortButtonRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.camp.SortButtonRenderer.prototype.update = function() {
    switch (this.sortValue) {
    case 1:
        this.arrowUp.alpha = 1,
        this.arrowDown.alpha = .3;
        break;
    case -1:
        this.arrowUp.alpha = .3,
        this.arrowDown.alpha = 1;
        break;
    default:
        this.arrowUp.alpha = .3,
        this.arrowDown.alpha = .3
    }
    this.selector.visible = 0 != this.sortValue
}
,
canvas.app.manor.view.controls.camp.SortButtonRenderer.prototype.changeSort = function() {
    this.sortValue = 1 == this.sortValue ? -1 : 1
}
,
canvas.app.manor.view.controls.elements.ButtonImage = function(t, e, a) {
    canvas.app.view.MainButton.call(this),
    null == a && (a = 150),
    null == e && (e = 1),
    this.button2 = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "button_0"),canvas.ResourceLoader.getImage("ui", "button_0_over"),canvas.ResourceLoader.getImage("ui", "button_0_down")),
    this.sprite.addChildAt(this.button2, 0),
    this.button2.sprite.mousedown = null,
    this.button2.sprite.mouseover = null,
    this.button2.sprite.mouseout = null,
    this.button2.sprite.mouseup = null,
    this.button2.sprite.click = null,
    this.setTitle(t),
    this.setSize(a);
    e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "manor_button_icon_" + e));
    this.addChild(e),
    e.interactive = !1,
    this.button2.position.set(Math.round(.5 * (a - this.button2.width)), -40),
    e.position.set(this.button2.x + 11, this.button2.y + 2)
}
,
canvas.app.manor.view.controls.elements.ButtonImage.prototype = Object.create(canvas.app.view.MainButton.prototype),
canvas.app.manor.view.controls.elements.ButtonImage.prototype.handlerOver = function(t) {
    canvas.ui.Button.prototype.handlerOver.call(this, t),
    this.button2.handlerOver(t)
}
,
canvas.app.manor.view.controls.elements.ButtonImage.prototype.handlerOut = function(t) {
    canvas.ui.Button.prototype.handlerOut.call(this, t),
    this.button2.handlerOut(t)
}
,
canvas.app.manor.view.controls.elements.ButtonImage.prototype.handlerDown = function(t) {
    canvas.ui.Button.prototype.handlerDown.call(this, t),
    this.button2.handlerDown(t)
}
,
canvas.app.manor.view.controls.elements.ButtonImage.prototype.handlerUp = function(t) {
    canvas.ui.Button.prototype.handlerUp.call(this, t),
    this.button2.handlerUp(t)
}
,
canvas.app.manor.view.controls.elements.ButtonImage.prototype.update = function() {
    this.button2 && (this.button2.enabled = this.enabled)
}
,
canvas.app.manor.view.controls.elements.CementInput = function(t) {
    canvas.px.Container.call(this),
    this.itemData = t;
    t = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4));
    t.width = 173,
    t.height = 81;
    t = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,85,38,"left"));
    t.position.set(82, 11),
    t.text = this.itemData ? this.itemData.title : canvas.Translator.getText(169),
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7026733,85,20,"left")),
    this.field.position.set(82, 55),
    this.item = this.addChild(new canvas.app.manor.view.controls.elements.Item(!1,!0)),
    this.item.position.set(5, 5),
    this.item.data = this.itemData || new canvas.data.manor.DItem({
        id: canvas.app.manor.model.cementID,
        picture: canvas.app.manor.model.cementImage,
        title: canvas.Translator.getText(169)
    }),
    this.item.buttonMode = !1,
    this.update(0, 0)
}
,
canvas.app.manor.view.controls.elements.CementInput.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.elements.CementInput.prototype.clear = function() {
    this.update(0)
}
,
canvas.app.manor.view.controls.elements.CementInput.prototype.update = function(t, e) {
    this.value1 = null == t ? this.value1 : t,
    this.value2 = null == e ? canvas.app.manor.model.user.cement : e,
    this.field.text = "<b>" + this.value1 + "</b> " + canvas.Translator.getText(196) + " <font color='#" + (this.testRequires() || 0 == this.value1 ? "446c00" : "bc0000") + "'><b>" + this.value2 + "</b></font>"
}
,
canvas.app.manor.view.controls.elements.CementInput.prototype.testRequires = function() {
    var t = 0 < this.value1;
    return this.value1 > this.value2 && (t = !1),
    t
}
,
canvas.app.manor.view.controls.elements.CementInput.prototype.destroy = function() {
    this.parent && this.parent.removeChild(this),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.manor.view.controls.elements.Checker = function() {
    this._enabled = !0,
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t,
            this.filters = this._enabled ? null : [canvas.Functions.getBlackAndWhite()],
            this.interactiveChildren = this._enabled
        },
        configurable: !0
    }),
    this._checked = !1,
    Object.defineProperty(this, "checked", {
        get: function() {
            return this._checked
        },
        set: function(t) {
            this._checked = t,
            this.current = this._checked ? 1 : 0
        }
    });
    var t = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_4"),6,0,6,0)
      , e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "checker"));
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.HORIZONTAL, null, null, t, e),
    this.backPadding = 10,
    this.setSize(100, 13),
    this.max = 1,
    this.shape.buttonMode = !0
}
,
canvas.app.manor.view.controls.elements.Checker.prototype = Object.create(canvas.ui.Scroll.prototype),
canvas.app.manor.view.controls.elements.Checker.prototype.update = function() {
    canvas.ui.Scroll.prototype.update.call(this);
    var t = 0 < this.current;
    t != this._checked && (this._checked = t,
    canvas.EventManager.dispatchEvent(canvas.ui.Event.EVENT_CHANGE, this))
}
,
canvas.app.manor.view.controls.elements.ChoseBuildingItem = function(t) {
    canvas.ui.ListRenderer.call(this, null, 400, 200),
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_back"),20,20,20,20)),
    this.back.width = 400,
    this.back.height = 200,
    this.image = this.addChild(new canvas.ui.Image),
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7026733,215,200,"left")),
    this.field.position.set(175, 4),
    this.buildButton = this.addChild(new canvas.app.view.MainButton),
    this.buildButton.setTitle(canvas.Translator.getText(153)),
    this.buildButton.x = 205,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buildButton, this.buildClickHandler, this),
    this.data = t
}
,
canvas.app.manor.view.controls.elements.ChoseBuildingItem.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.elements.ChoseBuildingItem.prototype.update = function() {
    this.image.setImage(this.data.picture + ".png"),
    this.field.text = "<font color='#B00101'><b>" + this.data.title + "</b></font><br/>" + this.data.desc + "<br/><br/><b><font face='" + canvas.Const.FONT_TAHOMA_11 + "'>" + canvas.Translator.getText(231) + ": <font face='" + canvas.Const.FONT_TAHOMA_11_BOLD + "' color='#0066cc'>" + this.data.cost + "</font></font></b> <img src='energy_icon' atlas='ui' yOffset='2'/>",
    this.buildButton.y = this.field.y + this.field.textHeight + 4,
    this._height = Math.max(150, this.buildButton.y + 40),
    this.back.height = this._height
}
,
canvas.app.manor.view.controls.elements.ChoseBuildingItem.prototype.buildClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_BUILDING, null, {
        params: "chooser",
        object: this.data
    })
}
,
canvas.app.manor.view.controls.elements.Combo = function(t, e) {
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "combo_header"),[4, 0, 22, 0])
      , s = new canvas.app.manor.view.controls.elements.ComboHeaderRenderer
      , i = new canvas.px.RoundRect(16376749,1,t,e,5,5,!1,!0,0,.5);
    canvas.ui.ComboBox.call(this, a, s, i, canvas.app.manor.view.controls.elements.ComboListRenderer, canvas.ui.ComboBoxType.DOWN, scroll),
    this.list._scrollMaxAdd = 5,
    this.list.scroll = new canvas.app.manor.view.controls.elements.Scroll(this.list.container),
    this.setSize(t || 190, e || 130),
    this.list.paddingV = 0,
    this.list.paddingH = -6
}
,
canvas.app.manor.view.controls.elements.Combo.prototype = Object.create(canvas.ui.ComboBox.prototype),
canvas.app.manor.view.controls.elements.ComboHeaderRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, t),
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,100,16,"left",void 0,void 0,void 0,!0),
    this.addChild(this.title),
    this.title.position.set(4, 6),
    this.interactive = !1,
    this.msk = new canvas.px.Mask(100,20),
    this.addChild(this.msk),
    this.mask = this.msk
}
,
canvas.app.manor.view.controls.elements.ComboHeaderRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.elements.ComboHeaderRenderer.prototype.update = function() {
    this.title && (this.title.text = this.data ? this.data.title : "",
    this.title.setSize(this._width),
    this.msk.setSize(this._width - 20))
}
,
canvas.app.manor.view.controls.elements.ComboListRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, t),
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,100,14,"left",void 0,void 0,void 0,!0),
    this.addChild(this.title),
    this.title.position.set(4, 1),
    this._height = 14,
    this.selector = new canvas.px.Mask(100,20,13421772,1),
    this.buttonMode = !0
}
,
canvas.app.manor.view.controls.elements.ComboListRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.elements.ComboListRenderer.prototype.update = function() {
    this.selector && this.selector.setSize(this._width, 16),
    this.title && (this.title.text = this.data ? this.data.title : "",
    this.title.setSize(this._width - 10))
}
,
canvas.app.manor.view.controls.elements.ComboListRenderer.prototype.overHandler = function() {
    this.addChildAt(this.selector, 0)
}
,
canvas.app.manor.view.controls.elements.ComboListRenderer.prototype.outHandler = function() {
    this.selector.parent && this.removeChild(this.selector)
}
,
canvas.app.manor.view.controls.elements.Dragger = function(t) {
    var e = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_1"),4,0,4,0)
      , a = new canvas.px.Container;
    this.leftArrow = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "pager_minus")),
    this.rightArrow = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "pager_plus")),
    a.addChild(this.leftArrow),
    a.addChild(this.rightArrow),
    this.rightArrow.x = this.leftArrow.width - 5,
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.HORIZONTAL, null, null, e, a, t),
    this.backPadding = 5,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.minusClick, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.plusClick, this)
}
,
canvas.app.manor.view.controls.elements.Dragger.prototype = Object.create(canvas.ui.Scroll.prototype),
canvas.app.manor.view.controls.elements.Dragger.prototype.plusClick = function() {
    this.wasDragged || this.plusClickHandler()
}
,
canvas.app.manor.view.controls.elements.Dragger.prototype.minusClick = function() {
    this.wasDragged || this.minusClickHandler()
}
,
canvas.app.manor.view.controls.elements.Dragger.prototype.update = function() {
    canvas.ui.Scroll.prototype.update.call(this),
    this.dragView.visible = !0
}
,
canvas.app.manor.view.controls.elements.Dragger.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.minusClick, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.plusClick, this),
    canvas.ui.Scroll.prototype.destroy.call(this)
}
,
canvas.app.manor.view.controls.elements.Energy = function(t) {
    this._energy = 0,
    Object.defineProperty(this, "energy", {
        get: function() {
            return this._energy
        },
        set: function(t) {
            this.update(t)
        }
    }),
    canvas.px.Container.call(this),
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD,canvas.Const.FONT_TAHOMA_11_BOLD,26316,t || 40,20,"left",null,0,0))
}
,
canvas.app.manor.view.controls.elements.Energy.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.elements.Energy.prototype.update = function(t) {
    this._energy = t,
    this.field.text = 0 < t ? t + " <img src='energy_icon' atlas='ui' yOffset='2'/>" : ""
}
,
canvas.app.manor.view.controls.elements.FilterItemRenderer = function(t, e) {
    canvas.ui.ListRenderer.call(this, null, 213, 20);
    this.back = this.addChild(new canvas.px.Mask(214,20,15585423,1)),
    this.back.visible = !1,
    this.back.x = -14,
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7026733,183,20,"left")),
    this.field.position.set(10, 2),
    this.arrow = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "filter_sort_arrow"))),
    this.arrow.pivot = new canvas.px.Point(Math.round(.5 * this.arrow.width),Math.round(.5 * this.arrow.height)),
    this.arrow.y = 10,
    this.arrow.scale.y = e ? 1 : -1,
    this.data = t,
    this.buttonMode = !0,
    this.selected = !1,
    this.data = t
}
,
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.update = function() {
    this.field.text = this.data.title
}
,
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.updateSelection = function() {
    this.arrow.visible = this.selected
}
,
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.setSortDirection = function(t) {
    this.arrow.scale.y = t ? 1 : -1
}
,
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.overHandler = function() {
    this.back.visible = !0,
    this.field.color = 10616832
}
,
canvas.app.manor.view.controls.elements.FilterItemRenderer.prototype.outHandler = function() {
    this.back.visible = !1,
    this.field.color = 7026733
}
,
canvas.app.manor.view.controls.elements.FilterSortControl = function(t, e, a, s, i, n) {
    var o, r, c;
    this._filterText = "",
    Object.defineProperty(this, "filterText", {
        get: function() {
            return this._filterText
        },
        set: function(t) {
            this._filterText = t,
            this.input.text = this._filterText
        }
    }),
    this._sortType = "",
    Object.defineProperty(this, "sortType", {
        get: function() {
            return this._sortType
        },
        set: function(t) {
            this._sortType = t
        }
    }),
    this._sortDirection = "",
    Object.defineProperty(this, "sortDirection", {
        get: function() {
            return this._sortDirection
        },
        set: function(t) {
            this._sortDirection = t
        }
    }),
    this._mode = "",
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            this._mode = t,
            this.update()
        }
    }),
    canvas.px.Container.call(this),
    null == e && (e = ""),
    null == a && (a = ""),
    null == s && (s = !1),
    null == i && (i = "Search here..."),
    null == n && (n = 199),
    this.sortType = a,
    this.sortDirection = s,
    this.container = this.addChild(new canvas.px.Container),
    this.list = new canvas.ui.List(canvas.ui.ListType.VERTICAL,1),
    this.list._paddingV = 0,
    this.list.container.x = 5;
    for (var p = t.length, h = 0; h < p; h++)
        o = t[h],
        r = new canvas.app.manor.view.controls.elements.FilterItemRenderer(o,s),
        this.list.add(r, !1),
        o.type == this.sortType && (r.selected = !0);
    this.list.update(),
    this.list.position.set(-209, 30),
    this.list.setSize(213, 20 * p),
    this.backFilter = this.container.addChild(new canvas.px.Container),
    (c = this.backFilter.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_5"),8,5,29,9))).width = 220,
    c.height = this.list.height + 11,
    (a = this.backFilter.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tile_5_1")))).x = c.width - a.width,
    c.y = a.height,
    this.backFilter.position.set(3 - this.backFilter.width, -1),
    this.backFilter.visible = !1,
    this.backSearch = this.container.addChild(new canvas.px.Container),
    (c = this.backSearch.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_5"),8,5,29,9))).width = 205,
    c.height = 30,
    (a = this.backSearch.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "tile_5_1")))).x = c.width - a.width,
    c.y = a.height,
    this.backSearch.position.set(-this.backSearch.width - 25, -1),
    this.backSearch.visible = !1,
    this.filterButton = this.container.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "filter_sort_button"),canvas.ResourceLoader.getImage("ui", "filter_sort_button_over"))),
    this.filterButton.x = -this.filterButton.width,
    this.searchButton = this.container.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "filter_search_button"),canvas.ResourceLoader.getImage("ui", "filter_search_button_over"))),
    this.searchButton.x = this.filterButton.x - this.searchButton.width - 5,
    this.container.addChild(this.list),
    this.input = this.container.addChild(new canvas.app.manor.view.controls.elements.Input("left",!0,n,new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_input_base"),6,0,6,0),new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_input_down"),6,0,6,0),new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_input_over"),6,0,6,0),i,!1)),
    this.input._paddingRight = 20,
    this.searchClearButton = this.container.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "filter_clear_button"),canvas.ResourceLoader.getImage("ui", "filter_clear_button_over"))),
    this.input.position.set(-this.input.width - 28, 31),
    this.searchClearButton.position.set(this.input.x + this.input.width - this.searchClearButton.width - 2, 33),
    this.filterText = e,
    this.mode = "",
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.searchButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(277)))
    }),
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.filterButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(278)))
    }),
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.searchClearButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(279)))
    }),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.filterButton, this.filterClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.searchButton, this.searchClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.searchClearButton, this.clearClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ListEvent.EVENT_SELECT, this.list, this.listSelectHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.inputSearchHandler, this),
    this.interactive = !0
}
,
canvas.app.manor.view.controls.elements.FilterSortControl.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.elements.FilterSortControl.MODE_FILTER = "modeFilter",
canvas.app.manor.view.controls.elements.FilterSortControl.MODE_SEARCH = "modeSearch",
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.update = function() {
    switch (this.backSearch.visible = this.backFilter.visible = this.list.visible = !1,
    this.container.removeIfExist(this.input),
    this.container.removeIfExist(this.searchClearButton),
    this.mode) {
    case canvas.app.manor.view.controls.elements.FilterSortControl.MODE_FILTER:
        this.backFilter.visible = this.list.visible = !0;
        break;
    case canvas.app.manor.view.controls.elements.FilterSortControl.MODE_SEARCH:
        this.backSearch.visible = !0,
        this.container.addChildAt(this.input, 0),
        this.updateClearButton(),
        this.focus()
    }
}
,
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.filterClickHandler = function() {
    this.mode = this.mode == canvas.app.manor.view.controls.elements.FilterSortControl.MODE_FILTER ? "" : canvas.app.manor.view.controls.elements.FilterSortControl.MODE_FILTER
}
,
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.searchClickHandler = function() {
    this.mode = this.mode == canvas.app.manor.view.controls.elements.FilterSortControl.MODE_SEARCH ? "" : canvas.app.manor.view.controls.elements.FilterSortControl.MODE_SEARCH
}
,
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.clearClickHandler = function() {
    this.input.clear(),
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this.input),
    this.focus(),
    canvas.utils.HintManager.instance.hide()
}
,
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.focus = function() {
    this.input.input.input && this.input.input.input.focus()
}
,
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.listSelectHandler = function(t) {
    var e = t.params
      , t = e ? e.data : null;
    t && (this.sortType == t.type ? this.sortDirection = !this.sortDirection : this.sortType = t.type,
    e.setSortDirection(this.sortDirection)),
    canvas.EventManager.dispatchEvent(canvas.ui.Event.EVENT_CHANGE, this),
    this.mode = ""
}
,
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.inputSearchHandler = function() {
    this.filterText = this.input.text,
    canvas.EventManager.dispatchEvent(canvas.ui.Event.EVENT_CHANGE, this),
    this.updateClearButton()
}
,
canvas.app.manor.view.controls.elements.FilterSortControl.prototype.updateClearButton = function() {
    this.input.parent && "" != this.filterText ? this.container.addChild(this.searchClearButton) : this.container.removeIfExist(this.searchClearButton)
}
,
canvas.app.manor.view.controls.elements.FilterSortControlPets = function(t, e, a, s, i) {
    canvas.app.manor.view.controls.elements.FilterSortControl.call(this, t, e, a, s, i, 157),
    this.searchButton.interactiveChildren = !1,
    this.filterButton.x += 142,
    this.list.x += 142,
    this.backFilter.x += 142,
    this.input.x += 146,
    this.input.y -= 30,
    this.searchClearButton.x += 144,
    this.searchClearButton.y -= 30,
    this.input._paddingLeft = 8,
    this.input._paddingRight = 26,
    this.input.topField.x += 8,
    this.container.addChild(this.searchButton),
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.filterButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(285)))
    })
}
,
canvas.app.manor.view.controls.elements.FilterSortControlPets.prototype = Object.create(canvas.app.manor.view.controls.elements.FilterSortControl.prototype),
canvas.app.manor.view.controls.elements.FilterSortControlPets.prototype.update = function() {
    canvas.app.manor.view.controls.elements.FilterSortControl.prototype.update.call(this),
    this.container.addChildAt(this.input, 0)
}
,
canvas.app.manor.view.controls.elements.Input = function(t, e, a, s, i, n, o, r) {
    this._input = null,
    Object.defineProperty(this, "input", {
        get: function() {
            return this._input
        },
        set: function(t) {
            this._input && (this._input.parent = null,
            canvas.EventManager.removeEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this._input, this.changeHandler, this)),
            this._input = t,
            this._input && ((this._input.parent = this)._input.color = "#6B382D",
            this._input.width = this.back.width - 4 - this._paddingRight,
            this._input.bold = !0,
            this._input.align = this.align,
            this._input.x = 4 + this._paddingLeft,
            this._input.y = 11,
            canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this._input, this.changeHandler, this),
            this.changeHandler(),
            this.backOver && (this._input.input.onmouseover = this.overHandler.bind(this),
            this._input.input.onmouseout = this.outHandler.bind(this)),
            this.backFocus && (this._input.input.onfocus = this.focusinHandler.bind(this),
            this._input.input.onblur = this.focusoutHandler.bind(this)))
        }
    }),
    Object.defineProperty(this, "text", {
        get: function() {
            return this.input ? this.input.text : ""
        },
        set: function(t) {
            this.input && (this.input.text = t)
        }
    }),
    this._paddingRight = 0,
    Object.defineProperty(this, "paddingRight", {
        get: function() {
            return this._paddingRight
        },
        set: function(t) {
            this._paddingRight = t
        }
    }),
    this._paddingLeft = 0,
    Object.defineProperty(this, "paddingLeft", {
        get: function() {
            return this._paddingLeft
        },
        set: function(t) {
            this._paddingLeft = t
        }
    }),
    canvas.px.Container.call(this),
    null == t && (t = "left"),
    null == e && (e = !0),
    null == a && (a = 30),
    null == o && (o = ""),
    null == r && (r = !1),
    this.back = s || new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_2"),5,0,5,0),
    this.addChild(this.back),
    this.back.width = a,
    this.align = t,
    this.defaultText = o,
    (this.lastValue = null) != i && (this.backFocus = i,
    this.backFocus.width = a),
    null != n && (this.backOver = n,
    this.backOver.width = a),
    this.onlyNumbers = !1,
    this.maxChars = 30,
    r && (this.leftArrow = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "pager_minus")),
    this.leftArrow.position.set(-this.leftArrow.width, 0),
    this.addChild(this.leftArrow),
    this.rightArrow = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "pager_plus")),
    this.rightArrow.position.set(a, 0),
    this.addChild(this.rightArrow),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.minusHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.plusHandler, this)),
    this.defaultText && (this.topField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7026733,a,20,this.align),
    this.topField.alpha = .6,
    this.topField.position.set(5, 2),
    this.addChild(this.topField),
    this.topField.text = this.defaultText)
}
,
canvas.app.manor.view.controls.elements.Input.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.elements.Input.prototype.changeHandler = function(t) {
    var e;
    this.lastValue != this.input.text && (this.lastValue = this.input.text,
    this.onlyNumbers && (e = parseInt(this.input.text) || 0,
    this.input.text = e),
    0 < this.maxChars && this.input.text.length > this.maxChars && (this.input.text = this.input.text.substr(0, this.maxChars)),
    this.updateTop(),
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this, this.input.text))
}
,
canvas.app.manor.view.controls.elements.Input.prototype.clear = function() {
    this.input.text = "",
    this.changeHandler()
}
,
canvas.app.manor.view.controls.elements.Input.prototype.plusHandler = function() {
    var t = 9999999999 < (t = parseInt(this.input.text) + 1) ? 9999999999 : t;
    this.input.text = t,
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.input.text)
}
,
canvas.app.manor.view.controls.elements.Input.prototype.minusHandler = function() {
    var t = (t = parseInt(this.input.text) - 1) < 0 ? 0 : t;
    this.input.text = t,
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.input.text)
}
,
canvas.app.manor.view.controls.elements.Input.prototype.hideAll = function() {
    this.back && (back.visible = !1),
    this.backFocus && (backFocus.visible = !1),
    this.backOver && (backOver.visible = !1)
}
,
canvas.app.manor.view.controls.elements.Input.prototype.updateTop = function() {
    this.topField && (this.topField.visible = "" == this.input.text)
}
,
canvas.app.manor.view.controls.elements.Input.prototype.overHandler = function() {
    this.backFocus && this.input && this.input.input && this.input.input === document.activeElement || (this.back && this.removeIfExist(this.back),
    this.backFocus && this.removeIfExist(this.backFocus),
    this.backOver && this.addChildAt(this.backOver, 0))
}
,
canvas.app.manor.view.controls.elements.Input.prototype.outHandler = function() {
    this.backFocus && this.input && this.input.input && this.input.input === document.activeElement || (this.backOver && this.removeIfExist(this.backOver),
    this.backFocus && this.removeIfExist(this.backFocus),
    this.back && this.addChildAt(this.back, 0))
}
,
canvas.app.manor.view.controls.elements.Input.prototype.focusinHandler = function() {
    this.back && this.removeIfExist(this.back),
    this.backOver && this.removeIfExist(this.backOver),
    this.backFocus && this.addChildAt(this.backFocus, 0)
}
,
canvas.app.manor.view.controls.elements.Input.prototype.focusoutHandler = function() {
    this.outHandler()
}
,
canvas.app.manor.view.controls.elements.Input.prototype.destroy = function() {
    this.input = null,
    this.leftArrow && canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.minusHandler, this),
    this.rightArrow && canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.plusHandler, this),
    canvas.px.Container.prototype.destroy.call(this, {
        children: !0
    })
}
,
canvas.app.manor.view.controls.elements.Item = function(t, e, a, s, i, n, o) {
    this._mode = "",
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            switch (this._mode = t,
            canvas.Functions.clearChildren(this.overContainer),
            this._mode) {
            case canvas.app.manor.view.controls.elements.Item.MODE_BANK_GET:
            case canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_GET:
                this.overContainer.addChild(new canvas.app.manor.view.controls.elements.BankContent(canvas.Translator.getText(1e3)));
                break;
            case canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT:
            case canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_PUT:
                this.overContainer.addChild(new canvas.app.manor.view.controls.elements.BankContent(canvas.Translator.getText(242)))
            }
        }
    }),
    canvas.ui.ListRenderer.call(this, null, 70, 70),
    null == t && (t = !0),
    null == e && (e = !0),
    null == a && (a = ""),
    null == s && (s = ""),
    null == i && (i = !0),
    null == n && (n = !1),
    null == o && (o = !1),
    this.container = this.addChild(new canvas.px.Container),
    this.lockedMessage = s,
    this.showCount = i,
    this.red = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_red"))),
    this.red.position.set(-1, 64),
    this.green = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_green"))),
    this.green.position.set(0, 65),
    this.bottomTitle = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,16765254,64,17,"center")),
    this.bottomTitle.position.set(4, 68),
    this.back = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_back"))),
    this.back.position.set(5, 5),
    this.imageContainer = this.container.addChild(new canvas.px.Container),
    this.imageContainer.position.set(6, 5),
    this.image = this.imageContainer.addChild(new canvas.ui.Image),
    this.lockedImage = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_locked"))),
    this.lockedImage.position.set(6, 5),
    this.lockedImage.visible = !1,
    this.count = this.container.addChild(new canvas.px.Mask(34,16,7230284,1)),
    this.count.position.set(7, 48),
    this.count.visible = !1,
    this.count.interactiveChildren = !1,
    this.countField = this.count.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,16177574,36,18,"center")),
    this.countField.position.set(-1, 1),
    this.border = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_border"))),
    this.timeField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD_STROKE,15587444,66,20,"center")),
    this.timeField.position.set(4, 8),
    n && (this.progressor = this.container.addChildAt(new canvas.px.RoundProgress(60,0,.8), this.container.getChildIndex(this.timeField)),
    this.progressor.position.set(35, 35),
    this.progressor.scale.x = -1,
    this.msk = this.addChild(new canvas.px.Mask(60,60)),
    this.msk.position.set(6, 5),
    this.progressor.mask = this.msk,
    this.setProgress(1)),
    this.setColor(0),
    this.overContainer = new canvas.px.Container,
    this.buttonMode = !0,
    this.click = this.mouseover = this.mouseout = null,
    e && (this.container.mouseover = this.overHandler.bind(this),
    this.container.mouseout = this.outHandler.bind(this)),
    t && (this.container.click = this.clickHandler.bind(this)),
    this.mode = a,
    this.container.interactive = this.interactive = !0,
    this.container.hitArea = new canvas.px.Rectangle(4,4,60,60)
}
,
canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT = "bankPut",
canvas.app.manor.view.controls.elements.Item.MODE_BANK_GET = "bankGet",
canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_PUT = "storagePut",
canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_GET = "storageGet",
canvas.app.manor.view.controls.elements.Item.overedItem = null,
canvas.app.manor.view.controls.elements.Item.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.elements.Item.prototype.update = function() {
    null != this.oldData && "empty" != this.oldData.id || this.outHandler(null),
    this.image.clear(),
    canvas.Functions.clearChildren(this.imageContainer),
    this.imageContainer.addChild(this.image),
    this._data && "empty" != this._data.id ? (this.image.setImage(this._data.image),
    this.setProgress(0 == this._data.timeFull ? 1 : 1 - this._data.time / this._data.timeFull),
    this.timeField.text = canvas.Functions.formatDate(1e3 * this._data.time, "00", 2, !0),
    this.showCount && 1 < this._data.count ? (this.count.visible = !0,
    this.countField.text = this._data.count) : this.count.visible = !1,
    this.buttonMode = !0,
    0 < this._data.enchant3 && (this.imageContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_hole"))).y = 40),
    (0 < this._data.enchantQuality || 0 < this._data.enchantParam) && this.imageContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_" + (10 * parseInt(this._data.enchantQuality) + parseInt(this._data.enchantParam))))).position.set(2, 42),
    0 < this._data.enchant3 && (this.imageContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_oprava"))).y = 40)) : (this.setProgress(1),
    this.timeField.text = "",
    this.count.visible = !1,
    this.lockedImage.visible = !1,
    this.buttonMode = !1,
    "" == this.lockedMessage || null != this._data && "empty" == this._data.id || (this.lockedImage.visible = !0),
    this.outHandler()),
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
        target: this
    }),
    this.timeField.visible = "" != this.timeField.text
}
,
canvas.app.manor.view.controls.elements.Item.prototype.setProgressExp = function(t) {}
,
canvas.app.manor.view.controls.elements.Item.prototype.setProgress = function(t) {
    this.progressor && (this.progressor.progress = 1 - t)
}
,
canvas.app.manor.view.controls.elements.Item.prototype.clone = function() {
    var t = new canvas.app.manor.view.controls.elements.Item;
    return t.data = this._data,
    t.name = this.name,
    t
}
,
canvas.app.manor.view.controls.elements.Item.prototype.removeHints = function() {
    this.outHandler(),
    canvas.utils.HintManager.instance.hide()
}
,
canvas.app.manor.view.controls.elements.Item.prototype.overHandler = function(t) {
    canvas.app.manor.view.controls.elements.Item.overedItem = this,
    canvas.app.manor.model.globalDrag ? t.stopPropagation() : null != this.data && "empty" != this.data.id && "" != this.data.id && (this.mouseover || "1" == artifactAltSimple(this.data.id, 2) || (canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(this.data.title))
    }),
    canvas.utils.HintManager.instance.show(this)),
    this.container.addChild(this.overContainer))
}
,
canvas.app.manor.view.controls.elements.Item.prototype.outHandler = function(t) {
    this.useOutTest && canvas.app.manor.view.controls.elements.Item.overedItem != this || (null != this.data && "empty" != this._data.id && "" != this.data.id && artifactAltSimple(this.data.id, 0),
    this.container.removeIfExist(this.overContainer),
    canvas.app.manor.view.controls.elements.Item.overedItem = null)
}
,
canvas.app.manor.view.controls.elements.Item.prototype.clickHandler = function(t) {
    if (null != this._data && "empty" != this._data.id) {
        switch (this.mode) {
        case canvas.app.manor.view.controls.elements.Item.MODE_BANK_GET:
            if (!t.target.parent || "info" != t.target.parent.name)
                return void canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_BANK_ACTION, null, {
                    object: {
                        from: this.data,
                        toArea: "0"
                    }
                });
            break;
        case canvas.app.manor.view.controls.elements.Item.MODE_BANK_PUT:
            if (!t.target.parent || "info" != t.target.parent.name)
                return void canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_BANK_ACTION, null, {
                    object: {
                        from: this.data,
                        toArea: "firstFree"
                    }
                });
            break;
        case canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_GET:
            if (!t.target.parent || "info" != t.target.parent.name)
                return void canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_STORAGE_ACTION, null, {
                    object: {
                        getItem: this.data
                    }
                });
            break;
        case canvas.app.manor.view.controls.elements.Item.MODE_STORAGE_PUT:
            if (!t.target.parent || "info" != t.target.parent.name)
                return void canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_STORAGE_ACTION, null, {
                    object: {
                        putItem: this.data
                    }
                })
        }
        "" != this._data.id && "" != this._data.aid && this._data.id == this._data.aid ? canvas.Functions.navigateToURL("artifact_info.php?artikul_id=" + this._data.aid, "_blank") : "" != this._data.id ? canvas.Functions.navigateToURL("artifact_info.php?artifact_id=" + this._data.id, "_blank") : "" != this._data.aid && canvas.Functions.navigateToURL("artifact_info.php?artikul_id=" + this._data.aid, "_blank")
    }
}
,
canvas.app.manor.view.controls.elements.Item.prototype.setColor = function(t) {
    switch (t) {
    case 0:
        this.bottomTitle.visible = !1,
        this.green.visible = !1,
        this.red.visible = !1;
        break;
    case 1:
        this.bottomTitle.visible = !0,
        this.bottomTitle.text = canvas.Translator.getText(194),
        this.green.visible = !0,
        this.red.visible = !1;
        break;
    case 2:
        this.bottomTitle.visible = !0,
        this.bottomTitle.text = canvas.Translator.getText(195),
        this.green.visible = !1,
        this.red.visible = !0
    }
}
,
canvas.app.manor.view.controls.elements.Item.prototype.destroy = function() {
    this.container.mouseover = null,
    this.container.mouseout = null,
    this.container.click = null,
    this.data = null,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
        target: this
    }),
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
,
canvas.app.manor.view.controls.elements.BankContent = function(t) {
    canvas.px.Container.call(this),
    this.title = t,
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_plane"))).position.set(6, 30),
    this.info = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "item_info"))),
    this.info.name = "info",
    this.info.position.set(46, 5),
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,2564379,64,16,"center")),
    this.field.text = this.title,
    this.field.position.set(4, 30),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.info, this.infoOverHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.info, this.infoOutHandler, this)
}
,
canvas.app.manor.view.controls.elements.BankContent.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.elements.BankContent.prototype.infoOverHandler = function() {
    this.field.text = canvas.Translator.getText(243)
}
,
canvas.app.manor.view.controls.elements.BankContent.prototype.infoOutHandler = function() {
    this.field.text = this.title
}
,
canvas.app.manor.view.controls.elements.BankContent.prototype.destroy = function() {
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }]),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.info, this.infoOverHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.info, this.infoOutHandler, this)
}
,
canvas.app.manor.view.controls.elements.Labour = function(t, e) {
    null == e && ((e = new Object).back = "labour_progress_back",
    e.backSlicedArray = null,
    e.backSize = 0,
    e.front = "labour_progress",
    e.frontSlicedArray = null,
    e.frontSize = 0,
    e.font = canvas.Const.FONT_TAHOMA_9,
    e.color = 16777215,
    e.pos = new canvas.px.Point(30,12),
    e.textPos = new canvas.px.Point(0,1)),
    this.title = t || "",
    this.params = e,
    canvas.ui.Progress.call(this, canvas.ResourceLoader.getImage("ui", this.params.front), this.params.frontSlicedArray),
    this.params.backSlicedArray ? this.addChildAt(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", this.params.back),this.params.backSlicedArray[0],this.params.backSlicedArray[1],this.params.backSlicedArray[2],this.params.backSlicedArray[3]), 0).width = this.params.backSize : this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", this.params.back)), 0),
    this.params.frontSize && this.setSize(this.params.frontSize),
    this.backImage && this.backImage.position.set(this.params.pos.x, this.params.pos.y),
    this.sprite.position.set(this.params.pos.x, this.params.pos.y),
    this.tf = this.addChild(new canvas.ui.Text(this.params.font,this.params.color,this.sprite.width,20,"center")),
    this.tf.position.set(this.params.pos.x + this.params.textPos.x, this.params.pos.y + this.params.textPos.y)
}
,
canvas.app.manor.view.controls.elements.Labour.prototype = Object.create(canvas.ui.Progress.prototype),
canvas.app.manor.view.controls.elements.Labour.prototype.setLabour = function(t, e, a) {
    canvas.EventManager.hasEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this) && (this.animated = !0),
    0 == t && (this.animated = !1),
    this.tf.text = ("" == this.title ? "" : this.title + ": ") + t + "/" + e,
    t = t < 0 ? 0 : e < t ? e : t,
    this.targetValue = 0 == e ? 0 : t / e,
    this.animated ? canvas.EventManager.addEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this) : (canvas.EventManager.removeEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this),
    this.progress = this.targetValue)
}
,
canvas.app.manor.view.controls.elements.Labour.prototype.setTitle = function(t) {
    this.tf.text = t || ""
}
,
canvas.app.manor.view.controls.elements.Labour.prototype.updateHandler = function() {
    this.progress < this.targetValue ? this.progress = Math.min(this.progress + .05, this.targetValue) : this.progress > this.targetValue ? this.progress = Math.max(this.progress - .05, this.targetValue) : canvas.EventManager.removeEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this)
}
,
canvas.app.manor.view.controls.elements.LabourGreen = function(t) {
    null == t && (t = 130);
    var e = new Object;
    e.back = "labour4_progress_back",
    e.backSlicedArray = [20, 0, 20, 0],
    e.backSize = t,
    e.front = "labour4_progress",
    e.frontSlicedArray = [6, 0, 6, 0],
    e.frontSize = t - 30,
    e.font = canvas.Const.FONT_TAHOMA_10,
    e.color = 16777215,
    e.pos = new canvas.px.Point(15,9),
    e.textPos = new canvas.px.Point(0,0),
    canvas.app.manor.view.controls.elements.Labour.call(this, null, e)
}
,
canvas.app.manor.view.controls.elements.LabourGreen.prototype = Object.create(canvas.app.manor.view.controls.elements.Labour.prototype),
canvas.app.manor.view.controls.elements.LabourInput = function() {
    this._maxValue = 1e4,
    Object.defineProperty(this, "maxValue", {
        get: function() {
            return this._maxValue
        },
        set: function(t) {
            this._maxValue = t,
            this.dragger.max = this._maxValue
        }
    }),
    canvas.px.Container.call(this),
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_0"),4,4,4,4),
    this.back.width = 173,
    this.back.height = 81,
    this.addChild(this.back);
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7026733,63,18,"left");
    t.position.set(12, 19),
    t.text = canvas.Translator.getText(107),
    this.addChild(t),
    this.fieldLabourMax = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7026733,60,20,"left"),
    this.fieldLabourMax.position.set(110, 19),
    this.addChild(this.fieldLabourMax),
    this.input = new canvas.app.manor.view.controls.elements.Input(canvas.app.manor.view.input),
    this.addChild(this.input),
    this.input.onlyNumbers = !0,
    this.input.maxChars = 4,
    this.input.position.set(70, 15),
    this.input.text = "0",
    this.dragger = new canvas.app.manor.view.controls.elements.Dragger(this),
    this.addChild(this.dragger),
    this.dragger.position.set(10, 50),
    this.dragger.setSize(150, 5),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.dragger, this.draggerHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this)
}
,
canvas.app.manor.view.controls.elements.LabourInput.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.elements.LabourInput.prototype.update = function() {
    var t = canvas.app.manor.model;
    this.fieldLabourMax.text = canvas.Translator.getText(196) + "  <b>" + t.user.labourMax + "</b>",
    this.testRequires()
}
,
canvas.app.manor.view.controls.elements.LabourInput.prototype.testRequires = function() {
    var t = canvas.app.manor.model
      , e = parseInt(this.input.text)
      , a = 0 < e;
    return e > t.user.labour ? (this.input.input && (this.input.input.color = "#bc0000"),
    a = !1) : this.input.input && (this.input.input.color = "#446c00"),
    a
}
,
canvas.app.manor.view.controls.elements.LabourInput.prototype.changeHandler = function() {
    this.setInputValue(this.input.text || 0)
}
,
canvas.app.manor.view.controls.elements.LabourInput.prototype.draggerHandler = function() {
    this.setInputValue(this.dragger.current)
}
,
canvas.app.manor.view.controls.elements.LabourInput.prototype.setInputValue = function(t) {
    t = parseInt(t);
    var e = canvas.app.manor.model
      , e = this.maxValue >= e.user.labourMax ? e.user.labourMax : this.maxValue;
    t = e < t ? e : t < 0 ? 0 : t,
    this.input.text = t,
    this.dragger.current = t,
    canvas.EventManager.dispatchEvent(canvas.ui.InputEvent.EVENT_CHANGE, this, this.input.text)
}
,
canvas.app.manor.view.controls.elements.LabourInput.prototype.clear = function() {
    this.setInputValue(0)
}
,
canvas.app.manor.view.controls.elements.LabourInput.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.dragger, this.draggerHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.InputEvent.EVENT_CHANGE, this.input, this.changeHandler, this),
    canvas.px.Container.prototype.destroy.call(this, {
        children: !0
    })
}
,
canvas.app.manor.view.controls.elements.Level = function() {
    Object.defineProperty(this, "level", {
        get: function() {
            return parseInt(this.levelField.text)
        },
        set: function(t) {
            this.levelField.text = t
        }
    }),
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "level_back"))),
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,16777215,60,23,"center")),
    this.title.text = canvas.Translator.getText(172),
    this.title.position.set(46, 11),
    this.levelField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_16_BOLD,16777215,31,23,"center")),
    this.levelField.position.set(12, 9)
}
,
canvas.app.manor.view.controls.elements.Level.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.MenuItemRenderer = function(t) {
    canvas.ui.ListRenderer.call(this),
    this.setSize(200, t.title ? 20 : 10),
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,15250952,this._width,this._height,"left")),
    this.buttonMode = !0,
    this.data = t
}
,
canvas.app.manor.view.MenuItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.MenuItemRenderer.prototype.update = function() {
    canvas.app.manor.model;
    this.data && (this.field.text = this.data.title ? "<img src='menu_icon' atlas='ui' yOffset='1'/>  " + this.data.title : "")
}
,
canvas.app.manor.view.MenuItemRenderer.prototype.clickHandler = function() {
    var t, e = canvas.app.manor.model;
    "exit" == this.data.link ? canvas.EventManager.dispatchEvent(canvas.app.manor.Event.EXIT) : "prt" == this.data.link.substr(0, 3) ? (t = {
        object: {
            building_action: "teleport",
            number: this.data.link.substr(3)
        }
    },
    "1" != e.localStorage.get("portalConfirm") ? canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(269) + " <b>" + this.data.title + "</b>?" + (0 < e.portalJumpCost ? "<br/>" + canvas.Translator.getText(271) + " <b><font color='#0066cc'>" + e.portalJumpCost + "</font></b> <img src='energy_icon' yOffset='2' atlas='ui'/>" : ""),
        object: {
            name: canvas.app.manor.Event.USE_PORTAL_ACTION,
            params: t
        }
    }) : canvas.EventManager.dispatchEvent(canvas.app.manor.Event.USE_PORTAL_ACTION, null, t)) : canvas.EventManager.dispatchEvent(this.data.event, null, {
        params: this.data.link
    })
}
,
canvas.app.manor.view.MenuItemRenderer.prototype.overHandler = function() {
    this.filters = [canvas.Functions.getBrightness(1.2)]
}
,
canvas.app.manor.view.MenuItemRenderer.prototype.outHandler = function() {
    this.filters = null
}
,
canvas.app.manor.view.MenuItemRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
,
canvas.app.manor.view.controls.elements.MyRequestLine = function(t) {
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_0"),4,0,4,0),
    this.back.width = 370,
    this.back.height = 24,
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7092753,224,18,"left"),
    this.title.position.set(7, 5);
    var e = new Object;
    e.back = "labour2_progress_back",
    e.front = "labour2_progress",
    e.font = canvas.Const.FONT_TAHOMA_9,
    e.color = 6499081,
    e.pos = new canvas.px.Point(6,5),
    e.textPos = new canvas.px.Point(0,1),
    this.progress = new canvas.app.manor.view.controls.elements.Labour("",e),
    this.progress.position.set(150, 0),
    this.fieldEnergy = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,30,18,"right"),
    this.fieldEnergy.position.set(243, 5),
    this.fieldPrice = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,26,18,"right"),
    this.fieldPrice.position.set(272, 5),
    this.back2 = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_3"),4,4,4,4),
    this.back2.width = 370,
    this.back2.height = 72;
    var a = this.back2.addChild(new canvas.px.Graphics);
    a.lineStyle(1, 14922592);
    for (var s = 0; s < 184; s += 2)
        a.moveTo(2 * s, 0),
        a.lineTo(2 * (s + 1), 0);
    a.position.set(2, 28),
    this.fieldComment = this.back2.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7092753,362,37,"left")),
    this.fieldComment.position.set(6, 35),
    canvas.ui.ListRenderer.call(this, null, 380, 24),
    this.addChild(this.back),
    this.addChild(this.title),
    this.addChild(this.progress),
    this.addChild(this.fieldEnergy),
    this.addChild(this.fieldPrice),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "money_silver"))).position.set(300, 6),
    this.editButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "edit_button"))),
    this.editButton.position.set(322, 0),
    this.deleteButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "delete_button"))),
    this.deleteButton.position.set(346, 0),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.editButton, this.editClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.deleteButton, this.deleteClickHandler, this),
    this.data = t
}
,
canvas.app.manor.view.controls.elements.MyRequestLine.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.elements.MyRequestLine.prototype.update = function() {
    var t, e, a;
    this.data && (a = canvas.app.manor.model,
    t = this.data,
    e = a.user.buildings[t.building],
    a = a.buildings[e.name][e.level + 1],
    this.title.text = a.title,
    this.progress.setLabour(e.labour, a.cost),
    this.fieldEnergy.text = t.labour,
    this.fieldPrice.text = t.price,
    0 < e.hireTimeLeft ? (this.removeIfExist(this.back),
    this.addChildAt(this.back2, 0),
    this.fieldComment.text = canvas.Translator.getText(165) + " <b>" + e.hireTimeLeft + " " + canvas.Translator.getText(2001) + ".</b><br/>" + canvas.Translator.getText(166),
    this._height = 99) : (this.removeIfExist(this.back2),
    this.addChildAt(this.back, 0),
    this._height = 24))
}
,
canvas.app.manor.view.controls.elements.MyRequestLine.prototype.editClickHandler = function() {
    canvas.app.manor.model.requestToRemove = this.data.id,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_HIRE, null, {
        params: this.data.id,
        object: this.data
    })
}
,
canvas.app.manor.view.controls.elements.MyRequestLine.prototype.deleteClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(164),
        object: {
            name: canvas.app.manor.Event.REMOVE_WORK_REQUEST,
            params: {
                params: this.data.id
            }
        }
    })
}
,
canvas.app.manor.view.controls.elements.MyRequestLine.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.editButton, this.editClickHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.deleteButton, this.deleteClickHandler, this),
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
,
canvas.app.manor.view.controls.elements.Pager = function() {
    canvas.ui.Pager.call(this, canvas.ResourceLoader.getImage("ui", "pager_home"), canvas.ResourceLoader.getImage("ui", "pager_end"), canvas.ResourceLoader.getImage("ui", "pager_minus"), canvas.ResourceLoader.getImage("ui", "pager_plus"), new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,12713984,10,16,"left")),
    this._paddingNumbersLeft = 7
}
,
canvas.app.manor.view.controls.elements.Pager.prototype = Object.create(canvas.ui.Pager.prototype),
canvas.app.manor.view.controls.elements.PagerSimple = function(t, e, a, s, i) {
    var n, o, r, c;
    null == i && (i = 2),
    t == canvas.ui.ScrollType.HORIZONTAL ? (n = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left")),
    (o = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left"))).scale.x = -1,
    o.pivot = new canvas.px.Point(-25,0),
    r = null,
    e && ((r = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_6"),4,4,4,4)).height = 28),
    c = null,
    a && (c = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "drag_h")))) : (n = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_top")),
    (o = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_top"))).scale.y = -1,
    o.pivot = new canvas.px.Point(0,-25),
    r = null,
    e && ((r = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_6"),4,4,4,4)).width = 28),
    c = null,
    a && (c = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "drag_v")))),
    canvas.ui.Scroll.call(this, t, n, o, r, c, s, !1, !0, null, i),
    this._padding = 18,
    this._backPadding = 10,
    this.max = 0
}
,
canvas.app.manor.view.controls.elements.PagerSimple.prototype = Object.create(canvas.ui.Scroll.prototype),
canvas.app.manor.view.controls.elements.PanelHeaderRenderer = function(t) {
    canvas.ui.ListRenderer.call(this),
    this.type = t,
    this.back = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tab_white"),37,0,37,0)),
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,7092753,100,20,"center")),
    this.field.position.set(20, 6)
}
,
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype.init = function(t, e) {
    this.title = e,
    this.field.text = t
}
,
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype.update = function() {
    this.back.width = this._width,
    this.field.setSize(this._width - 40)
}
,
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype.updateSelection = function() {
    1 === this.type ? (this.back.texture = this.selected ? canvas.ResourceLoader.getImage("ui", "tab_white") : canvas.ResourceLoader.getImage("ui", "tab_red"),
    this.field.color = this.selected ? 7092753 : 16118721) : this.field.color = this.selected ? 7092753 : 9243401,
    this.buttonMode = !this.selected
}
,
canvas.app.manor.view.controls.elements.PanelHeaderRenderer.prototype.clickHandler = function() {
    this.parent.parent.path = this.title,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.PANELS_CLICK, this.parent.parent)
}
,
canvas.app.manor.view.controls.elements.Panels = function(t, e, a, s, i, n, o) {
    this._path = "",
    Object.defineProperty(this, "path", {
        get: function() {
            return this._path
        },
        set: function(t) {
            this._path = this.titles.indexOf(t) < 0 ? this.titles[0] : t;
            var e, a, s = this.content.length;
            for (canvas.Functions.clearChildren(this.contentContainer),
            e = 0; e < s; e++)
                (a = this.items[e]).title == this._path ? (this.contentContainer.addChild(this.content[e]),
                this.headerContainer.addChild(this.back),
                this.headerContainer.addChild(this.items[e]),
                a.selected = !0) : a.selected = !1;
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.PANELS_PATH, this)
        }
    }),
    canvas.ui.Component.call(this),
    this.headerContainer = this.addChild(new canvas.px.Container),
    this.back = this.headerContainer.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_back"),20,20,20,20)),
    this.back.y = 27,
    this.contentContainer = this.addChild(new canvas.px.Container),
    this.contentContainer.y = this.back.y,
    this.type = s || 0,
    this.leftPadding = n || 0,
    this.rightPadding = o || 0,
    this.maxSize = i || 220,
    this.items = [],
    this._height = 265,
    this.init(t, e, a)
}
,
canvas.app.manor.view.controls.elements.Panels.prototype = Object.create(canvas.ui.Component.prototype),
canvas.app.manor.view.controls.elements.Panels.prototype.init = function(t, e, a) {
    this.content = t,
    this.titles = e,
    this.labels = a;
    var s, i, n = this.content.length;
    if (n > this.items.length)
        for (s = this.items.length; s < n; s++)
            this.items.push(new canvas.app.manor.view.controls.elements.PanelHeaderRenderer(this.type));
    for (canvas.Functions.clearChildren(this.headerContainer),
    s = 0; s < n; s++)
        i = this.items[s],
        this.headerContainer.addChild(i),
        i.init(this.labels[s], this.titles[s]);
    this.update(),
    this._path && (this.path = this._path)
}
,
canvas.app.manor.view.controls.elements.Panels.prototype.update = function() {
    this.back.width = this._width,
    this.back.height = this._height;
    for (var t, e = this.content.length, a = Math.min(this.maxSize, Math.round((this._width - this.rightPadding - this.leftPadding - 40 + 20 * (e - 1)) / e)), s = 0; s < e; s++)
        (t = this.items[s]).setSize(a),
        t.x = 20 + this.leftPadding + s * (a - 20)
}
,
canvas.app.manor.view.controls.elements.Panels.prototype.getEnabled = function(t) {
    for (var e = this.content.length, a = 0; a < e; a++)
        if (this.items[a].title == t)
            return !0;
    return !1
}
,
canvas.app.manor.view.controls.elements.Panels.prototype.setDefaultPath = function(t) {
    this.path = 1 < this.titles.length && this.getEnabled(this.titles[1]) ? this.titles[1] : this.titles[0]
}
,
canvas.app.manor.view.controls.elements.PetItem = function() {
    canvas.ui.ListRenderer.call(this, null, 64, 64),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_back"))).position.set(6, 5),
    this.image = this.addChild(new canvas.ui.Image),
    this.image.position.set(6, 5),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pet_item_border"))),
    this.progress = this.addChild(new canvas.ui.Progress(canvas.ResourceLoader.getImage("ui", "pet_item_progress"))),
    this.progress.position.set(6, 68),
    this.progress.progress = .5,
    this.progressRound = this.addChild(new canvas.px.RoundProgress(60,0,.8)),
    this.progressRound.position.set(35, 35),
    this.progressRound.scale.x = -1,
    this.msk = this.addChild(new canvas.px.Mask(60,60)),
    this.msk.position.set(6, 5),
    this.progressRound.mask = this.msk,
    this.timeField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD_STROKE,15587444,64,20,"center")),
    this.timeField.position.set(4, 43),
    this.selector = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "pet_item_selector"))),
    this.selector.position.set(-9, -7),
    this.buttonMode = !0,
    this.hitArea = new canvas.px.Rectangle(0,0,64,80)
}
,
canvas.app.manor.view.controls.elements.PetItem.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.elements.PetItem.prototype.update = function() {
    this.data ? (this.image.setImage(this.data.image),
    this.setProgressExp(this.data.exp / this.data.expUp),
    this.setProgress(1 - (this.data.timeFull == this.data.time ? 0 : this.data.time / this.data.timeFull)),
    this.timeField.text = 0 < this.data.time ? canvas.Functions.formatDate(1e3 * this.data.time, "00", 2, !0) : "") : (this.setProgressExp(0),
    this.setProgress(1),
    this.timeField.text = "",
    this.image.clear())
}
,
canvas.app.manor.view.controls.elements.PetItem.prototype.setProgressExp = function(t) {
    this.progress.progress = t
}
,
canvas.app.manor.view.controls.elements.PetItem.prototype.setProgress = function(t) {
    this.progressRound.progress = 1 - t
}
,
canvas.app.manor.view.controls.elements.PortalList = function() {
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            var e = null == this._data;
            if (this._data = t,
            null != this._data) {
                var a, s, i = this._data.length;
                if (i > this.items.length)
                    for (a = this.items.length; a < i; a++)
                        (s = new canvas.app.manor.view.controls.elements.PortalListItem).y = 50,
                        s.alpha = 0,
                        this.items.push(s);
                for (i = this.items.length,
                a = 0; a < i; a++)
                    this.items[a].data = this._data[a];
                this.update(e),
                this.currentIndex = this._currentIndex
            }
        }
    }),
    this._currentIndex = 0,
    Object.defineProperty(this, "currentIndex", {
        get: function() {
            return this._currentIndex
        },
        set: function(t) {
            var e = this._data.length;
            this._currentIndex = t < 0 ? 0 : e <= t ? e - 1 : t,
            this.leftArrow.visible = e > canvas.app.manor.view.controls.elements.PortalList.ON_PAGE - 2 && 0 < this.currentIndex,
            this.rightArrow.visible = e > canvas.app.manor.view.controls.elements.PortalList.ON_PAGE - 2 && this.currentIndex < e - 1,
            this.update(),
            canvas.EventManager.dispatchEvent(canvas.ui.Event.EVENT_CHANGE, this)
        }
    }),
    Object.defineProperty(this, "selectedItem", {
        get: function() {
            return this.data[this.currentIndex]
        }
    }),
    canvas.px.Container.call(this),
    this.items = new Array,
    this.container = this.addChild(new canvas.px.Container),
    this.container.position.set(2, 8),
    this.leftArrow = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left"))),
    this.leftArrow.y = 38,
    this.rightArrow = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "arrow_left"))),
    this.rightArrow.position.set(385, 38),
    this.rightArrow.scale.x = -1,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.leftArrowClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.rightArrowClickHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.ENTER_FRAME, null, this.updateHandler, this)
}
,
canvas.app.manor.view.controls.elements.PortalList.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.elements.PortalList.ON_PAGE = 3,
canvas.app.manor.view.controls.elements.PortalList.prototype.update = function(t) {
    var e, a, s = this.data.length;
    if (0 != s) {
        for (e = 0; e < s; e++)
            a = this.items[e],
            e < this.currentIndex - 1 ? (a.targetAlpha = 0,
            a.targetScale = 0,
            a.targetPoint.x = 60,
            a.targetPoint.y = 50,
            0 < a.alpha && this.container.addChildAt(a, 0)) : e == this.currentIndex - 1 ? (a.targetAlpha = .6,
            a.targetScale = 1,
            a.targetPoint.x = 120,
            a.targetPoint.y = 50,
            this.container.addChild(a)) : e == this.currentIndex ? (a.targetAlpha = 1,
            a.targetScale = 1,
            a.targetPoint.x = 190,
            a.targetPoint.y = 50) : e == this.currentIndex + 1 ? (a.targetAlpha = .6,
            a.targetScale = 1,
            a.targetPoint.x = 260,
            a.targetPoint.y = 50,
            this.container.addChild(a)) : (a.targetAlpha = 0,
            a.targetScale = 0,
            a.targetPoint.x = 320,
            a.targetPoint.y = 50,
            0 < a.alpha && this.container.addChildAt(a, 0)),
            t && (a.alpha = a.targetAlpha,
            a.scale.x = a.scale.y = a.targetScale,
            a.x = a.targetPoint.x,
            a.y = a.targetPoint.y);
        this.container.addChild(this.items[this.currentIndex])
    }
}
,
canvas.app.manor.view.controls.elements.PortalList.prototype.leftArrowClickHandler = function() {
    this.currentIndex--
}
,
canvas.app.manor.view.controls.elements.PortalList.prototype.rightArrowClickHandler = function() {
    this.currentIndex++
}
,
canvas.app.manor.view.controls.elements.PortalList.prototype.select = function(t) {
    this.currentIndex = this.items.indexOf(t)
}
,
canvas.app.manor.view.controls.elements.PortalList.prototype.updateHandler = function() {
    if (this.parent && this.parent.parent && this.parent.isActive)
        for (var t, e, a = this.items.length, s = 0; s < a; s++)
            (t = this.items[s]).targetAlpha != t.alpha ? (e = t.targetAlpha > t.alpha,
            t.alpha += e ? .15 : -.15,
            t.targetAlpha > t.alpha != e && (t.alpha = t.targetAlpha)) : 0 == t.alpha && this.container.removeIfExist(t),
            t.targetPoint.x != t.x && (e = t.targetPoint.x > t.x,
            t.x += e ? 10 : -10,
            t.targetPoint.x > t.x != e && (t.x = t.targetPoint.x)),
            t.targetPoint.y != t.y && (e = t.targetPoint.y > t.y,
            t.y += e ? 3 : -3,
            t.targetPoint.y > t.y != e && (t.y = t.targetPoint.y)),
            t.targetScale != t.scale.x && (e = t.targetScale > t.scale.x,
            t.scale.x += e ? .2 : -.2,
            t.targetScale > t.scale.x != e && (t.scale.x = t.targetScale),
            t.scale.y = t.scale.x)
}
,
canvas.app.manor.view.controls.elements.PortalListItem = function() {
    canvas.ui.ListRenderer.call(this),
    this.targetPoint = new canvas.px.Point(300),
    this.targetAlpha = 0,
    this.targetScale = 0,
    this.container = this.addChild(new canvas.px.Container),
    this.image = this.container.addChild(new canvas.ui.Image),
    this.image.y = 10,
    this.imageMask = this.container.addChild(new canvas.px.Graphics),
    this.imageMask.beginFill(0, 1),
    this.imageMask.drawEllipse(90, 48, 90, 48),
    this.imageMask.endFill(),
    this.imageMask.position.set(3, 6),
    this.image.mask = this.imageMask,
    this.frontImage = this.container.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
    this.container.position.set(-94, -53)
}
,
canvas.app.manor.view.controls.elements.PortalListItem.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.elements.PortalListItem.prototype.update = function() {
    if (this.data) {
        switch (this.data.status) {
        case -1:
            this.frontImage.texture = canvas.ResourceLoader.getImage("ui", "portal_image_1");
            break;
        case 1:
            this.frontImage.texture = canvas.ResourceLoader.getImage("ui", "portal_image_2");
            break;
        default:
            this.frontImage.texture = canvas.ResourceLoader.getImage("ui", "portal_image_3")
        }
        var t = canvas.app.manor.model.portalLocations[this.data.locationID];
        t && t.picture && this.image.url != t.picture && this.image.setImage(t.picture)
    }
}
,
canvas.app.manor.view.controls.elements.Scroll = function(t, e) {
    null == e && (e = !0);
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"))
      , s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    s.scale.y = -1,
    s.sprite.y = 18;
    var i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_drag"),[0, 7, 0, 5])
      , n = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "scroll_back"),0,4,0,4);
    n.x = -1,
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.VERTICAL, a, s, n, i, t, e, !0),
    this._padding = 15,
    this._backPadding = 10,
    this._step = 50,
    this.setSize(22)
}
,
canvas.app.manor.view.controls.elements.Scroll.prototype = Object.create(canvas.ui.Scroll.prototype),
canvas.app.manor.view.controls.elements.TaskItem = function() {
    canvas.ui.ListRenderer.call(this, null, 360, 29),
    this.container = new canvas.px.Container,
    this.title = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,10354945,188,20,"left")),
    this.title.position.set(0, 7),
    this.progress = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(130)),
    this.progress.position.set(190, 0),
    this.progress.setLabour(0, 0),
    this.removeButton = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "delete_button"))),
    this.removeButton.position.set(318, 3),
    this.click = null,
    this.mouseover = null,
    this.mouseout = null,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.removeButton, this.clickHandler, this)
}
,
canvas.app.manor.view.controls.elements.TaskItem.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.elements.TaskItem.prototype.update = function() {
    var t;
    this.data ? (this.addChild(this.container),
    (t = canvas.app.manor.model.workShopRecepts[this.data.recipe]) && (this.title.text = "<font color='#6c3a11'>" + this.name + ". </font>" + t.title + (1 < t.resultCount * this.data.count ? " (" + (t.resultCount * this.data.count).toString() + ")" : "")),
    this.progress.setLabour(this.data.duration, this.data.durationMax),
    this.progress.tf.text = (0 == this.data.duration ? "" : canvas.Functions.formatDate(1e3 * this.data.duration, "00", 2, !0) + " / ") + canvas.Functions.formatDate(1e3 * this.data.durationMax, "00", 2, !0)) : this.removeIfExist(this.container)
}
,
canvas.app.manor.view.controls.elements.TaskItem.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(193) + "?",
        object: {
            name: canvas.app.manor.Event.USE_WORKSHOP_ACTION,
            params: {
                object: {
                    building_action: "cancel",
                    craft_request_id: this.data.id
                }
            }
        }
    })
}
,
canvas.app.manor.view.controls.elements.TaskItem2 = function() {
    canvas.ui.ListRenderer.call(this, null, 360, 29),
    this.container = new canvas.px.Container,
    this.title = this.container.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,10354945,208,20,"left")),
    this.title.position.set(0, 7),
    this.progress = this.container.addChild(new canvas.app.manor.view.controls.elements.LabourGreen(130)),
    this.progress.position.set(215, 0),
    this.progress.setLabour(0, 0),
    this.click = null,
    this.mouseover = null,
    this.mouseout = null
}
,
canvas.app.manor.view.controls.elements.TaskItem2.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.elements.TaskItem2.prototype.update = function() {
    this.data ? (this.addChild(this.container),
    this.title.text = "<font color='#6c3a11'>" + this.name + ". </font>" + this.data.item.title + (1 < this.data.item.count * this.data.count ? " (" + (this.data.item.count * this.data.count).toString() + ")" : ""),
    this.progress.setLabour(this.data.duration, this.data.durationMax),
    this.progress.tf.text = (0 == this.data.duration ? "" : canvas.Functions.formatDate(1e3 * this.data.duration, "00", 2, !0) + " / ") + canvas.Functions.formatDate(1e3 * this.data.durationMax, "00", 2, !0)) : this.removeIfExist(this.container)
}
,
canvas.app.manor.view.controls.elements.Tree = function() {
    canvas.ui.List.call(this, canvas.ui.ListType.VERTICAL, 1)
}
,
canvas.app.manor.view.controls.elements.Tree.prototype = Object.create(canvas.ui.List.prototype),
canvas.app.manor.view.controls.elements.Tree.prototype.openAll = function(t) {
    null == t && (t = !0);
    for (var e = this.items.length, a = 0; a < e; a++)
        this.items[a].opened = t
}
,
canvas.app.manor.view.controls.elements.Tree.prototype.init = function(t, e, a) {
    var s;
    null == a && (a = !0);
    var i, n = new Array, o = this.items.length;
    if (a)
        for (i = 0; i < o; i++)
            n.push(this.items[i].opened);
    for (this.clear(!1),
    this.titles = t,
    this.containers = e,
    o = t.length,
    i = 0; i < o; i++)
        s = new canvas.app.manor.view.controls.elements.TreeItem({
            title: t[i],
            content: e[i]
        }),
        this.add(s, !1),
        a && (s.opened = n[i]);
    this.update()
}
,
canvas.app.manor.view.controls.elements.TreeItem = function(t) {
    this._opened = !1,
    Object.defineProperty(this, "opened", {
        get: function() {
            return this._opened
        },
        set: function(t) {
            (this._opened = t) ? this.addChild(this.contentContainer) : this.removeIfExist(this.contentContainer),
            this.setSize(this._width, Math.max(30, this.height)),
            this.parent && this.parent.parent.parent && this.parent.parent.parent.update && this.parent.parent.parent.update(),
            this.button.sprite.texture = this.button.baseTexture = canvas.ResourceLoader.getImage("ui", t ? "minus_icon" : "plus_icon")
        }
    }),
    canvas.ui.ListRenderer.call(this, null, 330, 50),
    this.button = this.addChild(new canvas.ui.SimpleButton(canvas.px.TextureEmpty)),
    this.title = this.button.sprite.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,10354945,305,18,"left")),
    this.title.position.set(28, 5),
    this.contentContainer = this.addChild(new canvas.px.Container),
    this.contentContainer.position.set(28, 25),
    this.click = null,
    this.mouseover = null,
    this.mouseout = null,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this),
    this.data = t
}
,
canvas.app.manor.view.controls.elements.TreeItem.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.elements.TreeItem.prototype.update = function() {
    canvas.Functions.clearChildren(this.contentContainer),
    this.data ? (this.contentContainer.addChild(this.data.content),
    this.title.text = this.data.title) : this.title.text = ""
}
,
canvas.app.manor.view.controls.elements.TreeItem.prototype.clickHandler = function() {
    this.opened = !this.opened
}
,
canvas.app.manor.view.controls.elements.TreeItem.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this),
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
,
canvas.app.manor.view.controls.elements.UserLine = function() {
    canvas.px.Container.call(this),
    this.nickField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,12713984,200,18,"left"),
    this.addChild(this.nickField),
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "info_button_0")),
    this.addChild(this.infoButton),
    this.infoButton.y = 2,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.infoClickHandler, this)
}
,
canvas.app.manor.view.controls.elements.UserLine.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.elements.UserLine.prototype.init = function(t) {
    this._login = t.login,
    this.nickField.text = t.login + " [" + t.level + "]",
    this.infoButton.x = this.nickField.textWidth + 3
}
,
canvas.app.manor.view.controls.elements.UserLine.prototype.infoClickHandler = function() {
    showUserInfo(this._login)
}
,
canvas.app.manor.view.controls.elements.UserLine.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.infoClickHandler, this),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.manor.view.controls.elements.WorkRequestLine = function(t, e, a) {
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t,
            this.update()
        }
    }),
    canvas.px.Container.call(this),
    null == a && (a = "money_silver"),
    this.index = t,
    this.back = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_0"),4,0,4,0),
    this.back.width = 335,
    this.addChild(this.back),
    this.back.position.set(30, 0),
    this.priceField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,29,18,"left"),
    this.addChild(this.priceField),
    this.priceField.position.set(314, 5),
    this.labourField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,34,18,"left"),
    this.addChild(this.labourField),
    this.labourField.position.set(259, 5);
    a = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", a));
    this.addChild(a),
    a.position.set(345, 7),
    this.check = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "check_0"),null,new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "check_0_checker")),e),
    this.addChild(this.check),
    this.check.position.set(0, -4),
    this.userLine = new canvas.app.manor.view.controls.elements.UserLine,
    this.addChild(this.userLine),
    this.userLine.position.set(37, 5),
    this.back.interactive = !0,
    this.back.click = this.clickHandler.bind(this)
}
,
canvas.app.manor.view.controls.elements.WorkRequestLine.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.elements.WorkRequestLine.prototype.update = function() {
    this.data && (this.priceField.text = this.data.price || "",
    this.labourField.text = this.data.labour || "",
    this.userLine.init(this.data.user))
}
,
canvas.app.manor.view.controls.elements.WorkRequestLine.prototype.clickHandler = function() {
    this.check.select()
}
,
canvas.app.manor.view.controls.elements.WorkRequestLine.prototype.destroy = function() {
    this.back.click = null,
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.manor.view.controls.throne.ItemsWindow = function() {
    canvas.px.Window.call(this),
    this._compactModey = !0,
    Object.defineProperty(this, "compactMode", {
        get: function() {
            return this._compactMode
        },
        set: function(t) {
            this._compactMode = t,
            this._compactMode ? (this.panels.setSize(305, 320),
            this.list.setSize(250, 280),
            this.list.cellsCount = 3,
            this.arrow.scale.x = -1) : (this.panels.setSize(470, 320),
            this.list.setSize(420, 280),
            this.list.cellsCount = 5,
            this.arrow.scale.x = 1),
            this.closeButton.position.set(this.panels._width - 25, 15)
        }
    }),
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            t && (this._data = t,
            this.update())
        }
    }),
    this.panels = this.addChild(new canvas.app.manor.view.controls.elements.Panels([new canvas.px.Container, new canvas.px.Container],["shop", "my"],[canvas.Translator.getText(1502), canvas.Translator.getText(253)],1)),
    this.header = this.panels,
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,3)),
    this.list.position.set(20, 40),
    this.list.scroll = new canvas.app.manor.view.controls.elements.Scroll(this,!1),
    this.list._scrollPadding = 20,
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "main_window_close_base"),canvas.ResourceLoader.getImage("ui", "main_window_close_over"),canvas.ResourceLoader.getImage("ui", "main_window_close_down"),null)),
    this.arrow = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "throne_room_arrow_base"),canvas.ResourceLoader.getImage("ui", "throne_room_arrow_over"),canvas.ResourceLoader.getImage("ui", "throne_room_arrow_down"))),
    this.arrow.pivot = new canvas.px.Point(9,10),
    this.arrow.position.set(20, 325),
    this.compactMode = !0,
    this.panels.path = "shop",
    this.interactive = !0,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.arrow, this.arrowClickHandler, this)
}
,
canvas.app.manor.view.controls.throne.ItemsWindow.prototype = Object.create(canvas.px.Window.prototype),
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.clickHandler = function(t) {
    canvas.px.Window.prototype.clickHandler.call(this, t),
    this.parent && this.parent.addChild(this)
}
,
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.arrowClickHandler = function() {
    this.compactMode = !this.compactMode
}
,
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.update = function() {
    this.list.clear(!1);
    for (var t = this.data.length, e = 0; e < t; e++)
        this.list.add(new canvas.app.manor.view.controls.throne.ThroneItemRenderer(this.data[e]), !1);
    this.list.update()
}
,
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.updateTime = function() {
    for (var t = this.list.items.length, e = 0; e < t; e++)
        this.list.items[e].updateTime()
}
,
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.deactivate = function() {}
,
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.hide = function() {}
,
canvas.app.manor.view.controls.throne.ItemsWindow.prototype.clickHandler = function(t) {
    canvas.px.Window.prototype.clickHandler.call(this, t),
    canvas.Functions.findParent(this.closeButton, t.target) && (canvas.app.manor.model.throneRoomData.currentType = 0,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.THRONE_ROOM_UPDATE))
}
,
canvas.app.manor.view.controls.throne.ThroneItemRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, null, 76, 125),
    this.container = this.addChild(new canvas.px.Container),
    this.container.position.set(2, 2),
    this.shopBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "throne_room_item_back")));
    var e = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_back")));
    e.position.set(8, 7),
    this.image = this.container.addChild(new canvas.ui.Image),
    this.image.position.set(8, 7),
    this.image.interactive = !0,
    (e = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "item_border")))).position.set(2, 2),
    this.money = this.container.addChild(new canvas.app.view.Money(null,null,null,76,null,"center")),
    this.money.y = 76,
    this.buyButton = this.container.addChild(new canvas.app.view.SmallButton),
    this.buyButton.setTitle(canvas.Translator.getText(167)),
    this.buyButton.position.set(7, 100),
    this.actionPanel = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "item_plane"))),
    this.actionPanel.position.set(8, 30),
    this.actionTitle = this.actionPanel.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,3419170,60,14,"center")),
    this.actionTitle.position.set(0, -2),
    this.actionPanel.interactive = !0,
    this.actionPanel.buttonMode = !0,
    this.activeImage = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "green_check"))),
    this.activeImage.position.set(24, 52),
    this.expiryField = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE,15521651,74,18,"center")),
    this.expiryField.position.set(0, 9),
    this.hint = new canvas.app.view.MappingHint,
    t.mode != canvas.data.manor.throne.ItemData.MODE_SHOP && (this._height = 72),
    this.data = t,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.actionPanel, this.actionClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this.buyClickHandler, this),
    this.image.mouseover = this.overHandler.bind(this),
    this.image.mouseout = this.outHandler.bind(this),
    this.mouseover = null,
    this.mouseout = null,
    this.click = null
}
,
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.update = function() {
    var t = canvas.app.manor.model.throneRoomData;
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_REMOVE, null, {
        target: this.buyButton
    }),
    this.expiryField.text = "";
    var e = this.data;
    e && e.artifact ? (this.image.setImage(e.artifact.picture),
    this.updateMoney(),
    this.activeImage.visible = e.isActive,
    this.buyButton.enabled = !e.isActive,
    e.mode == canvas.data.manor.throne.ItemData.MODE_SHOP ? (this.actionTitle.text = canvas.Translator.getText(e.artikulID == t.userData.redressItemID ? 1e3 : 1508),
    !e.isActive && t.userData.restrictions && null != t.userData.restrictions[e.id] && (canvas.EventManager.dispatchEvent(canvas.app.manor.Event.HINT_ADD, null, {
        target: this.buyButton,
        params: new canvas.utils.HintParams(this.hint)
    }),
    this.hint.update(t.userData.restrictions[e.id]),
    this.buyButton.enabled = !1),
    this.addChildAt(this.shopBack, 0),
    this.container.addChild(this.money),
    this.container.addChild(this.buyButton),
    this.expiryField.text = 0 < e.expiry ? canvas.Functions.formatDate(1e3 * e.expiry, "00", 2, !0) : "") : (this.actionTitle.text = canvas.Translator.getText(e.isActive ? 1e3 : 1506),
    this.removeIfExist(this.shopBack),
    this.container.removeIfExist(this.money),
    this.container.removeIfExist(this.buyButton),
    this.updateTime())) : (this.image.visible = !1,
    this.activeImage.visible = !1,
    this.removeIfExist(this.shopBack),
    this.container.removeIfExist(this.money),
    this.container.removeIfExist(this.buyButton))
}
,
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.updateTime = function() {
    var t = this.data;
    t && t.mode != canvas.data.manor.throne.ItemData.MODE_SHOP && (t = t.expiry - canvas.app.manor.model.serverTime.getTime(),
    this.expiryField.text = 0 < t ? canvas.Functions.formatDate(1e3 * t, "00", 2, !0) : "")
}
,
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.updateMoney = function() {
    if (this.money.reset(),
    this.data.money) {
        var t = this.data.money.getBageArtikul();
        if (t) {
            t = canvas.data.manor.throne.Prototypes.artifactPrototypes[t];
            t && (this.money.image = t.picture,
            this.money.imageCount = this.data.money.getBageCount())
        } else
            switch (this.data.money.priceType) {
            case canvas.data.manor.throne.ItemData.TYPE_MONEY:
                this.money.money = 100 * this.data.money.price;
                break;
            case canvas.data.manor.throne.ItemData.TYPE_DIAMONDS:
                this.money.gems = this.data.money.price
            }
    }
}
,
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.actionClickHandler = function() {
    var t = canvas.app.manor.model.throneRoomData
      , e = this.data;
    e.mode == canvas.data.manor.throne.ItemData.MODE_MY ? canvas.EventManager.dispatchEvent(e.isActive ? canvas.app.manor.Event.THRONE_ROOM_REMOVE : canvas.app.manor.Event.THRONE_ROOM_INSTALL, null, {
        id: e.id
    }) : (e.artikulID == t.userData.redressItemID ? t.userData.redressItemID = 0 : t.userData.redressItemID = e.artikulID,
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.THRONE_ROOM_UPDATE))
}
,
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.buyClickHandler = function(t) {
    t.params.stopPropagation(),
    this.data.mode == canvas.data.manor.throne.ItemData.MODE_SHOP && canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        params: canvas.Translator.getText(1507) + " <a href='/artifact_info.php?artikul_id=" + this.data.artifact.id + "'>" + this.data.artifact.title + "</a> " + canvas.Translator.getText(2021).toLowerCase() + " " + this.money.field.text + " ?",
        object: {
            name: canvas.app.manor.Event.THRONE_ROOM_BUY,
            params: this.data
        }
    })
}
,
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.overHandler = function() {
    this.data && this.data.artifact && artifactAltSimple(this.data.artifact.id, 2)
}
,
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.outHandler = function() {
    this.data && this.data.artifact && artifactAltSimple(this.data.artifact.id, 0)
}
,
canvas.app.manor.view.controls.throne.ThroneItemRenderer.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.actionPanel, this.actionClickHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buyButton, this.buyClickHandler, this),
    this.image.mouseover = null,
    this.image.mouseout = null,
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
,
canvas.app.manor.view.controls.throne.ThroneRoomRenderer = function(t) {
    canvas.ui.ListRenderer.call(this),
    this.container = this.addChild(new canvas.px.Container),
    this.image = this.container.addChild(new canvas.ui.Image),
    this.sensor = this.addChild(new canvas.px.Graphics),
    this.sensor.interactive = !0,
    this.sensor.mouseover = this.overHandler.bind(this),
    this.sensor.mouseout = this.outHandler.bind(this),
    this.image.interactiveChildren = !1,
    this.image.interactive = !1,
    this.mc = null,
    this.lastURL = null,
    this.data = t
}
,
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.update = function() {
    var t, e, a, s = canvas.app.manor.model.throneRoomData;
    this.filters = [],
    this.data && (0 < this.data.artikulID ? (e = canvas.data.manor.throne.Prototypes.getTypePrototype(this.data.proto.type),
    t = this.data.proto.picture) : s.watchMode ? (this.clear(),
    this.lastURL = "") : t = (e = canvas.data.manor.throne.Prototypes.getTypePrototype(this.data.id)).imageURL,
    t && (this.createSensor(e.id, t),
    this.lastURL != t && (this.clear(),
    "swf" == (a = t.split("."))[a.length - 1] ? (a = canvas.Functions.extractSwfName(t),
    this.mc = this.container.addChild(new canvas.px.MovieClip(canvas.Config.throneRoomPath + a + "/" + a)),
    this.mc.frameEvent = canvas.app.manor.Event.ENTER_FRAME,
    this.mc.interactiveChildren = !1,
    this.mc.interactive = !1,
    this.mc.ready ? this.readyHandler() : canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this)) : this.image.setImage(t)),
    this.position.set(e.posX, e.posY),
    this.lastURL = t,
    s.currentType != e.id || e && e.disabled || (this.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 15521651, .1)])))
}
,
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.createSensor = function(t) {
    switch (this.sensor.clear(),
    this.sensor.beginFill(0, 0),
    t) {
    case 1:
        this.sensor.drawPolygon(new canvas.px.Point(190,190), new canvas.px.Point(370,70), new canvas.px.Point(630,70), new canvas.px.Point(810,190));
        break;
    case 2:
        this.sensor.drawEllipse(170, 130, 100, 50);
        break;
    case 3:
        this.sensor.drawRect(15, 15, 40, 180),
        this.sensor.drawRect(945, 15, 40, 180),
        this.sensor.drawRect(170, 40, 25, 125),
        this.sensor.drawRect(803, 40, 25, 125),
        this.sensor.drawRect(270, 60, 10, 90),
        this.sensor.drawRect(720, 60, 10, 90),
        this.sensor.drawRect(314, 68, 7, 72),
        this.sensor.drawRect(679, 68, 7, 72);
        break;
    case 4:
        this.sensor.drawRect(20, 20, 260, 130);
        break;
    case 5:
        this.sensor.drawRect(16, 5, 16, 120),
        this.sensor.drawRect(320, 5, 16, 120);
        break;
    case 6:
        this.sensor.drawEllipse(80, 90, 60, 30);
        break;
    case 7:
        this.sensor.drawEllipse(50, 50, 40, 20);
        break;
    case 8:
        this.sensor.drawEllipse(30, 32, 20, 10);
        break;
    case 9:
        this.sensor.drawEllipse(78, 80, 60, 30);
        break;
    case 10:
        this.sensor.drawEllipse(50, 60, 40, 20);
        break;
    case 11:
        this.sensor.drawEllipse(25, 32, 20, 10);
        break;
    case 12:
        this.sensor.drawRect(156, 90, 40, 50);
        break;
    case 13:
        this.sensor.drawRect(21, 90, 40, 50);
        break;
    case 14:
        this.sensor.drawEllipse(74, 90, 20, 25);
        break;
    case 15:
        this.sensor.drawEllipse(50, 78, 15, 17);
        break;
    case 16:
        this.sensor.drawEllipse(33, 40, 10, 12);
        break;
    case 17:
        this.sensor.drawEllipse(61, 78, 20, 25);
        break;
    case 18:
        this.sensor.drawEllipse(39, 66, 15, 17);
        break;
    case 19:
        this.sensor.drawEllipse(31, 40, 10, 12);
        break;
    case 20:
        this.sensor.drawEllipse(80, 50, 10, 15),
        this.sensor.drawEllipse(195, 68, 9, 11),
        this.sensor.drawEllipse(260, 80, 5, 7),
        this.sensor.drawEllipse(838, 49, 10, 15),
        this.sensor.drawEllipse(725, 69, 9, 11),
        this.sensor.drawEllipse(661, 80, 5, 7);
        break;
    case 21:
        this.sensor.drawEllipse(37, 38, 16, 20);
        break;
    case 23:
        this.sensor.drawEllipse(46, 78, 26, 34)
    }
    this.sensor.endFill()
}
,
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.readyHandler = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this),
    1 < this.mc.totalFrames && (this.mc.loop = !0),
    this.mc.playChildren()
}
,
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.clear = function() {
    this.image.clear(),
    this.mc && (this.mc.destroy(),
    this.mc = null)
}
,
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.overHandler = function() {
    canvas.app.manor.model.throneRoomData.watchMode || (this.container.filters = [canvas.Functions.getBrightness(1.2)])
}
,
canvas.app.manor.view.controls.throne.ThroneRoomRenderer.prototype.outHandler = function() {
    this.container.filters = null
}
,
canvas.app.manor.view.controls.throne.ThroneRoomView = function() {
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t,
            this.update()
        }
    }),
    this._bMode = !0,
    Object.defineProperty(this, "bMode", {
        get: function() {
            return this._bMode
        },
        set: function(t) {
            this._bMode = t,
            this.updateButtonMode()
        }
    }),
    canvas.px.Container.call(this),
    this.items = []
}
,
canvas.app.manor.view.controls.throne.ThroneRoomView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.manor.view.controls.throne.ThroneRoomView.prototype.update = function() {
    if (this.data)
        for (var t, e = this.data.length, a = 0; a < e; a++)
            (t = this.items[a]) ? t.data = this.data[a] : ((t = this.addChild(new canvas.app.manor.view.controls.throne.ThroneRoomRenderer(this.data[a]))).name = "item",
            this.items.push(t),
            t.sensor.buttonMode = this.bMode)
}
,
canvas.app.manor.view.controls.throne.ThroneRoomView.prototype.updateButtonMode = function() {
    for (var t, e = this.items.length, a = 0; a < e; a++)
        (t = this.items[a]).sensor.buttonMode = t.sensor.interactive = this.bMode
}
,
canvas.app.manor.view.controls.throne.ThroneRoomView.prototype.stopAndPlay = function(t) {
    for (var e, a = this.items.length, s = 0; s < a; s++)
        (e = this.items[s]).mc && (t ? e.mc.stopChildren() : e.mc.playChildren())
}
,
canvas.app.world.Const = {},
canvas.app.world.Event = {
    ENTER_FRAME: "World.ENTER_FRAME",
    HINT_ADD: "World.HINT_ADD",
    HINT_REMOVE: "World.HINT_REMOVE"
},
canvas.app.world.Main = function(t, e, a) {
    canvas.px.Container.call(this),
    this.model = t,
    this.hintManager = e,
    this.windowsManager = a,
    this.model.isModule ? (canvas.app.world.Event.HINT_ADD = canvas.app.location.Event.HINT_ADD,
    canvas.app.world.Event.HINT_REMOVE = canvas.app.location.Event.HINT_REMOVE) : (canvas.EventManager.addEventListener(canvas.app.world.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.world.Event.HINT_REMOVE, null, this.handlerHintRemove, this)),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_UP, null, this.handlerKeyUp, this),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.handlerOpenWindow, this),
    this.view = new canvas.app.world.View(this),
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    this.addChild(this.view),
    this.addChild(this.hintContainer),
    this.windowsContainer = new canvas.px.Container,
    this.addChild(this.windowsContainer),
    this.timer = setInterval(this.timerHandler.bind(this), 1e3),
    this.flag_timer = setInterval(this.flag_timer_tic.bind(this), this.model.UpdInterval),
    this.loadFrontsData()
}
,
canvas.app.world.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.world.Main.prototype.handlerKey = function(t) {
    if (!document.activeElement || "HTMLInputElement" != document.activeElement.constructor.name) {
        var e = t.params.globalKeyCode
          , a = (t.params.altKey,
        t.params.ctrlKey,
        t.params.shiftKey);
        switch (e) {
        case canvas.Const.KEYS.L:
            a && canvas.Log.show(canvas.Log.WORLD);
            break;
        case canvas.Const.KEYS.LEFT_ARROW:
        case canvas.Const.KEYS.UP_ARROW:
        case canvas.Const.KEYS.RIGHT_ARROW:
        case canvas.Const.KEYS.DOWN_ARROW:
            this.model.keyData[e] = !0,
            this.model.keyProcssor || (this.model.keyProcssor = !0,
            canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.repeatKeyHandler, this))
        }
    }
}
,
canvas.app.world.Main.prototype.handlerKeyUp = function(t) {
    if (!document.activeElement || "HTMLInputElement" != document.activeElement.constructor.name) {
        t.params.preventDefault();
        var e = t.params.keyCode;
        t.params.altKey,
        t.params.ctrlKey,
        t.params.shiftKey;
        switch (e) {
        case canvas.Const.KEYS.LEFT_ARROW:
        case canvas.Const.KEYS.UP_ARROW:
        case canvas.Const.KEYS.RIGHT_ARROW:
        case canvas.Const.KEYS.DOWN_ARROW:
            this.model.keyData[e] && delete this.model.keyData[e]
        }
    }
}
,
canvas.app.world.Main.prototype.handlerOpenWindow = function() {
    this.hintManager.hide()
}
,
canvas.app.world.Main.prototype.resize = function(t, e) {
    t = this.get_ww(t),
    e = this.get_hh(e);
    this.hintManager.init(this.hintContainer, t, e),
    this.model.width = t,
    this.model.height = e,
    this.view.resize(t, e)
}
,
canvas.app.world.Main.prototype.get_ww = function(t) {
    var e = this.model;
    return t < e.min_stage_width ? e.min_stage_width : t > e.max_stage_width ? e.max_stage_width : t
}
,
canvas.app.world.Main.prototype.get_hh = function(t) {
    var e = this.model;
    return t < e.min_stage_height ? e.min_stage_height : t > e.max_stage_height ? e.max_stage_height : t
}
,
canvas.app.world.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.world.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.world.Main.prototype.swfObject = function(t) {
    var e, a, s = canvas.app.world.model;
    if (t)
        for (e in t)
            "fronts" === e && (a = t.fronts,
            s.parseFronts(a),
            this.view.updateFronts(),
            null != this.view.label2.frontsContent.fdata && (this.view.label2.frontsContent.fdata = s.frontsData[this.view.label2.frontsContent.fdata.id]))
}
,
canvas.app.world.Main.prototype.timerHandler = function() {
    var t, e, a = this.model;
    0 < a.treasureLocation && 1e3 * a.treasureFinishTime <= Date.now() ? (a.treasureArea = a.treasureLocation = 0,
    this.view.updateTreasure()) : this.view.label2.updateTreasureTime();
    var s, i = !1;
    for (s in a.frontsData)
        e = (t = a.frontsData[s]).cooldown - Date.now(),
        t.displayTime = canvas.Functions.formatDate(e),
        e <= 0 && (i = !0);
    i ? this.loadFrontsData() : this.view.label2.frontsContent.updateTime()
}
,
canvas.app.world.Main.prototype.loadFrontsData = function(t, e) {
    if(top?.document.gameFlags.hideFronts == true) {
        return
    }
    front_locations()
}
,
canvas.app.world.Main.prototype.setPoint = function(t) {
    try {
        0 == t ? canvas.Functions.deleteSessTarget() : setCookie("sess_target", String(t))
    } catch (t) {
        canvas.app.world.log("setPoint: " + t)
    }
}
,
canvas.app.world.Main.prototype.flag_timer_tic = function() {
    var t = this.model;
    if (!t.locked_flag_update) {
        var e = Date.now() - t.startTime;
        if (2500 < e - t.last_flag_update || this.isFastUpdate) {
            this.isFastUpdate = !1,
            this.flag_timer && clearInterval(this.flag_timer),
            t.last_flag_update = e,
            t.locked_flag_update = !0;
            try {
                var a = getCookie("sess_location")
                  , s = canvas.Functions.getSessTarget().target;
                t.FinishLocation != s && (t.FinishLocation = s,
                this.view.map1.refresh_pers_finish_flag(),
                this.view.map2.refresh_pers_finish_flag()),
                t.parse_my_flag_js(a) && t.isModule && this.view.refresh_my_flag(),
                t.locked_flag_update = !1,
                this.flag_timer = setInterval(this.flag_timer_tic.bind(this), this.model.UpdInterval)
            } catch (t) {
                console.log(t)
            }
        }
    }
}
,
canvas.app.world.Main.prototype.fastUpdateFlag = function() {
    this.isFastUpdate = !0,
    this.flag_timer_tic()
}
,
canvas.app.world.Main.prototype.repeatKeyHandler = function() {
    var t, e = 0;
    for (t in this.model.keyData)
        switch (parseInt(t)) {
        case canvas.Const.KEYS.LEFT_ARROW:
            this.view.scroll_H.minusClickHandler(),
            e++;
            break;
        case canvas.Const.KEYS.UP_ARROW:
            this.view.scroll_V.minusClickHandler(),
            e++;
            break;
        case canvas.Const.KEYS.RIGHT_ARROW:
            this.view.scroll_H.plusClickHandler(),
            e++;
            break;
        case canvas.Const.KEYS.DOWN_ARROW:
            this.view.scroll_V.plusClickHandler(),
            e++
        }
    0 == e && (this.model.keyProcssor = !1,
    canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.repeatKeyHandler, this))
}
,
canvas.app.world.Model = function(t) {
    Object.defineProperty(this, "stageWidth", {
        get: function() {
            return this.isModule ? this.ModuleStageWidth : this.width
        }
    }),
    Object.defineProperty(this, "stageHeight", {
        get: function() {
            return this.isModule ? canvas.app.location.model.hh : this.height
        }
    }),
    this.findWay = new canvas.app.world.engine.FindWay,
    this.isModule = !1,
    this.startTime = Date.now(),
    this.IsBold = !0,
    this.min_stage_width = 199,
    this.min_stage_height = 283,
    this.max_stage_width = 2054,
    this.max_stage_height = 1344,
    this.manorMode = !1,
    this.lastManorMode = !1,
    this.userLevel = 0,
    this.AREALOC = [],
    this.treasureLocation = 0,
    this.treasureArea = 0,
    this.treasureFinishTime = 0,
    this.way_conf = {},
    this.lng = {},
    this.keyData = {},
    this.CfgLink = t.CfgLink || "world_conf.xml",
    this.UpdLink = t.UpdLink || "my_flag.xml",
    this.NavLink = t.NavLink || "compass_conf.xml",
    this.requestURL = t.RequestUrl || "estate_conf.php",
    this.IsBold = null == t.nobold || 1 != t.nobold,
    this.UpdInterval = 1e3 * parseInt(t.UpdInterval),
    this.locked_flag_update = !1,
    this.last_flag_update = 0,
    this.UpdInterval < 3e3 && (this.UpdInterval = 3e3),
    this.World1_Path = t.World1_Path || "world_res/world1/",
    this.World2_Path = t.World2_Path || "world_res/world2/",
    this.AreasXML_Path = t.AreasXML_Path || "world_xml/",
    this.race = t.race || "1",
    this.race = "1" == this.race ? "hum" : "mag",
    this.myLocVerge = {},
    this.LOC_LIST_AR = [],
    this.ls_ww = 0,
    this.ls_hh = 0;
    var e = "";
    try {
        e = getCookie("sess_location");
        this.FinishLocation = canvas.Functions.getSessTarget().target
    } catch (t) {}
    e && this.parse_my_flag_first_js(e),
    this.FlagArea = this.ActiveArea,
    this.FlagLocation = this.ActiveLocation,
    this.focusedAreaId = this.ActiveArea,
    this.focusedLocationId = this.ActiveLocation,
    this.userLevel = null == t.level ? 0 : parseInt(t.level.toString()),
    this.treasureLocation = null == t.treasureAreaId ? 0 : parseInt(t.treasureAreaId.toString()),
    this.treasureFinishTime = Math.round(.001 * Date.now()) + (null == t.treasureTime ? 0 : parseInt(t.treasureTime)),
    this.frontsURL = null != t.frontsURL ? t.frontsURL : ""
}
,
canvas.app.world.Model.prototype.get_area_xml_link = function(t) {
    return this.AreasXML_Path + "area_" + t + ".xml"
}
,
canvas.app.world.Model.prototype.parseFronts = function(t) {
    var e, a, s;
    if (t)
        for (s in this.frontsData = new Object,
        t)
            e = t[s],
            (a = new canvas.data.location.DFrontsLoc).cooldown = Date.now() + 1e3 * (e.nextEvent <= 0 ? 5 : e.nextEvent),
            a.cooldownStart = Date.now(),
            a.owner = this.parseRace(parseInt(e.owner)),
            a.status = parseInt(e.status),
            a.title = e.title,
            a.id = e.area_id,
            this.frontsData[a.id] = a
}
,
canvas.app.world.Model.prototype.parseRace = function(t) {
    return 1 < t ? -1 : t
}
,
canvas.app.world.Model.prototype.findFrontLoc = function(t) {
    var e, a, s = "", i = this.AREAS[t];
    if (!i)
        return s;
    for (var n = i.locations_ids.length, o = 0; o < n; o++)
        if (e = i.locations_ids[o],
        "" == s)
            for (a in this.frontsData)
                if (a == e) {
                    s = a;
                    break
                }
    return s
}
,
canvas.app.world.Model.prototype.initModule = function(t, e) {
    this.isModule = t,
    this.isModule && (t = canvas.app.location.model,
    this.CfgLink = t.MapCfgLink,
    this.NavLink = t.MapNavLink,
    this.UpdLink = t.MapUpdLink,
    this.World1_Path = t.World1_Path,
    this.World2_Path = t.World2_Path,
    this.AreasXML_Path = t.AreasXML_Path,
    this.race = t.mRace,
    this.SelectWay = e.selectWay.bind(e),
    this.UnSelectWay = e.unSelectWay.bind(e),
    this.GoToWay = e.goToWay.bind(e),
    this.ZoomMode = e.zoomModeAnswer.bind(e))
}
,
canvas.app.world.Model.prototype.initConfig = function() {
    var t = canvas.ResourceLoader.get("config").data;
    this.parseWaysXML(t),
    this.AREAS = {},
    this.areas_xml = [],
    this.parse_world_confing(t)
}
,
canvas.app.world.Model.prototype.initAreas = function() {
    for (var t = 0; t < this.areas_xml.length; t++)
        this.parse_area_config(canvas.ResourceLoader.get(this.areas_xml[t]).data)
}
,
canvas.app.world.Model.prototype.parseWaysXML = function(t) {
    for (var e, a = t.getElementsByTagName("way"), s = a.length, i = 0; i < s; i++)
        (e = {}).name = a[i].attributes.name.value,
        e.xx = parseInt(a[i].attributes.xx.value),
        e.yy = parseInt(a[i].attributes.yy.value),
        this.way_conf[e.name] = e
}
,
canvas.app.world.Model.prototype.parse_world_confing = function(t) {
    for (var e, a, s, i, n = t.childNodes, o = 0; o < n.length; o++)
        if ("world" == n[o].nodeName)
            for (s = n[o].childNodes,
            e = 0; e < s.length; e++)
                switch (s[e].nodeName) {
                case "area":
                    this.parse_area(s[e]);
                    break;
                case "areas_xml":
                    for (i = s[e].childNodes,
                    a = 0; a < i.length; a++)
                        "file" == i[a].nodeName && null != i[a].attributes.src && this.areas_xml.push(this.AreasXML_Path + i[a].attributes.src.value)
                }
}
,
canvas.app.world.Model.prototype.parse_area_config = function(t) {
    for (var e, a, s = t.childNodes, i = 0; i < s.length; i++)
        if ("areas" == s[i].nodeName)
            for (e = s[i].childNodes,
            a = 0; a < e.length; a++)
                "area" == e[a].nodeName && this.parse_area(e[a])
}
,
canvas.app.world.Model.prototype.parse_area = function(t) {
    var e, a, s, i, n, o, r, c, p, h, l, d, v = [], u = t.attributes;
    if (null != u.src && null != u.id && null != u.rect && 4 == (c = u.rect.value.split(",")).length)
        for (this.AREAS[u.id.value] = {},
        (e = this.AREAS[u.id.value]).src = u.src.value,
        e.id = u.id.value,
        e.rect_x1 = parseInt(c[0]),
        e.rect_y1 = parseInt(c[1]),
        e.rect_x2 = parseInt(c[2]),
        e.rect_y2 = parseInt(c[3]),
        this.pre_calc_item(e),
        e.locations = {},
        e.locations_list = [],
        e.locations_ids = [],
        e.objects = [],
        n = t.childNodes,
        s = 0; s < n.length; s++)
            if ("title" == n[s].nodeName)
                e.title = n[s].childNodes[0].nodeValue,
                e.title || (e.title = "no title");
            else if ("location" == n[s].nodeName) {
                if (null != (r = n[s].attributes).id) {
                    if (null != r.inner_flag_pos && 2 == (p = r.inner_flag_pos.value.split(",")).length) {
                        for (e.locations[r.id.value] = {},
                        a = e.locations[r.id.value],
                        v.push(r.id.value),
                        a.id = r.id.value,
                        this.treasureLocation == parseInt(a.id) && (this.treasureArea = parseInt(e.id)),
                        a.flag_pos_x = parseInt(p[0]),
                        a.flag_pos_y = parseInt(p[1]),
                        o = n[s].childNodes,
                        i = 0; i < o.length; i++)
                            "object" == o[i].nodeName ? this.parse_object(e, o[i], "global", a.id) : "title" == o[i].nodeName ? a.title = o[i].childNodes[0].nodeValue : o[i].nodeName;
                        e.locations_list.push(a.title),
                        e.locations_ids.push(a.id)
                    }
                    null != r.inner_manor_pos && 2 == (h = r.inner_manor_pos.value.split(",")).length && (a.manor_pos_x = parseInt(h[0]),
                    a.manor_pos_y = parseInt(h[1])),
                    null != r.inner_front_pos && 2 == (l = r.inner_front_pos.value.split(",")).length && (a.front_pos_x = parseInt(l[0]),
                    a.front_pos_y = parseInt(l[1])),
                    null != r.inner_popup_pos && 2 == (d = r.inner_popup_pos.value.split(",")).length && (a.popup_pos_x = parseInt(d[0]),
                    a.popup_pos_y = parseInt(d[1]))
                }
            } else
                "object" == n[s].nodeName && this.parse_object(e, n[s], "area");
    this.AREALOC.push([u.id.value, v])
}
,
canvas.app.world.Model.prototype.pre_calc_item = function(t) {
    var e;
    t.rect_x1 > t.rect_x2 && (e = t.rect_x1,
    t.rect_x1 = t.rect_x2,
    t.rect_x2 = e),
    t.rect_y1 > t.rect_y2 && (e = t.rect_y1,
    t.rect_y1 = t.rect_y2,
    t.rect_y2 = e),
    t.rect_w = t.rect_x2 - t.rect_x1,
    t.rect_h = t.rect_y2 - t.rect_y1,
    t.center_x = Math.floor(t.rect_w / 2) + t.rect_x1,
    t.center_y = Math.floor(t.rect_h / 2) + t.rect_y1,
    t.rect_x1_3 = Math.round(t.rect_x1 / 3),
    t.rect_x2_3 = Math.round(t.rect_x2 / 3),
    t.rect_y1_3 = Math.round(t.rect_y1 / 3),
    t.rect_y2_3 = Math.round(t.rect_y2 / 3),
    t.rect_w_3 = t.rect_x2_3 - t.rect_x1_3,
    t.rect_h_3 = t.rect_y2_3 - t.rect_y1_3
}
,
canvas.app.world.Model.prototype.parse_object = function(t, e, a, s) {
    var i = e.attributes;
    if (null != i.id && null != i.inner_pos) {
        var n = i.inner_pos.value.split(",");
        if (2 == n.length) {
            var o = {};
            t.objects.push(o),
            o.id = i.id.value,
            o.xx = parseInt(n[0]),
            o.yy = parseInt(n[1]),
            o.type = a,
            o.location_id = s,
            o.items = [];
            for (var r = e.childNodes, c = 0; c < r.length; c++)
                switch (r[c].nodeName) {
                case "title":
                    o.title = r[c].childNodes[0].nodeValue;
                    break;
                case "text":
                    o.text = r[c].childNodes[0].nodeValue;
                    break;
                case "item":
                    o.items.push(r[c].childNodes[0].nodeValue);
                    break;
                case "linkage":
                    var p = r[c].attributes;
                    null != p.area_id ? o.linkage_area_id = p.area_id.value : null != p.locations && (o.linkage_locations = p.locations.value.split(",")),
                    o.linkage_location_id = p.location_id.value
                }
        }
    }
}
,
canvas.app.world.Model.prototype.parse_my_flag = function(t) {
    for (var e, a = this, s = (new DOMParser).parseFromString(t, "text/xml").childNodes, i = 0; i < s.length; i++)
        "flag" == s[i].nodeName && null != (e = s[i].attributes).area && null != e.location && null != e.target && (e.area.value == a.FlagArea && e.location.value == a.FlagLocation && e.target.value == a.FinishLocation || null != a.AREAS && null != a.AREAS[e.area.value] && null != a.AREAS[e.area.value].locations && null != a.AREAS[e.area.value].locations[e.location.value] && a.main && (a.FlagArea = e.area.value,
        a.FlagLocation = e.location.value,
        a.FinishLocation = e.target.value,
        a.main.view.update_my_flag()))
}
,
canvas.app.world.Model.prototype.parse_my_flag_js = function(t) {
    var e = this;
    if (null == t)
        return !1;
    var a = t.split("|");
    if (2 != a.length)
        return !1;
    t = a[0],
    a = a[1];
    return (t != e.FlagArea || a != e.FlagLocation) && null != e.AREAS && null != e.AREAS[t] && null != e.AREAS[t].locations && null != e.AREAS[t].locations[a] && null != e.main && (e.FlagArea = t,
    e.FlagLocation = a,
    e.main.view.update_my_flag(),
    !0)
}
,
canvas.app.world.Model.prototype.parse_my_flag_first_js = function(t) {
    var e;
    null == t || 2 == (e = t.split("|")).length && (t = e[0],
    e = e[1],
    this.ActiveArea = t,
    this.ActiveLocation = e)
}
,
canvas.app.world.Model.prototype.parse_compass_config = function(t) {
    for (var e, a, s = t.childNodes, i = 0; i < s.length; i++)
        if ("locations" == s[i].nodeName)
            for (e = s[i].childNodes,
            a = 0; a < e.length; a++)
                if ("title" == e[a].nodeName && null != e[a].attributes.name && this.LOC_LIST_AR.push([e[a].nodeName, e[a].attributes.name.value]),
                "loc" == e[a].nodeName && null != e[a].attributes.id && null != e[a].attributes.name && null != e[a].attributes.verges) {
                    var n = !0;
                    if (null != e[a].attributes.race && e[a].attributes.race.value != this.race && (n = !1),
                    n) {
                        for (var o, r = [], c = e[a].attributes.verges.value.split("|"), p = 0; p < c.length; p++)
                            2 == (o = c[p].split(",")).length && (r[p] = [o[0], o[1]]);
                        this.myLocVerge[e[a].attributes.id.value] = r,
                        this.LOC_LIST_AR.push([parseInt(e[a].attributes.id.value), e[a].attributes.name.value])
                    }
                }
}
,
canvas.app.world.Model.prototype.parseConfig = function(t) {
    this.locations = new Object;
    var e, a = canvas.app.manor.model;
    if (canvas.Functions.hasChildNode(t, "costs")) {
        for (var s, i = t.getElementsByTagName("costs")[0].childNodes, n = i.length, o = 0; o < n; o++)
            (e = {}).id = canvas.Functions.hasChildNode(i[o], "id") ? i[o].getElementsByTagName("id")[0].childNodes[0].nodeValue : 0,
            e.price1 = canvas.Functions.hasChildNode(i[o], "gov_cost") ? parseInt(i[o].getElementsByTagName("gov_cost")[0].childNodes[0].nodeValue) : 0,
            s = i[o].getElementsByTagName("market_cost"),
            e.price2 = 0 < s.length ? parseInt(s[0].childNodes[0].nodeValue) : 0,
            e.user = canvas.Functions.hasChildNode(i[o], "user") ? parseInt(i[o].getElementsByTagName("user")[0].childNodes[0].nodeValue) : 0,
            e.isSelling = !!canvas.Functions.hasChildNode(i[o], "for_sell") && 1 == parseInt(i[o].getElementsByTagName("for_sell")[0].childNodes[0].nodeValue),
            e.sellEnable = !!canvas.Functions.hasChildNode(i[o], "hand_buy_enable") && "1" == i[o].getElementsByTagName("hand_buy_enable")[0].childNodes[0].nodeValue,
            null == this.locations[e.id] && (this.locations[e.id] = e);
        a.user = new canvas.data.manor.DUser;
        var r = canvas.Functions.hasChildNode(t, "current_work") ? t.getElementsByTagName("current_work")[0].childNodes[0] : null;
        a.user.labour = r ? parseInt(r.nodeValue) : 0,
        r = canvas.Functions.hasChildNode(t, "work_max") ? t.getElementsByTagName("work_max")[0].childNodes[0] : null,
        a.user.labourMax = r ? parseInt(r.nodeValue) : 0,
        r = canvas.Functions.hasChildNode(t, "move_price") ? t.getElementsByTagName("move_price")[0].childNodes[0] : null,
        this.movePrice = r ? parseInt(r.nodeValue) : 0,
        this.userHaveManor = 0 < a.user.labourMax,
        r = canvas.Functions.hasChildNode(t, "buy_enable") ? t.getElementsByTagName("buy_enable")[0].childNodes[0] : null,
        this.buyEnable = !!r && "1" == r.nodeValue
    }
}
,
canvas.app.world.Model.prototype.parseSellRequests = function(t, e) {
    if (null == e && (e = ""),
    this["sellRequests" + e] = new Array,
    canvas.Functions.hasChildNode(t, "sell_requests")) {
        for (var a, s = t.getElementsByTagName("sell_requests")[0].childNodes, i = s.length, n = 0; n < i; n++)
            (a = new canvas.data.manor.DSellRequest).id = canvas.Functions.hasChildNode(s[n], "id") ? s[n].getElementsByTagName("id")[0].childNodes[0].nodeValue : 0,
            a.price = canvas.Functions.hasChildNode(s[n], "price") ? parseInt(s[n].getElementsByTagName("price")[0].childNodes[0].nodeValue) : 0,
            a.user = new canvas.data.manor.DUserGame,
            a.user.id = "3434",
            a.user.level = canvas.Functions.hasChildNode(s[n], "level") ? parseInt(s[n].getElementsByTagName("level")[0].childNodes[0].nodeValue) : 0,
            a.user.login = canvas.Functions.hasChildNode(s[n], "nick") ? s[n].getElementsByTagName("nick")[0].childNodes[0].nodeValue : "",
            this["sellRequests" + e].push(a);
        this["sellPagesCount" + e] = 0 < t.getElementsByTagName("pages").length ? parseInt(t.getElementsByTagName("pages")[0].childNodes[0].nodeValue) : 1
    }
}
,
canvas.app.world.Model.prototype.parseSellRequests2 = function(t) {
    this.parseSellRequests(t, "2")
}
,
canvas.app.world.View = function(t) {
    canvas.px.Container.call(this);
    var e = canvas.app.world.model;
    this.main = t,
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.container.interactive = !0,
    this.map_cont = new canvas.px.Container,
    this.map_cont.position.set(19, 14),
    this.container.addChild(this.map_cont),
    this.map_cont.interactive = !0,
    this.map1 = new canvas.app.world.view.MapWorldParts(this,2e3,1300,3,e.World1_Path + "world1_"),
    this.map2 = new canvas.app.world.view.MapWorldParts(this,6e3,3900,1,e.World2_Path + "world2_"),
    this.map_state = new canvas.app.world.engine.MapStateObject(this),
    this.map_state.focus_map(this.map2, 1),
    this.msk = new canvas.px.Mask(100,100),
    this.msk.position.set(19, 14),
    this.addChild(this.msk),
    this.map_cont.mask = this.msk,
    this.scroll_V = new canvas.app.world.view.ScrollV(this.map_state,this.container),
    e.isModule ? this.addChild(this.scroll_V.shape) : this.addChild(this.scroll_V),
    this.scroll_H = new canvas.app.world.view.ScrollH(this.map_state,this.map_cont),
    e.isModule ? this.addChild(this.scroll_H.shape) : this.addChild(this.scroll_H),
    this.scroll_null = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_scroll_null")),
    e.isModule || this.addChild(this.scroll_null),
    this.borders = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("world", "curl"),100,142,100,142),
    e.isModule || this.addChild(this.borders),
    this.zoom = new canvas.app.world.view.ZoomView(this),
    e.isModule || this.addChild(this.zoom),
    this.zoom.x = 33,
    this.zoom.set_mode(2),
    this.set_labels(),
    e.isModule || (this.manorLayer = new canvas.app.world.manor.Manor(this),
    this.addChild(this.manorLayer),
    this.manorLayer.position.set(20, 70)),
    this.firstResize = !0,
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll_H, this.scrollHandlerH, this),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll_V, this.scrollHandlerV, this)
}
,
canvas.app.world.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.world.View.prototype.resize = function(t, e) {
    var a = canvas.app.world.model
      , s = a.width
      , i = a.height;
    this.borders.width = s,
    this.borders.height = i;
    var n = !1;
    a.ls_ww != s && (a.ls_ww = s,
    n = !0,
    this.scroll_V.position.set(s - 35, 14),
    this.scroll_H.setSize(s - 37, 16),
    this.map_state.set_visible_width(s - 32),
    this.msk.setSize(this.map_state.map_visible_width),
    this.scroll_H.refresh(),
    this.scroll_null.x = s - 35,
    this.label2.pos(s)),
    a.ls_hh != i && (a.ls_hh = i,
    n = !0,
    this.scroll_H.position.set(18, i - 30),
    this.scroll_V.setSize(16, i - 28),
    this.map_state.set_visible_height(i - 28),
    this.msk.setSize(-1, this.map_state.map_visible_height),
    this.scroll_V.refresh(),
    this.scroll_null.y = i - 30,
    a.isModule && (this.zoom.x = Math.round((s - this.zoom.width) / 2) - 6),
    this.zoom.y = i - (a.isModule ? 85 : 99)),
    n && this.map_state.map_check(),
    this.firstResize && (this.firstResize = !1,
    this.map2.focus_on_active_area()),
    a.isModule || this.main.windowsManager.init(this.main.windowsContainer, s, i, this)
}
,
canvas.app.world.View.prototype.set_labels = function() {
    var t = canvas.app.world.model;
    this.label1 = new canvas.app.world.view.TopTextLeft,
    this.label1.position.set(28, 21),
    t.isModule || this.addChild(this.label1);
    var e = "unknown"
      , a = "unknown"
      , s = t.AREAS[t.ActiveArea];
    null != s && (e = s.title,
    null != s.locations[t.ActiveLocation] && (a = s.locations[t.ActiveLocation].title)),
    this.label1.set_line0(canvas.Translator.getText(207) + ":", e, a),
    this.label2 = new canvas.app.world.view.TopTextRight,
    this.label2.position.set(400, 21),
    this.addChild(this.label2)
}
,
canvas.app.world.View.prototype.testUpdate = function() {
    var t = canvas.app.world.model;
    t.treasureArea == parseInt(t.focusedAreaId) && this.updateTreasure(),
    "" != t.findFrontLoc(t.focusedAreaId) && this.updateFronts()
}
,
canvas.app.world.View.prototype.updateTreasure = function() {
    var t, e, a, s = canvas.app.world.model;
    for (a in s.AREAS)
        if (null != (t = s.AREAS[a]).sen)
            for (var i in s.treasureArea == parseInt(t.id) ? t.sen.setSelection(!0, 12592164, "chest") : t.sen.isManorable || t.sen.setSelection(),
            t.locations)
                null != (e = t.locations[i]).lnk && (parseInt(e.id) == s.treasureLocation ? e.lnk.setSelection(!0, 12592164, "chest") : e.lnk.isManorable || e.lnk.setSelection())
}
,
canvas.app.world.View.prototype.updateFronts = function() {
    if(top?.document.gameFlags.hideFronts == true) {
        return
    }
    var t, e, a, s, i, n = canvas.app.world.model;
    for (i in n.AREAS)
        if (null != (t = n.AREAS[i]).sen)
            for (var o in t.locations)
                if (null != (e = t.locations[o]).lnk)
                    for (a in n.frontsData)
                        if (parseInt(e.id) == parseInt(a))
                            if (null != (s = n.frontsData[a]))
                                if (0 === s.status)
                                    switch (s.owner) {
                                    case 1:
                                        e.lnk.setFrontsIcon("timer_blue");
                                        break;
                                    case -1:
                                        e.lnk.setFrontsIcon("timer_red");
                                        break;
                                    default:
                                        e.lnk.setFrontsIcon("timer_gray")
                                    }
                                else
                                    e.lnk.setFrontsIcon("timer_gray");
                            else
                                e.lnk.setFrontsIcon();
                        else
                            e.lnk.setFrontsIcon()
}
,
canvas.app.world.View.prototype.updateManorMode = function() {
    canvas.app.world.model.manorMode ? this.map2.popupsContainer.visible = !0 : this.map2.popupsContainer.visible = !1,
    null != this.manorLayer && this.manorLayer.update()
}
,
canvas.app.world.View.prototype.area_exit = function() {
    var t = canvas.app.world.model;
    this.label1.deactivate(),
    this.zoom.set_mode(1),
    this.map_state.focus_map(this.map1, 3),
    this.map_state.set_visible_width(t.width - 54),
    this.map_state.set_visible_height(t.height - 44),
    this.refresh_scrollers(),
    this.map1_focus(),
    this.map_state.map_check()
}
,
canvas.app.world.View.prototype.area_enter = function(t) {
    var e = canvas.app.world.model;
    e.focusedAreaId = t.id,
    this.map_state.focus_map(this.map2, 1),
    this.map_state.set_visible_width(e.width - 54),
    this.map_state.set_visible_height(e.height - 44),
    this.refresh_scrollers(),
    this.zoom.set_mode(2),
    this.map2.focus_on_active_area(),
    this.map_state.map_check()
}
,
canvas.app.world.View.prototype.area_switch = function(t) {
    var e = canvas.app.world.model;
    e.focusedAreaId = t.id,
    this.map_state.set_visible_width(e.width - 54),
    this.map_state.set_visible_height(e.height - 44),
    this.refresh_scrollers(),
    this.map2.focus_on_active_area(),
    this.map_state.map_check(),
    null != this.manorLayer && this.manorLayer.loadConfig()
}
,
canvas.app.world.View.prototype.refresh_scrollers = function() {
    this.scroll_H.refresh(),
    this.scroll_V.refresh(),
    this.scrollHandlerH(),
    this.scrollHandlerV()
}
,
canvas.app.world.View.prototype.refresh_my_flag = function() {
    var t = canvas.app.world.model;
    t.focusedAreaId = t.FlagArea,
    t.focusedLocationId = t.FlagLocation,
    t.ActiveArea = t.FlagArea,
    t.ActiveLocation = t.FlagLocation,
    t.isModule ? this.map_state.mapLnk.focus_on_active_area_in_motion() : this.map_state.mapLnk.focus_on_active_area(),
    this.testUpdate(),
    this.updateManorMode()
}
,
canvas.app.world.View.prototype.scrollHandlerH = function() {
    this.scroll_H.isDisabled() || this.map_state.delta_map_x(this.scroll_H.current)
}
,
canvas.app.world.View.prototype.scrollHandlerV = function() {
    this.scroll_V.isDisabled() || this.map_state.delta_map_y(this.scroll_V.current)
}
,
canvas.app.world.View.prototype.map1_focus = function() {
    var t, e, a, s, i = canvas.app.world.model;
    null != i.AREAS[i.ActiveArea] && (t = i.AREAS[i.ActiveArea],
    a = i.width - 54,
    s = i.height - 44,
    e = this.map_state.map_complete_width - a,
    i = this.map_state.map_complete_width - a,
    0 < (a = -Math.round(t.center_x / 3 - a / 2)) ? a = 0 : a < -e && (a = -e),
    0 < (s = -Math.round(t.center_y / 3 - s / 2)) ? s = 0 : s < -i && (s = -i),
    this.scroll_H.current = -a,
    this.scroll_V.current = -s,
    this.scrollHandlerV(),
    this.scrollHandlerH())
}
,
canvas.app.world.View.prototype.update_my_flag = function() {
    var t = canvas.app.world.model
      , e = t.AREAS[t.FlagArea];
    null == e || null != (t = e.locations[t.FlagLocation]) && (this.label1.set_line0(canvas.Translator.getText(207) + ":", e.title, t.title),
    this.label1.redraw_bg(),
    this.map1.refresh_pers_flag(),
    this.map2.refresh_pers_flag(),
    this.map1.refresh_pers_finish_flag(),
    this.map2.refresh_pers_finish_flag())
}
,
canvas.app.world.engine.FindWay = function() {}
,
canvas.app.world.engine.FindWay.prototype.finder = function(t, e) {
    var a = canvas.app.world.model;
    if (this.p1 = t,
    this.p2 = e,
    String(this.p1) == String(this.p2))
        return [0];
    this.p2_tmp = this.p2,
    this.p1_tmp = this.p2_tmp,
    this.arr_tmp = [],
    this.arr_trash = [],
    this.cache_cont = {},
    this.arr_loc = [],
    this.arr_tmp.push(this.p1),
    this.arr_trash = this.arr_trash.concat(this.arr_tmp);
    var s = 0
      , i = a.LOC_LIST_AR.length;
    t: for (; s < i; ) {
        s++;
        for (var n = [], o = this.arr_tmp.length - 1; 0 <= o; o--) {
            var r = this.getNearLoc(this.arr_tmp[o]);
            if (this.clearArr(r, this.arr_trash),
            this.cache_cont[this.arr_tmp[o]] = r,
            this.find(r, this.p2))
                break t;
            this.arr_trash = this.arr_trash.concat(r),
            n = n.concat(r)
        }
        if (this.arr_tmp = [],
        this.arr_tmp = this.arr_tmp.concat(n),
        0 == this.arr_tmp.length)
            return [-1]
    }
    for (this.arr_loc.push(this.p1_tmp); this.p1_tmp != this.p1; )
        this.p2_tmp = this.getNextCacheLoc(this.p2_tmp),
        this.p1_tmp = this.p2_tmp,
        this.arr_loc.push(this.p1_tmp);
    return this.arr_loc
}
,
canvas.app.world.engine.FindWay.prototype.getNextCacheLoc = function(t) {
    for (var e in this.cache_cont)
        for (var a = this.cache_cont[e], s = a.length - 1; 0 <= s; s--)
            if (a[s] == t)
                return parseInt(e);
    return 1
}
,
canvas.app.world.engine.FindWay.prototype.getNearLoc = function(t) {
    var e, a = canvas.app.world.model, s = [];
    for (e in a.myLocVerge) {
        var i = a.myLocVerge[e];
        t: for (var n = i.length - 1; 0 <= n; n--)
            if (i[n])
                for (var o = i[n].length - 1; 0 <= o; o--)
                    if (i[n][o] == t) {
                        s.push(e);
                        break t
                    }
    }
    return s
}
,
canvas.app.world.engine.FindWay.prototype.find = function(t, e) {
    for (var a = t.length - 1; 0 <= a; a--)
        if (t[a] == e)
            return !0;
    return !1
}
,
canvas.app.world.engine.FindWay.prototype.clearArr = function(t, e) {
    for (var a = e.length - 1; 0 <= a; a--)
        for (var s = t.length - 1; 0 <= s; s--)
            t[s] == e[a] && (t.splice(s, 1),
            s++)
}
,
canvas.app.world.engine.MapStateObject = function(t) {
    this.baseLnk = t,
    this.map_cont = t.map_cont
}
,
canvas.app.world.engine.MapStateObject.prototype.focus_map = function(t, e) {
    null != this.mapLnk && this.map_cont.removeChild(this.mapLnk),
    this.mapLnk = t,
    this.devisor = e,
    this.map_complete_width = this.mapLnk.gw,
    this.map_complete_height = this.mapLnk.gh,
    this.map_pos_x = 0,
    this.map_pos_y = 0,
    this.map_cont.addChild(this.mapLnk)
}
,
canvas.app.world.engine.MapStateObject.prototype.set_visible_width = function(t) {
    this.map_visible_width = t,
    this.map_invisible_width = this.map_complete_width - this.map_visible_width,
    this.map_pos_x = -this.mapLnk.x / this.map_invisible_width,
    1 < this.map_pos_x && (this.mapLnk.x = -this.map_invisible_width,
    this.map_pos_x = 1)
}
,
canvas.app.world.engine.MapStateObject.prototype.set_visible_height = function(t) {
    this.map_visible_height = t,
    this.map_invisible_height = this.map_complete_height - this.map_visible_height,
    this.map_pos_y = -this.mapLnk.y / this.map_invisible_height,
    1 < this.map_pos_y && (this.mapLnk.y = -this.map_invisible_height,
    this.map_pos_y = 1)
}
,
canvas.app.world.engine.MapStateObject.prototype.delta_map_x = function(t) {
    t < 0 ? t = 0 : t > this.map_invisible_width && (t = this.map_invisible_width),
    this.set_pos_x(t / this.map_invisible_width)
}
,
canvas.app.world.engine.MapStateObject.prototype.delta_map_y = function(t) {
    t < 0 ? t = 0 : t > this.map_invisible_height && (t = this.map_invisible_height),
    this.set_pos_y(t / this.map_invisible_height)
}
,
canvas.app.world.engine.MapStateObject.prototype.set_pos_x = function(t) {
    this.map_pos_x = t,
    this.mapLnk.x = -Math.round(this.map_invisible_width * this.map_pos_x),
    this.map_check()
}
,
canvas.app.world.engine.MapStateObject.prototype.set_pos_y = function(t) {
    this.map_pos_y = t,
    this.mapLnk.y = -Math.round(this.map_invisible_height * this.map_pos_y),
    this.map_check()
}
,
canvas.app.world.engine.MapStateObject.prototype.map_check = function() {
    var t = canvas.app.world.model;
    this.mapLnk.check_parts(this.map_visible_width, this.map_visible_height);
    var e, a, s, i = new canvas.px.Rectangle(-this.mapLnk.x,-this.mapLnk.y,this.map_visible_width,this.map_visible_height);
    for (s in t.AREAS)
        null == (a = t.AREAS[s]).source && null != (e = 1 == this.devisor ? new canvas.px.Rectangle(a.rect_x1,a.rect_y1,a.rect_w,a.rect_h) : 3 == this.devisor ? new canvas.px.Rectangle(a.rect_x1_3,a.rect_y1_3,a.rect_w_3,a.rect_h_3) : null) && i.intersects(e) && null == a.source && (a.source = new canvas.app.world.view.AreaLoader(this.baseLnk,a,null),
        a.source.init());
    this.baseLnk.testUpdate()
}
,
canvas.app.world.engine.MapStateObject.prototype.refresh_xy_pos = function() {
    this.map_pos_x = -Math.round(this.mapLnk.x / this.map_invisible_width),
    this.map_pos_y = -Math.round(this.mapLnk.y / this.map_invisible_height)
}
,
canvas.app.world.manor.Manor = function(t) {
    canvas.px.Container.call(this),
    this.container = new canvas.px.Container,
    this.baseLnk = t,
    this.addChild(this.container),
    this.market = new canvas.app.manor.view.controls.MarketWin,
    this.labourWin = new canvas.app.manor.view.controls.LabourWin(!0),
    this.workWin = new canvas.app.manor.view.controls.WorkWin,
    this.confirmWin = new canvas.app.manor.view.controls.ConfirmWindow,
    this.messageWin = new canvas.app.manor.view.controls.MessageWindow,
    this._controller = new canvas.app.world.manor.ManorController(this,this.baseLnk),
    this.loadConfig()
}
,
canvas.app.world.manor.Manor.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.world.manor.Manor.prototype.loadConfig = function() {
    5 <= canvas.app.world.model.userLevel && this._controller.loadConfig()
}
,
canvas.app.world.manor.Manor.prototype.update = function() {
    var t, e, a, s, i, n, o = canvas.app.world.model;
    if (canvas.Functions.destroyChildren(this.baseLnk.map2.popupsContainer),
    null != (t = o.AREAS[o.focusedAreaId]) && null != t.locations)
        for (n in t.locations)
            null != (e = t.locations[n]).popup && null != e.popup.parent && (e.popup.parent.removeChild(e.popup),
            e.popup = null),
            null != (a = o.locations[e.id]) && (a.areaTitle = t.title,
            a.locTitle = e.title,
            i = new canvas.app.world.manor.popup.PopupBuy(a.id,a.price1,a.price2,a.user,a.isSelling,a.sellEnable),
            e.popup = i,
            this.baseLnk.map2.popupsContainer.addChild(i),
            i.x = t.rect_x1 + (!e.popup_pos_x || e.popup_pos_x < 0 ? e.flag_pos_x : e.popup_pos_x),
            i.y = t.rect_y1 + (!e.popup_pos_x || e.popup_pos_y < 0 ? e.flag_pos_y : e.popup_pos_y),
            1 <= a.user && (this["manorIcon" + a.user] || (s = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", 1 == a.user ? "manor/manor2" : "manor/manor3")),
            (i = new canvas.px.Container).addChild(s),
            s.x = -Math.round(.5 * s.width),
            s.y = -Math.round(.5 * s.height),
            i.scale.set(.7, .7),
            i.buttonMode = !0,
            i.interactive = !0,
            i.hitArea = new canvas.px.Circle(0,0,.5 * i.width),
            this.baseLnk.map2.popupsContainer2.addChild(i),
            i.mouseover = this._rollOverHandler.bind(this),
            i.mouseout = this._rollOutHandler.bind(this),
            i.click = this._clickHandler.bind(this),
            i.name = 1 == a.user ? "manor" : "",
            this["manorIcon" + a.user] = i),
            this.baseLnk.map2.popupsContainer2.addChild(this["manorIcon" + a.user]),
            this["manorIcon" + a.user].x = t.rect_x1 + (null == e.manor_pos_x || e.manor_pos_x < 0 ? e.flag_pos_x : e.manor_pos_x),
            this["manorIcon" + a.user].y = t.rect_y1 + (null == e.manor_pos_y || e.manor_pos_y < 0 ? e.flag_pos_y : e.manor_pos_y)),
            null != e.lnk && (e.lnk.selected || (o.manorMode ? (e.lnk.setSelection(!0, 0 < a.user ? 2458659 : 12592164),
            e.lnk.isManorable = !0,
            e.lnk.selected = !1) : (e.lnk.setSelection(),
            e.lnk.isManorable = !1))));
    this.baseLnk.zoom.btn_manor.visible = 5 <= o.userLevel,
    this.baseLnk.zoom.btn_work.visible = 5 <= o.userLevel && o.userHaveManor
}
,
canvas.app.world.manor.Manor.prototype._clickHandler = function(t) {
    var e = canvas.app.world.model;
    "manor" === t.target.name || canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
        text: canvas.Translator.getText(225) + " <b>" + e.movePrice.toString() + "</b> <img src='money_gold' atlas='world' yOffset='1'/> !",
        event: {
            name: canvas.app.manor.Event.MOVE_AREA
        }
    })
}
,
canvas.app.world.manor.Manor.prototype._rollOverHandler = function(t) {
    "manor" === t.target.name ? this.baseLnk.label2.set_data(canvas.Translator.getText(218), "", null) : this.baseLnk.label2.set_data(canvas.Translator.getText(224), "", null),
    this.currentIcon = t.target,
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerUp, this)
}
,
canvas.app.world.manor.Manor.prototype._rollOutHandler = function(t) {
    this.baseLnk.label2.deactivate(),
    canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerUp, this),
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerDown, this)
}
,
canvas.app.world.manor.Manor.prototype._enterFrameHandlerUp = function() {
    var t = this.currentIcon.scale.x + .1;
    1 <= t && (t = 1,
    canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerUp, this)),
    this.currentIcon.scale.set(t, t)
}
,
canvas.app.world.manor.Manor.prototype._enterFrameHandlerDown = function() {
    var t = this.currentIcon.scale.x - .1;
    t <= .7 && (t = .7,
    canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this._enterFrameHandlerDown, this)),
    this.currentIcon.scale.set(t, t)
}
,
canvas.app.world.manor.ManorController = function(t, e) {
    this._view = t,
    this._baseLnk = e,
    canvas.EventManager.addEventListener(canvas.app.manor.Event.CLOSE_MARKET, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_MARKET_BUY, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_MARKET_SELL, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_WORK, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.CLOSE_WORK, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.LOAD_SELL_REQUESTS, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.LOAD_SELL_REQUESTS2, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.BUY_AREA, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.SELL_AREA, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.SELL_AREA_CANCEL, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_CONFIRM, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.SELECT_LOCATION, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.CLOSE_LABOUR, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.OPEN_LABOUR, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.WORK_USE, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.LOAD_WORK_REQUESTS, null, this._thisHandler, this),
    canvas.EventManager.addEventListener(canvas.app.manor.Event.MOVE_AREA, null, this._thisHandler, this),
    this._urlLoader = new canvas.utils.URLRequest(canvas.app.world.model.requestURL),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this._urlLoader, this._completeHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this._urlLoader, this._errorHandler, this)
}
,
canvas.app.world.manor.ManorController.prototype._thisHandler = function(t) {
    var e, a = canvas.app.world.model;
    switch (t.name) {
    case canvas.app.manor.Event.CLOSE_MARKET:
        canvas.utils.WindowsManager.instance.closeWindow(this._view.market);
        break;
    case canvas.app.manor.Event.OPEN_MARKET_BUY:
        canvas.utils.WindowsManager.instance.openWindow(this._view.market, !0, !0, !1),
        this._view.market.panel.path = "buy",
        this._view.market.buyArea.update([], 1, a.areaCurTitle, a.locationCurTitle),
        this.loadSellRequests();
        break;
    case canvas.app.manor.Event.OPEN_MARKET_SELL:
        canvas.utils.WindowsManager.instance.openWindow(this._view.market, !0, !0, !1),
        this._view.market.panel.path = "sell";
        break;
    case canvas.app.manor.Event.LOAD_SELL_REQUESTS:
        this.loadSellRequests();
        break;
    case canvas.app.manor.Event.LOAD_SELL_REQUESTS2:
        this.loadSellRequests2();
        break;
    case canvas.app.manor.Event.BUY_AREA:
        this.buyArea(t.params.areaId, t.params.requestId, t.params.price);
        break;
    case canvas.app.manor.Event.SELL_AREA:
        this.sellArea();
        break;
    case canvas.app.manor.Event.SELL_AREA_CANCEL:
        this.sellAreaCancel();
        break;
    case canvas.app.manor.Event.OPEN_CONFIRM:
        this._view.confirmWin.init(t.params.text, t.params.event, t.params.okText),
        canvas.utils.WindowsManager.instance.openWindow(this._view.confirmWin);
        break;
    case canvas.app.manor.Event.SELECT_LOCATION:
        a.curLocId = t.params,
        e = a.locations[a.curLocId],
        a.areaCurTitle = e.areaTitle,
        a.locationCurTitle = e.locTitle;
        break;
    case canvas.app.manor.Event.CLOSE_LABOUR:
        canvas.utils.WindowsManager.instance.closeWindow(this._view.labourWin);
        break;
    case canvas.app.manor.Event.OPEN_LABOUR:
        canvas.utils.WindowsManager.instance.openWindow(this._view.labourWin, !0, !0, !1),
        this._view.labourWin.panel.path = "all",
        this.loadUserRequests();
        break;
    case canvas.app.manor.Event.CLOSE_WORK:
        canvas.utils.WindowsManager.instance.closeWindow(this._view.workWin);
        break;
    case canvas.app.manor.Event.OPEN_WORK:
        canvas.utils.WindowsManager.instance.openWindow(this._view.workWin, !0, !0, !1);
        break;
    case canvas.app.manor.Event.WORK_USE:
        this.workUse(t.params);
        break;
    case canvas.app.manor.Event.LOAD_WORK_REQUESTS:
        this.loadUserRequests();
        break;
    case canvas.app.manor.Event.MOVE_AREA:
        this.moveArea()
    }
}
,
canvas.app.world.manor.ManorController.prototype._errorHandler = function() {}
,
canvas.app.world.manor.ManorController.prototype._completeHandler = function() {
    var t, e = canvas.app.world.model, a = canvas.app.manor.model;
    this._view.iteractiveChildren = !0;
    var s = (new DOMParser).parseFromString(this._urlLoader.request.responseText, "text/xml");
    if (0 < s.getElementsByTagName("error").length)
        return this._view.messageWin.init(s.getElementsByTagName("error")[0].childNodes[0].nodeValue),
        canvas.utils.WindowsManager.instance.openWindow(this._view.messageWin),
        void ("loadUserRequests" == this._urlLoader.info && canvas.utils.WindowsManager.instance.instance.closeWindow(this._view.labourWin));
    switch (this._urlLoader.info) {
    case "loadConfig":
        e.parseConfig(s),
        this._view.update();
        break;
    case "sellRequests":
        e.parseSellRequests(s),
        this._view.market.buyArea.update(e.sellRequests, e.sellPagesCount, e.areaCurTitle, e.locationCurTitle);
        break;
    case "sellRequests2":
        e.parseSellRequests2(s),
        t = e.locations[e.curLocId],
        this._view.market.sellArea.update(e.sellRequests2, e.sellPagesCount2, e.areaCurTitle, e.locationCurTitle, 0 < t.user);
        break;
    case "buyArea":
        canvas.utils.WindowsManager.instance.closeWindow(this._view.market),
        0 < s.getElementsByTagName("current_cost").length && "" != s.getElementsByTagName("current_cost")[0].childNodes[0].nodeValue && (e.lastBuyParams.price = parseInt(s.getElementsByTagName("current_cost")[0].childNodes[0].nodeValue),
        canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
            text: canvas.Translator.getText(199) + " <b>" + e.lastBuyParams.price + "</b> <img src='money_gold' atlas='ui' yOffset='1'/> ?",
            event: {
                name: canvas.app.manor.Event.BUY_AREA,
                params: e.lastBuyParams
            }
        }));
        break;
    case "sellArea":
        canvas.utils.WindowsManager.instance.closeWindow(this._view.market);
        break;
    case "loadUserRequests":
        n = JSON.parse(this._urlLoader.request.responseText)["estate|work_requests"],
        a.parseUserRequests(n),
        this._view.labourWin.allRequests.update();
        break;
    case "workUse":
        for (var i, n = JSON.parse(this._urlLoader.request.responseText)["estate|work"], o = a.labourRequests.length, r = 0; r < o; r++)
            if ((i = a.labourRequests[r]).id == a.selectedRequestID) {
                a.user.labour -= i.labour - n.amount,
                i.labour = n.amount,
                this._view.labourWin.update();
                break
            }
        break;
    case "moveArea":
        this._baseLnk.map2.popupsContainer2.removeChildren()
    }
    0 < s.getElementsByTagName("reload").length && "1" == s.getElementsByTagName("reload")[0].childNodes[0].nodeValue && this.loadConfig(),
    n && 1 == n.reload && this.loadConfig()
}
,
canvas.app.world.manor.ManorController.prototype.loadConfig = function() {
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=map_info", null, "loadConfig"),
    this._view.iteractiveChildren = !1
}
,
canvas.app.world.manor.ManorController.prototype.loadSellRequests = function() {
    var t = canvas.app.world.model;
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=sell_requests&area_id=" + t.curLocId + "&page=" + (this._view.market.buyArea.requestCurPage + 1) + "&on_page=" + canvas.app.manor.Const.REQUESTS_ON_PAGE, null, "sellRequests"),
    this._view.iteractiveChildren = !1
}
,
canvas.app.world.manor.ManorController.prototype.loadSellRequests2 = function() {
    var t = canvas.app.world.model;
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=sell_requests&area_id=" + t.curLocId + "&page=" + (this._view.market.sellArea.requestCurPage + 1) + "&on_page=" + canvas.app.manor.Const.REQUESTS_ON_PAGE_SHORT, null, "sellRequests2"),
    this._view.iteractiveChildren = !1
}
,
canvas.app.world.manor.ManorController.prototype.buyArea = function(t, e, a) {
    null == e && (e = ""),
    null == a && (a = 0);
    var s = canvas.app.world.model;
    s.lastBuyParams = {
        areaId: t,
        requestId: e,
        price: a
    };
    t = canvas.app.world.model.requestURL + "?mode=buy_estate&area_id=" + ("" == t ? s.curLocId : t);
    0 != a && (t += "&flash_cost=" + a),
    "" != e && (t += "&sell_request_id=" + e,
    null != (e = s.sellRequests[e]) && (t += "&flash_cost=" + e.price)),
    this._urlLoader.load(t, null, "buyArea"),
    this._view.iteractiveChildren = !1
}
,
canvas.app.world.manor.ManorController.prototype.sellArea = function() {
    var t = canvas.app.world.model;
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=sell_estate&area_id=" + t.curLocId + "&price=" + canvas.app.manor.view.input.text, null, "sellArea"),
    this._view.iteractiveChildren = !1
}
,
canvas.app.world.manor.ManorController.prototype.sellAreaCancel = function() {
    var t = canvas.app.world.model;
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=sell_request_cancel&area_id=" + t.curLocId, null, "sellAreaCancel"),
    this._view.iteractiveChildren = !1
}
,
canvas.app.world.manor.ManorController.prototype.loadUserRequests = function() {
    var t = canvas.app.manor.model;
    this._urlLoader.load(canvas.Config.entryPoint + "?object=estate&json_mode_on=1&action=work_requests&page=" + (t.requestCurPage + 1), null, "loadUserRequests"),
    this._view.iteractiveChildren = !1
}
,
canvas.app.world.manor.ManorController.prototype.workUse = function(t) {
    var e = canvas.app.manor.model;
    this._urlLoader.load(canvas.Config.entryPoint + "?object=estate&json_mode_on=1&action=work&work_request_id=" + e.selectedRequestID + "&amount=" + t, null, "workUse"),
    this._view.iteractiveChildren = !1
}
,
canvas.app.world.manor.ManorController.prototype.moveArea = function() {
    this._urlLoader.load(canvas.app.world.model.requestURL + "?mode=move_estate", null, "moveArea"),
    this._view.iteractiveChildren = !1
}
,
canvas.app.world.manor.Popup = function() {
    canvas.px.Container.call(this),
    this.interactive = !0,
    this.mouseover = this.overHandler.bind(this),
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.container.position.set(-80, -105)
}
,
canvas.app.world.manor.Popup.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.world.manor.Popup.prototype.overHandler = function() {
    this.parent && this.parent.setChildIndex(this, this.parent.numChildren - 1)
}
,
canvas.app.world.manor.popup.PopupBuy = function(t, e, a, s, i, n) {
    canvas.app.world.manor.Popup.call(this),
    null == s && (s = 0),
    null == i && (i = !1),
    null == n && (n = !1),
    null == a && (a = 0),
    this.id = t,
    this._price = e,
    this._isSelling = i;
    var o = canvas.app.world.model;
    this.flag = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/03")),
    this.flag.position.set(-65, -72),
    this.addChild(this.flag),
    this.flag.interactive = !0,
    this.molotok = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/04")),
    this.molotok.position.set(-63, -46),
    this.addChild(this.molotok),
    this.molotok.interactive = !0,
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, {
        target: this.flag,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(219)))
    }),
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, {
        target: this.molotok,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(220)))
    }),
    t = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "money_gold")),
    this.addChild(t),
    t.position.set(-33, -66),
    (i = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,62,18,"left")).position.set(-18, -67),
    i.text = e,
    this.addChild(i),
    o.buyEnable && (t = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/05")),
    this.addChild(t),
    t.position.set(42, -74),
    (i = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,11141377,50,18,"left")).position.set(70, -69),
    i.text = "<a href='event:buyNew'>" + canvas.Translator.getText(200) + "</a>",
    this.addChild(i)),
    0 == a ? (i = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7026733,144,20,"left"),
    this.addChild(i),
    i.text = canvas.Translator.getText(201),
    this.addChild(i),
    i.position.set(-31, -43)) : (t = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "money_gold")),
    this.addChild(t),
    t.position.set(-33, -41),
    (i = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7092753,62,18,"left")).position.set(-18, -42),
    i.text = a,
    this.addChild(i),
    o.buyEnable && (t = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/05")),
    this.addChild(t),
    t.position.set(42, -49),
    (i = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,11141377,50,18,"left")).position.set(70, -44),
    i.text = "<a href='event:buyUser'>" + canvas.Translator.getText(200) + "</a>",
    this.addChild(i))),
    0 != s && n ? (this.container.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/07")), 0),
    (t = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("world", "tile_0"),4,0,4,0)).width = 145,
    t.position.set(43, 7),
    this.container.addChild(t),
    (t = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/02"))).position.set(-65, -100),
    this.addChild(t),
    (i = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,11141377,100,18,"left")).position.set(-30, -94),
    i.text = "<a href='event:sell'>" + (this._isSelling ? canvas.Translator.getText(202) : canvas.Translator.getText(203)) + "</a>",
    this.addChild(i)) : (t = this.container.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "manor/06")), 0)).y = 23,
    (t = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("world", "tile_0"),4,0,4,0)).width = 145,
    t.position.set(43, 32),
    this.container.addChild(t),
    (t = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("world", "tile_0"),4,0,4,0)).width = 145,
    t.position.set(43, 57),
    this.container.addChild(t),
    canvas.EventManager.addEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, null, this._linkHandler, this)
}
,
canvas.app.world.manor.popup.PopupBuy.prototype = Object.create(canvas.app.world.manor.Popup.prototype),
canvas.app.world.manor.popup.PopupBuy.prototype._linkHandler = function(t) {
    if (canvas.Functions.findParent(this, t.target))
        switch (t.params) {
        case "buyNew":
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
                text: canvas.Translator.getText(168) + " <b>" + this._price + "</b> <img src='money_gold' atlas='world' yOffset='1'/> ?",
                event: {
                    name: canvas.app.manor.Event.BUY_AREA,
                    params: {
                        areaId: this.id,
                        requestId: "",
                        price: this._price
                    }
                }
            });
            break;
        case "buyUser":
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_LOCATION, null, this.id),
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_MARKET_BUY);
            break;
        case "sell":
            canvas.EventManager.dispatchEvent(canvas.app.manor.Event.SELECT_LOCATION, null, this.id),
            this._isSelling ? canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_CONFIRM, null, {
                text: canvas.Translator.getText(204),
                event: {
                    name: canvas.app.manor.Event.SELL_AREA_CANCEL
                }
            }) : canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_MARKET_SELL)
        }
}
,
canvas.app.world.manor.popup.PopupBuy.prototype.destroy = function() {
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_REMOVE, null, {
        target: this.flag
    }),
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_REMOVE, null, {
        target: this.molotok
    }),
    canvas.EventManager.removeEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, null, this._linkHandler, this),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.world.view.AreaLoader = function(t, e, a, s) {
    canvas.px.Container.call(this),
    null == s && (s = !1),
    this.isInst = s,
    this.baseLnk = t,
    this.itemLnk = e,
    this.completeFunc = a,
    this.cached_sprites = {}
}
,
canvas.app.world.view.AreaLoader.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.world.view.AreaLoader.prototype.init = function() {
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this);
    var t = this.itemLnk.src.split(".")[0];
    this.imageLink = canvas.Config.worldPath + t + "/" + t + ".png",
    this.mciLink = canvas.Config.worldPath + t + "/" + t + ".mci",
    canvas.ResourceLoader.add(this.isInst ? [this.mciLink] : [this.imageLink, this.mciLink])
}
,
canvas.app.world.view.AreaLoader.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this),
    this.data = canvas.ResourceLoader.get(this.mciLink).data,
    this.isInst || (this.cached_sprites.fog = new canvas.px.Polygon(this.data.fog,1,.5),
    this.cached_sprites.fog.beginFill(1, .5),
    this.cached_sprites.fog.drawRect(0, this.cached_sprites.fog.height, this.cached_sprites.fog.width, 1),
    this.cached_sprites.fog.endFill(),
    this.cached_sprites.borders = new canvas.px.Sprite(canvas.ResourceLoader.getTexture(this.imageLink)),
    this.baseLnk.map1.add_area_sensor(this.itemLnk)),
    this.itemLnk.swf_ready = !0;
    var t = this.data.conf;
    if (null != t)
        for (var e, a, s = t.length, i = 0; i < s; i++)
            e = t[i],
            a = {},
            this.itemLnk.objects.push(a),
            a.id = e.id,
            a.xx = e.xx,
            a.yy = e.yy,
            a.type = "area",
            a.exit_flag = e.exit,
            a.linkage_area_id = e.area,
            a.linkage_area_id && e.loc ? (a.linkage_locations = null,
            a.linkage_area_loc = e.loc) : a.linkage_locations = e.loc;
    null != this.completeFunc && this.completeFunc.call()
}
,
canvas.app.world.view.AreaLoader.prototype.get_sprite = function(t) {
    return null != this.cached_sprites[t] ? this.cached_sprites[t] : "sen_area" == t ? new canvas.px.Polygon(this.data.sen_area,16777215,.15) : "sen_loc" == t.substr(0, 7) ? new canvas.px.Polygon(this.data.sen_loc[t.substr(8)],16777215,.15) : new canvas.px.Sprite(canvas.px.TextureEmpty)
}
,
canvas.app.world.view.AreaLoader.prototype.get_way_sen = function(t) {
    return new canvas.px.Polygon(this.data.sen_way[t.split("_")[1]])
}
,
canvas.app.world.view.AreaLoader.prototype.get_bmp = function(t) {
    return new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "area/" + this.itemLnk.src.split(".")[0] + "/" + t) || new canvas.px.Sprite(canvas.px.TextureEmpty))
}
,
canvas.app.world.view.FrontsContent = function() {
    this._fdata = null,
    Object.defineProperty(this, "fdata", {
        get: function() {
            return this._fdata
        },
        set: function(t) {
            this._fdata = t,
            this.update()
        }
    }),
    canvas.px.Container.call(this),
    this.showHeader = !0;
    var t = canvas.app.world.model.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE;
    this.glowContainer = new canvas.px.Container,
    this.addChild(this.glowContainer),
    this.list_header_tf = new canvas.ui.Text(t,16769442,200,18,"left"),
    this.list_header_tf.position.set(5, 2),
    this.list_header_tf.text = canvas.Translator.getText(251) + ":",
    this.glowContainer.addChild(this.list_header_tf),
    this.text_header_point = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "red_point")),
    this.text_header_point.position.set(5, 20),
    this.addChild(this.text_header_point),
    this.text_header_tf = new canvas.ui.Text(t,16762368,200,16,"left"),
    this.text_header_tf.position.set(21, 18),
    this.text_header_tf.text = "Заголовок текста",
    this.glowContainer.addChild(this.text_header_tf),
    this.status_tf = new canvas.ui.Text(t,16769442,200,18,"left"),
    this.status_tf.position.set(21, 34),
    this.status_tf.text = canvas.Translator.getText(251) + ":",
    this.glowContainer.addChild(this.status_tf),
    this.timer_icon = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.timer_icon.position.set(19, 50),
    this.addChild(this.timer_icon),
    this.timer_tf = new canvas.ui.Text(t,16769442,200,18,"left"),
    this.timer_tf.position.set(32, 48),
    this.timer_tf.text = "10:12",
    this.glowContainer.addChild(this.timer_tf),
    this.update()
}
,
canvas.app.world.view.FrontsContent.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.world.view.FrontsContent.prototype.update = function() {
    if (this.visible = null != this.fdata,
    null != this.fdata) {
        this.showHeader ? this.glowContainer.contains(this.list_header_tf) || this.glowContainer.addChild(this.list_header_tf) : this.glowContainer.contains(this.list_header_tf) && this.glowContainer.removeChild(this.list_header_tf);
        var t;
        switch (this.fdata.status) {
        case 0:
            switch (this.fdata.owner) {
            case 1:
                t = 724,
                this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_hum");
                break;
            case -1:
                t = 725,
                this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_mag");
                break;
            default:
                t = 726,
                this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_none")
            }
            break;
        case 1:
            t = 727,
            this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_none");
            break;
        case 2:
            t = 728,
            this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_none");
            break;
        case 3:
            t = 710,
            this.timer_icon.texture = canvas.ResourceLoader.getImage("world", "timer_none")
        }
        this.status_tf.text = canvas.Translator.getText(t),
        this.text_header_tf.text = this.fdata.title,
        this.updateTime()
    }
}
,
canvas.app.world.view.FrontsContent.prototype.updateTime = function() {
    this.timer_tf.text = null == this.fdata || 3 == this.fdata.status || null == this.fdata.displayTime ? "--" : this.fdata.displayTime
}
,
canvas.app.world.view.InnerObject = function(t, e, a) {
    canvas.px.Container.call(this),
    this.baseLnk = t,
    this.itemLnk = e,
    this.objLnk = a;
    var s, t = canvas.app.world.model, e = this.itemLnk.rect_x1 + this.objLnk.xx, a = this.itemLnk.rect_y1 + this.objLnk.yy;
    "area" == this.objLnk.type ? (s = this.objLnk.id,
    this.bmp = this.itemLnk.source.get_bmp(s),
    this.v_color = 1,
    this.bmp.position.set(e, a),
    this.addChild(this.bmp),
    this.sen = this.itemLnk.source.get_way_sen(this.objLnk.id),
    this.sen.buttonMode = !0,
    this.sen.interactive = !0,
    this.sen.mouseover = this.senMouseOverhandler_color.bind(this),
    this.sen.mouseout = this.senMouseOuthandler_color.bind(this),
    this.addChild(this.sen),
    this.sen.position.set(e, a),
    null == this.objLnk.linkage_area_id && null == this.objLnk.linkage_locations || (this.sen.click = this.senMouseClickHandler.bind(this))) : "global" == this.objLnk.type && (s = "ico_" + this.objLnk.id + "_bmp",
    this.bmpc = new canvas.px.Container,
    s = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", s)),
    this.baseTexture = s.texture,
    s.position.set(-Math.round(.5 * s.width), -Math.round(.5 * s.height)),
    this.bmpc.addChild(s),
    this.bmpc.position.set(e, a),
    this.bmpc.scale.set(.7, .7),
    this.addChild(this.bmpc),
    "players" == this.objLnk.id && (this.bmpFlag = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "user_flag")),
    this.bmpFlag.position.set(s.x + 30, s.y),
    (s = new canvas.px.Mask(30,30,0,0)).position.set(-10, 0),
    this.bmpFlag.addChild(s),
    this.bmpFlag.interactive = !0,
    this.mark_bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_mark2")),
    this.mark_bmp.position.set(this.objLnk.xx - 21, this.objLnk.yy - 21),
    this.mark_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,0,18,19,"center"),
    this.mark_tf.text = "?",
    this.mark_tf.position.set(this.objLnk.xx - 20, this.objLnk.yy - 18),
    this.mark_tf.interactive = !1,
    this.addChild(this.mark_tf)),
    this.v_scale = .7,
    this.bmpc.buttonMode = !0,
    this.bmpc.interactive = !0,
    this.bmpc.hitArea = new canvas.px.Circle(0,0,.5 * this.bmpc.width),
    this.bmpc.mouseover = this.senMouseOverhandler_scale.bind(this),
    this.bmpc.mouseout = this.senMouseOuthandler_scale.bind(this),
    null == this.objLnk.linkage_area_id && null == this.objLnk.linkage_locations || (this.bmpc.click = this.senMouseClickHandler.bind(this),
    t.isModule || null == this.objLnk.linkage_area_id || null != (t = t.AREAS[this.objLnk.linkage_area_id]) && (t.swf_ready || null == t.source && (t.source = new canvas.app.world.view.AreaLoader(this.baseLnk,t,null),
    t.source.init()))),
    this.addChild(this.bmpc),
    this.mark_bmp && this.addChild(this.mark_bmp),
    this.mark_tf && this.addChild(this.mark_tf))
}
,
canvas.app.world.view.InnerObject.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.world.view.InnerObject.prototype.senMouseOverhandler_color = function() {
    var t = canvas.app.world.model;
    if (this.filters = [canvas.Functions.getBrightness(1.2)],
    null != this.objLnk.linkage_locations)
        this.itemLnk.locations[this.objLnk.linkage_locations[0]] && this.itemLnk.locations[this.objLnk.linkage_locations[1]] && this.baseLnk.label2.set_data(canvas.Translator.getText(208) + ":", "", [this.itemLnk.locations[this.objLnk.linkage_locations[0]].title, this.itemLnk.locations[this.objLnk.linkage_locations[1]].title], void 0, void 0, void 0, null != t.W_BOTS ? t.W_BOTS[this.objLnk.id] : void 0),
        this.baseLnk.label2.sender = this,
        t.isModule && t.SelectWay(this.objLnk.linkage_locations);
    else if (null != this.objLnk.linkage_area_id) {
        this.baseLnk.label2.set_data(canvas.Translator.getText(209) + ":", t.AREAS[this.objLnk.linkage_area_id].title, null),
        this.baseLnk.label2.sender = this;
        for (var e = [], a = 0; a < t.AREALOC.length; a++)
            if (t.AREALOC[a][0] == this.objLnk.linkage_area_id) {
                e = e.concat(t.AREALOC[a][1]);
                break
            }
        t.isModule && (this.objLnk.linkage_area_loc ? t.SelectWay(e, this.objLnk.linkage_area_loc) : t.SelectWay(e))
    } else
        2 == this.objLnk.exit_flag ? (this.baseLnk.label2.set_data(canvas.Translator.getText(1800) + ":", "", [t.AREA.exit_title]),
        this.baseLnk.label2.sender = this) : 1 == this.objLnk.exit_flag && (this.baseLnk.label2.set_data(canvas.Translator.getText(1801) + ":", "", [t.AREA.enter_title]),
        this.baseLnk.label2.sender = this)
}
,
canvas.app.world.view.InnerObject.prototype.senMouseOuthandler_color = function() {
    var t = canvas.app.world.model;
    this.filters = null,
    t.isModule && t.UnSelectWay(),
    this.baseLnk.label2.sender == this && this.baseLnk.label2.deactivate()
}
,
canvas.app.world.view.InnerObject.prototype.senMouseOverhandler_scale = function() {
    var t = canvas.app.world.model;
    if (null != this.objLnk.location_id && (this.itemLnk.locations[this.objLnk.location_id].lnk.force_over(),
    t.isModule))
        if (null != this.objLnk.linkage_locations)
            t.SelectWay(this.objLnk.linkage_locations, "location");
        else if (null != this.objLnk.linkage_area_id) {
            for (var e = [], a = 0; a < t.AREALOC.length; a++) {
                t.AREALOC[a][0],
                this.objLnk.linkage_area_id,
                e = e.concat(t.AREALOC[a][1]);
                break
            }
            t.isModule && (this.objLnk.linkage_area_loc ? t.SelectWay(e, this.objLnk.linkage_area_loc) : t.SelectWay(e))
        }
    if (null != this.objLnk.title)
        this.baseLnk.label2.set_data(this.objLnk.title, this.objLnk.text, this.objLnk.items),
        this.baseLnk.label2.sender = this;
    else if ("players" == this.objLnk.id && null != this.pl_list) {
        for (var s = [], a = 0; a < this.pl_list.length; a++)
            s.push(this.pl_list[a].nick);
        this.baseLnk.label2.set_data(canvas.Translator.getText(1802), "", s),
        this.baseLnk.label2.sender = this
    }
    this.frameDelta_scale(.3 / 3)
}
,
canvas.app.world.view.InnerObject.prototype.senMouseOuthandler_scale = function() {
    var t = canvas.app.world.model;
    this.frameDelta_scale(-.3 / 3),
    this.baseLnk.label2.sender == this && this.baseLnk.label2.deactivate(),
    null != this.objLnk.location_id && this.itemLnk.locations[this.objLnk.location_id].lnk.force_out(),
    t.isModule && t.UnSelectWay()
}
,
canvas.app.world.view.InnerObject.prototype.frameDelta_scale = function(t) {
    this.v_delta = t,
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler_scale, this)
}
;
canvas.app.world.view.InnerObject.prototype.frameHandler_scale = function() {
    this.v_scale += this.v_delta,
    this.bmpc.scale.set(this.v_scale, this.v_scale),
    (this.v_delta < 0 && this.v_scale <= .7 || 0 < this.v_delta && 1 <= this.v_scale) && (this.v_delta < 0 ? (this.v_scale = .7,
    this.bmpc.scale.set(.7, .7)) : (this.v_scale = 1,
    this.bmpc.scale.set(1, 1)),
    canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler_scale, this))
}
,
canvas.app.world.view.InnerObject.prototype.senMouseClickHandler = function() {
    var t = canvas.app.world.model;
    if (null != this.objLnk.linkage_area_id) {
        for (var e = [], a = 0; a < t.AREALOC.length; a++)
            if (t.AREALOC[a][0] == this.objLnk.linkage_area_id) {
                e = e.concat(t.AREALOC[a][1]);
                break
            }
        if (t.isModule)
            return void (this.objLnk.linkage_area_loc ? t.GoToWay(e, this.objLnk.linkage_area_loc) : this.objLnk.linkage_location_id ? t.GoToWay(e, [this.objLnk.linkage_location_id]) : t.GoToWay(e));
        var s = t.AREAS[this.objLnk.linkage_area_id];
        null != s && (s.swf_ready ? (t.focusedLocationId = this.objLnk.linkage_location_id,
        this.baseLnk.area_switch(s)) : null == s.source && (s.source = new canvas.app.world.view.AreaLoader(this.baseLnk,s,null),
        s.source.init()))
    }
    null != this.objLnk.linkage_locations && t.isModule && t.GoToWay(this.objLnk.linkage_locations)
}
,
canvas.app.world.view.InnerObject.prototype.pl_update_mark = function() {
    null != this.mark_tf && null != this.pl_list && (this.mark_tf.text = this.pl_list.length)
}
,
canvas.app.world.view.InnerObject.prototype.showFlag = function(t, e, a) {
    null == t && (t = !1),
    null == e && (e = !1),
    this.flagUser = a,
    null != this.bmpFlag && (e ? this.bmpFlag.parent && this.bmpFlag.parent.removeChild(this.bmpFlag) : t ? (this.bmpc.addChild(this.bmpFlag),
    this.bmpc.getChildAt(0).texture = this.baseTexture) : this.bmpc.getChildAt(0).texture = this.bmpFlag.texture)
}
,
canvas.app.world.view.MapWorldParts = function(t, e, a, s, i, n) {
    canvas.px.Container.call(this),
    null == n && (n = !1),
    this.isInst = n,
    this.popupsContainer = new canvas.px.Container,
    this.popupsContainer2 = new canvas.px.Container,
    this.container = new canvas.px.Container,
    this.baseLnk = t,
    this.cells = new canvas.px.Graphics,
    this.addChild(this.cells),
    this.addChild(this.container),
    this.addChild(this.popupsContainer),
    this.gw = e,
    this.gh = a,
    this.devisor = s,
    this.prefix = i,
    this.isInst ? (this.ww = canvas.app.world.model.ww,
    this.hh = canvas.app.world.model.hh) : (this.ww = 20,
    this.hh = 13),
    this.iw = Math.floor(e / this.ww),
    this.ih = Math.floor(a / this.hh),
    this.parts = {},
    this.cont_parts = new canvas.px.Container,
    this.container.addChild(this.cont_parts),
    this.cont_areas = new canvas.px.Container,
    this.container.addChild(this.cont_areas),
    1 == this.devisor && (this.inner = new canvas.px.Graphics,
    this.container.addChild(this.inner)),
    this.cont_way = new canvas.px.Container,
    this.container.addChild(this.cont_way),
    this.put_pers_flag(),
    this.put_pers_finish_flag(),
    this.cells.beginFill(0, 1),
    this.cells.drawRect(0, 0, this.gw, this.gh),
    this.cells.endFill(),
    this.cells.lineStyle(5, 16777215, .5),
    this.cells.moveTo(0, 0),
    this.cells.lineTo(this.gw, this.gh),
    this.cells.moveTo(this.gw, 0),
    this.cells.lineTo(0, this.gh),
    this.cells.lineStyle(1, 16776960, .5);
    for (var o = this.iw; o < this.gw; o += this.iw)
        this.cells.moveTo(o, 0),
        this.cells.lineTo(o, this.gh);
    for (var r = this.ih; r < this.gh; r += this.ih)
        this.cells.moveTo(0, r),
        this.cells.lineTo(this.gw, r);
    this.bool_dragger = !1,
    this.bool_moving = !1,
    this.drag_lx = 1,
    this.drag_ly = 1
}
,
canvas.app.world.view.MapWorldParts.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.world.view.MapWorldParts.prototype.put_pers_flag = function() {
    var t = canvas.app.world.model
      , e = t.AREAS[t.FlagArea];
    null == e || null != (t = this.isInst ? e.locations[t.ActiveLocation] : e.locations[t.FlagLocation]) && (this.flag_bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_flag")),
    1 == this.devisor ? this.flag_bmp.position.set(e.rect_x1 + t.flag_pos_x - Math.round(this.flag_bmp.width / 2), e.rect_y1 + t.flag_pos_y - Math.round(this.flag_bmp.height / 2)) : 3 == this.devisor && this.flag_bmp.position.set(e.rect_x1_3 + Math.round(t.flag_pos_x / 3) - Math.round(this.flag_bmp.width / 2), e.rect_y1_3 + Math.round(t.flag_pos_y / 3) - Math.round(this.flag_bmp.height / 2)),
    this.container.addChild(this.popupsContainer2),
    this.container.addChild(this.flag_bmp),
    1 == this.devisor && (this.flag_location = t,
    this.flag_bmp.hitArea = new canvas.px.Circle(14,18,18),
    this.flag_bmp.interactive = !0,
    this.flag_bmp.buttonMode = !0,
    this.flag_bmp.mouseover = this.flagMouseOverHandler.bind(this),
    this.flag_bmp.mouseout = this.flagMouseOutHandler.bind(this)))
}
,
canvas.app.world.view.MapWorldParts.prototype.refresh_pers_flag_inst = function() {
    var t = canvas.app.world.model;
    if (null == t.ActiveLocation)
        return this.flag_bmp.parent && this.container.removeChild(this.flag_bmp),
        void this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", t.AREA.title);
    var e, a, s = t.AREA;
    null == s || null != (e = s.locations[t.ActiveLocation]) && (null == this.flag_bmp && this.put_pers_flag(),
    this.flag_bmp.x = e.flag_pos_x - Math.floor(this.flag_bmp.width / 2),
    this.flag_bmp.y = e.flag_pos_y - Math.floor(this.flag_bmp.height / 2),
    this.flag_location = e,
    a = "unknown area",
    e = "unknown location",
    a = s.title,
    null != s.locations[t.ActiveLocation] && (e = s.locations[t.ActiveLocation].title),
    this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", a, e),
    this.container.addChild(this.flag_bmp))
}
,
canvas.app.world.view.MapWorldParts.prototype.put_pers_finish_flag = function() {
    var t = canvas.app.world.model;
    if (this.finish_flag_bmp || (this.finish_flag_bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_finish_flag")),
    this.finish_flag_bmp.position.set(-100, -100),
    this.container.addChild(this.finish_flag_bmp),
    1 == this.devisor && (this.finish_flag_bmp.hitArea = new canvas.px.Circle(14,18,18),
    this.finish_flag_bmp.interactive = !0,
    this.finish_flag_bmp.buttonMode = !0,
    this.finish_flag_bmp.mouseover = this.finishFlagMouseOverHandler.bind(this),
    this.finish_flag_bmp.mouseout = this.finishFlagMouseOutHandler.bind(this))),
    t.FinishLocation == t.FlagLocation || null == t.FinishLocation)
        return this.cont_way.removeChildren(),
        this.baseLnk.main.setPoint(0),
        void this.finish_flag_bmp.position.set(-100, -100);
    var e = this.getArea(t.FinishLocation);
    "err" != e && (null == (e = t.AREAS[e]) || null != (t = e.locations[t.FinishLocation]) && (1 == this.devisor ? (this.finish_flag_bmp.position.set(e.rect_x1 + t.flag_pos_x - Math.round(this.finish_flag_bmp.width / 2), e.rect_y1 + t.flag_pos_y - Math.round(this.finish_flag_bmp.height / 2) + 10),
    this.setWay()) : 3 == this.devisor && (this.finish_flag_bmp.position.set(e.rect_x1_3 + Math.round(t.flag_pos_x / 3) - Math.round(this.finish_flag_bmp.width / 2), e.rect_y1_3 + Math.round(t.flag_pos_y / 3) - Math.round(this.finish_flag_bmp.height / 2) + 3),
    this.setWay()),
    this.container.addChild(this.finish_flag_bmp),
    1 == this.devisor && (this.finish_flag_location = t)))
}
,
canvas.app.world.view.MapWorldParts.prototype.refresh_pers_flag = function() {
    var t, e, a;
    this.isInst ? this.refresh_pers_flag_inst() : null != (e = (t = canvas.app.world.model).AREAS[t.FlagArea]) && (a = e.locations[t.FlagLocation],
    e.locations[t.FinishLocation],
    null != a && null != this.flag_bmp && (1 == this.devisor ? this.flag_bmp.position.set(e.rect_x1 + a.flag_pos_x - Math.round(this.flag_bmp.width / 2), e.rect_y1 + a.flag_pos_y - Math.round(this.flag_bmp.height / 2)) : 3 == this.devisor && this.flag_bmp.position.set(e.rect_x1_3 + Math.round(a.flag_pos_x / 3) - Math.round(this.flag_bmp.width / 2), e.rect_y1_3 + Math.round(a.flag_pos_y / 3) - Math.round(this.flag_bmp.height / 2)),
    1 == this.devisor && (this.flag_location = a)))
}
,
canvas.app.world.view.MapWorldParts.prototype.refresh_pers_finish_flag = function() {
    var t = canvas.app.world.model;
    if (t.FinishLocation == t.FlagLocation || null == t.FinishLocation)
        return this.cont_way.removeChildren(),
        this.baseLnk.main.setPoint(0),
        void this.finish_flag_bmp.position.set(-100, -100);
    var e = this.getArea(t.FinishLocation);
    "err" != e && (null == (e = t.AREAS[e]) || null != (t = e.locations[t.FinishLocation]) && null != this.finish_flag_bmp && (1 == this.devisor ? (this.finish_flag_bmp.position.set(e.rect_x1 + t.flag_pos_x - Math.round(this.finish_flag_bmp.width / 2), e.rect_y1 + t.flag_pos_y - Math.round(this.finish_flag_bmp.height / 2) + 10),
    this.setWay()) : 3 == this.devisor && (this.finish_flag_bmp.position.set(e.rect_x1_3 + Math.round(t.flag_pos_x / 3) - Math.round(this.finish_flag_bmp.width / 2), e.rect_y1_3 + Math.round(t.flag_pos_y / 3) - Math.round(this.finish_flag_bmp.height / 2) + 3),
    this.setWay()),
    1 == this.devisor && (this.finish_flag_location = t)))
}
,
canvas.app.world.view.MapWorldParts.prototype.flagMouseOverHandler = function() {
    this.baseLnk.label2.set_data(canvas.Translator.getText(211), canvas.Translator.getText(212), null),
    null != this.flag_location && null != this.flag_location.lnk && this.flag_location.lnk.force_over()
}
,
canvas.app.world.view.MapWorldParts.prototype.finishFlagMouseOverHandler = function() {
    this.baseLnk.label2.set_data(canvas.Translator.getText(217), canvas.Translator.getText(216), null),
    null != this.finish_flag_location && null != this.finish_flag_location.lnk && this.finish_flag_location.lnk.force_over()
}
,
canvas.app.world.view.MapWorldParts.prototype.flagMouseOutHandler = function() {
    this.baseLnk.label2.deactivate(),
    null != this.flag_location && null != this.flag_location.lnk && this.flag_location.lnk.force_out()
}
,
canvas.app.world.view.MapWorldParts.prototype.finishFlagMouseOutHandler = function() {
    this.baseLnk.label2.deactivate(),
    null != this.finish_flag_location && null != this.finish_flag_location.lnk && this.finish_flag_location.lnk.force_out()
}
,
canvas.app.world.view.MapWorldParts.prototype.check_parts = function(t, e) {
    var a, s, i = Math.floor(-this.y / this.ih), n = Math.ceil((-this.y + e - this.ih) / this.ih), o = Math.floor(-this.x / this.iw), r = Math.ceil((-this.x + t - this.iw) / this.iw);
    i < 0 && (i = 0),
    n > this.hh - 1 && (n = this.hh - 1),
    o < 0 && (o = 0),
    r > this.ww - 1 && (r = this.ww - 1);
    for (var c, p = [], h = i; h <= n; h++)
        for (a = o; a <= r; a++)
            s = h * this.ww + a + 1,
            p.push(s),
            null == this.parts[s] && (this.parts[s] = new canvas.ui.Image(this.part_link(s)),
            this.parts[s].position.set(a * this.iw, h * this.ih));
    for (c in this.parts)
        s = parseInt(c),
        p.indexOf(s) < 0 ? this.cont_parts.removeChild(this.parts[s]) : this.cont_parts.addChild(this.parts[s])
}
,
canvas.app.world.view.MapWorldParts.prototype.part_link = function(t) {
    var e = String(t);
    return t < 10 && (e = "0" + e),
    this.prefix + e + ".jpg"
}
,
canvas.app.world.view.MapWorldParts.prototype.add_area_sensor = function(t) {
    t.sen = new canvas.app.world.view.WorldSensor(this.baseLnk,t,"sen_area",3,null),
    this.cont_areas.addChild(t.sen),
    this.baseLnk.updateTreasure()
}
,
canvas.app.world.view.MapWorldParts.prototype.focus_on_active_area = function() {
    var t, e, a, s, i, n, o = canvas.app.world.model, r = o.AREAS[o.focusedAreaId];
    null != r && (this.baseLnk.label1.deactivate(),
    this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", r.title),
    this.baseLnk.label1.redraw_bg(),
    this.isInst || (i = o.width - 54,
    n = o.height - 44,
    t = this.gw - i,
    e = this.gh - n,
    s = o.focusedAreaId == o.FlagArea && null != (s = r.locations[o.FlagLocation]) ? (a = s.flag_pos_x + r.rect_x1,
    s.flag_pos_y + r.rect_y1) : (a = r.center_x,
    r.center_y),
    0 < (i = -Math.round(a / this.devisor - i / 2)) ? i = 0 : i < -t && (i = -t),
    0 < (n = -Math.round(s / this.devisor - n / 2)) ? n = 0 : n < -e && (n = -e),
    this.baseLnk.scroll_H.current = -i,
    this.baseLnk.scroll_V.current = -n,
    this.baseLnk.scrollHandlerV(),
    this.baseLnk.scrollHandlerH()),
    1 == this.devisor && this.init_inner_objects(r))
}
,
canvas.app.world.view.MapWorldParts.prototype.focus_on_active_area_in_motion = function() {
    var t = canvas.app.world.model;
    null != t.AREAS[t.focusedAreaId] && (this.baseLnk.label1.deactivate(),
    this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", t.AREAS[t.focusedAreaId].title),
    this.baseLnk.label1.redraw_bg(),
    1 == this.devisor && this.init_inner_objects(t.AREAS[t.focusedAreaId]),
    this.bool_moving || (this.bool_moving = !0,
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.movingHandler, this)))
}
,
canvas.app.world.view.MapWorldParts.prototype.movingHandler = function() {
    var t, e, a = canvas.app.world.model, s = a.AREAS[a.focusedAreaId], i = a.ls_ww - 54, n = a.ls_hh - 44, o = this.gw - i, r = this.gh - n;
    s = a.focusedAreaId != a.FlagArea ? null != s.locations[a.FlagLocation] ? (e = s.locations[a.FlagLocation],
    1 == this.devisor ? (t = e.flag_pos_x + s.rect_x1,
    e.flag_pos_y + s.rect_y1) : (t = Math.round(e.flag_pos_x / 3) + s.rect_x1_3,
    Math.round(e.flag_pos_y / 3) + s.rect_y1_3)) : 1 == this.devisor ? (t = s.center_x,
    s.center_y) : (t = Math.round(s.center_x / 3),
    Math.round(s.center_y / 3)) : (a = s.locations[a.FlagLocation],
    1 == this.devisor ? (t = a.flag_pos_x + s.rect_x1,
    a.flag_pos_y + s.rect_y1) : (t = Math.round(a.flag_pos_x / 3) + s.rect_x1_3,
    Math.round(a.flag_pos_y / 3) + s.rect_y1_3));
    i = -Math.round(t - i / 2),
    n = -Math.round(s - n / 2);
    0 < i ? i = 0 : i < -o && (i = -o),
    0 < n ? n = 0 : n < -r && (n = -r);
    i = Math.round((this.baseLnk.scroll_H.current + i) / 7) + 1,
    n = Math.round((this.baseLnk.scroll_V.current + n) / 7) + 1;
    1 < i * i || 1 < n * n ? (this.baseLnk.scroll_H.current -= i,
    this.baseLnk.scroll_V.current -= n,
    this.baseLnk.scrollHandlerV(),
    this.baseLnk.scrollHandlerH()) : (this.bool_moving = !1,
    canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.movingHandler, this)),
    this.baseLnk.map_state.refresh_xy_pos(),
    this.baseLnk.refresh_scrollers(),
    this.baseLnk.map_state.map_check()
}
,
canvas.app.world.view.MapWorldParts.prototype.init_inner_objects = function(t) {
    if (this.isInst)
        this.init_inner_objects_inst(t);
    else {
        var e = canvas.app.world.model
          , a = t;
        if (null == a && (a = e.AREAS[e.focusedAreaId]),
        this.inner.removeChildren(),
        this.draw_fog(a.rect_x1, a.rect_y1, a.rect_x2, a.rect_y2),
        a.swf_ready) {
            t = a.source.get_sprite("fog");
            t.x = a.rect_x1,
            t.y = a.rect_y1,
            this.inner.addChild(t);
            var s, i, n, o, t = a.source.get_sprite("borders");
            for (i in t.x = a.rect_x1,
            t.y = a.rect_y1,
            this.inner.addChild(t),
            a.locations)
                (s = a.locations[i]).lnk || (s.lnk = new canvas.app.world.view.WorldSensor(this.baseLnk,a,"sen_loc_" + String(s.id),1,s.id)),
                this.inner.addChild(s.lnk);
            for (var r = a.objects.length, c = 0; c < r; c++)
                n = !1,
                null != (o = a.objects[c]).linkage_area_id && null == e.AREAS[o.linkage_area_id] && (n = !0),
                n || (o.lnk || (o.lnk = new canvas.app.world.view.InnerObject(this.baseLnk,a,o)),
                this.inner.addChild(o.lnk))
        } else
            null == a.source ? (a.source = new canvas.app.world.view.AreaLoader(this.baseLnk,a,this.init_inner_objects.bind(this)),
            a.source.init()) : a.source.completeFunc = this.init_inner_objects.bind(this)
    }
}
,
canvas.app.world.view.MapWorldParts.prototype.init_inner_objects_inst = function(t) {
    var e, a, s = canvas.app.world.model, i = t;
    if (null == i && (i = s.AREA),
    this.inner.removeChildren(),
    null == i.source)
        return i.source = new canvas.app.world.view.AreaLoader(this.baseLnk,i,this.init_inner_objects_inst.bind(this),this.isInst),
        void i.source.init();
    for (a in i.locations) {
        e = i.locations[a],
        n = new canvas.app.world.view.WorldSensor(this.baseLnk,i,"sen_loc_" + String(e.id),1,e.id),
        e.lnk = n,
        this.inner.addChild(n);
        var n = {};
        n.xx = e.players_x,
        n.yy = e.players_y,
        n.type = "global",
        n.id = "players",
        n.location_id = e.id,
        e.players_object = new canvas.app.world.view.InnerObject(this.baseLnk,i,n)
    }
    for (var o = i.objects.length, r = 0; r < o; r++)
        objI = i.objects[r],
        this.inner.addChild(new canvas.app.world.view.InnerObject(this.baseLnk,i,objI));
    canvas.EventManager.dispatchEvent(canvas.app.inst.Event.UPDATE_USERS)
}
,
canvas.app.world.view.MapWorldParts.prototype.draw_fog = function(t, e, a, s) {
    this.inner.clear(),
    this.inner.beginFill(0, .5),
    this.inner.drawRect(0, 0, this.gw, e),
    this.inner.drawRect(0, e, t, s - e),
    this.inner.drawRect(a, e, this.gw, s - e),
    this.inner.drawRect(0, s, this.gw, this.gh),
    this.inner.endFill()
}
,
canvas.app.world.view.MapWorldParts.prototype.getArea = function(t) {
    for (var e = canvas.app.world.model, a = "", s = e.AREALOC.length; s--; )
        for (var i = e.AREALOC[s][1], n = i.length; n--; )
            String(i[n]) == t && (a = e.AREALOC[s][0]);
    return "" != a ? a : "err"
}
,
canvas.app.world.view.MapWorldParts.prototype.setWay = function(t) {
    var e = canvas.app.world.model;
    this.cont_way.removeChildren();
    for (var a = e.findWay.finder(parseInt(e.FlagLocation), parseInt(e.FinishLocation)), s = 0; s < a.length - 2; s++) {
        if (20 == a[s] && 21 == a[s + 2] || 21 == a[s] && 20 == a[s + 2]) {
            if ((i = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ways", "way_" + a[s + 2] + "_" + a[s]))).scale.set(1 / this.devisor, 1 / this.devisor),
            null == e.way_conf["way_" + a[s + 2] + "_" + a[s]].xx)
                return;
            i.position.set(Math.round(e.way_conf["way_" + a[s + 2] + "_" + a[s]].xx / this.devisor + 2312 / this.devisor), e.way_conf["way_" + a[s + 2] + "_" + a[s]].yy / this.devisor + 250 / this.devisor)
        } else {
            var i, n = a[s] > a[s + 2] ? "way_" + a[s] + "_" + a[s + 2] : "way_" + a[s + 2] + "_" + a[s];
            if ((i = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ways", n))).texture == canvas.px.TextureEmpty && (n = "way_" + a[s] + "_" + a[s + 2],
            n += "_" + a[s + 1],
            (i = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ways", n))).texture == canvas.px.TextureEmpty && (n = "way_" + a[s + 2] + "_" + a[s],
            n += "_" + a[s + 1],
            i = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ways", n)))),
            i.scale.set(1 / this.devisor, 1 / this.devisor),
            null != e.way_conf[n])
                i.position.set(Math.round(e.way_conf[n].xx / this.devisor + 2312 / this.devisor), Math.round(e.way_conf[n].yy / this.devisor + 250 / this.devisor));
            else if (a[s] > a[s + 2])
                if (null != e.way_conf["way_" + a[s] + "_" + a[s + 2]])
                    i.position.set(Math.round(e.way_conf["way_" + a[s] + "_" + a[s + 2]].xx / this.devisor + 2312 / this.devisor), Math.round(e.way_conf["way_" + a[s] + "_" + a[s + 2]].yy / this.devisor + 250 / this.devisor));
                else {
                    if (null == e.way_conf["way_" + a[s] + "_" + a[s + 2] + "_" + a[s + 1]])
                        return;
                    i.position.set(Math.round(e.way_conf["way_" + a[s] + "_" + a[s + 2] + "_" + a[s + 1]].xx / this.devisor + 2312 / this.devisor), Math.round(e.way_conf["way_" + a[s] + "_" + a[s + 2] + "_" + a[s + 1]].yy / this.devisor + 250 / this.devisor))
                }
            else if (null != e.way_conf["way_" + a[s + 2] + "_" + a[s]])
                i.position.set(Math.round(e.way_conf["way_" + a[s + 2] + "_" + a[s]].xx / this.devisor + 2312 / this.devisor), Math.round(e.way_conf["way_" + a[s + 2] + "_" + a[s]].yy / this.devisor + 250 / this.devisor));
            else {
                if (null == e.way_conf["way_" + a[s + 2] + "_" + a[s] + "_" + a[s + 1]])
                    return;
                i.position.set(Math.round(e.way_conf["way_" + a[s + 2] + "_" + a[s] + "_" + a[s + 1]].xx / this.devisor + 2312 / this.devisor), Math.round(e.way_conf["way_" + a[s + 2] + "_" + a[s] + "_" + a[s + 1]].yy / this.devisor + 250 / this.devisor))
            }
        }
        i.filters = [canvas.Functions.getDropShadow(90, 2, 1, 5977886, 1)],
        this.cont_way.addChild(i)
    }
}
,
canvas.app.world.view.MapWorldParts.prototype.add_inner_object = function(t) {
    null != t && this.inner.addChild(t)
}
,
canvas.app.world.view.ScrollH = function(t, e) {
    this.map_state = t;
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_h_left"))
      , s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_h_right"))
      , i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_h_drag"),[3, 0, 3, 0]);
    i.setSize(40, 0),
    this.drag = i;
    t = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("world", "png_scroll_bg"));
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.HORIZONTAL, a, s, t, i, e, !0, !1),
    this.padding = 15,
    this.step = 50,
    this.max = 600
}
,
canvas.app.world.view.ScrollH.prototype = Object.create(canvas.ui.Scroll.prototype),
canvas.app.world.view.ScrollH.prototype.refresh = function() {
    this.max = this.map_state.map_complete_width - this.map_state.map_visible_width;
    var t = this.map_state.map_visible_width / this.map_state.map_complete_width;
    this.visible = t < 1,
    this.drag.setSize(Math.round((this.map_state.map_visible_width - 32) * t), 0),
    this.current = this.current
}
,
canvas.app.world.view.ScrollV = function(t, e) {
    this.map_state = t;
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_v_up"))
      , s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_v_down"))
      , i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_scroll_v_drag"),[0, 3, 0, 3]);
    i.setSize(0, 40),
    this.drag = i;
    t = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("world", "png_scroll_bg"));
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.VERTICAL, a, s, t, i, e, !0, !0),
    this.padding = 15,
    this.step = 50,
    this.max = 600
}
,
canvas.app.world.view.ScrollV.prototype = Object.create(canvas.ui.Scroll.prototype),
canvas.app.world.view.ScrollV.prototype.refresh = function() {
    this.max = this.map_state.map_complete_height - this.map_state.map_visible_height;
    var t = this.map_state.map_visible_height / this.map_state.map_complete_height;
    this.visible = t < 1,
    this.drag.setSize(0, Math.round((this.map_state.map_visible_height - 32) * t)),
    this.current = this.current
}
,
canvas.app.world.view.TopTextLeft = function() {
    canvas.px.Graphics.call(this);
    var t = canvas.app.world.model;
    this.field = new canvas.ui.HtmlText(t.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,t.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16769442,400,200,"left"),
    this.field.lineSpace = 4,
    this.addChild(this.field),
    this.field.position.set(6, 4),
    this.line0 = "",
    this.line1 = "",
    this.line2 = "",
    this.interactiveChildren = !1
}
,
canvas.app.world.view.TopTextLeft.prototype = Object.create(canvas.px.Graphics.prototype),
canvas.app.world.view.TopTextLeft.prototype.set_line0 = function(t, e, a) {
    this.line0 = t + " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + e + " <img src='red_point' yOffset='1' atlas='world'/> " + a + "</font>",
    this.update()
}
,
canvas.app.world.view.TopTextLeft.prototype.set_line1 = function(t, e) {
    this.line1 = t + " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + e + "</font>",
    this.update()
}
,
canvas.app.world.view.TopTextLeft.prototype.set_line2 = function(t, e) {
    this.line2 = t ? t + " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + e + "</font>" : "",
    this.update()
}
,
canvas.app.world.view.TopTextLeft.prototype.update = function() {
    this.field.text = this.line0 + "<br/>" + this.line1 + "<br/>" + this.line2,
    this.redraw_bg(),
    "" != this.field.text && (this.addChild(this.field),
    this.visible = !0)
}
,
canvas.app.world.view.TopTextLeft.prototype.deactivate = function() {
    this.removeChild(this.field),
    this.visible = !1
}
,
canvas.app.world.view.TopTextLeft.prototype.redraw_bg = function() {
    this.clear(),
    this.beginFill(0, 1 / 3),
    this.drawRoundedRect(0, 0, this.field.textWidth + 12, this.field.textHeight + 8, 6),
    this.endFill()
}
,
canvas.app.world.view.TopTextRight = function() {
    canvas.px.Graphics.call(this);
    var t = canvas.app.world.model;
    this.field = new canvas.ui.HtmlText(t.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,t.isModule ? canvas.Const.FONT_TAHOMA_10_BOLD_STROKE : canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16769442,215,600,"left"),
    this.field.lineSpace = 4,
    this.addChild(this.field),
    this.field.position.set(6, 4),
    this.treasureActivated = !1,
    this.line0 = "",
    this.line1 = "",
    this.line2 = "",
    this.lineBottom = "",
    this.frontsContent = new canvas.app.world.view.FrontsContent,
    this.interactiveChildren = !1
}
,
canvas.app.world.view.TopTextRight.prototype = Object.create(canvas.px.Graphics.prototype),
canvas.app.world.view.TopTextRight.prototype.set_data = function(t, e, a, s, i, n) {
    var o = canvas.app.world.model;
    if (null == s && (s = ""),
    null == i && (i = ""),
    null == n && (n = !0),
    null != a && 0 == a.length && (a = null),
    this.deactivate(),
    this.line0 = t ? a ? t : "<img src='red_point' yOffset='1' atlas='world'/> <font color='#FFC600'>" + t + "</font>" : "",
    this.line1 = e ? "     <font color='#" + (a ? "FFC600" : "FFE1A2") + "'>" + e + "</font>" : "",
    this.line2 = "",
    a)
        for (var r = 0; r < a.length; r++)
            this.line2 += (0 == r ? "" : "<br/>") + "<img src='red_point' yOffset='1' atlas='world'/> <font color='#FFC600'>" + a[r] + "</font>";
    this.lineBottom = s ? "   <font color='#FFC600'>" + s + "</font>" : "",
    this.update(),
    n ? (this.frontsContent.showHeader = !0,
    this.frontsContent.y = this.field.textHeight + 5) : (this.frontsContent.showHeader = !1,
    this.frontsContent.y = -10),
    null != o.frontsData && (this.frontsContent.fdata = o.frontsData[i]),
    null != this.frontsContent.fdata ? this.addChild(this.frontsContent) : this.contains(this.frontsContent) && this.removeChild(this.frontsContent),
    this.frontsContent.parent && (this.x = this.ww - Math.max(this.frontsContent.width, this.field.textWidth) - 52,
    this.visible = !0),
    this.redraw_bg()
}
,
canvas.app.world.view.TopTextRight.prototype.deactivate = function() {
    this.removeChild(this.field),
    this.visible = !1,
    this.treasureActivated = !1
}
,
canvas.app.world.view.TopTextRight.prototype.update = function() {
    this.field.text = this.line0 + (this.line0 ? "<br/>" : "") + this.line1 + (this.line1 ? "<br/>" : "") + this.line2 + (this.line2 ? "<br/>" : "") + this.lineBottom,
    "" == this.field.text && !this.frontsContent.parent || (this.addChild(this.field),
    this.visible = !0),
    this.x = this.ww - this.field.textWidth - 52
}
,
canvas.app.world.view.TopTextRight.prototype.redraw_bg = function() {
    this.clear(),
    this.beginFill(0, 1 / 3),
    this.frontsContent.parent ? this.drawRoundedRect(0, 0, Math.max(this.frontsContent.width, this.field.textWidth) + 12, this.frontsContent.height + this.field.textHeight + 10, 6) : this.drawRoundedRect(0, 0, this.field.textWidth + 12, this.field.textHeight + 8, 6),
    this.endFill()
}
,
canvas.app.world.view.TopTextRight.prototype.pos = function(t) {
    this.ww = t
}
,
canvas.app.world.view.TopTextRight.prototype.showTreasureInfo = function() {
    this.treasureActivated = !0,
    this.updateTreasureTime()
}
,
canvas.app.world.view.TopTextRight.prototype.hideTreasureInfo = function() {
    this.treasureActivated = !1,
    this.lineBottom = "",
    this.update(),
    "" != this.line0 || "" != this.line1 || "" != this.line2 || this.frontsContent.parent || this.deactivate()
}
,
canvas.app.world.view.TopTextRight.prototype.updateTreasureTime = function() {
    var t = canvas.app.world.model;
    this.treasureActivated && (1e3 * t.treasureFinishTime <= Date.now() ? this.deactivate() : (this.lineBottom = canvas.Translator.getText(239) + "<br/>" + canvas.Functions.formatDate(1e3 * t.treasureFinishTime - Date.now(), "00:00", 0, !0),
    this.update(),
    this.redraw_bg()))
}
,
canvas.app.world.view.WorldSensor = function(t, e, a, s, i) {
    canvas.px.Container.call(this),
    this.isManorable = !1,
    this.selected = !1,
    this.baseLnk = t,
    this.itemLnk = e,
    this.devisor = s,
    this.loc_id = i,
    this.v_scale = .7;
    i = this.itemLnk.locations[this.loc_id];
    this.sen = this.itemLnk.source.get_sprite(a),
    1 == this.devisor ? this.sen.position.set(this.itemLnk.rect_x1, this.itemLnk.rect_y1) : 3 == this.devisor && (this.sen.x = this.itemLnk.rect_x1_3,
    this.sen.y = this.itemLnk.rect_y1_3,
    this.sen.scale.x = 1 / 3,
    this.sen.scale.y = 1 / 3,
    this.click = this.mouseClickHandler.bind(this)),
    this.sen.blendMode = canvas.px.BlendMode.OVERLAY,
    this.sen.alpha = 0,
    this.sen.buttonMode = !0,
    this.sen.interactive = !0,
    this.addChild(this.sen);
    a = this.sen.getBounds(this);
    this.selectionContainer = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.selectionContainer.x = Math.round((a.x + Math.round(.5 * a.width)) / this.devisor),
    this.selectionContainer.y = Math.round((a.y + Math.round(.5 * a.height)) / this.devisor),
    this.frontsContainer = new canvas.px.Container,
    null != i && (0 < i.front_pos_x ? this.frontsContainer.x = a.x + i.front_pos_x : this.frontsContainer.x = a.x + Math.round(.5 * a.width) + 30,
    0 < i.front_pos_y ? this.frontsContainer.y = a.y + i.front_pos_y : this.frontsContainer.y = a.y + Math.round(.5 * a.height) + 30),
    this.frontsContainer.interactive = !0,
    this.frontsContainer.buttonMode = !0,
    this.frontsImageContainer = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.frontsContainer.scale.set(.7, .7),
    this.frontsContainer.addChild(this.frontsImageContainer),
    this.mouseover = this.mouseOverHandler.bind(this),
    this.mouseout = this.mouseOutHandler.bind(this),
    this.frontsContainer.mouseover = this._frontsOverHandler.bind(this),
    this.frontsContainer.mouseout = this._frontsOutHandler.bind(this),
    this.interactive = !0,
    this.skip_out_event = !1,
    this.addChild(this.selectionContainer),
    this.addChild(this.frontsContainer),
    this.frontsContainer.x += this.sen.x,
    this.frontsContainer.y += this.sen.y,
    this.selectionContainer.x += this.sen.x,
    this.selectionContainer.y += this.sen.y
}
,
canvas.app.world.view.WorldSensor.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.world.view.WorldSensor.prototype._frontsOverHandler = function() {
    this.baseLnk.label2.set_data("", null, [], "", this.loc_id, !1),
    this.force_over(),
    this.frameDelta_scale(.3 / 3)
}
,
canvas.app.world.view.WorldSensor.prototype._frontsOutHandler = function() {
    this.baseLnk.label2.deactivate(),
    this.force_out(),
    this.frameDelta_scale(-.3 / 3)
}
,
canvas.app.world.view.WorldSensor.prototype.frameDelta_scale = function(t) {
    this.v_delta = t,
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler_scale, this)
}
,
canvas.app.world.view.WorldSensor.prototype.frameHandler_scale = function() {
    this.v_scale += this.v_delta,
    this.frontsContainer.scale.set(this.v_scale, this.v_scale),
    (this.v_delta < 0 && this.v_scale <= .7 || 0 < this.v_delta && 1 <= this.v_scale) && (this.v_delta < 0 ? (this.v_scale = .7,
    this.frontsContainer.scale.set(.7, .7)) : (this.v_scale = 1,
    this.frontsContainer.scale.set(1, 1)),
    canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler_scale, this))
}
,
canvas.app.world.view.WorldSensor.prototype.setSelection = function(t, e, a) {
    null == t && (t = !1),
    null == e && (e = 12592164),
    t ? (this.sen.tint = e,
    this.sen.alpha = 1,
    null != a && (this.selectionContainer.texture = canvas.ResourceLoader.getImage("world", a))) : (this.sen.tint = 16777215,
    this.sen.alpha = 0,
    this.selectionContainer.texture = canvas.px.TextureEmpty),
    this.selected = t
}
,
canvas.app.world.view.WorldSensor.prototype.setFrontsIcon = function(t) {
    null != t && (this.frontsImageContainer.texture = canvas.ResourceLoader.getImage("world", t),
    this.frontsImageContainer.position.set(-Math.round(.5 * this.frontsImageContainer.width), -Math.round(.5 * this.frontsImageContainer.height)))
}
,
canvas.app.world.view.WorldSensor.prototype.mouseOverHandler = function() {
    var t = canvas.app.world.model;
    t.manorMode && this.isManorable || this.selected ? this.sen.blendMode = canvas.px.BlendMode.ADD : (this.sen.blendMode = canvas.px.BlendMode.ADD,
    this.frameDelta(1 / 3)),
    null != this.loc_id ? (this.baseLnk.label1.deactivate(),
    this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", this.itemLnk.title),
    this.baseLnk.label1.set_line2(canvas.Translator.getText(214) + ":", this.itemLnk.locations[this.loc_id].title),
    this.baseLnk.label1.redraw_bg(),
    parseInt(this.loc_id) == t.treasureLocation && (this.baseLnk.label2.set_data("", null, null),
    this.baseLnk.label2.showTreasureInfo()),
    t.overedLocation = this.loc_id) : 3 == this.devisor && (this.baseLnk.label1.deactivate(),
    this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", this.itemLnk.title),
    this.baseLnk.label1.redraw_bg(),
    this.baseLnk.label2.set_data(canvas.Translator.getText(215) + ":", null, this.itemLnk.locations_list, "", t.findFrontLoc(this.itemLnk.id)),
    parseInt(this.itemLnk.id) == t.treasureArea && this.baseLnk.label2.showTreasureInfo(),
    t.overedLocation = this.itemLnk.id)
}
,
canvas.app.world.view.WorldSensor.prototype.mouseOutHandler = function() {
    var t;
    this.lockOver || ((t = canvas.app.world.model).manorMode && this.isManorable || this.selected ? this.sen.blendMode = canvas.px.BlendMode.OVERLAY : (this.sen.blendMode = canvas.px.BlendMode.OVERLAY,
    this.frameDelta(-1 / 3)),
    this.skip_out_event ? this.skip_out_event = !1 : null != this.loc_id ? (this.baseLnk.label1.set_line1(canvas.Translator.getText(213) + ":", this.itemLnk.title),
    t.overedLocation == this.loc_id && (this.baseLnk.label1.set_line2(""),
    parseInt(this.loc_id) == t.treasureLocation && this.baseLnk.label2.hideTreasureInfo())) : 3 == this.devisor && t.overedLocation == this.itemLnk.id && (this.baseLnk.label1.deactivate(),
    this.baseLnk.label2.deactivate()))
}
,
canvas.app.world.view.WorldSensor.prototype.frameDelta = function(t) {
    this.delta = t,
    canvas.EventManager.addEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.world.view.WorldSensor.prototype.frameHandler = function() {
    this.sen.alpha += this.delta;
    (this.delta < 0 && this.sen.alpha <= 0 || 0 < this.delta && 1 <= this.sen.alpha) && (this.sen.alpha = this.delta < 0 ? 0 : 1,
    canvas.EventManager.removeEventListener(canvas.app.world.Event.ENTER_FRAME, null, this.frameHandler, this))
}
,
canvas.app.world.view.WorldSensor.prototype.mouseClickHandler = function() {
    this.baseLnk.scroll_H.wasDragged || this.baseLnk.scroll_V.wasDragged || (canvas.app.world.model,
    this.baseLnk.label2.deactivate(),
    this.skip_out_event = !0,
    this.baseLnk.area_enter(this.itemLnk))
}
,
canvas.app.world.view.WorldSensor.prototype.force_over = function() {
    this.mouseOverHandler(),
    this.lockOver = !0
}
,
canvas.app.world.view.WorldSensor.prototype.force_out = function() {
    this.mouseOutHandler(),
    this.lockOver = !1
}
,
canvas.app.world.view.ZoomView = function(t) {
    canvas.px.Container.call(this),
    this.baseLnk = t,
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("world", "png_zoom_bg")),
    this.addChild(this.bg),
    this.buttonsContainer = new canvas.px.Container,
    this.addChild(this.buttonsContainer),
    this.btn_zoom_out = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_zoom_off_out")),
    this.btn_zoom_in = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "png_zoom_off_in")),
    this.btn_map = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "map")),
    this.btn_manor = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "manor/manor")),
    this.btn_work = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "work")),
    this.btn_refresh = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("world", "refresh")),
    this.addChild(this.btn_zoom_out),
    this.addChild(this.btn_zoom_in),
    this.buttonsContainer.addChild(this.btn_map),
    this.buttonsContainer.addChild(this.btn_manor),
    this.buttonsContainer.addChild(this.btn_work),
    this.buttonsContainer.addChild(this.btn_refresh),
    this.btn_zoom_out.position.set(17, 6),
    this.btn_zoom_in.position.set(91, 6),
    this.btn_map.position.set(145, 6),
    this.btn_manor.position.set(185, 6),
    this.btn_work.position.set(225, 0),
    this.btn_refresh.position.set(53, 6),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_zoom_out, this.mouseClickZoomOut, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_zoom_in, this.mouseClickZoomIn, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_map, this.mapClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_manor, this.manorClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_work, this.workClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_refresh, this.mouseClickRefreshHandler, this),
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, {
        target: this.btn_map,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(221)))
    }),
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, {
        target: this.btn_manor,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(222)))
    }),
    canvas.EventManager.dispatchEvent(canvas.app.world.Event.HINT_ADD, null, {
        target: this.btn_work,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(151)))
    }),
    this.setManorMode(!1),
    this.btn_manor.visible = !1,
    this.btn_work.visible = !1
}
,
canvas.app.world.view.ZoomView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.world.view.ZoomView.prototype.setManorMode = function(t) {
    (canvas.app.world.model.manorMode = t) ? (this.btn_manor.enabled = !1,
    this.btn_map.enabled = !0) : (this.btn_manor.enabled = !0,
    this.btn_map.enabled = !1),
    this.baseLnk.updateManorMode()
}
,
canvas.app.world.view.ZoomView.prototype.mouseClickZoomOut = function() {
    this.baseLnk.area_exit()
}
,
canvas.app.world.view.ZoomView.prototype.mouseClickZoomIn = function() {
    var t = canvas.app.world.model
      , t = t.AREAS[t.focusedAreaId];
    null != t && this.baseLnk.area_enter(t)
}
,
canvas.app.world.view.ZoomView.prototype.mapClickHandler = function() {
    this.setManorMode(!1)
}
,
canvas.app.world.view.ZoomView.prototype.manorClickHandler = function() {
    this.setManorMode(!0)
}
,
canvas.app.world.view.ZoomView.prototype.workClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.manor.Event.OPEN_LABOUR)
}
,
canvas.app.world.view.ZoomView.prototype.mouseClickRefreshHandler = function() {
    this.baseLnk.refresh_my_flag()
}
,
canvas.app.world.view.ZoomView.prototype.zoomMode = function(t) {
    1 == t ? this.mouseClickZoomOut() : this.mouseClickZoomIn()
}
,
canvas.app.world.view.ZoomView.prototype.set_mode = function(t) {
    var e = canvas.app.world.model;
    e.isModule && e.ZoomMode(t),
    1 == t ? (this.btn_zoom_out.alpha = 1,
    this.btn_zoom_out.interactiveChildren = !1,
    this.btn_zoom_in.alpha = 0,
    this.btn_zoom_in.interactiveChildren = !0,
    this.buttonsContainer.visible = !1,
    e.lastManorMode = e.manorMode,
    this.setManorMode(!1)) : (this.btn_zoom_out.alpha = 0,
    this.btn_zoom_out.interactiveChildren = !0,
    this.btn_zoom_in.alpha = 1,
    this.btn_zoom_in.interactiveChildren = !1,
    this.buttonsContainer.visible = !0,
    this.setManorMode(e.lastManorMode))
}
,
canvas.app.hunt.Const = {
    CAPTCHA_WIDTH: 3,
    CAPTCHA_HEIGHT: 2,
    CAPTCHA_CELL_SIZE: 128,
    TREASURE_BEACON_STATUS_NONE: 0,
    TREASURE_BEACON_STATUS_RED: 1,
    TREASURE_BEACON_STATUS_ORANGE: 2,
    TREASURE_BEACON_STATUS_YELLOW: 3,
    TREASURE_BEACON_STATUS_GREEN: 4
},
canvas.app.hunt.Event = {
    ENTER_FRAME: "Hunt.ENTER_FRAME",
    HINT_ADD: "Hunt.HINT_ADD",
    HINT_REMOVE: "Hunt.HINT_REMOVE",
    TREASURE_DIG: "Hunt.TREASURE_DIG",
    TREASURE_COLLECT: "Hunt.TREASURE_COLLECT",
    COLOR_CHANGE: "Hunt.COLOR_CHANGE",
    COMPLETE_OBJECT: "Hunt.COMPLETE_OBJECT"
},
canvas.app.hunt.Main = function(t, e, a) {
    canvas.px.Container.call(this),
    this.model = t,
    this.hintManager = e,
    this.windowsManager = a,
    this.model.mapFile && (this.model.mapData.parseData(this.model.mapData.TYPE_BOT, canvas.ResourceLoader.get("map_bot").data),
    this.model.mapData.parseData(this.model.mapData.TYPE_PLANT, canvas.ResourceLoader.get("map_plant").data),
    this.model.mapData.parseData(this.model.mapData.TYPE_STONE, canvas.ResourceLoader.get("map_stone").data),
    this.model.mapData.parseData(this.model.mapData.TYPE_FISH, canvas.ResourceLoader.get("map_fish").data)),
    canvas.app.location.Event.HINT_ADD = canvas.app.hunt.Event.HINT_ADD,
    canvas.app.location.Event.HINT_REMOVE = canvas.app.hunt.Event.HINT_REMOVE,
    canvas.app.location.Event.ENTER_FRAME = canvas.app.hunt.Event.ENTER_FRAME,
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_UP, null, this.handlerKeyUp, this),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.handlerOpenWindow, this),
    this.windowsContainer = new canvas.px.Container,
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    this.view = new canvas.app.hunt.View(this),
    this.addChild(this.view),
    this.addChild(this.hintContainer),
    this.addChild(this.windowsContainer),
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.TREASURE_DIG, null, this.treasureDigHandler, this),
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.TREASURE_COLLECT, null, this.treasureColectHandler, this),
    this.timer = setInterval(this.timerHandler.bind(this), 1e3),
    this.treasureRequest = new canvas.utils.URLRequest,
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.treasureRequest, this.treasureCompleteHandler, this)
}
,
canvas.app.hunt.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.hunt.Main.prototype.handlerKey = function(t) {
    if (!document.activeElement || "HTMLInputElement" != document.activeElement.constructor.name) {
        var e = t.params.globalKeyCode
          , a = (t.params.altKey,
        t.params.ctrlKey,
        t.params.shiftKey);
        switch (e) {
        case canvas.Const.KEYS.ESC:
            canvas.utils.WindowsManager.instance.closeWindow(this.view.popup);
            break;
        case canvas.Const.KEYS.L:
            a && canvas.Log.show(canvas.Log.HUNT)
        }
        this.view.keyDown(e)
    }
}
,
canvas.app.hunt.Main.prototype.handlerKeyUp = function(t) {
    var e;
    document.activeElement && "HTMLInputElement" == document.activeElement.constructor.name || (t.params.preventDefault(),
    e = t.params.keyCode,
    t.params.altKey,
    t.params.ctrlKey,
    t.params.shiftKey,
    this.view.keyUp(e))
}
,
canvas.app.hunt.Main.prototype.handlerOpenWindow = function() {
    this.hintManager.hide()
}
,
canvas.app.hunt.Main.prototype.resize = function(t, e) {
    this.hintManager.init(this.hintContainer, t, e),
    this.model.width = t,
    this.model.height = e,
    this.view.resize(t, e)
}
,
canvas.app.hunt.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.hunt.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.hunt.Main.prototype.swfObject = function(t) {
    canvas.app.hunt.model;
    if (t)
        for (var e in t)
            e
}
,
canvas.app.hunt.Main.prototype.timerHandler = function() {
    this.view.updateTreasureControl()
}
,
canvas.app.hunt.Main.prototype.treasureDigHandler = function(t) {
    this.model.treasureLastPoint.x = t.params.x,
    this.model.treasureLastPoint.y = t.params.y,
    this.treasureRequest.name = canvas.app.hunt.Event.TREASURE_DIG,
    this.treasureRequest.load("/entry_point.php?object=farm&action=treasure_dig&json_mode_on=1&x=" + t.params.x + "&y=" + t.params.y)
}
,
canvas.app.hunt.Main.prototype.treasureColectHandler = function() {
    this.treasureRequest.name = canvas.app.hunt.Event.TREASURE_COLLECT,
    this.treasureRequest.load("/entry_point.php?object=farm&action=treasure_dig&json_mode_on=1&x=" + this.model.treasureLastPoint.x + "&y=" + this.model.treasureLastPoint.y + "&collect=1")
}
,
canvas.app.hunt.Main.prototype.treasureCompleteHandler = function(t) {
    var e, a = JSON.parse(this.treasureRequest.request.responseText)["farm|treasure_dig"];
    null != a.error && "" != a.error ? (this.view.popup.set_header(canvas.Translator.getText(4)),
    this.view.popup.show_message(a.error, 16711680)) : this.treasureRequest.name != canvas.app.hunt.Event.TREASURE_COLLECT ? (e = parseInt(a.treasure_status),
    4 === (this.model.treasureStatus = e) ? (this.model.treasureLastPoint.x = parseInt(a.treasure_x),
    this.model.treasureLastPoint.y = parseInt(a.treasure_y),
    this.view.fld_current.showTreasure()) : this.view.fld_current.updateTreasureLocator(e)) : this.view.fld_current.showTreasure(!1)
}
,
canvas.app.hunt.Model = function(t) {
    this.par = t,
    this._filterValue = 1,
    Object.defineProperty(this, "filterValue", {
        get: function() {
            return this._filterValue
        },
        set: function(t) {
            this._filterValue !== t && (this._filterValue = t,
            this.localStorage.set("filterValue", t.toString()),
            this.objects_updater.updateFarm())
        }
    }),
    this._popupPos = null,
    Object.defineProperty(this, "popupPos", {
        get: function() {
            return this._popupPos
        },
        set: function(t) {
            this._popupPos = t,
            this.localStorage.set("popupPos", t.x + "," + t.y)
        }
    }),
    this.Objects = {},
    this.reqURL = t.reqURL,
    this.reqConfURL = t.reqConfURL,
    this.reqInterval = parseInt(t.reqInterval),
    this.reqConfInterval = parseInt(t.reqConfInterval),
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.HUNT),
    this.colorManager = new canvas.app.hunt.engine.ColorManager,
    this.mapData = new canvas.app.hunt.engine.MapData,
    this._filterValue = this.localStorage.get("filterValue") ? parseInt(this.localStorage.get("filterValue")) : 31;
    var e = this.localStorage.get("popupPos");
    e ? (e = e.split(","),
    this._popupPos = new canvas.px.Point(parseFloat(e[0]),parseFloat(e[1]))) : this._popupPos = new canvas.px.Point(.5,.5),
    this.FILTER_VALUES = [1, 2, 4, 8, 16],
    this.IsBold = !0,
    this.OBJ_EVENT = {
        tasks: {}
    },
    this.OBJECTS_DATA = {},
    this.OBJECTS_PICS = {},
    this.NUM_BIG_FIGHT = 0,
    this.max_width = 735,
    this.max_height = 280,
    this.min_width = 735,
    this.min_height = 280,
    this.firstTimeData = null,
    this.MAX_ANIMATION_SIZE = "41775e02da98ddb63c980dee",
    this.selectObjectType = "",
    this.captchaFinishTime = 0,
    this.treasureFinishTime = 0,
    this.treasureLastPoint = new canvas.px.Point,
    this.treasureStatus = 0,
    this.treasureTextTips = !1,
    this.needConfirm = !1,
    this.startRandom = "1" == t.start_random,
    null != t.treasureTextTips && (this.treasureTextTips = "1" == t.treasureTextTips),
    this.reqInterval < 2 && (this.reqInterval = 2),
    this.reqConfInterval < 2 && (this.reqConfInterval = 2),
    this.sizeX = parseInt(t.sizeX),
    this.sizeY = parseInt(t.sizeY),
    0 == this.sizeX && (this.sizeX = 1500),
    0 == this.sizeY && (this.sizeY = 1500),
    this.sizeX = this.clean_val(this.sizeX, this.min_width),
    this.sizeY = this.clean_val(this.sizeY, this.min_height),
    this.BotsPath = t.BotsPath,
    this.PicPath = t.PicPath,
    this.FarmPicPath = t.FarmPicPath,
    this.FarmSwfPath = t.FarmSwfPath,
    this.farming = t.farming,
    null == this.farming && (this.farming = "0"),
    this.mapFile = t.mapFile,
    this.mapName = canvas.Functions.extractSwfName(this.mapFile),
    this.IsBold = null == t.nobold || 1 != t.nobold,
    this.PksPath = t.PksPath,
    this.needConfirm = 0 != parseInt(t.need_confirm),
    this.half_width = parseInt(this.sizeX / 2),
    this.half_height = parseInt(this.sizeY / 2),
    this.max_width = this.sizeX + 27,
    this.max_height = this.sizeY,
    this.m_time = 0,
    this.m_awardUrl = t.bannerurl,
    this.award_msg = t.bannermsg,
    this.brilliant_msg = t.br_msg,
    this.brilliant_link = t.br_link;
    this.sector_borders = [{
        x1: 0,
        y1: 0,
        x2: this.sizeX,
        y2: this.sizeY,
        pers_x: this.sizeX - 36,
        pers_y: this.sizeY - 36,
        pers_rot: 0,
        vert_pc: 1
    }],
    this.CfgFight = t.fight_conf,
    this.colorManager.init(t.bot_color_min ? parseInt(t.bot_color_min) : 0, t.bot_color_max ? parseInt(t.bot_color_max) : 0, t.bot_transparensy_min ? .01 * parseInt(t.bot_transparensy_min) : 1, t.bot_transparensy_max ? .01 * parseInt(t.bot_transparensy_max) : 1, t.bot_period ? parseInt(t.bot_period) : 0),
    null != this.CfgFight && this.unpackFightConf(this.CfgFight)
}
,
canvas.app.hunt.Model.prototype.init = function(t) {
    this.objects_updater = new canvas.app.hunt.engine.ObjectsUpdater(t.view,this.Objects),
    this.farm = new canvas.app.hunt.engine.FarmingUpdater(t.view)
}
,
canvas.app.hunt.Model.prototype.prep_language = function() {
    this.farm_data = {
        0: {
            header: canvas.Translator.getText(441),
            success: canvas.Translator.getText(442),
            faled: canvas.Translator.getText(443)
        },
        1: {
            header: canvas.Translator.getText(234),
            success: canvas.Translator.getText(402),
            faled: canvas.Translator.getText(403)
        },
        2: {
            header: canvas.Translator.getText(234),
            success: canvas.Translator.getText(402),
            faled: canvas.Translator.getText(403)
        },
        4: {
            header: canvas.Translator.getText(234),
            success: canvas.Translator.getText(402),
            faled: canvas.Translator.getText(403)
        }
    },
    this.agrlevelAr = [canvas.Translator.getText(405), canvas.Translator.getText(406), canvas.Translator.getText(407), canvas.Translator.getText(408), canvas.Translator.getText(409)],
    this.farm_conf = [[13421772, canvas.Translator.getText(410)], [47872, canvas.Translator.getText(411)], [187, canvas.Translator.getText(412)], [10027263, canvas.Translator.getText(413)], [12255232, canvas.Translator.getText(414)]],
    this.STRINGS_ARR = {},
    this.S_GREAT_FIGHT = "S_GREAT_FIGHT",
    this.S_TO_YOU = "S_TO_YOU",
    this.S_TO_ALL = "S_TO_ALL",
    this.STRINGS_ARR[this.S_GREAT_FIGHT] = canvas.Translator.getText(3e3),
    this.STRINGS_ARR[this.S_TO_YOU] = canvas.Translator.getText(429),
    this.STRINGS_ARR[this.S_TO_ALL] = canvas.Translator.getText(430)
}
,
canvas.app.hunt.Model.prototype.clean_val = function(t, e) {
    return t < e ? t = e : t % 2 != 0 && (t += 1),
    t
}
,
canvas.app.hunt.Model.prototype.getBotnameColor = function(t) {
    var e = t < 50;
    return (e ? Math.round(t / 50 * 255) : 255) << 16 ^ (e ? 255 : Math.round((100 - t) / 50 * 255)) << 8
}
,
canvas.app.hunt.Model.prototype.getAgrlevelText = function(t) {
    return 100 <= t && (t = 99),
    null == this.agrlevelAr ? "none" : this.agrlevelAr[Math.floor(t / 20)]
}
,
canvas.app.hunt.Model.prototype.unpackFightConf = function(t) {
    for (var e = (new DOMParser).parseFromString(t, "text/xml").childNodes, a = this.NUM_BIG_FIGHT = 0; a < e.length; a++)
        "fight" == e[a].nodeName && null != e[a].attributes.in_process && (this.NUM_BIG_FIGHT = e[a].attributes.in_process.value)
}
,
canvas.app.hunt.View = function(t) {
    canvas.px.Container.call(this);
    var e = canvas.app.hunt.model;
    this.main = t,
    this.currentKeys = [],
    this.container = new canvas.px.Container,
    this.frontContainer = new canvas.px.Container,
    this.addChild(this.container),
    this.flds_cont = new canvas.px.Container,
    this.flds_msk = new canvas.px.Mask(100,100),
    this.prepare_field(),
    this.prepare_scroll(),
    this.border = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "border"),100,4,100,23),
    this.border.y = 60,
    this.addChild(this.border),
    this.bor_T = new canvas.app.hunt.view.FrameBorT(this),
    this.addChild(this.bor_T),
    this.corner_TL = new canvas.app.hunt.view.FrameCornerTL(this),
    this.addChild(this.corner_TL),
    this.corner_TR = new canvas.app.hunt.view.FrameCornerTR(this),
    this.addChild(this.corner_TR),
    this.popupsContainer = new canvas.app.location.view.popups.Popups(canvas.app.hunt.Event),
    this.popupsContainer.position.set(5, 63),
    e.award_msg && (this.awardMsg = new canvas.app.hunt.view.elements.AwardMsg(e.award_msg,e.m_awardUrl),
    this.frontContainer.addChild(this.awardMsg)),
    null != e.brilliant_msg && (this.brilliantMsg = new canvas.app.hunt.view.elements.BrilliantMsg(e.brilliant_msg,e.brilliant_link),
    this.frontContainer.addChild(this.brilliantMsg)),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scr_horz, this.scrollHandlerH, this),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scr_vert, this.scrollHandlerV, this),
    this.addChild(this.frontContainer),
    this.checkObjects(!1),
    this.popup = new canvas.app.hunt.view.FarmWindow(this),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_DRAG_FINISH, this.popup, this.popupDragFinishHandler, this),
    this.buildEvent(),
    this.buildFight(),
    this.techBtn = new canvas.app.location.view.popups.TechBtn(e.par,canvas.app.hunt.Event.ENTER_FRAME),
    this.infoBtn = new canvas.app.location.view.popups.InfoBtn(e.par),
    this.addChild(this.techBtn),
    this.addChild(this.infoBtn),
    this.infoBtn.y = 90,
    this.frontContainer.addChild(this.popupsContainer),
    this.winCaptcha = new canvas.app.hunt.view.WinCaptcha(this),
    this.filterPanel = new canvas.app.hunt.view.FilterPanel,
    this.filterPanel.y = 32,
    this.addChild(this.filterPanel),
    this.listBottomLeft = new canvas.px.Container,
    this.listBottomLeft.x = 10,
    this.addChild(this.listBottomLeft),
    this.treasureControl = new canvas.app.hunt.view.TreasureControl,
    this.updateTreasureControl(),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_DOWN, this.treasureControl, this.treasureDownHandler, this),
    null != e.par.time_bonus_online && this.popupsContainer.init(canvas.app.location.Const.POPUP_ZERO_LEVEL, e.par),
    this.firstResize = !0
}
,
canvas.app.hunt.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.hunt.View.prototype.init = function() {
    var t = canvas.app.hunt.model;
    "1" == t.farming && (this.field_lock(),
    this.corner_TL.deactivate(),
    t.farm.main_iteration())
}
,
canvas.app.hunt.View.prototype.resize = function(t, e) {
    var a = canvas.app.hunt.model;
    null == t && (t = a.width),
    null == e && (e = a.height);
    var s = t
      , e = e;
    this.ww = s,
    this.hh = e,
    s < a.min_width ? (this.x = 0,
    s = a.min_width) : s > a.max_width && (s = a.max_width),
    this.x = Math.round(.5 * (t - s)),
    e < a.min_height ? (this.y = 0,
    e = a.min_height) : e > a.max_height && (this.y = Math.round(e / 2 - a.max_height / 2),
    e = a.max_height),
    this.wwReal = s,
    this.hhReal = e,
    this.bor_T.x = Math.round(s / 2 - 134) - (1050 < s ? 38 : 38 + Math.round(.5 * (1050 - s))),
    this.eventBtn && this.eventBtn.position.set(s - this.eventBtn.width - 16, 61),
    this.eventPanel && this.eventPanel.position.set(s - 12 - this.eventPanel.width, 63),
    this.corner_TR.x = this.bor_T.x + 260,
    this.corner_TL.x = this.bor_T.x - 210,
    this.scr_vert.x = s - 21,
    this.scr_horz.y = e - 35,
    this.fld_visible_HE = e - 83 - (s < a.max_width ? 16 : 0),
    this.fld_invisible_HE = a.sizeY - this.fld_visible_HE,
    this.fld_visible_WI = s - 27,
    this.fld_invisible_WI = a.sizeX - this.fld_visible_WI,
    this.scr_vert.set_visible_height(this.fld_visible_HE),
    this.scr_horz.set_visible_width(this.fld_visible_WI),
    this.scrollNull.visible = this.scr_horz.visible = s < a.max_width,
    this.flds_msk.setSize(s - 27, e - 83),
    this.border.width = s,
    this.border.height = e - 60,
    null != this.fld_current && this.fld_current.check_position(),
    this.awardMsg && this.awardMsg.position.set(Math.round(.5 * (s - this.awardMsg.width)) - 20, 62),
    this.brilliantMsg && this.brilliantMsg.position.set(Math.round(.5 * (s - this.brilliantMsg._width)) - 24, 62),
    this.scrollNull.position.set(this.scr_horz._width + 5, this.scr_vert._height + 63),
    this.bor_T.update(this.fld_visible_WI, this.fld_visible_HE),
    this.bor_T.updatePos(this.flds_cont.x, this.flds_cont.y),
    this.techBtn.position.set(s - 30, e - 45),
    this.infoBtn.position.set(s - 12, 100 + (this.eventPanel && this.eventPanel.parent ? this.eventPanel.height : 0)),
    this.filterPanel.x = s - this.filterPanel.width - 30,
    this.updateLists(),
    this.firstResize && (this.firstResize = !1,
    this.scr_vert.current = canvas.Functions.random(this.scr_vert.max),
    this.scr_horz.current = canvas.Functions.random(this.scr_horz.max)),
    this.scrollHandlerH(),
    this.scrollHandlerV(),
    this.main.windowsManager.init(this.main.windowsContainer, s, e, this.flds_cont),
    this.main.windowsContainer.position.set(this.x, this.y)
}
,
canvas.app.hunt.View.prototype.popupDragFinishHandler = function() {
    var t = canvas.app.hunt.model
      , e = this.popup.x + .5 * this.popup.width
      , a = this.popup.y + .5 * this.popup.height;
    t.popupPos = new canvas.px.Point(e / this.wwReal,a / this.hhReal)
}
,
canvas.app.hunt.View.prototype.updateTreasureControl = function() {
    var t = canvas.app.hunt.model;
    1e3 * t.treasureFinishTime > Date.now() && 4 != t.treasureStatus ? (this.listBottomLeft.addChild(this.treasureControl),
    this.treasureControl.update(),
    this.updateLists()) : (this.listBottomLeft.contains(this.treasureControl) && this.listBottomLeft.removeChild(this.treasureControl),
    this.fld_current.updateTreasureLocator(0))
}
,
canvas.app.hunt.View.prototype.prepare_field = function() {
    var t = canvas.app.hunt.model;
    this.full_map = new canvas.px.Container;
    for (var e, a = canvas.ResourceLoader.get("map_mci").data[canvas.px.MovieClipProps.children], s = a.length, i = 0; i < s; i++)
        (e = canvas.ResourceLoader.getImage("map", a[i].name)).baseTexture.scaleMode = canvas.px.ScaleMode.NEAREST,
        e = new canvas.px.Sprite(e),
        a[i][canvas.px.MovieClipProps.matrix] && (e.transform.localTransform = new canvas.px.Matrix(a[i][canvas.px.MovieClipProps.matrix].a,a[i][canvas.px.MovieClipProps.matrix].b,a[i][canvas.px.MovieClipProps.matrix].c,a[i][canvas.px.MovieClipProps.matrix].d,a[i][canvas.px.MovieClipProps.matrix].tx,a[i][canvas.px.MovieClipProps.matrix].ty)),
        e.alpha = null == a[i][canvas.px.MovieClipProps.alpha] ? 1 : a[i][canvas.px.MovieClipProps.alpha],
        this.full_map.addChild(e);
    this.fld_north = new canvas.app.hunt.view.Field(this,this.full_map,0),
    this.flds_cont.addChild(this.fld_north),
    this.fld_locker = new canvas.px.Mask(t.half_width,t.half_height,0,.3),
    this.flds_cont.position.set(5, 63),
    this.container.addChild(this.flds_cont),
    this.flds_msk.position.set(5, 63),
    this.addChild(this.flds_msk),
    this.flds_cont.mask = this.flds_msk,
    this.fld_current = this.fld_north,
    this.current_object = null,
    this.current_sector = 0
}
,
canvas.app.hunt.View.prototype.prepare_scroll = function() {
    var t = canvas.app.hunt.model;
    this.scr_vert = new canvas.app.hunt.view.ScrollV(this,this.container),
    this.addChild(this.scr_vert),
    this.scr_vert.y = 63,
    this.scr_vert.set_full_height(t.sizeY),
    this.scr_horz = new canvas.app.hunt.view.ScrollH(this.flds_cont),
    this.scr_horz.x = 5,
    this.scr_horz.set_full_width(t.sizeX),
    this.addChild(this.scr_horz),
    this.scrollNull = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_scroll_null")),
    this.addChild(this.scrollNull)
}
,
canvas.app.hunt.View.prototype.scrollHandlerH = function() {
    this.scr_horz.isDisabled() ? this.flds_cont.x = 5 : (this.flds_cont.x = 5 - this.scr_horz.current,
    this.bor_T.updatePos(this.flds_cont.x, this.flds_cont.y)),
    this.updateVisibleObjects()
}
,
canvas.app.hunt.View.prototype.scrollHandlerV = function() {
    this.scr_vert.isDisabled() ? this.flds_cont.y = 63 : (this.flds_cont.y = 63 - this.scr_vert.current,
    this.bor_T.updatePos(this.flds_cont.x, this.flds_cont.y)),
    this.updateVisibleObjects()
}
,
canvas.app.hunt.View.prototype.updateVisibleObjects = function() {
    this.fld_current.updateVisibleObjects(new canvas.px.Rectangle(-this.flds_cont.x - 40,-this.flds_cont.y,this.fld_visible_WI + 100,this.fld_visible_HE + 140))
}
,
canvas.app.hunt.View.prototype.updateLists = function() {
    this.listBottomLeft.y = this.hh - Math.round(this.listBottomLeft.height) - 40
}
,
canvas.app.hunt.View.prototype.buildEvent = function() {
    canvas.app.location.View.prototype.buildEvent.call(this)
}
,
canvas.app.hunt.View.prototype.buildFight = function() {
    canvas.app.location.View.prototype.buildFight.call(this),
    this.fightBtn && this.fightBtn.position.set(-3, 53)
}
,
canvas.app.hunt.View.prototype.refreshEventHandler = function() {
    canvas.app.location.View.prototype.refreshEventHandler.call(this)
}
,
canvas.app.hunt.View.prototype.field_lock = function() {
    this.flds_cont.interactiveChildren = !1
}
,
canvas.app.hunt.View.prototype.field_unlock = function() {
    this.flds_cont.interactiveChildren = !0
}
,
canvas.app.hunt.View.prototype.showCaptcha = function(t) {
    t < 1 && (t = 60),
    canvas.app.hunt.model.captchaFinishTime = Date.now() + 1e3 * t,
    canvas.utils.WindowsManager.instance.openWindow(this.winCaptcha, !1, !1, !0, !0)
}
,
canvas.app.hunt.View.prototype.checkObjects = function(t, e) {
    null == e && (e = "");
    var a, s, i = canvas.app.hunt.model;
    for (s in i.Objects) {
        var n, o = i.Objects[s];
        e && o.type != e || (t && o.old_flag ? null != o.mc && o.mc.remove() : (n = i.sector_borders[0],
        o.x >= n.x1 && o.x <= n.x2 && o.y >= n.y1 && o.y <= n.y2 ? null == o.mc ? "bot" == o.type ? new canvas.app.hunt.view.FieldObject(this,this.fld_current,o) : "farm" == o.type && new canvas.app.hunt.view.FieldObject(this,this.fld_current,o) : (o.new_pos && (a = parseInt(o.x),
        n = parseInt(o.y),
        o.mc.moving(a, n),
        delete o.new_pos),
        "farm" == o.type && o.mc.update_mark_tf(o.farming)) : null != o.mc ? o.mc.remove() : o.old_flag = !0,
        1 == t && null != o.mc && (o.old_flag = !0)))
    }
    this.buildEvent(),
    this.buildFight()
}
,
canvas.app.hunt.View.prototype.select_obj = function(t) {
    canvas.app.hunt.model.selectObjectType = t.type,
    null != this.current_object && null != this.current_object.mc && this.current_object.mc.unFocus(),
    this.current_object = t,
    this.current_object.mc.inFocus(),
    this.corner_TR.update_obj_info(t),
    this.refresh_controls()
}
,
canvas.app.hunt.View.prototype.refresh_controls = function() {
    var t;
    this.corner_TL.deactivate(),
    null != this.current_object && ("bot" == this.current_object.type ? this.corner_TL.activate(3) : "farm" == this.current_object.type && (0 == (0 & (t = this.current_object.prof)) && this.corner_TL.activate(0, this.current_object.action_title),
    1 == (1 & t) && this.corner_TL.activate(1, this.current_object.action_title),
    2 == (2 & t) && this.corner_TL.activate(2, this.current_object.action_title),
    4 == (4 & t) && this.corner_TL.activate(4, this.current_object.action_title)))
}
,
canvas.app.hunt.View.prototype.apply_control_btn = function(t, e) {
    var a = canvas.app.hunt.model;
    null != this.current_object && (3 == t && "bot" == this.current_object.type ? (this.field_lock(),
    this.corner_TL.deactivate(),
    a.needConfirm ? this.sendHuntCheck(this.current_object.id, e) : this.sendAttack({
        rtype: "bot",
        rid: this.current_object.id,
        et: e
    })) : (0 <= t && t <= 2 || 4 == t) && "farm" == this.current_object.type && (this.field_lock(),
    this.corner_TL.deactivate(),
    a.farm.begin_farming(this.current_object.num, this.current_object.t, e)))
}
,
canvas.app.hunt.View.prototype.sendHuntCheck = function(t, e) {
    var a = new canvas.utils.URLRequest("/entry_point.php?object=fight&action=HuntCheck&bot_id=" + t + "&json_mode_on=1");
    a.dat = {
        botId: t,
        endType: e
    },
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, a, this.huntCheckCompleteHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, a, this.huntCheckCompleteHandler, this),
    a.load()
}
,
canvas.app.hunt.View.prototype.huntCheckCompleteHandler = function(t) {
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, t.target, this.huntCheckCompleteHandler, this),
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, t.target, this.huntCheckCompleteHandler, this);
    var e = JSON.parse(t.target.request.responseText)["fight|HuntCheck"];
    e.confirm ? (this.field_unlock(),
    showBotConfirmDialog(String(e.confirm))) : this.sendAttack({
        rtype: "bot",
        rid: t.target.dat.botId,
        et: t.target.dat.endType
    })
}
,
canvas.app.hunt.View.prototype.sendAttack = function(t) {
    canvas.utils.ABController.sendRequest(canvas.utils.ABCAbout.REQUEST_URL_DWAR, t),
    this.field_unlock(),
    huntAttack(String(this.current_object.id))
}
,
canvas.app.hunt.View.prototype.unselect_obj = function() {
    null != this.current_object && null != this.current_object.mc && this.current_object.mc.unFocus(),
    this.current_object = null,
    this.refresh_controls()
}
,
canvas.app.hunt.View.prototype.keyDown = function(t) {
    switch (t) {
    case canvas.Const.KEYS.UP_ARROW:
        this.currentKeys.indexOf("up") < 0 && this.currentKeys.push("up");
        break;
    case canvas.Const.KEYS.RIGHT_ARROW:
        this.currentKeys.indexOf("right") < 0 && this.currentKeys.push("right");
        break;
    case canvas.Const.KEYS.LEFT_ARROW:
        this.currentKeys.indexOf("left") < 0 && this.currentKeys.push("left");
        break;
    case canvas.Const.KEYS.DOWN_ARROW:
        this.currentKeys.indexOf("down") < 0 && this.currentKeys.push("down")
    }
    this.testFrameListener()
}
,
canvas.app.hunt.View.prototype.keyUp = function(t) {
    var e;
    switch (t) {
    case canvas.Const.KEYS.UP_ARROW:
        0 <= (e = this.currentKeys.indexOf("up")) && this.currentKeys.splice(e, 1);
        break;
    case canvas.Const.KEYS.RIGHT_ARROW:
        0 <= (e = this.currentKeys.indexOf("right")) && this.currentKeys.splice(e, 1);
        break;
    case canvas.Const.KEYS.LEFT_ARROW:
        0 <= (e = this.currentKeys.indexOf("left")) && this.currentKeys.splice(e, 1);
        break;
    case canvas.Const.KEYS.DOWN_ARROW:
        0 <= (e = this.currentKeys.indexOf("down")) && this.currentKeys.splice(e, 1)
    }
    this.testFrameListener()
}
,
canvas.app.hunt.View.prototype.testFrameListener = function() {
    0 < this.currentKeys.length ? canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this) : canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.hunt.View.prototype.frameHandler = function() {
    for (var t = this.currentKeys.length, e = !1, a = !1, s = 0; s < t; s++)
        switch (this.currentKeys[s]) {
        case "up":
            this.scr_vert.current -= 20,
            a = !0;
            break;
        case "down":
            this.scr_vert.current += 20,
            a = !0;
            break;
        case "left":
            this.scr_horz.current -= 20,
            e = !0;
            break;
        case "right":
            this.scr_horz.current += 20,
            e = !0
        }
    e && this.scrollHandlerH(),
    a && this.scrollHandlerV()
}
,
canvas.app.hunt.View.prototype.treasureDownHandler = function(t) {
    this.fld_current.startTreasureSearch()
}
,
canvas.app.hunt.engine.ColorManager = function() {
    this.COLOR_MAX = 255,
    this.ALPHA_MAX = 1,
    this.COLOR_DIFF = 1,
    this.ALPHA_DIFF = .01,
    this.colorSign = 1,
    this.alphaSign = 1,
    this.colorMin = 0,
    this.colorMax = 0,
    this.alphaMin = 0,
    this.alphaMax = 0,
    this.period = 1e3,
    this._color = 0,
    Object.defineProperty(this, "color", {
        get: function() {
            return this._color
        },
        set: function(t) {
            this._color = t > this.colorMax ? this.colorMax : t < this.colorMin ? this.colorMin : t
        }
    }),
    this._alpha = 1,
    Object.defineProperty(this, "alpha", {
        get: function() {
            return this._alpha
        },
        set: function(t) {
            this._alpha = t > this.alphaMax ? this.alphaMax : t < this.alphaMin ? this.alphaMin : t
        }
    }),
    this._colorIndex = 0,
    Object.defineProperty(this, "colorIndex", {
        get: function() {
            return this._colorIndex
        }
    })
}
,
canvas.app.hunt.engine.ColorManager.prototype.init = function(t, e, a, s, i) {
    this.colorMin = t < 0 ? 0 : t > this.COLOR_MAX ? this.COLOR_MAX : t,
    this.colorMax = e < 0 ? 0 : e > this.COLOR_MAX ? this.COLOR_MAX : e,
    this.alphaMin = a < 0 ? 0 : a > this.ALPHA_MAX ? this.ALPHA_MAX : a,
    this.alphaMax = s < 0 ? 0 : s > this.ALPHA_MAX ? this.ALPHA_MAX : s,
    this.period = i,
    this.timer && clearInterval(this.timer),
    0 < this.period && (this.colorMin != this.colorMax || this.alphaMin != this.alphaMax) && (this.timer = setInterval(this.timerHandler.bind(this), this.period)),
    this._color = this.colorMin,
    this._alpha = this.alphaMax,
    this._colorIndex = canvas.Functions.random(3)
}
,
canvas.app.hunt.engine.ColorManager.prototype.timerHandler = function() {
    this.colorMin != this.colorMax && (this.color += this.COLOR_DIFF * this.colorSign,
    this.color != this.colorMax && this.color != this.colorMin || (this.colorSign = -this.colorSign)),
    this.alphaMin != this.alphaMax && (this.alpha += this.ALPHA_DIFF * this.alphaSign,
    this.alpha != this.alphaMax && this.alpha != this.alphaMin || (this.alphaSign = -this.alphaSign)),
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.COLOR_CHANGE)
}
,
canvas.app.hunt.engine.FarmingUpdater = function(t) {
    Object.defineProperty(this, "farmSnum", {
        set: function(t) {
            this._snum = t
        }
    });
    var e = canvas.app.hunt.model;
    this.baseLnk = t,
    this._snum = 0,
    this.reqBegin = e.reqURL + "?mode=farm&action=chek&xy=%xy%&sig=%sig%&num=%num%",
    this.reqCheck = e.reqURL + "?mode=farm&action=chek&xy=%xy%&end=1",
    this.reqCancel = e.reqURL + "?mode=farm&action=cancel",
    this.aLoader = new canvas.utils.URLRequest,
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.aLoader, this.completeHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.aLoader, this.errorHandler, this),
    this.tikHandlerBinded = this.tikHandler.bind(this)
}
,
canvas.app.hunt.engine.FarmingUpdater.prototype.start = function() {
    this.stop(),
    this.tik = setTimeout(this.tikHandlerBinded, 2e3)
}
,
canvas.app.hunt.engine.FarmingUpdater.prototype.stop = function() {
    this.tik && clearTimeout(this.tik)
}
,
canvas.app.hunt.engine.FarmingUpdater.prototype.tikHandler = function() {
    this.stop(),
    this.main_iteration()
}
,
canvas.app.hunt.engine.FarmingUpdater.prototype.completeHandler = function() {
    var t = this.aLoader.request.responseText;
    if (!this.canceling) {
        t = (new DOMParser).parseFromString(t, "text/xml");
        if (t.firstChild.attributes.time_left)
            return this.baseLnk.field_lock(),
            void this.baseLnk.showCaptcha(parseInt(t.firstChild.attributes.time_left.value));
        for (var e = t.childNodes, a = 0; a < e.length; a++)
            if ("req" == e[a].nodeName) {
                this.parse_attr(e[a].attributes);
                break
            }
    }
}
,
canvas.app.hunt.engine.FarmingUpdater.prototype.parse_attr = function(t) {
    var e, a = canvas.app.hunt.model;
    null != t.status && ("1" == t.status.value ? this.checking || null != t.ctime && null != t.ftime ? (null == t.stime && (t.stime = t.ctime),
    null == t.farm && (t.farm = {
        value: "0"
    }),
    null == (e = a.farm_data[t.prof.value]) && (e = a.farm_data[0]),
    "0" == t.farm.value ? (t.ctime.value = 1e3 * parseInt(t.ctime.value),
    t.ftime.value = 1e3 * parseInt(t.ftime.value),
    t.stime.value = 1e3 * parseInt(t.stime.value),
    t.ctime.value > t.ftime.value && (t.ctime.value = t.ftime.value),
    t.stime.value > t.ftime.value && (t.stime.value = t.ftime.value),
    this.checking && t.stime.value == t.ftime.value ? this.start() : this.baseLnk.popup.set_progress(t),
    this.baseLnk.popup.set_header(e.header)) : "-1" == t.farm.value ? (this.baseLnk.unselect_obj(),
    this.baseLnk.popup.show_message(e.faled, 16711680)) : "1" == t.farm.value ? (this.baseLnk.unselect_obj(),
    this.baseLnk.popup.parent && canvas.utils.WindowsManager.instance.closeWindow(this.baseLnk.popup),
    this.baseLnk.field_unlock(),
    this.baseLnk.refresh_controls()) : (this.baseLnk.popup.set_header(canvas.Translator.toUpperCaseFirstChar(canvas.Translator.getText(4))),
    this.baseLnk.popup.show_message(canvas.Translator.getText(425), 16711680))) : this.baseLnk.popup.show_message(canvas.Translator.getText(424), 16711680) : (this.baseLnk.popup.set_header(canvas.Translator.toUpperCaseFirstChar(canvas.Translator.getText(4))),
    null != t.msg ? this.baseLnk.popup.show_message(t.msg.value, 16711680) : this.baseLnk.popup.show_message(canvas.Translator.getText(426), 16711680)))
}
,
canvas.app.hunt.engine.FarmingUpdater.prototype.errorHandler = function() {
    this.start()
}
,
canvas.app.hunt.engine.FarmingUpdater.prototype.main_iteration = function() {
    this.checking = !0,
    this.canceling = !1;
    var t = this.reqCheck.replace(/%xy%/g, this._snum.toString());
    this.aLoader.load(t)
}
,
canvas.app.hunt.engine.FarmingUpdater.prototype.begin_farming = function(t, e, a) {
    var s = canvas.app.hunt.model;
    this.checking = !1,
    this.canceling = !1;
    s = (s = this.reqBegin.replace(/%num%/g, String(t)).replace(/%sig%/g, md5(this._snum.toString() + t.toString() + s.MAX_ANIMATION_SIZE))).replace(/%xy%/g, this._snum.toString());
    s += "&t=" + e,
    this.aLoader.method = "POST",
    this.aLoader.load(s, {
        m: canvas.utils.ABController.toString({
            rtype: "farm",
            rid: t,
            et: a
        })
    }),
    this.aLoader.method = "GET"
}
,
canvas.app.hunt.engine.FarmingUpdater.prototype.fieldClick = function(t) {}
,
canvas.app.hunt.engine.FarmingUpdater.prototype.cancel_farming = function() {
    this.stop(),
    this.canceling = !0,
    this.aLoader.load(this.reqCancel)
}
,
canvas.app.hunt.engine.MapData = function() {
    this._data = {},
    this.TYPE_BOT = "bot",
    this.TYPE_PLANT = "plant",
    this.TYPE_STONE = "stone",
    this.TYPE_FISH = "fish",
    this.TYPE_USE = "use",
    this.OVERLAY_WIDTH = 75
}
,
canvas.app.hunt.engine.MapData.prototype.parseData = function(t, e) {
    var a, s, i, n, o, r = 0, c = [], p = new Uint8Array(e);
    if (p)
        for (this._data[t] = c; r < p.length; ) {
            for (s = p[r],
            i = 8 * r,
            a = 0; a < 8; a++)
                n = (i + a) % this.OVERLAY_WIDTH,
                o = parseInt((i + a) / this.OVERLAY_WIDTH),
                c[n] || (c[n] = []),
                c[n][o] = !(s >> a & 1);
            r++
        }
}
,
canvas.app.hunt.engine.MapData.prototype.testPoint = function(t, e, a) {
    if (a == this.TYPE_USE)
        return !0;
    t = Math.floor(t / 20),
    e = Math.floor(e / 20);
    return !!this._data[a] && ((a = this._data[a])[t] && a[t][e])
}
,
canvas.app.hunt.engine.MapData.prototype.getTypeByProf = function(t) {
    switch (t) {
    case 1:
        return this.TYPE_PLANT;
    case 2:
        return this.TYPE_STONE;
    case 4:
        return this.TYPE_FISH;
    default:
        return this.TYPE_USE
    }
}
,
canvas.app.hunt.engine.ObjLoader = function(t, e) {
    this.src = t,
    this.movies = [],
    this.ready = !1,
    this.smoothing = !!e,
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this),
    canvas.ResourceLoader.add([t + ".mci", t + ".png", t + ".json"])
}
,
canvas.app.hunt.engine.ObjLoader.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this),
    this.ready = !0;
    var t = this.movies ? this.movies.length : 0;
    if (0 < t)
        for (var e = 0; e < t; e++)
            this.processMovie(this.movies[e]);
    this.movies = null,
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.COMPLETE_OBJECT, this)
}
,
canvas.app.hunt.engine.ObjLoader.prototype.getMovie = function() {
    var t = new canvas.px.MovieClip(this.src,"",this.smoothing);
    return t.frameEvent = canvas.app.hunt.Event.ENTER_FRAME,
    this.ready ? this.processMovie(t) : this.movies.push(t),
    t
}
,
canvas.app.hunt.engine.ObjLoader.prototype.processMovie = function(t) {}
,
canvas.app.hunt.engine.ObjectsUpdater = function(t, e) {
    this.baseLnk = t,
    this.Objects = e,
    this.aLoader = new canvas.utils.URLRequest,
    this.aConfLoader = new canvas.utils.URLRequest,
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.aLoader, this.completeHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.aConfLoader, this.completeHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.aLoader, this.errorHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.aConfLoader, this.errorHandler, this),
    this.send_req_binded = this.send_req.bind(this),
    this.send_req_conf_binded = this.send_req_conf.bind(this),
    this.completeHandler(null),
    this.send_req()
}
,
canvas.app.hunt.engine.ObjectsUpdater.prototype.send_req = function() {
    this.aLoader.load(canvas.app.hunt.model.reqURL)
}
,
canvas.app.hunt.engine.ObjectsUpdater.prototype.send_req_conf = function() {
    this.aConfLoader.load(canvas.app.hunt.model.reqConfURL)
}
,
canvas.app.hunt.engine.ObjectsUpdater.prototype.completeHandler = function(t) {
    var e = canvas.app.hunt.model
      , a = !1
      , s = !0;
    if (null != t && (a = t.target == this.aLoader,
    s = t.target == this.aConfLoader),
    null != this.baseLnk.winCaptcha && this.baseLnk.winCaptcha.isActive)
        this.setReqTimeOut(a, s);
    else {
        t = null == t ? (new DOMParser).parseFromString(canvas.ResourceLoader.get("first_data").data, "text/xml") : (new DOMParser).parseFromString(t.target.request.responseText, "text/xml");
        if (t.firstChild.attributes.time_left)
            return this.baseLnk.field_lock(),
            this.baseLnk.showCaptcha(parseInt(t.firstChild.attributes.time_left.value)),
            void this.setReqTimeOut(a, s);
        for (var i, n = !1, o = t.childNodes, r = 0; r < o.length; r++)
            if ("hunt" == o[r].nodeName) {
                i = o[r].childNodes;
                for (var c, p, h, l, d = 0; d < i.length; d++)
                    "bots" == (l = i[d].nodeName) ? this.lastBots = i[d].childNodes : "farm" == l ? this.lastFarm = i[d].childNodes : "event" == l ? (n = !0,
                    c = null != i[d].attributes.id ? i[d].attributes.id.value : 0,
                    p = null != i[d].attributes.title ? i[d].attributes.title.value : "",
                    h = null != i[d].attributes.point_title ? i[d].attributes.point_title.value : "",
                    this.parse_event(c, p, h, i[d].childNodes)) : "fight" == l ? e.NUM_BIG_FIGHT = null != i[d].attributes.in_process ? i[d].attributes.in_process.value : 0 : "treasure" == l && (e.treasureFinishTime = i[d].childNodes[0] && i[d].childNodes[0].nodeValue ? Math.round(.001 * Date.now()) + parseInt(i[d].childNodes[0].nodeValue) : 0)
            }
        a && !n && (e.OBJ_EVENT = {
            tasks: {}
        }),
        this.lastBots && this.parse_bots(this.lastBots),
        this.lastFarm && this.parse_farm(this.lastFarm),
        this.baseLnk.checkObjects(!0),
        a && this.baseLnk.updateVisibleObjects(),
        this.setReqTimeOut(a, s)
    }
}
,
canvas.app.hunt.engine.ObjectsUpdater.prototype.parse_bots = function(t) {
    for (var e, a, s, i, n = 0; n < t.length; n++)
        if ("bot" == t[n].nodeName)
            for (var o in s = "b" + (e = t[n].attributes).id.value,
            i = null == this.Objects[s] && (this.Objects[s] = {},
            this.Objects[s].type = "bot",
            !0),
            a = this.Objects[s],
            i || a.x == e.x.value && a.y == e.y.value || (a.new_pos = !0),
            null != a.mc && a.fight_id != e.fight_id.value && (null == e.fight_id || "0" == e.fight_id.value ? a.mc.mark.visible = !1 : a.mc.mark.visible = !0),
            delete a.fight_id,
            delete a.old_flag,
            e)
                null != e[o].value && (a[e[o].name] = e[o].value)
}
,
canvas.app.hunt.engine.ObjectsUpdater.prototype.parse_farm = function(t) {
    for (var e, a, s, i = canvas.app.hunt.model, n = 0; n < t.length; n++)
        if ("item" == t[n].nodeName) {
            e = t[n].attributes;
            var o = parseInt(e.quality.value);
            if (canvas.Functions.testFlag(i.filterValue, i.FILTER_VALUES[o]))
                for (var r in s = "f" + e.num.value,
                o = null == this.Objects[s] && (this.Objects[s] = {},
                this.Objects[s].type = "farm",
                !0),
                a = this.Objects[s],
                o || null != a.mc && (a.x == e.x.value && a.y == e.y.value || (a.new_pos = !0),
                a.farming != e.farming.value && (null == e.farming || "0" == e.farming.value ? a.mc.mark.visible = !1 : a.mc.mark.visible = !0)),
                delete a.farming,
                delete a.old_flag,
                e)
                    null != e[r].value && (a[e[r].name] = e[r].value)
        }
}
,
canvas.app.hunt.engine.ObjectsUpdater.prototype.parse_event = function(t, e, a, s) {
    var i = canvas.app.hunt.model;
    i.OBJ_EVENT.id = t,
    i.OBJ_EVENT.title = e,
    i.OBJ_EVENT.point_title = a;
    for (var n = 0, o = 0; o < s.length; o++)
        "task" == s[o].nodeName && (i.OBJ_EVENT.tasks[n] = {
            title: null != s[o].attributes.title ? s[o].attributes.title.value : "---",
            max_value: null != s[o].attributes.max_value ? s[o].attributes.max_value.value : 0,
            max_user_value: null != s[o].attributes.max_user_value ? s[o].attributes.max_user_value.value : 0,
            user_value: null != s[o].attributes.user_value ? s[o].attributes.user_value.value : 0,
            value: null != s[o].attributes.value ? s[o].attributes.value.value : 0,
            noUserValue: s[o].attributes.no_user_value && "1" == s[o].attributes.no_user_value.value
        },
        n++)
}
,
canvas.app.hunt.engine.ObjectsUpdater.prototype.errorHandler = function(t) {
    this.setReqTimeOut()
}
,
canvas.app.hunt.engine.ObjectsUpdater.prototype.updateFarm = function() {
    this.lastFarm && this.parse_farm(this.lastFarm),
    this.baseLnk.checkObjects(!0, "farm")
}
,
canvas.app.hunt.engine.ObjectsUpdater.prototype.setReqTimeOut = function(t, e) {
    var a = canvas.app.hunt.model;
    null == t && (t = !0),
    null == e && (e = !0),
    t && (this.timer && clearTimeout(this.timer),
    this.timer = setTimeout(this.send_req_binded, 1e3 * a.reqInterval)),
    e && (this.timerConf && clearTimeout(this.timerConf),
    this.timerConf = setTimeout(this.send_req_conf_binded, 1e3 * a.reqConfInterval))
}
,
canvas.app.hunt.view.FarmWindow = function(t) {
    canvas.app.manor.view.WindowManorBase.call(this, 392, 102),
    this.baseLnk = t;
    t = canvas.app.hunt.model;
    this.cancel_tf = new canvas.ui.Text(t.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,16771494,73,18,"center"),
    this.cancel_tf.text = canvas.Translator.getText(11),
    this.cancel_tf.position.set(159, 63),
    this.message_tf = new canvas.ui.Text(t.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,1346315,370,18,"center"),
    this.message_tf.position.set(10, 89),
    this.cont_progress = new canvas.px.Container,
    this.progressBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "popup_line_red")),
    this.progressBack.position.set(22, 34),
    this.cont_progress.addChild(this.progressBack),
    this.progress = new canvas.ui.Progress(canvas.ResourceLoader.getImage("ui", "popup_line_green")),
    this.progress.position.set(22, 37),
    this.cont_progress.addChild(this.progress),
    this.cancel_btn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "popup_close_btn")),
    this.cancel_btn.position.set(150, 62),
    this.cont_progress.addChild(this.cancel_btn),
    this.cont_progress.addChild(this.cancel_tf),
    this.cont_progress.addChild(this.message_tf),
    this.cont_finish = new canvas.px.Container,
    this.body_tf = new canvas.ui.Text(t.IsBold ? canvas.Const.FONT_TAHOMA_11_BOLD : canvas.Const.FONT_TAHOMA_11,0,320,34,"center"),
    this.body_tf.position.set(36, 24),
    this.cont_finish.addChild(this.body_tf),
    this.exit_btn = new canvas.app.view.MainButton,
    this.exit_btn.setTitle(canvas.Translator.getText(310)),
    this.cont_finish.addChild(this.exit_btn),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.show, this),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.hide, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancel_btn, this.cancelMouseClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.exit_btn, this.exitMouseClickHandler, this),
    this.update()
}
,
canvas.app.hunt.view.FarmWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.hunt.view.FarmWindow.prototype.cont_switcher = function(t, e) {
    var a = canvas.app.hunt.model;
    this.parent || (canvas.utils.WindowsManager.instance.openWindow(this, !1, !1, !1, !0),
    this.position.set(Math.round(a.popupPos.x * this.baseLnk.wwReal - .5 * this.width), Math.round(a.popupPos.y * this.baseLnk.hhReal - .5 * this.height))),
    this.contains(e) && this.removeChild(e),
    this.contains(t) || this.addChild(t)
}
,
canvas.app.hunt.view.FarmWindow.prototype.switch_progress_mode = function() {
    this.cont_switcher(this.cont_progress, this.cont_finish),
    this.baseLnk.fld_current.pers.visible = !1
}
,
canvas.app.hunt.view.FarmWindow.prototype.switch_finish_mode = function() {
    this.cont_switcher(this.cont_finish, this.cont_progress),
    this.baseLnk.fld_current.pers.visible = !0
}
,
canvas.app.hunt.view.FarmWindow.prototype.show = function(t) {
    null != t && t.params
}
,
canvas.app.hunt.view.FarmWindow.prototype.hide = function(t) {
    this.cancelMouseClickHandler(null, !0),
    null != t && t.params == this && (this.baseLnk.fld_current.pers.visible = !0,
    this.setBackground())
}
,
canvas.app.hunt.view.FarmWindow.prototype.setBackground = function(t) {
    null == t && (t = 1),
    2 === t ? this.setSize(392, 137) : this.setSize(392, 102)
}
,
canvas.app.hunt.view.FarmWindow.prototype.cancelMouseClickHandler = function(t, e) {
    (this.parent || e) && (canvas.app.hunt.model.farm.cancel_farming(),
    this.baseLnk.field_unlock(),
    this.baseLnk.refresh_controls(),
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this),
    e || canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this))
}
,
canvas.app.hunt.view.FarmWindow.prototype.exitMouseClickHandler = function() {
    this.baseLnk.field_unlock(),
    this.baseLnk.refresh_controls(),
    canvas.EventManager.dispatchEvent(canvas.px.WindowEvent.EVENT_CLOSE, this)
}
,
canvas.app.hunt.view.FarmWindow.prototype.set_header = function(t) {
    this.header.text = t
}
,
canvas.app.hunt.view.FarmWindow.prototype.set_progress = function(t) {
    var e = Date.now()
      , e = t.stime.value - e;
    this.ctime = t.ctime.value - e,
    this.ftime = t.ftime.value - e,
    this.switch_progress_mode(),
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this),
    null != t.first_farmer ? (this.message_tf.color = 1 == parseInt(t.first_farmer.value) ? 1346315 : 16711680,
    this.message_tf.text = 1 == parseInt(t.first_farmer.value) ? canvas.Translator.getText(436) : canvas.Translator.getText(437),
    this.setBackground(2)) : this.message_tf.text = "",
    this.frameHandler()
}
,
canvas.app.hunt.view.FarmWindow.prototype.frameHandler = function() {
    var t = Date.now()
      , e = canvas.app.hunt.model;
    this.progress.progress = (t - this.ctime) / (this.ftime - this.ctime),
    1 <= this.progress.progress && (canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this),
    e.farm.main_iteration())
}
,
canvas.app.hunt.view.FarmWindow.prototype.show_message = function(t, e) {
    this.switch_finish_mode(),
    this.setBackground(),
    this.set_body_text(t, e)
}
,
canvas.app.hunt.view.FarmWindow.prototype.set_body_text = function(t, e) {
    this.body_tf.color = e,
    this.body_tf.text = t,
    this.body_tf.y = 42 - Math.round(this.body_tf.textHeight / 2)
}
,
canvas.app.hunt.view.FarmWindow.prototype.setSize = function(t, e) {
    canvas.app.manor.view.WindowManorBase.prototype.setSize.call(this, t, e),
    this._width = t,
    this._height = e,
    this.update()
}
,
canvas.app.hunt.view.FarmWindow.prototype.update = function() {
    this.exit_btn && this.exit_btn.position.set(Math.round(.5 * (this._width - this.exit_btn.width)), this._height - 50)
}
,
canvas.app.hunt.view.Field = function(t, e, a) {
    canvas.px.Container.call(this);
    var s = canvas.app.hunt.model;
    this.baseLnk = t,
    this.interactive = !0,
    this.addChild(e),
    this.obj_cont = new canvas.px.Container,
    this.addChild(this.obj_cont),
    this.pers = new canvas.app.hunt.view.elements.MapPers,
    this.pers.position.set(Math.round(.5 * s.sizeX), Math.round(.5 * s.sizeY)),
    this.addChild(this.pers),
    this.treasureSearch = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "icon_lupa")),
    this.treasureLocator = new canvas.px.Container,
    this.treasureImage = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "treasure_chest")),
    this.treasureField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD_STROKE,16777215,80,20,"center"),
    this.treasureField.position.set(-40, -40),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.moveHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.treasureImage, this.treasureClickHandler, this)
}
,
canvas.app.hunt.view.Field.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.hunt.view.Field.prototype.treasureClickHandler = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.TREASURE_COLLECT)
}
,
canvas.app.hunt.view.Field.prototype.setPos = function(t, e) {
    var a;
    0 < t && (t = 0),
    0 < e && (e = 0),
    e != this.last_Y && (this.last_Y = e,
    a = -this.last_Y / this.baseLnk.fld_invisible_HE,
    this.baseLnk.scr_vert.current = this.baseLnk.scr_vert.max * a,
    canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this.baseLnk.scr_vert)),
    t != this.last_X && (this.last_X = t,
    a = -this.last_X / this.baseLnk.fld_invisible_WI,
    this.baseLnk.scr_horz.current = this.baseLnk.scr_vert.max * a,
    canvas.EventManager.dispatchEvent(canvas.ui.ScrollEvent.EVENT_SCROLL, this.baseLnk.scr_horz))
}
,
canvas.app.hunt.view.Field.prototype.moveHandler = function(t) {
    var e = this.pers.toGlobal(new canvas.px.Point(0,0))
      , e = t.params.x >= e.x ? 180 + 180 * Math.atan((t.params.y - e.y) / (t.params.x - e.x)) / Math.PI : 180 * Math.atan((t.params.y - e.y) / (t.params.x - e.x)) / Math.PI;
    isNaN(e) || (this.pers.rotation = canvas.Functions.degToRad(e - 45))
}
,
canvas.app.hunt.view.Field.prototype.clear_obj_cont = function() {
    for (; 0 < this.obj_cont.numChildren; )
        this.obj_cont.getChildAt(0).remove()
}
,
canvas.app.hunt.view.Field.prototype.startTreasureSearch = function() {
    this.baseLnk.addChild(this.treasureSearch),
    this.treasureSearch.startDrag(new canvas.px.Point(20,20), null, canvas.app.CanvasHunt.App.renderer.plugins.interaction.mouse.global),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.upHandler, this)
}
,
canvas.app.hunt.view.Field.prototype.upHandler = function(t) {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this),
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.upHandler, this),
    this.treasureSearch.stopDrag(),
    this.baseLnk.contains(this.treasureSearch) && this.baseLnk.removeChild(this.treasureSearch),
    t.name != canvas.Event.STAGE_MOUSE_OUT && (t = this.toLocal(new canvas.px.Point(t.params.x,t.params.y)),
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.TREASURE_DIG, null, {
        x: Math.round(t.x),
        y: Math.round(t.y)
    }))
}
,
canvas.app.hunt.view.Field.prototype.updateTreasureLocator = function(t) {
    var e, a = canvas.app.hunt.model;
    this.treasureField.parent && this.treasureLocator.removeChild(this.treasureField),
    canvas.Functions.destroyChildren(this.treasureLocator);
    switch (t) {
    case canvas.app.hunt.Const.TREASURE_BEACON_STATUS_RED:
    case canvas.app.hunt.Const.TREASURE_BEACON_STATUS_ORANGE:
    case canvas.app.hunt.Const.TREASURE_BEACON_STATUS_YELLOW:
        (e = new canvas.px.MovieClip(canvas.Config.effectsPath + "treasure" + t.toString())).frameEvent = canvas.app.hunt.Event.ENTER_FRAME,
        e.loop = !0,
        this.treasureField.text = canvas.Translator.getText(443 + t),
        this.treasureField.color = [16056320, 16087296, 16113920][t - 1]
    }
    null != e ? (this.treasureLocator.addChild(e),
    a.treasureTextTips && this.treasureLocator.addChild(this.treasureField),
    this.contains(this.treasureLocator) || this.addChild(this.treasureLocator),
    this.treasureLocator.position.set(a.treasureLastPoint.x, a.treasureLastPoint.y)) : this.contains(this.treasureLocator) && this.removeChild(this.treasureLocator)
}
,
canvas.app.hunt.view.Field.prototype.showTreasure = function(t) {
    var e = canvas.app.hunt.model;
    null == t && (t = !0),
    t ? (this.contains(this.treasureImage) || (this.addChild(this.treasureImage),
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_ADD, null, {
        target: this.treasureImage,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(192)))
    })),
    this.treasureImage.position.set(e.treasureLastPoint.x, e.treasureLastPoint.y)) : (canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_REMOVE, null, {
        target: this.treasureImage
    }),
    this.contains(this.treasureImage) && this.removeChild(this.treasureImage))
}
,
canvas.app.hunt.view.Field.prototype.check_position = function() {}
,
canvas.app.hunt.view.Field.prototype.updateVisibleObjects = function(t) {
    var e, a, s = canvas.app.hunt.model;
    for (a in s.Objects)
        (e = s.Objects[a]).mc && (canvas.Functions.pointInRect(e.mc.position, t) ? (this.obj_cont.contains(e.mc) || this.obj_cont.addChild(e.mc),
        e.mc.locked = !1) : (this.obj_cont.contains(e.mc) && this.obj_cont.removeChild(e.mc),
        e.mc.locked = !0))
}
,
canvas.app.hunt.view.FieldObject = function(t, e, a) {
    canvas.px.Container.call(this),
    Object.defineProperty(this, "Bot", {
        get: function() {
            return "bot" == this.curObj.type
        }
    }),
    this._locked = !1,
    Object.defineProperty(this, "locked", {
        get: function() {
            return this._locked
        },
        set: function(t) {
            this._locked != t && (this._locked = t,
            this.updateLocked())
        }
    });
    var s = canvas.app.hunt.model;
    this.num = 0,
    this.col_hi = 16777215,
    this.clickTime = Date.now(),
    this.baseLnk = t,
    this.rootLnk = e,
    this.curObj = a,
    this.position.set(parseInt(this.curObj.x), parseInt(this.curObj.y)),
    this.mark = new canvas.px.Container,
    this.mark.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_mark2"))),
    this.mark_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,0,18,19,"center"),
    this.mark_tf.position.set(1, 3),
    this.mark.addChild(this.mark_tf);
    a = !1;
    if ("bot" == this.curObj.type)
        i = "bot" + this.curObj.sk + "_sm",
        n = canvas.Config.huntBotsPath + i + "/" + i,
        s.PicPath,
        this.curObj.pic,
        this.obj_data_key = "sk_" + this.curObj.sk,
        this.obj_data_pic_key = "pic_" + this.curObj.pic,
        this.col_hi = s.getBotnameColor(this.curObj.agrlevel);
    else {
        if ("farm" != this.curObj.type)
            return;
        var i = this.curObj.swf.split(".")[0]
          , n = canvas.Config.huntResPath + i + "/" + i;
        s.FarmPicPath,
        this.curObj.pic;
        this.obj_data_key = "swf_" + this.curObj.swf,
        this.obj_data_pic_key = "pic_" + this.curObj.pic,
        this.col_hi = s.farm_conf[this.curObj.quality][0],
        "fish_blue.swf" != this.curObj.swf && "fish_red.swf" != this.curObj.swf || (i = "red",
        10027263 == this.col_hi ? i = "violet" : 13421772 == this.col_hi ? i = "gray" : 187 == this.col_hi ? i = "blue" : 47872 == this.col_hi && (i = "green"),
        n = canvas.Config.huntResPath + "fish/" + i + "/" + i,
        this.obj_data_key = "swf_fish_" + i,
        a = !0)
    }
    null != this.obj_data_key && (null == s.OBJECTS_DATA[this.obj_data_key] && (s.OBJECTS_DATA[this.obj_data_key] = new canvas.app.hunt.engine.ObjLoader(n,a)),
    s.OBJECTS_DATA[this.obj_data_key].ready ? this.complete_object() : canvas.EventManager.addEventListener(canvas.app.hunt.Event.COMPLETE_OBJECT, s.OBJECTS_DATA[this.obj_data_key], this.complete_object, this)),
    this.rootLnk.obj_cont.addChild(this),
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.COLOR_CHANGE, null, this.handlerColorChange),
    this.curObj.mc = this
}
,
canvas.app.hunt.view.FieldObject.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.hunt.view.FieldObject.prototype.updateLocked = function() {
    if (this.mc && (this.mc.locked = this._locked,
    this.mc.mcChildsCache))
        for (var t in this.mc.mcChildsCache)
            this.mc.mcChildsCache[t].locked = this._locked;
    !this.locked && this.num && this.goFrame(this.num)
}
,
canvas.app.hunt.view.FieldObject.prototype.handlerColorChange = function() {
    var t = canvas.app.hunt.model;
    if ("bot" == this.curObj.type) {
        var e = new canvas.utils.RGB(this.col_hi);
        switch (t.colorManager.colorIndex) {
        case 0:
            e.r = e.r + (128 < e.r ? -t.colorManager.color : t.colorManager.color);
            break;
        case 1:
            e.g = e.g + (128 < e.g ? -t.colorManager.color : t.colorManager.color);
            break;
        default:
            e.b = e.b + (128 < e.b ? -t.colorManager.color : t.colorManager.color)
        }
        this.name_tf.color = e.toHex(),
        this.name_tf.alpha = t.colorManager.alpha
    }
}
,
canvas.app.hunt.view.FieldObject.prototype.goFrame = function(t) {
    this.num = t,
    "bot" == this.curObj.type ? (this.mc.gotoAndStop(t),
    this.mc.mcChildsCache["mc" + t] && (this.mc.mcChildsCache["mc" + t].loop = !0,
    this.mc.mcChildsCache["mc" + t].play(),
    this.mc.mcChildsCache["mc" + t].frameEvent || (this.mc.mcChildsCache["mc" + t].frameEvent = canvas.app.hunt.Event.ENTER_FRAME))) : "farm" == this.curObj.type && (this.mc.maxTotalFrames < 2 ? this.mc.gotoAndStop(1) : (this.mc.loop = !0,
    this.mc.play(),
    this.mc.stop = function() {}
    ))
}
,
canvas.app.hunt.view.FieldObject.prototype.complete_object = function() {
    var t = canvas.app.hunt.model;
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.COMPLETE_OBJECT, t.OBJECTS_DATA[this.obj_data_key], this.complete_object, this),
    this.mc = t.OBJECTS_DATA[this.obj_data_key].getMovie(),
    this.updateLocked(),
    this.goFrame(1),
    this.curObj.rndRotation ? this.mc.rotation = this.curObj.rndRotation : this.mc.rotation = this.curObj.rndRotation = canvas.Functions.degToRad(360 * Math.random());
    var e, a, s = 10;
    if (t.startRandom) {
        if (this.curObj.rndX && this.curObj.rndY)
            this.mc.position.set(this.curObj.rndX, this.curObj.rndY);
        else {
            for (; s--; ) {
                var i = 2 * Math.PI * Math.random()
                  , n = Math.sqrt(this.mc.width * this.mc.width / 4 + this.mc.height * this.mc.height / 4);
                if (this.mc.x = n * Math.cos(i),
                this.mc.y = n * Math.sin(i),
                t.mapData.testPoint(parseInt(this.curObj.x) + this.mc.x, parseInt(this.curObj.y) + this.mc.y, "bot" == this.curObj.type ? t.mapData.TYPE_BOT : t.mapData.getTypeByProf(parseInt(this.curObj.prof))))
                    break;
                this.mc.position.set(0, 0)
            }
            this.curObj.rndX = this.mc.x,
            this.curObj.rndY = this.mc.y
        }
        "fish_blue.swf" != this.curObj.swf && "fish_red.swf" != this.curObj.swf || (this.mc.container.x = -27,
        this.mc.container.y = -27)
    }
    "1" == this.curObj.ghost ? this.mc.container.filters = [canvas.Functions.getGlow(10, 3, 0, 16777215, .1), canvas.Functions.getAlpha(.4)] : "1" == this.curObj.sk_half_moroc_light ? (this.mc.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 6737100, .1)],
    this.mc.alpha = .6) : "1" == this.curObj.sk_half_moroc_dark && (this.mc.filters = [canvas.Functions.getGlow(10, 1.54, 1.81, 10066176, .1)],
    this.mc.alpha = .6),
    this.addChild(this.mc),
    this.mc.interactive = !0,
    this.mc.buttonMode = !0,
    this.mc.click = this.sensorClickHandler.bind(this),
    this.mc.hitArea = new canvas.px.Ellipse(0,0,Math.round(.4 * this.mc.width),.4 * this.mc.height),
    e = Math.max(this.mc.width, this.mc.height, 55),
    a = Math.floor(e / 2),
    this.circle = new canvas.app.hunt.view.elements.CircleBorder(Math.round(.3 * e),Math.round(.06 * e),this.col_hi),
    this.circle.x = Math.round(this.mc.x),
    this.circle.y = Math.round(this.mc.y),
    this.unFocus(),
    this.addChild(this.circle),
    "bot" == this.curObj.type && (this.name_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD_STROKE,16777215,200,20,"center"),
    this.name_tf.text = this.curObj.name + "[" + this.curObj.level + "]",
    this.name_tf.color = this.col_hi,
    this.name_tf.x = this.name_tf.xBase = Math.round(this.mc.x + Math.floor(-this.name_tf._width / 2)),
    this.name_tf.y = this.name_tf.yBase = Math.round(this.mc.y + a - 10),
    this.addChild(this.name_tf)),
    this.mark && (this.mark.position.set(this.circle.x, this.circle.y),
    this.addChild(this.mark)),
    "bot" == this.curObj.type ? (this.mark_tf.text = "!",
    "0" == this.curObj.fight_id && (this.mark.visible = !1)) : this.update_mark_tf(this.curObj.farming),
    this.handlerColorChange()
}
,
canvas.app.hunt.view.FieldObject.prototype.update_mark_tf = function(t) {
    "0" == t ? this.mark.visible = !1 : this.mark_tf.text = String(Math.min(9, Math.max(0, parseInt(t))))
}
,
canvas.app.hunt.view.FieldObject.prototype.sensorClickHandler = function(t) {
    this.baseLnk.scr_horz.wasDragged || this.baseLnk.scr_vert.wasDragged || (canvas.app.hunt.model.farm.fieldClick(this.mc),
    this.select(1),
    Date.now() - this.clickTime < 500 && this.sensorDoubleClickHandler(),
    this.clickTime = Date.now())
}
,
canvas.app.hunt.view.FieldObject.prototype.select = function(t) {
    this.curObj.t = t,
    this.baseLnk.select_obj(this.curObj),
    this.rootLnk.obj_cont.setChildIndex(this, this.rootLnk.obj_cont.numChildren - 1)
}
,
canvas.app.hunt.view.FieldObject.prototype.sensorDoubleClickHandler = function() {
    "bot" == this.curObj.type && this.baseLnk.apply_control_btn(3, 2),
    "farm" == this.curObj.type && this.baseLnk.apply_control_btn(0, 2)
}
,
canvas.app.hunt.view.FieldObject.prototype.inFocus = function() {
    this.circle.visible = !0
}
,
canvas.app.hunt.view.FieldObject.prototype.unFocus = function() {
    this.circle.visible = !1
}
,
canvas.app.hunt.view.FieldObject.prototype.moving = function(t, e) {
    var a, s, i, n = canvas.app.hunt.model;
    "bot" == this.curObj.type ? (s = this.x - t,
    i = this.y - e,
    a = Math.atan2(i, s),
    s = Math.sqrt(s * s + i * i),
    i = a + Math.PI,
    this.qi = 25 * n.reqInterval,
    this.qx = Math.cos(i) * (s / this.qi),
    this.qy = Math.sin(i) * (s / this.qi),
    this.mc.rotation = canvas.Functions.degToRad(a * (180 / Math.PI) + 180),
    this.goFrame(2),
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameMovingHandler, this)) : "farm" == this.curObj.type && (this.x = t,
    this.y = e,
    this.mc.rotation = canvas.Functions.degToRad(360 * Math.random()))
}
,
canvas.app.hunt.view.FieldObject.prototype.frameMovingHandler = function() {
    0 < this.qi ? (this.x += this.qx,
    this.y += this.qy,
    this.name_tf.position.set(this.name_tf.xBase - (this.x - Math.round(this.x)), this.name_tf.yBase - (this.y - Math.round(this.y))),
    this.qi--) : (this.goFrame(1),
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameMovingHandler, this))
}
,
canvas.app.hunt.view.FieldObject.prototype.getHistoryId = function() {
    return "bot" == this.curObj.type ? this.curObj.sk : this.curObj.artikul_id
}
,
canvas.app.hunt.view.FieldObject.prototype.remove = function() {
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameMovingHandler, this),
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.COLOR_CHANGE, null, this.handlerColorChange),
    this.rootLnk.obj_cont.removeChild(this),
    delete this.curObj.mc,
    canvas.Functions.destroyChildren(this)
}
,
canvas.app.hunt.view.FilterPanel = function() {
    canvas.px.Container.call(this),
    this.arrows = new Array;
    for (var t = 0; t < 5; t++)
        this.createButton(t),
        this.createArrow(t);
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(447)))
    }),
    this.interactive = !0,
    this.update(),
    this.click = this.clickHandler.bind(this)
}
,
canvas.app.hunt.view.FilterPanel.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.hunt.view.FilterPanel.prototype.createButton = function(t) {
    var e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "filter_" + t));
    e.name = "filter" + t,
    e.x = 18 * t,
    this.addChild(e)
}
,
canvas.app.hunt.view.FilterPanel.prototype.createArrow = function(t) {
    var e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "filter_arrow"));
    e.position.set(18 * t + 2, 15),
    this.addChild(e),
    this.arrows.push(e)
}
,
canvas.app.hunt.view.FilterPanel.prototype.clickHandler = function(t) {
    var e = canvas.app.hunt.model;
    "filter" == t.target.parent.name.substr(0, 6) && (t = parseInt(t.target.parent.name.substr(6)),
    canvas.Functions.testFlag(e.filterValue, e.FILTER_VALUES[t]) ? e.filterValue &= ~e.FILTER_VALUES[t] : e.filterValue |= e.FILTER_VALUES[t],
    this.update())
}
,
canvas.app.hunt.view.FilterPanel.prototype.update = function() {
    for (var t = canvas.app.hunt.model, e = 0; e < 5; e++)
        this.arrows[e].visible = canvas.Functions.testFlag(t.filterValue, t.FILTER_VALUES[e])
}
,
canvas.app.hunt.view.FrameBorT = function(t) {
    canvas.px.Container.call(this),
    this.baseLnk = t,
    this.WIDTH = 92,
    this.HEIGHT = 40,
    this._lastW = 0,
    this._lastH = 0,
    this.shiftX = 18,
    this.heightKoeff = 0;
    var e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bottom_decor"));
    e.position.set(20 + this.shiftX, 19);
    t = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top_decor"));
    t.position.set(5 + this.shiftX, 5),
    this.container = new canvas.px.Sprite(canvas.ResourceLoader.getImage("map", "distortMap")),
    this.container.position.set(72, 9),
    this.addChild(e),
    this.addChild(this.container),
    this.addChild(t),
    this.selector = new canvas.px.Graphics,
    this.addChild(this.selector),
    this.container.interactive = !0,
    this.container.buttonMode = !0,
    this.container.mousedown = this.downHandler.bind(this),
    this.updatePos(0, 0)
}
,
canvas.app.hunt.view.FrameBorT.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.hunt.view.FrameBorT.prototype.update = function(t, e) {
    var a = canvas.app.hunt.model;
    this.heightKoeff = this.selector.y / this.HEIGHT,
    this._trapezeSize = e / 60;
    var s = this.HEIGHT * (e / a.sizeY)
      , a = this.WIDTH * (t / a.sizeX) + 50 * this.heightKoeff;
    this.selector.clear(),
    this.selector.lineStyle(1, 16375860),
    this.selector.moveTo(0, 0),
    this.selector.lineTo(a, 0),
    this.selector.lineTo(a + this._trapezeSize, s),
    this.selector.lineTo(-this._trapezeSize, s),
    this.selector.lineTo(0, 0),
    this._lastW = t,
    this._lastH = e
}
,
canvas.app.hunt.view.FrameBorT.prototype.updatePos = function(t, e) {
    var a = canvas.app.hunt.model;
    this.selector.y = 9 - this.HEIGHT * (e / a.sizeY),
    this.heightKoeff = this.selector.y / this.HEIGHT,
    this.selector.x = 87 - 25 * this.heightKoeff + this.shiftX - this.WIDTH * (t / a.sizeX),
    this.update(this._lastW, this._lastH)
}
,
canvas.app.hunt.view.FrameBorT.prototype.downHandler = function(t) {
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.moveHandler, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.upHandler, this),
    this.moveHandler({
        params: {
            mouseData: t
        }
    })
}
,
canvas.app.hunt.view.FrameBorT.prototype.upHandler = function() {
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.moveHandler, this),
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this),
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.upHandler, this)
}
,
canvas.app.hunt.view.FrameBorT.prototype.moveHandler = function(t) {
    var e;
    t.params.mouseData.data ? e = t.params.mouseData.data.getLocalPosition(this.container) : ((e = this.container.toGlobal(new canvas.px.Point(0,0))).x = t.params.x - e.x,
    e.y = t.params.y - e.y),
    e.x += 46,
    e.y += 12,
    this._xms = Math.round(e.x - .5 * this.selector.width) + this._trapezeSize,
    this._yms = Math.round(e.y - .5 * this.selector.height),
    this.updateFocus()
}
,
canvas.app.hunt.view.FrameBorT.prototype.updateFocus = function() {
    var t = canvas.app.hunt.model;
    this.baseLnk.fld_current.setPos(Math.round((87 - 25 * this.heightKoeff - this._xms) / this.WIDTH * t.sizeX), Math.round((9 - this._yms) / this.HEIGHT * t.sizeY))
}
,
canvas.app.hunt.view.FrameCornerTL = function(t) {
    canvas.px.Container.call(this),
    this.baseLnk = t;
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_corner_back")));
    t.y = 13,
    this.addChild(t),
    this.info = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,5255716,170,18,"center"),
    this.info.position.set(52, 36),
    this.addChild(this.info),
    this.button = new canvas.ui.SimpleButton(canvas.px.TextureEmpty),
    this.button.position.set(3, 12),
    this.hint = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16770730,170,18,"center"),
    this.hint.position.set(-60, 62),
    this.hint.alpha = 0,
    this.addChild(this.hint),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.button, this.overHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.button, this.outHandler, this),
    this.deactivate()
}
,
canvas.app.hunt.view.FrameCornerTL.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.hunt.view.FrameCornerTL.prototype.deactivate = function() {
    this.contains(this.button) && this.removeChild(this.button),
    this.info.text = canvas.Translator.getText(417),
    this.id = -1,
    this.outHandler()
}
,
canvas.app.hunt.view.FrameCornerTL.prototype.activate = function(t, e) {
    switch (this.contains(this.button) || this.addChild(this.button),
    t) {
    case 0:
        this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_use"),
        this.hint.text = this.info.text = e || canvas.Translator.getText(440);
        break;
    case 1:
        this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_cut"),
        this.hint.text = this.info.text = e || canvas.Translator.getText(420);
        break;
    case 2:
        this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_mine"),
        this.hint.text = this.info.text = e || canvas.Translator.getText(419);
        break;
    case 3:
        this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_attack"),
        this.hint.text = this.info.text = e || canvas.Translator.getText(422);
        break;
    case 4:
        this.button.baseTexture = this.button.sprite.texture = canvas.ResourceLoader.getImage("ui", "left_corner_icon_fish"),
        this.hint.text = this.info.text = e || canvas.Translator.getText(421);
        break;
    default:
        this.button.baseTexture = this.button.sprite.texture = canvas.px.TextureEmpty,
        this.hint.text = this.info.text = ""
    }
    this.id = t
}
,
canvas.app.hunt.view.FrameCornerTL.prototype.overHandler = function() {
    this.direction = !0,
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.hunt.view.FrameCornerTL.prototype.outHandler = function() {
    this.direction = !1,
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.hunt.view.FrameCornerTL.prototype.frameHandler = function() {
    this.direction ? (this.hint.alpha += .2,
    1 <= this.hint.alpha && (this.hint.alpha = 1,
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this))) : (this.hint.alpha -= .2,
    this.hint.alpha <= 0 && (this.hint.alpha = 0,
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)))
}
,
canvas.app.hunt.view.FrameCornerTL.prototype.clickHandler = function() {
    this.baseLnk.apply_control_btn(this.id, 1)
}
,
canvas.app.hunt.view.FrameCornerTR = function(t) {
    canvas.px.Container.call(this),
    this.baseLnk = t,
    this.red = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right_corner_back_red")),
    this.red.position.set(212, 5),
    this.addChild(this.red),
    this.pic_mask = new canvas.px.Graphics,
    this.pic_mask.beginFill(65535, 1),
    this.pic_mask.drawCircle(239, 32, 26),
    this.addChild(this.pic_mask),
    this.pic_btn = new canvas.ui.SimpleButton(canvas.px.TextureEmpty),
    this.pic_btn.position.set(213, 6),
    this.pic = new canvas.ui.Image,
    this.pic.mask = this.pic_mask,
    this.pic_btn.visible = !1,
    this.pic_btn.sprite.addChild(this.pic),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.pic_btn, this.picClickhandler, this),
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right_corner_back")),
    this.bg.position.set(63, -6),
    this.addChild(this.bg),
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "right_corner_back_button")),
    this.button.position.set(this.bg.x + this.bg.width - 25, this.bg.y + 8),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.button, this.mouseOverHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.button, this.mouseOutHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.exitClickHandler, this),
    this.addChild(this.button),
    this.infoBack = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "right_corner_info_back"),12,0,0,0),
    this.infoBack.width = 160,
    this.infoBack.position.set(14, 25),
    this.addChild(this.infoBack),
    this.hint = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16770730,120,18,"center"),
    this.hint.position.set(this.button.x - 40, this.button.y + this.button.height),
    this.hint.text = canvas.Translator.getText(152),
    this.hint.alpha = 0,
    this.name_tf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_10_BOLD,canvas.Const.FONT_TAHOMA_10_BOLD,5255716,158,18,"center"),
    this.name_tf.position.set(22, 27),
    this.addChild(this.name_tf),
    this.infoWord = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,14130262,148,17,"center"),
    this.infoWord.position.set(72, 11),
    this.infoWord.text = canvas.Translator.getText(243),
    this.addChild(this.infoWord),
    this.info_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD_STROKE,16777215,148,17,"center"),
    this.info_tf.position.set(72, 42),
    this.addChild(this.info_tf),
    this.level_tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,0,27,18,"center"),
    this.level_tf.position.set(183, 27),
    this.addChild(this.level_tf),
    this.update_obj_info(null),
    this.addChild(this.pic_btn),
    this.addChild(this.hint),
    canvas.EventManager.addEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, this.name_tf, this.picClickhandler, this)
}
,
canvas.app.hunt.view.FrameCornerTR.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.hunt.view.FrameCornerTR.prototype.mouseOverHandler = function() {
    this.direction = !0,
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.hunt.view.FrameCornerTR.prototype.mouseOutHandler = function() {
    this.direction = !1,
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.hunt.view.FrameCornerTR.prototype.exitClickHandler = function() {
    canvas.Functions.navigateToURL("area.php?exit=1", "main")
}
,
canvas.app.hunt.view.FrameCornerTR.prototype.picClickhandler = function() {
    "bot" == this.curObj.type ? showBotInfo(this.curObj.id) : "farm" == this.curObj.type && showArtifactInfo(!1, this.curObj.artikul_id)
}
,
canvas.app.hunt.view.FrameCornerTR.prototype.frameHandler = function() {
    this.direction ? (this.hint.alpha += .2,
    1 <= this.hint.alpha && (this.hint.alpha = 1,
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this))) : (this.hint.alpha -= .2,
    this.hint.alpha <= 0 && (this.hint.alpha = 0,
    canvas.EventManager.removeEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)))
}
,
canvas.app.hunt.view.FrameCornerTR.prototype.update_obj_info = function(t) {
    var e, a, s = canvas.app.hunt.model;
    if (this.curObj = t,
    null == this.curObj)
        return this.name_tf.text = canvas.Translator.getText(418),
        this.info_tf.text = "",
        this.level_tf.text = "",
        void (this.pic_btn.visible = !1);
    this.pic_btn.visible = !0,
    24 < this.curObj.name.length ? this.name_tf.text = this.curObj.name.substr(0, 22) + "..." : this.name_tf.text = this.curObj.name,
    this.name_tf.text += " <a href='event:info'><img src='info_button_0' atlas='ui' yOffset='1'/></a>",
    "bot" == this.curObj.type ? (a = parseInt(this.curObj.agrlevel),
    this.info_tf.color = s.getBotnameColor(a),
    this.info_tf.text = s.getAgrlevelText(a),
    this.level_tf.text = this.curObj.level,
    e = s.PicPath + this.curObj.pic) : "farm" == this.curObj.type && (a = s.farm_conf[this.curObj.quality],
    this.info_tf.color = a[0],
    this.info_tf.text = a[1],
    this.level_tf.text = this.curObj.skill,
    e = s.FarmPicPath + this.curObj.pic),
    e && this.pic.setImage(e)
}
,
canvas.app.hunt.view.ScrollH = function(t) {
    var e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_h_left"))
      , a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_h_right"))
      , s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_h_drag"),[3, 0, 3, 0]);
    s.setSize(40, 0),
    this.drag = s;
    var i = new canvas.px.Mask(16,16,14401949,1);
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.HORIZONTAL, e, a, i, s, t, !0, !1),
    this.padding = 15,
    this.step = 50,
    this.max = 600
}
,
canvas.app.hunt.view.ScrollH.prototype = Object.create(canvas.ui.Scroll.prototype),
canvas.app.hunt.view.ScrollH.prototype.set_full_width = function(t) {
    this.full = t
}
,
canvas.app.hunt.view.ScrollH.prototype.set_visible_width = function(t) {
    this.he != t && (this.he = t,
    this.setSize(this.he, 16),
    this.max = this.full - this.he,
    t = this.he / this.full,
    this.visible = t < 1,
    this.drag.setSize(Math.round((this.he - 32) * t)),
    this.current = this.current)
}
,
canvas.app.hunt.view.ScrollV = function(t, e) {
    var a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v_up"))
      , s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v_down"))
      , i = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v_drag"),[0, 3, 0, 3]);
    i.setSize(0, 40),
    this.drag = i;
    var n = new canvas.px.Mask(16,16,14401949,1);
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.VERTICAL, a, s, n, i, t, !0, !0, void 0, void 0, e),
    this.padding = 15,
    this.step = 50,
    this.max = 600
}
,
canvas.app.hunt.view.ScrollV.prototype = Object.create(canvas.ui.Scroll.prototype),
canvas.app.hunt.view.ScrollV.prototype.set_full_height = function(t) {
    this.full = t
}
,
canvas.app.hunt.view.ScrollV.prototype.set_visible_height = function(t) {
    this.he != t && (this.he = t,
    this.setSize(16, this.he),
    this.max = this.full - this.he,
    t = this.he / this.full,
    this.visible = t < 1,
    this.drag.setSize(0, Math.round((this.he - 32) * t)),
    this.current = this.current)
}
,
canvas.app.hunt.view.TreasureControl = function() {
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "icon_lupa_back")),
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16705718,46,20,"center"),
    this.addChild(this.timeField),
    this.timeField.y = 30,
    canvas.EventManager.dispatchEvent(canvas.app.hunt.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(438)))
    })
}
,
canvas.app.hunt.view.TreasureControl.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.hunt.view.TreasureControl.prototype.update = function() {
    var t = canvas.app.hunt.model;
    this.timeField.text = canvas.Functions.formatDate(1e3 * t.treasureFinishTime - Date.now(), "00:00", 0, !0)
}
,
canvas.app.hunt.view.WinCaptcha = function(t) {
    canvas.app.manor.view.WindowManorBase.call(this, 628, 333, canvas.Translator.getText(431)),
    this.baseLnk = t,
    this.doneButton = new canvas.app.view.MainButton,
    this.addChild(this.doneButton),
    this.doneButton.setSize(150),
    this.doneButton.setTitle(canvas.Translator.getText(435)),
    this.doneButton.x = 35,
    this.descriptionField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7092268,166,224,"left"),
    this.descriptionField.interactive = !1,
    this.descriptionField.position.set(31, 80),
    this.addChild(this.descriptionField),
    this.captcha = new canvas.app.hunt.view.elements.Captcha,
    this.addChild(this.captcha),
    this.captcha.position.set(212, 42),
    this.aLoader = new canvas.utils.URLRequest,
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.aLoader, this.completeHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.aLoader, this.errorHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.doneButton, this.doneClickHandler, this)
}
,
canvas.app.hunt.view.WinCaptcha.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.hunt.view.WinCaptcha.prototype.doneClickHandler = function(t) {
    var e = canvas.app.hunt.model.reqURL + "?mode=farm&action=minigame_check&sequence=" + this.captcha.getResultString();
    this.aLoader.load(e),
    canvas.utils.WindowsManager.instance.closeWindow(this)
}
,
canvas.app.hunt.view.WinCaptcha.prototype.show = function(t) {
    var e = canvas.app.hunt.model;
    this._isActive = !0,
    this.timer && clearInterval(this.timer),
    this.timer = setInterval(this.timerHandler.bind(this), 1e3);
    var a = e.reqURL + "?mode=farm&action=minigame_get";
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerImageLoaded, this);
    e = canvas.ResourceLoader.getTexture("captcha");
    e && (e.destroy(!0),
    canvas.ResourceLoader.remove("captcha")),
    canvas.ResourceLoader.add([["captcha", a, {
        xhrType: canvas.px.ResponseType.BLOB,
        loadType: canvas.px.LoadType.IMAGE
    }]]),
    this.timerHandler(),
    canvas.app.manor.view.WindowManorBase.prototype.show.call(this, t)
}
,
canvas.app.hunt.view.WinCaptcha.prototype.hide = function(t) {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerImageLoaded, this),
    this._isActive = !1,
    this.timer && clearInterval(this.timer),
    this.captcha.clear(),
    this.baseLnk.field_unlock(),
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this, t)
}
,
canvas.app.hunt.view.WinCaptcha.prototype.handlerImageLoaded = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.handlerImageLoaded, this),
    this.initCaptcha()
}
,
canvas.app.hunt.view.WinCaptcha.prototype.initCaptcha = function() {
    var t;
    new Array;
    if (this.images)
        for (var e = 0; e < this.images.length; e++)
            this.images[e].texture.destroy(!0);
    this.images = new Array;
    for (var a = 0; a < canvas.app.hunt.Const.CAPTCHA_HEIGHT; a++)
        for (var s = 0; s < canvas.app.hunt.Const.CAPTCHA_WIDTH; s++)
            t = new canvas.px.Texture(canvas.ResourceLoader.getTexture("captcha"),new canvas.px.Rectangle(s * canvas.app.hunt.Const.CAPTCHA_CELL_SIZE,a * canvas.app.hunt.Const.CAPTCHA_CELL_SIZE,canvas.app.hunt.Const.CAPTCHA_CELL_SIZE,canvas.app.hunt.Const.CAPTCHA_CELL_SIZE)),
            t = new canvas.px.Sprite(t),
            this.images.push(t),
            t.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "captcha_cell")));
    this.captcha.init(this.images, canvas.app.hunt.Const.CAPTCHA_WIDTH, canvas.app.hunt.Const.CAPTCHA_HEIGHT, canvas.app.hunt.Const.CAPTCHA_CELL_SIZE, canvas.app.hunt.Const.CAPTCHA_CELL_SIZE)
}
,
canvas.app.hunt.view.WinCaptcha.prototype.updateTime = function() {
    var t = 0
      , e = canvas.app.hunt.model;
    0 < e.captchaFinishTime && (t = Math.round(.001 * (e.captchaFinishTime - Date.now()))),
    t < 1 ? canvas.utils.WindowsManager.instance.closeWindow(this) : (this.descriptionField.text = canvas.Translator.getText(432) + "<br/><br/>" + canvas.Translator.getText(433) + ": <b>" + t + "</b> " + canvas.Translator.getText(434),
    this.doneButton.y = this.descriptionField.y + this.descriptionField.textHeight + 20)
}
,
canvas.app.hunt.view.WinCaptcha.prototype.timerHandler = function() {
    this.updateTime()
}
,
canvas.app.hunt.view.WinCaptcha.prototype.completeHandler = function() {
    var t = (new DOMParser).parseFromString(this.aLoader.request.responseText, "text/xml");
    t.firstChild.attributes.msg && this.baseLnk.popup.show_message(t.firstChild.attributes.msg.value, 16711680)
}
,
canvas.app.hunt.view.WinCaptcha.prototype.errorHandler = function() {}
,
canvas.app.hunt.view.elements.AwardMsg = function(t, e) {
    canvas.px.Container.call(this),
    this.msg = t,
    this.url = e,
    this.m_awardTf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,16705718,500,20,"center","top",0,0),
    this.m_awardCnt = new canvas.px.Graphics,
    this.m_awardTf.text = "<b>" + t + "</b>",
    this.m_awardTf.y = 2,
    this.m_awardCnt.beginFill(1118481, .6),
    this.m_awardCnt.drawRoundedRect(Math.round(.5 * (this.m_awardTf._width - this.m_awardTf.textWidth)) - 11, 0, this.m_awardTf.textWidth + 20, this.m_awardTf._height - 2, 6),
    this.m_awardCnt.endFill(),
    this.addChild(this.m_awardCnt),
    this.addChild(this.m_awardTf),
    this.interactive = !0,
    this.buttonMode = !0,
    this.click = this.awardClick.bind(this)
}
,
canvas.app.hunt.view.elements.AwardMsg.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.hunt.view.elements.AwardMsg.prototype.awardClick = function() {
    this.url && (canvas.Functions.navigateToURL(this.url, "_blank"),
    canvas.Functions.destroyChildren(this),
    this.click = null)
}
,
canvas.app.hunt.view.elements.BrilliantMsg = function(t, e) {
    canvas.px.Container.call(this),
    this.m_brContainer = new canvas.px.Container,
    this.addChild(this.m_brContainer),
    this.msg = t,
    this.url = e,
    this.m_brilliantTf = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,16705718,400,20,"center"),
    this.m_brilliantTf.interactive = !1,
    this.unlinkBtn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "close_ico")),
    this.m_brilliantTf.text = "<b>" + this.msg + " <img yOffset='6' src='" + canvas.app.location.Const.BRILLIANT_IMAGE_PATH + "'/></b>",
    this.unlinkBtn.position.set(Math.round(.5 * (this.m_brilliantTf._width - this.m_brilliantTf.textWidth)) + this.m_brilliantTf.textWidth + 0, 3),
    this.m_brBg = new canvas.px.Graphics,
    this.m_brBg.beginFill(1118481, .6),
    this.m_brBg.drawRoundedRect(Math.round(.5 * (this.m_brilliantTf._width - this.m_brilliantTf.textWidth)) - 11, 0, this.m_brilliantTf.textWidth + 30, this.m_brilliantTf._height, 6),
    this.m_brBg.endFill(),
    this.m_brContainer.addChildAt(this.m_brBg, 0),
    this.m_brBg.buttonMode = !0,
    this.m_brBg.interactive = !0,
    this.m_brContainer.addChild(this.m_brilliantTf),
    this.m_brContainer.addChild(this.unlinkBtn),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.unlinkBtn, this.onCloseBrillContainer, this),
    this._width = 400,
    this.m_brBg.click = this.brClick.bind(this)
}
,
canvas.app.hunt.view.elements.BrilliantMsg.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.hunt.view.elements.BrilliantMsg.prototype.onCloseBrillContainer = function() {
    canvas.Functions.destroyChildren(this),
    this.m_brBg.click = null,
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.unlinkBtn, this.onCloseBrillContainer, this)
}
,
canvas.app.hunt.view.elements.BrilliantMsg.prototype.brClick = function() {
    this.url && canvas.Functions.navigateToURL(this.url, "_blank")
}
,
canvas.app.hunt.view.elements.Captcha = function() {
    canvas.px.Container.call(this),
    this._dragIndex = -1,
    this.mousedown = this.downHandler.bind(this),
    this.interactive = !0
}
,
canvas.app.hunt.view.elements.Captcha.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.hunt.view.elements.Captcha.prototype.init = function(t, e, a, s, i) {
    var n, o;
    null == e && (e = 3),
    null == a && (e = 2),
    null == s && (s = 10),
    null == i && (i = 10);
    var r = 0;
    for (this.removeChildren(),
    this._images = t,
    this._sizeX = e,
    this._sizeY = a,
    this._w = s,
    this._h = i,
    n = 0; n < this._sizeY; n++)
        for (o = 0; o < this._sizeX; o++)
            null != this._images[r] && (this.addChild(this._images[r]),
            this._images[r].name = r.toString(),
            this._images[r].interactive = !0,
            this._images[r].buttonMode = !0,
            this._images[r].y = n * this._w,
            this._images[r].x = o * this._h),
            r++
}
,
canvas.app.hunt.view.elements.Captcha.prototype.getResultString = function() {
    for (var t = this._images.length, e = "", a = 0; a < t; a++)
        e += ("" == e ? "" : ",") + this._images[a].name;
    return e
}
,
canvas.app.hunt.view.elements.Captcha.prototype.downHandler = function(t) {
    var e = t.target
      , a = this._images.indexOf(t.target);
    null != e && 0 <= a && (t = e.toLocal(new canvas.px.Point(t.data.global.x,t.data.global.y)),
    this._dragIndex = a,
    e.startDrag(t, new canvas.px.Rectangle(0,0,this._w * (this._sizeX - 1),this._h * (this._sizeY - 1))),
    e.interactive = !1,
    this.setChildIndex(e, this.numChildren - 1),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this),
    this.mouseup = this.upHandler.bind(this))
}
,
canvas.app.hunt.view.elements.Captcha.prototype.upHandler = function(t) {
    var e, a = -1;
    null != t && (a = this._images.indexOf(t.target)),
    e = this._images[this._dragIndex],
    0 <= a && a != this._dragIndex && (t = this._images[a],
    this._images[a] = e,
    this._images[this._dragIndex] = t),
    canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_UP, null, this.upHandler, this),
    (this.mouseup = null) != e && (e.interactive = !0,
    e.stopDrag(),
    this._dragIndex = -1),
    this.updateImages()
}
,
canvas.app.hunt.view.elements.Captcha.prototype.updateImages = function() {
    for (var t, e = 0, a = 0; a < this._sizeY; a++)
        for (t = 0; t < this._sizeX; t++)
            null != this._images[e] && this._dragIndex != e && (this._images[e].y = a * this._w,
            this._images[e].x = t * this._h),
            e++
}
,
canvas.app.hunt.view.elements.Captcha.prototype.clear = function() {
    null != this._images && this.upHandler(null),
    this.removeChildren()
}
,
canvas.app.hunt.view.elements.CircleBorder = function(t, e, a, s, i) {
    canvas.px.Graphics.call(this),
    null == t && (t = 20),
    null == e && (e = 4),
    null == a && (a = 16711680),
    null == s && (s = 1),
    null == i && (i = !0),
    i && (this.lineStyle(e, 0, s),
    this.drawCircle(0, 2, t)),
    this.lineStyle(e, a, s),
    this.drawCircle(0, 0, t);
    i = new canvas.px.Graphics;
    i.lineStyle(e, a, s),
    i.drawCircle(0, 0, t),
    this.addChild(i),
    this.gradient = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "gradient_circle")),
    this.addChild(this.gradient),
    this.gradient.width = this.gradient.height = Math.round(2.3 * t),
    this.gradient.position.set(-Math.round(.5 * this.gradient.width), -Math.round(.5 * this.gradient.height)),
    this.gradient.mask = i
}
,
canvas.app.hunt.view.elements.CircleBorder.prototype = Object.create(canvas.px.Graphics.prototype),
canvas.app.hunt.view.elements.MapPers = function() {
    canvas.px.Container.call(this),
    this.bmp_circle = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_map_circle")),
    this.bmp_player = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_map_player")),
    this.bmp_circle.position.set(-Math.floor(this.bmp_circle.width / 2), -Math.floor(this.bmp_circle.height / 2)),
    this.bmp_player.position.set(-Math.floor(this.bmp_player.width / 2), -Math.floor(this.bmp_player.height / 2)),
    this.circle = new canvas.px.Container,
    this.circle.addChild(this.bmp_circle),
    this.addChild(this.circle),
    this.addChild(this.bmp_player),
    canvas.EventManager.addEventListener(canvas.app.hunt.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.hunt.view.elements.MapPers.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.hunt.view.elements.MapPers.prototype.frameHandler = function() {
    this.circle.rotation += 1
}
,
canvas.app.inst.Event = {
    ENTER_FRAME: "Inst.ENTER_FRAME",
    HINT_ADD: "Inst.HINT_ADD",
    HINT_REMOVE: "Inst.HINT_REMOVE",
    UPDATE_USERS: "Inst.UPDATE_USERS"
},
canvas.app.inst.Main = function(t, e) {
    canvas.px.Container.call(this),
    this.model = t,
    this.hintManager = e,
    canvas.EventManager.addEventListener(canvas.app.inst.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.inst.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_UP, null, this.handlerKeyUp, this),
    this.view = new canvas.app.inst.View(this),
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    this.addChild(this.view),
    this.addChild(this.hintContainer),
    this.timer = setTimeout(this.refresh_users.bind(this), this.model.UpdInterval),
    this.request = new canvas.utils.URLRequest,
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.completeHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.errorHandler, this),
    canvas.EventManager.addEventListener(canvas.app.inst.Event.UPDATE_USERS, null, this.update_users, this),
    this.refresh_users()
}
,
canvas.app.inst.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.inst.Main.prototype.handlerKey = function(t) {
    if (!document.activeElement || "HTMLInputElement" != document.activeElement.constructor.name) {
        var e = t.params.globalKeyCode
          , a = (t.params.altKey,
        t.params.ctrlKey,
        t.params.shiftKey);
        switch (e) {
        case canvas.Const.KEYS.L:
            a && canvas.Log.show(canvas.Log.INST);
            break;
        case canvas.Const.KEYS.LEFT_ARROW:
        case canvas.Const.KEYS.UP_ARROW:
        case canvas.Const.KEYS.RIGHT_ARROW:
        case canvas.Const.KEYS.DOWN_ARROW:
            this.model.keyData[e] = !0,
            this.model.keyProcssor || (this.model.keyProcssor = !0,
            canvas.EventManager.addEventListener(canvas.app.inst.Event.ENTER_FRAME, null, this.repeatKeyHandler, this))
        }
    }
}
,
canvas.app.inst.Main.prototype.handlerKeyUp = function(t) {
    if (!document.activeElement || "HTMLInputElement" != document.activeElement.constructor.name) {
        t.params.preventDefault();
        var e = t.params.keyCode;
        t.params.altKey,
        t.params.ctrlKey,
        t.params.shiftKey;
        switch (e) {
        case canvas.Const.KEYS.LEFT_ARROW:
        case canvas.Const.KEYS.UP_ARROW:
        case canvas.Const.KEYS.RIGHT_ARROW:
        case canvas.Const.KEYS.DOWN_ARROW:
            this.model.keyData[e] && delete this.model.keyData[e]
        }
    }
}
,
canvas.app.inst.Main.prototype.resize = function(t, e) {
    t = this.get_ww(t),
    e = this.get_hh(e);
    this.hintManager.init(this.hintContainer, t, e),
    this.model.width = t,
    this.model.height = e,
    this.view.resize(t, e)
}
,
canvas.app.inst.Main.prototype.get_ww = function(t) {
    var e = this.model;
    return t < e.min_stage_width ? (this.x = 0,
    e.min_stage_width) : t > e.max_stage_width ? (this.x = Math.round((t - e.max_stage_width) / 2),
    e.max_stage_width) : (this.x = 0,
    t)
}
,
canvas.app.inst.Main.prototype.get_hh = function(t) {
    var e = this.model;
    return t < e.min_stage_height ? (this.y = 0,
    e.min_stage_height) : t > e.max_stage_height ? (this.y = Math.round((t - e.max_stage_height) / 2),
    e.max_stage_height) : (this.y = 0,
    t)
}
,
canvas.app.inst.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.inst.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.inst.Main.prototype.swfObject = function(t) {
    canvas.app.inst.model;
    if (t)
        for (var e in t)
            e
}
,
canvas.app.inst.Main.prototype.repeatKeyHandler = function() {
    var t, e = 0;
    for (t in this.model.keyData)
        switch (parseInt(t)) {
        case canvas.Const.KEYS.LEFT_ARROW:
            this.view.scroll_H.minusClickHandler(),
            e++;
            break;
        case canvas.Const.KEYS.UP_ARROW:
            this.view.scroll_V.minusClickHandler(),
            e++;
            break;
        case canvas.Const.KEYS.RIGHT_ARROW:
            this.view.scroll_H.plusClickHandler(),
            e++;
            break;
        case canvas.Const.KEYS.DOWN_ARROW:
            this.view.scroll_V.plusClickHandler(),
            e++
        }
    0 == e && (this.model.keyProcssor = !1,
    canvas.EventManager.removeEventListener(canvas.app.inst.Event.ENTER_FRAME, null, this.repeatKeyHandler, this))
}
,
canvas.app.inst.Main.prototype.setPoint = function() {}
,
canvas.app.inst.Main.prototype.refresh_users = function() {
    var t, e = this.model;
    e.locked_user_update || 2500 < (t = Date.now()) - e.last_user_update && (clearTimeout(this.timer),
    e.last_user_update = t,
    e.locked_user_update = !0,
    this.request.load(e.UpdLink + e.UpdAmp + "inst_id=" + e.ActiveIns))
}
,
canvas.app.inst.Main.prototype.completeHandler = function() {
    var t = this.model;
    t.USERS = t.parse_users((new DOMParser).parseFromString(this.request.request.responseText, "text/xml")),
    t.ActiveLocationChanged && (t.ActiveLocationChanged = !1,
    this.view.map.refresh_pers_flag()),
    this.update_users(),
    this.errorHandler()
}
,
canvas.app.inst.Main.prototype.errorHandler = function() {
    this.model.locked_user_update = !1,
    this.timer = setTimeout(this.refresh_users.bind(this), this.model.UpdInterval)
}
,
canvas.app.inst.Main.prototype.update_users = function() {
    var t = this.model;
    if (t.USERS) {
        var e, a, s;
        for (e in t.AREA.locations)
            null != (a = t.AREA.locations[e]).players_object && (null != t.USERS[e] ? 0 < t.USERS[e].length ? (this.view.map.add_inner_object(a.players_object),
            a.players_object.pl_list = t.USERS[e],
            a.players_object.pl_update_mark(),
            null != (s = this.usersHasFlag(t.USERS[e])) ? a.players_object.showFlag(1 < t.USERS[e].length, !1, s) : a.players_object.showFlag(!1, !0)) : (this.remove_player_object(a.players_object),
            a.players_object.pl_list = null) : this.remove_player_object(a.players_object))
    }
}
,
canvas.app.inst.Main.prototype.usersHasFlag = function(t) {
    if (t.length < 1)
        return null;
    for (var e, a = t.length, s = 0; s < a; s++)
        if ((e = t[s]).hasFlag)
            return e;
    return null
}
,
canvas.app.inst.Main.prototype.remove_player_object = function(t) {
    null != t && null != t.parent && t.parent.removeChild(t)
}
,
canvas.app.inst.Main.prototype.changeInst = function(t) {
    var e = this.model;
    e.ActiveIns = parseInt(t[2]);
    t = e.INS_LIST[e.ActiveIns];
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.instLoaded, this),
    canvas.ResourceLoader.add([["map" + t.id, e.LOCALE + "/ins_" + t.id + ".xml"]])
}
,
canvas.app.inst.Main.prototype.instLoaded = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.instLoaded, this),
    this.model.init(),
    this.view.recreate()
}
,
canvas.app.inst.Model = function(t) {
    this.ListLink = null == t.ListLink ? "ins_list.xml" : t.ListLink,
    this.ResPath = null == t.ResPath ? "ins_res/" : t.ResPath,
    this.UpdLink = null == t.UpdLink ? "users.xml" : t.UpdLink,
    this.IsBold = !0,
    this.UpdAmp = -1 == this.UpdLink.search(/\?/) ? "?" : "&",
    this.UpdInterval = null == t.UpdInterval ? 3e3 : 1e3 * parseInt(t.UpdInterval),
    this.UpdInterval < 3e3 && (this.UpdInterval = 3e3),
    this.ActiveIns = t.ActiveIns,
    this.race = null == t.user_kind ? 1 : parseInt(t.user_kind),
    this.level = null == t.user_level ? 1 : parseInt(t.user_level),
    this.min_stage_width = 199,
    this.min_stage_height = 483,
    this.max_stage_width_c = 54,
    this.max_stage_height_c = 44,
    this.ww = 3,
    this.hh = 3,
    this.map_width = 900,
    this.map_height = 900,
    this.ls_ww = 0,
    this.ls_hh = 0,
    this.isModule = !1,
    this.keyData = {},
    this.locked_user_update = !1,
    this.last_user_update = 0,
    this.ActiveLocationChanged = !0
}
,
canvas.app.inst.Model.prototype.initConfig = function() {
    var t = this;
    t.INS_LIST = {},
    t.INS_LIST_AR = [],
    t.INS_LIST_RT = {};
    for (var e, a = canvas.ResourceLoader.get("config").data, s = a.getElementsByTagName("item"), i = s.length, n = 0; n < i; n++) {
        var o = s[n].attributes;
        null != o.id && null != o.root_id && (null == o.race || t.race == parseInt(o.race.value)) && (null == o.minLevel || t.level >= parseInt(o.minLevel.value)) && (null == o.maxLevel || t.level <= parseInt(o.maxLevel.value)) && (t.INS_LIST[o.root_id.value] = {},
        (e = t.INS_LIST[o.root_id.value]).id = o.id.value,
        e.root_id = o.root_id.value,
        e.title = s[n].childNodes[0].nodeValue,
        e.race = null == o.race ? -1 : parseInt(o.race.value),
        e.minLevel = null == o.minLevel ? -1 : parseInt(o.minLevel.value),
        e.maxLevel = null == o.maxLevel ? -1 : parseInt(o.maxLevel.value),
        t.INS_LIST_RT[e.root_id] = e.id,
        t.INS_LIST_AR.push([e.id, e.title, e.root_id, null != o.hidden && "1" == o.hidden.value, e.race, e.minLevel, e.maxLevel]))
    }
    a = a.getElementsByTagName("lnk");
    0 < a.length && null != a[0].attributes.link_xml && (t.LOCALE = a[0].attributes.link_xml.value),
    null != t.ActiveIns && "0" != t.ActiveIns || null != t.INS_LIST_AR[0] && (t.ActiveIns = t.INS_LIST_AR[0][2])
}
,
canvas.app.inst.Model.prototype.init = function() {
    var t = this
      , e = t.INS_LIST[t.ActiveIns]
      , a = canvas.ResourceLoader.get("map" + e.id).data;
    t.AREA = null,
    t.W_BOTS = {};
    e = a.getElementsByTagName("ins")[0].attributes;
    null != e.width && (t.ww = parseInt(e.width.value),
    t.map_width = 300 * t.ww,
    t.max_stage_width = t.max_stage_width_c + t.map_width),
    null != e.height && (t.hh = parseInt(e.height.value),
    t.map_height = 300 * t.hh,
    t.max_stage_height = t.max_stage_height_c + t.map_height),
    t.AREA = {
        locations: {},
        objects: [],
        locationClones: {}
    },
    t.AREAS = [],
    t.FlagArea = 1,
    t.focusedAreaId = 1,
    t.AREAS[t.FlagArea] = t.AREA,
    t.AREAS[t.focusedAreaId] = t.AREA;
    var s = t.AREA;
    s.id = t.ActiveIns,
    s.src = "ins_" + t.INS_LIST_RT[t.ActiveIns],
    s.rect_x1 = 0,
    s.rect_y1 = 0,
    s.rect_x2 = 0,
    s.rect_y2 = 0;
    for (var i, n, o, r, c, p = a.getElementsByTagName("location"), h = p.length, l = 0; l < h; l++) {
        var d, v, u = p[l].attributes;
        if (null != u.id && null != u.inner_flag_pos && 2 == (i = u.inner_flag_pos.value.split(",")).length) {
            if (s.locations[u.id.value] = {},
            (n = s.locations[u.id.value]).id = u.id.value,
            n.flag_pos_x = parseInt(i[0]),
            n.flag_pos_y = parseInt(i[1]),
            null != u.clones)
                for (var m in o = u.clones.value.split(","))
                    s.locationClones[o[m]] = u.id.value;
            for (r = p[l].childNodes,
            c = 0; c < r.length; c++)
                "object" == (v = r[c].nodeName) ? this.parse_object(s, r[c], "global", n.id) : "title" == v ? n.title = r[c].childNodes[0].nodeValue : "players" == v && (null != r[c].attributes.inner_pos ? (d = r[c].attributes.inner_pos.value.split(","),
                n.players_x = parseInt(d[0]),
                n.players_y = parseInt(d[1])) : (n.players_x = 100 + Math.floor(100 * Math.random()),
                n.players_y = 100 + Math.floor(100 * Math.random())))
        }
    }
    for (h = (p = a.getElementsByTagName("w_bot")).length,
    l = 0; l < h; l++) {
        var _ = p[l].attributes;
        if (null != _.w_id)
            for (t.W_BOTS[_.w_id.value] = [],
            r = p[l].childNodes,
            c = 0; c < r.length; c++)
                "nm" == (v = r[c].nodeName) && t.W_BOTS[_.w_id.value].push(r[c].childNodes[0].nodeValue)
    }
    0 < (p = a.getElementsByTagName("title")).length && (s.title = p[0].childNodes[0].nodeValue),
    0 < (p = a.getElementsByTagName("exit")).length && (s.exit_title = p[0].childNodes[0].nodeValue),
    0 < (p = a.getElementsByTagName("enter")).length && (s.enter_title = p[0].childNodes[0].nodeValue),
    null == s.title && (s.title = "БЕЗ НАЗВАНИЯ")
}
,
canvas.app.inst.Model.prototype.parse_object = function(t, e, a, s) {
    var i = e.attributes;
    if (null != i.id && null != i.inner_pos) {
        var n = i.inner_pos.value.split(",");
        if (2 == n.length) {
            var o = t.objects.push({})
              , r = t.objects[o - 1];
            r.id = i.id.value,
            r.xx = parseInt(n[0]),
            r.yy = parseInt(n[1]),
            r.type = a,
            r.location_id = s,
            r.items = [];
            for (var c = e.childNodes, p = 0; p < c.length; p++)
                switch (c[p].nodeName) {
                case "title":
                    r.title = c[p].childNodes[0].nodeValue;
                    break;
                case "text":
                    r.text = c[p].childNodes[0].nodeValue;
                    break;
                case "item":
                    r.items.push(c[p].childNodes[0].nodeValue);
                    break;
                case "linkage":
                    var h = c[p].attributes;
                    null != h.locations && (r.linkage_locations = h.locations.value.split(",")),
                    r.linkage_location_id = h.location_id.value
                }
        }
    }
}
,
canvas.app.inst.Model.prototype.parse_users = function(t) {
    for (var e, a, s, i, n, o, r, c = this, p = {}, h = t.getElementsByTagName("users")[0].childNodes, l = 0; l < h.length; l++)
        if ("my_loc" == h[l].nodeName)
            null != h[l].attributes.id && (s = h[l].attributes.id.value,
            null != c.AREA.locationClones[s] && (s = c.AREA.locationClones[s]),
            n = !0,
            c.ActiveLocation != s && (c.ActiveLocationChanged = !0,
            c.ActiveLocation = s)),
            null != h[l].attributes.root_id && (i = h[l].attributes.root_id.value,
            o = !0);
        else if ("loc" == h[l].nodeName && null != h[l].attributes.id)
            for (s = h[l].attributes.id.value,
            null != c.AREA.locationClones[s] && (s = c.AREA.locationClones[s]),
            p[s] = [],
            a = h[l].childNodes,
            e = 0; e < a.length; e++)
                "user" == a[e].nodeName && ((r = {}).nick = a[e].childNodes[0].nodeValue,
                r.hasFlag = null != a[e].attributes.is_flag && "1" == a[e].attributes.is_flag.value,
                p[s].push(r));
    return n || null != c.ActiveLocation && (c.ActiveLocationChanged = !0,
    c.ActiveLocation = null),
    c.ActiveInstRootId = o ? i : null,
    p
}
,
canvas.app.inst.View = function(t) {
    canvas.px.Container.call(this);
    var e = canvas.app.inst.model;
    this.main = t,
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.container.interactive = !0,
    this.map_cont = new canvas.px.Container,
    this.map_cont.position.set(19, 14),
    this.container.addChild(this.map_cont),
    this.map_cont.interactive = !0,
    this.map = new canvas.app.world.view.MapWorldParts(this,e.map_width,e.map_height,1,e.ResPath + "ins_" + e.INS_LIST_RT[e.ActiveIns] + "/map/ins_",!0),
    this.map_state = new canvas.app.world.engine.MapStateObject(this),
    this.map_state.focus_map(this.map, 1),
    this.msk = new canvas.px.Mask(100,100),
    this.msk.position.set(19, 14),
    this.addChild(this.msk),
    this.map_cont.mask = this.msk,
    this.scroll_V = new canvas.app.world.view.ScrollV(this.map_state,this.container),
    this.addChild(this.scroll_V),
    this.scroll_H = new canvas.app.world.view.ScrollH(this.map_state,this.map_cont),
    this.addChild(this.scroll_H),
    this.scroll_null = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_scroll_null")),
    this.addChild(this.scroll_null),
    this.borders = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"),100,142,100,142),
    this.addChild(this.borders),
    this.stat = new canvas.app.inst.view.StatView(this),
    this.addChild(this.stat),
    this.stat.x = 33,
    this.combo = new canvas.app.inst.view.combo.Combo,
    this.addChild(this.combo),
    this.set_labels(),
    this.init_combo(),
    this.map.focus_on_active_area(),
    this.firstResize = !0,
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll_H, this.scrollHandlerH, this),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll_V, this.scrollHandlerV, this),
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.combo, this.comboSelectHandler, this)
}
,
canvas.app.inst.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.inst.View.prototype.recreate = function() {
    var t = canvas.app.inst.model;
    this.map.destroy({
        children: !0
    }),
    this.map = new canvas.app.world.view.MapWorldParts(this,t.map_width,t.map_height,1,t.ResPath + "ins_" + t.INS_LIST_RT[t.ActiveIns] + "/map/ins_",!0),
    this.map_state.focus_map(this.map, 1),
    this.map.focus_on_active_area(),
    this.resize(!0),
    this.refresh_scrollers()
}
,
canvas.app.inst.View.prototype.resize = function(t) {
    null == t && (t = !1);
    var e = canvas.app.inst.model
      , a = e.width
      , s = e.height;
    this.borders.width = a,
    this.borders.height = s;
    var i = !1;
    e.ls_ww == a && !t || (e.ls_ww = a,
    i = !0,
    this.scroll_V.position.set(a - 35, 14),
    this.scroll_H.setSize(a - 37, 16),
    this.map_state.set_visible_width(a - 53),
    this.combo.x = a - 207,
    this.msk.setSize(this.map_state.map_visible_width),
    this.scroll_H.refresh(),
    this.scroll_null.x = a - 35,
    this.label2.pos(a),
    this.refresh_scrollers()),
    e.ls_hh == s && !t || (e.ls_hh = s,
    this.stat.y = s - 99,
    i = !0,
    this.scroll_H.position.set(18, s - 30),
    this.scroll_V.setSize(16, s - 28),
    this.map_state.set_visible_height(s - 28),
    this.combo.y = s - 54,
    this.msk.setSize(-1, this.map_state.map_visible_height),
    this.scroll_V.refresh(),
    this.scroll_null.y = s - 30,
    this.refresh_scrollers()),
    i && this.map_state.map_check()
}
,
canvas.app.inst.View.prototype.set_labels = function() {
    var t = canvas.app.inst.model;
    this.label1 = new canvas.app.inst.view.TopTextLeft,
    this.label1.position.set(28, 21),
    this.addChild(this.label1);
    var e = "unknown"
      , a = "unknown"
      , s = t.AREA;
    null != s && (e = s.title,
    null != s.locations[t.ActiveLocation] && (a = s.locations[t.ActiveLocation].title)),
    this.label1.set_line0(canvas.Translator.getText(207) + ":", e, a),
    this.label2 = new canvas.app.inst.view.TopTextRight,
    this.label2.position.set(400, 21),
    this.addChild(this.label2)
}
,
canvas.app.inst.View.prototype.init_combo = function() {
    for (var t = canvas.app.inst.model, e = [], a = 0, s = 0; s < t.INS_LIST_AR.length; s++)
        parseInt(t.INS_LIST_AR[s][2]) == t.ActiveIns && (a = s),
        t.INS_LIST_AR[s][3] || e.push(t.INS_LIST_AR[s]);
    this.combo.init(e),
    this.combo.selectedIndex = a
}
,
canvas.app.inst.View.prototype.testUpdate = function() {}
,
canvas.app.inst.View.prototype.refresh_scrollers = function() {
    this.scroll_H.refresh(),
    this.scroll_V.refresh(),
    this.scrollHandlerH(),
    this.scrollHandlerV()
}
,
canvas.app.inst.View.prototype.scrollHandlerH = function() {
    this.scroll_H.isDisabled() ? this.map_state.delta_map_x(0) : this.map_state.delta_map_x(this.scroll_H.current)
}
,
canvas.app.inst.View.prototype.scrollHandlerV = function() {
    this.scroll_V.isDisabled() ? this.map_state.delta_map_y(0) : this.map_state.delta_map_y(this.scroll_V.current)
}
,
canvas.app.inst.View.prototype.comboSelectHandler = function(t) {
    this.main.changeInst(t.params)
}
,
canvas.app.inst.view.StatView = function(t) {
    canvas.px.Container.call(this),
    this.baseLnk = t,
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "png_stat_bg"))),
    this.interactive = !0,
    this.btn_refresh = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "refresh")),
    this.addChild(this.btn_refresh),
    this.btn_refresh.position.set(17, 6),
    this.btn_info = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "list_icon")),
    this.addChild(this.btn_info),
    this.btn_info.position.set(54, 6),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_info, this.infoClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.btn_refresh, this.refreshClickHandler, this)
}
,
canvas.app.inst.view.StatView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.inst.view.StatView.prototype.infoClickHandler = function() {
    var t = canvas.app.inst.model;
    null != t.ActiveInstRootId && canvas.Functions.navigateToURL("instance_stat.php?instance_id=" + t.ActiveInstRootId, "_blank")
}
,
canvas.app.inst.view.StatView.prototype.refreshClickHandler = function() {
    this.baseLnk.main.refresh_users()
}
,
canvas.app.inst.view.TopTextLeft = function() {
    canvas.app.world.view.TopTextLeft.call(this)
}
,
canvas.app.inst.view.TopTextLeft.prototype = Object.create(canvas.app.world.view.TopTextLeft.prototype),
canvas.app.inst.view.TopTextLeft.prototype.set_line0 = function(t, e, a) {
    var s = canvas.app.inst.model;
    this.line0 = t + " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + e + "</font>",
    null == a && ((e = s.AREA).title,
    null != e.locations[s.ActiveLocation] && (a = e.locations[s.ActiveLocation].title)),
    null != a && (this.line0 += " <img src='red_point' yOffset='1' atlas='world'/> <font color='#0xFFC600'>" + a + "</font>"),
    this.update()
}
,
canvas.app.inst.view.TopTextLeft.prototype.set_line1 = function(t, e, a) {
    this.set_line0(canvas.Translator.getText(207), e, a)
}
,
canvas.app.inst.view.TopTextLeft.prototype.update = function() {
    this.field.text = this.line0 + "<br/>" + this.line2,
    this.redraw_bg(),
    "" != this.field.text && (this.addChild(this.field),
    this.visible = !0)
}
,
canvas.app.inst.view.TopTextRight = function() {
    canvas.app.world.view.TopTextRight.call(this)
}
,
canvas.app.inst.view.TopTextRight.prototype = Object.create(canvas.app.world.view.TopTextRight.prototype),
canvas.app.inst.view.TopTextRight.prototype.set_data = function(t, e, a, s, i, n, o) {
    this.sender = null;
    var r = canvas.app.world.model;
    if (null != e && null == a && (a = [e],
    e = ""),
    null == s && (s = ""),
    null == i && (i = ""),
    null == n && (n = !0),
    null != a && 0 == a.length && (a = null),
    null == o && (o = ""),
    this.deactivate(),
    this.line0 = t || "",
    this.line1 = e ? "     <font color='#" + (a ? "FFC600" : "FFE1A2") + "'>" + e + "</font>" : "",
    this.line2 = "",
    a)
        for (var c = 0; c < a.length; c++)
            this.line2 += (0 == c ? "" : "<br/>") + "<img src='red_point' yOffset='1' atlas='world'/> <font color='#FFC600'>" + a[c] + "</font>";
    if ("" != o) {
        "" != this.line2 && (this.line2 += "<br/>"),
        this.line2 += "<font color='#FFE1A2'>" + canvas.Translator.getText(100) + "</font><br/>";
        for (c = 0; c < o.length; c++)
            this.line2 += (0 == c ? "" : "<br/>") + "<img src='red_point' yOffset='1' atlas='world'/> <font color='#FFC600'>" + o[c] + "</font>"
    }
    this.lineBottom = s ? "   <font color='#FFC600'>" + s + "</font>" : "",
    this.update(),
    n ? (this.frontsContent.showHeader = !0,
    this.frontsContent.y = this.field.textHeight + 5) : (this.frontsContent.showHeader = !1,
    this.frontsContent.y = -10),
    null != r.frontsData && (this.frontsContent.fdata = r.frontsData[i]),
    null != this.frontsContent.fdata ? this.addChild(this.frontsContent) : this.contains(this.frontsContent) && this.removeChild(this.frontsContent),
    this.frontsContent.parent && (this.x = this.ww - Math.max(this.frontsContent.width, this.field.textWidth) - 52,
    this.visible = !0),
    this.redraw_bg()
}
,
canvas.app.inst.view.combo.Combo = function() {
    var t = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "combo_header"),[4, 0, 18, 0])
      , e = new canvas.app.inst.view.combo.ComboHeaderRenderer
      , a = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "combo_list_back"),2,4,2,4);
    canvas.ui.ComboBox.call(this, t, e, a, canvas.app.inst.view.combo.ComboListRenderer, canvas.ui.ComboBoxType.UP, i);
    var s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v2_up"))
      , t = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v2_down"))
      , e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "png_scroll_v2_drag"),[0, 3, 0, 3])
      , a = new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "png_scroll_bg2"))
      , i = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,s,t,a,e,this.list.container,!0,!0);
    i.padding = 15,
    i.step = 50,
    i.setSize(16),
    this.list.scroll = i,
    this.setSize(164, 440),
    this.list.paddingV = 0,
    this.list.paddingH = -6
}
,
canvas.app.inst.view.combo.Combo.prototype = Object.create(canvas.ui.ComboBox.prototype),
canvas.app.inst.view.combo.ComboHeaderRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, t),
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,10551296,100,16,"left",void 0,void 0,void 0,!0),
    this.addChild(this.title),
    this.title.position.set(4, 1),
    this.interactive = !1,
    this.msk = new canvas.px.Mask(100,20),
    this.addChild(this.msk),
    this.mask = this.msk
}
,
canvas.app.inst.view.combo.ComboHeaderRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.inst.view.combo.ComboHeaderRenderer.prototype.update = function() {
    this.title && (this.title.text = this.data ? this.data[1] : "",
    this.title.setSize(this._width),
    this.msk.setSize(this._width - 20))
}
,
canvas.app.inst.view.combo.ComboListRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, t),
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,7686706,100,14,"left",void 0,void 0,void 0,!0),
    this.addChild(this.title),
    this.title.position.set(4, 1),
    this._height = 14,
    this.selector = new canvas.px.Mask(100,20,10551296,1),
    this.buttonMode = !0
}
,
canvas.app.inst.view.combo.ComboListRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.inst.view.combo.ComboListRenderer.prototype.update = function() {
    this.selector && this.selector.setSize(this._width, 16),
    this.title && (this.title.text = this.data ? this.data[1] : "",
    this.title.setSize(this._width - 10))
}
,
canvas.app.inst.view.combo.ComboListRenderer.prototype.overHandler = function() {
    this.addChildAt(this.selector, 0),
    this.title.color = 16775626
}
,
canvas.app.inst.view.combo.ComboListRenderer.prototype.outHandler = function() {
    this.selector.parent && this.removeChild(this.selector),
    this.title.color = 7686706
}
,
canvas.app.user.Const = {
    TOP: 0,
    LEFT: 0
},
canvas.app.user.Event = {
    ENTER_FRAME: "User.ENTER_FRAME",
    HINT_ADD: "User.HINT_ADD",
    HINT_REMOVE: "User.HINT_REMOVE",
    REMOVE_EFFECT: "User.REMOVE_EFFECT",
    SHOW_EFFECT: "User.SHOW_EFFECT",
    HIDE_EFFECT: "User.HIDE_EFFECT",
    HIDE_ALL_EFFECTS: "User.HIDE_ALL_EFFECTS",
    SHOW_ALL_EFFECTS: "User.SHOW_ALL_EFFECTS",
    ZOOM_IN: "User.ZOOM_IN",
    ZOOM_OUT: "User.ZOOM_OUT"
},
canvas.app.user.Main = function(t, e, a) {
    canvas.px.Container.call(this),
    this.model = t,
    this.hintManager = e,
    this.windowsManager = a,
    canvas.EventManager.addEventListener(canvas.app.user.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.user.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_UP, null, this.handlerKeyUp, this),
    this.view = new canvas.app.user.View(this),
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    this.addChild(this.view),
    this.addChild(this.hintContainer),
    this.windowsContainer = new canvas.px.Container,
    this.addChild(this.windowsContainer),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.effectsButton.button, this.effectsButtonClickHandler, this),
    canvas.EventManager.addEventListener(canvas.app.user.Event.REMOVE_EFFECT, null, this.removeEffectHandler, this),
    canvas.EventManager.addEventListener(canvas.app.user.Event.SHOW_EFFECT, null, this.showEffectHandler, this),
    canvas.EventManager.addEventListener(canvas.app.user.Event.HIDE_EFFECT, null, this.hideEffectHandler, this),
    canvas.EventManager.addEventListener(canvas.app.user.Event.HIDE_ALL_EFFECTS, null, this.hideAllEffectsHandler, this),
    canvas.EventManager.addEventListener(canvas.app.user.Event.SHOW_ALL_EFFECTS, null, this.showAllEffectsHandler, this),
    setInterval(this.timerHandler.bind(this), 500),
    this.request = new canvas.utils.URLRequest,
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this),
    canvas.EventManager.addEventListener(canvas.app.user.Event.ZOOM_IN, null, this.zoomInHandler, this),
    canvas.EventManager.addEventListener(canvas.app.user.Event.ZOOM_OUT, null, this.zoomOutHandler, this)
}
,
canvas.app.user.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.user.Main.prototype.handlerKey = function(t) {
    var e;
    document.activeElement && "HTMLInputElement" == document.activeElement.constructor.name || (e = t.params.globalKeyCode,
    t.params.altKey,
    t.params.ctrlKey,
    t = t.params.shiftKey,
    e === canvas.Const.KEYS.L && t && canvas.Log.show(canvas.Log.USER))
}
,
canvas.app.user.Main.prototype.handlerKeyUp = function(t) {
    document.activeElement && "HTMLInputElement" == document.activeElement.constructor.name || (t.params.preventDefault(),
    t.params.keyCode,
    t.params.altKey,
    t.params.ctrlKey,
    t.params.shiftKey)
}
,
canvas.app.user.Main.prototype.resize = function(t, e) {
    this.windowsManager.init(this.windowsContainer, t, e, this.view),
    this.hintManager.init(this.hintContainer, t, e)
}
,
canvas.app.user.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.user.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.user.Main.prototype.swfObject = function(t) {
    var e, a, s = canvas.app.user.model;
    if (t)
        for (e in t)
            "user|view" === e && (a = t["user|view"],
            s.init(a),
            this.view.update())
}
,
canvas.app.user.Main.prototype.timerHandler = function() {
    var t = canvas.app.user.model;
    this.view.effectsWindow.parent && (this.view.effectsWindow.updateTime(),
    0 == t.effects.length && this.view.hideEffects()),
    (1 <= this.view.bars.hp.progress || 0 == t.myHPt) && (1 <= this.view.bars.mp.progress || 0 == t.myMPt) || (t.calcHpMp(),
    this.view.bars.update())
}
,
canvas.app.user.Main.prototype.effectsButtonClickHandler = function() {
    var t = canvas.app.user.model;
    "1" == t.canputoff ? this.view.effectsWindowShowHide(null != this.view.effectsWindow.parent) : showEffectInfo(t.nick)
}
,
canvas.app.user.Main.prototype.removeEffectHandler = function(t) {
    this.view.confirmWindow.init(canvas.Translator.getText(803) + " <b>" + t.params.title + "</b> ?", {
        func: this.removeEffect.bind(this),
        params: [t.params]
    }),
    this.windowsManager.openWindow(this.view.confirmWindow)
}
,
canvas.app.user.Main.prototype.showEffectHandler = function(t) {
    var e = canvas.app.user.model;
    e.effectInRequest = t.params,
    this.request.name = canvas.app.user.Event.SHOW_EFFECT,
    this.request.load(e.effectShowUrl + "&artifact_id=" + t.params.id + "&json_mode_on=1")
}
,
canvas.app.user.Main.prototype.hideEffectHandler = function(t) {
    var e = canvas.app.user.model;
    e.effectInRequest = t.params,
    this.request.name = canvas.app.user.Event.HIDE_EFFECT,
    this.request.load(e.effectHideUrl + "&artifact_id=" + t.params.id + "&json_mode_on=1")
}
,
canvas.app.user.Main.prototype.hideAllEffectsHandler = function(t) {
    var e = canvas.app.user.model;
    e.effectInRequest = t.params,
    this.request.name = canvas.app.user.Event.HIDE_ALL_EFFECTS,
    this.request.load(e.effectHideUrl + "&artifact_id=&json_mode_on=1")
}
,
canvas.app.user.Main.prototype.showAllEffectsHandler = function(t) {
    var e = canvas.app.user.model;
    e.effectInRequest = t.params,
    this.request.name = canvas.app.user.Event.SHOW_ALL_EFFECTS,
    this.request.load(e.effectShowUrl + "&artifact_id=&json_mode_on=1")
}
,
canvas.app.user.Main.prototype.removeEffect = function(t) {
    var e = canvas.app.user.model;
    e.effectInRequest = t,
    this.request.name = canvas.app.user.Event.REMOVE_EFFECT,
    this.request.load(e.effectRemoveUrl + "&artifact_id=" + t.id + "&json_mode_on=1")
}
,
canvas.app.user.Main.prototype.requestCompleteHandler = function() {
    var t = canvas.app.user.model
      , e = JSON.parse(this.request.request.responseText);
    "100" == e["common|action"].status && this.request.name === canvas.app.user.Event.REMOVE_EFFECT && (t.removeEffect(t.effectInRequest),
    this.view.effectsWindow.update(),
    0 == t.effects.length && this.view.hideEffects()),
    e["user|view"] && "100" == e["user|view"].status && (t.effect = e["user|view"].effect_list,
    t.parseEffects(),
    this.view.effectsWindow.update()),
    this.request.name = ""
}
,
canvas.app.user.Main.prototype.requestErrorHandler = function() {}
,
canvas.app.user.Main.prototype.zoomInHandler = function() {
    var t = canvas.app.user.model;
    this.view.persContainer.scale.x < t.PERS_MAX_SCALE && (this.view.persContainer.scale.x += t.PERS_SCALE_STEP,
    this.view.persContainer.scale.y = this.view.persContainer.scale.x,
    this.view.updatePersPos(),
    t.localStorage.set("playerSize", this.view.persContainer.scale.x))
}
,
canvas.app.user.Main.prototype.zoomOutHandler = function() {
    var t = canvas.app.user.model;
    this.view.persContainer.scale.x > t.PERS_MIN_SCALE && (this.view.persContainer.scale.x -= t.PERS_SCALE_STEP,
    this.view.persContainer.scale.y = this.view.persContainer.scale.x,
    this.view.updatePersPos(),
    t.localStorage.set("playerSize", this.view.persContainer.scale.x))
}
,
canvas.app.user.Model = function(t) {
    this.UPDATE_FLAG_PERS = "pers",
    this.UPDATE_FLAG_TROPHY = "trophy",
    this.UPDATE_FLAG_ARTS = "arts",
    this.UPDATE_FLAG_PET = "pet",
    this.ALL_UPDATE_FLAGS = [this.UPDATE_FLAG_PERS, this.UPDATE_FLAG_TROPHY, this.UPDATE_FLAG_ARTS, this.UPDATE_FLAG_PET],
    this.PERS_MIN_SCALE = .7,
    this.PERS_MAX_SCALE = 1,
    this.PERS_SCALE_STEP = .05,
    this.PLAYER_MC_X = 74,
    this.PLAYER_MC_Y = 104,
    this.SLOTS_COUNT = 26,
    this.def_myFirst1 = [],
    this.def_myFirst2 = [],
    this.last_dat = "",
    this.timeoutID = 0,
    this.alt = "",
    this.delete_art = "",
    this.mySk = "1",
    this.trophySk = "1",
    this.myGender = "M",
    this.trophyGender = "M",
    this.trophyName = "",
    this.trophyLevel = 0,
    this.trophyClan = "",
    this.trophyRank = "",
    this.myHP = 100,
    this.myHPmax = 200,
    this.myHPdlt = 0,
    this.myMP = 10,
    this.myMPmax = 10,
    this.myMPdlt = 0,
    this.myHPt = 0,
    this.myMPt = 0,
    this.myLevel = 1,
    this.myTown = "Town",
    this.myLocation = "Location",
    this.myTitle = "Title",
    this.bott_mc_Y = 0,
    this.townSrc = "",
    this.swf_name = "userinfo",
    this.parts = "65551;;;,0;;;,0;;;,0;;;,0;;;,603;;;,65537;;;,0;;;,8;;;body_gold.swf,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,65537;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;",
    this.trophy_parts = "",
    this.trophy_name = "",
    this.locale = "ru",
    this.fightId = "",
    this.effect = "",
    this.mount = "",
    this.mountLnk = "",
    this.trophy_mount = "",
    this.dh = "",
    this.bg = "",
    this.arts = "::::0:,52635583:cuir08.gif:::0::1:1,::::0:,::::0:,52635582:cuir4.gif:::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:,::::0:",
    this.canputoff = "1",
    this.pet_picture = "",
    this.pet_name = "",
    this.pet_level = "",
    this.pet_color = "",
    this.pet_id = "",
    this.show_button_switch_view = "",
    this.ghost = "",
    this.nobold = "",
    this.farming = "0",
    this.punished = "",
    this.punish_cnt = 0,
    this.nick = "Герой",
    this.take_off = "",
    this.take_off_chant = "",
    this.backImage = "",
    this.showLocation = !1,
    this.arkatCount = 2,
    this.updateFlags = new Object,
    this.updateHash = new Object,
    this.init(t),
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.USER)
}
,
canvas.app.user.Model.prototype.init = function(t) {
    for (var e in t)
        this.ok(this[e]) && (this[e] = t[e]);
    this.ok(t.showlocation) && (this.showLocation = "1" == t.showlocation),
    "1" != this.nobold && (this.nobold = ""),
    this.ok(t.sk) && (this.mySk = t.sk),
    this.ok(t.take_off) && (this.take_off = t.take_off),
    this.ok(t.take_off_chant) && (this.take_off_chant = t.take_off_chant),
    this.ok(t.gender) && (this.myGender = this.parseGender(t.gender)),
    this.ok(t.trophy_gender) && (this.trophyGender = this.parseGender(t.trophy_gender)),
    this.ok(t.trophy_level) && (this.trophyLevel = "" == t.trophy_level ? 0 : parseInt(t.trophy_level)),
    this.ok(t.trophy_rank) && (this.trophyRank = t.trophy_rank),
    this.ok(t.trophy_clan) && (this.trophyClan = t.trophy_clan),
    this.ok(t.arts) && (this.arts = t.arts),
    this.ok(t.parts) && (this.parts = t.parts),
    this.ok(t.trophy_parts) && (this.trophy_parts = t.trophy_parts),
    this.ok(t.trophy_name) && (this.trophy_name = t.trophy_name),
    canvas.app.user.log("parts = " + t.parts),
    this.ok(t.hp) && this.ok(t.hpMax) && this.ok(t.hpT) && (this.myHP = parseInt(t.hp),
    this.myHPmax = parseInt(t.hpMax),
    this.myHPt = parseInt(t.hpT),
    this.myHPdlt = this.myHPmax - this.myHP,
    this.startTimeHP = Date.now(),
    this.finTimeHP = this.startTimeHP + this.myHPt,
    this.curHP = this.myHP),
    this.ok(t.mp) && this.ok(t.mpMax) && this.ok(t.mpT) && (this.myMP = parseInt(t.mp),
    this.myMPmax = parseInt(t.mpMax),
    this.myMPdlt = this.myMPmax - this.myMP,
    this.myMPt = parseInt(t.mpT),
    this.startTimeMP = Date.now(),
    this.finTimeMP = this.startTimeMP + this.myMPt,
    this.curMP = this.myMP),
    this.ok(t.lvl) && (this.myLevel = parseInt(t.lvl)),
    this.ok(t.tTown) && (this.myTown = t.tTown),
    this.ok(t.tLocation) && (this.myLocation = t.tLocation),
    this.ok(t.tTitle) && (this.myTitle = t.tTitle),
    this.ok(t.locale) && (this.locale = t.locale),
    this.ok(t.tSrc) && (this.townSrc = t.tSrc),
    this.ok(t.fightId) ? this.fightId = t.fightId : this.fightId = "0",
    this.ok(t.farming) ? this.farming = t.farming : this.farming = "0",
    this.ok(t.effect_list) && (this.effect = t.effect_list),
    this.ok(t.mount) && (this.mount = t.mount),
    this.trophy_mount = "0",
    "" == this.bg && (this.bg = "1"),
    "" == this.canputoff && (this.canputoff = "0"),
    this.ok(t.picPath) && (this.picPath = t.picPath),
    "" == this.alt && (this.alt = "Трофей с"),
    this.ok(t.pet_picture) && (this.pet_picture = t.pet_picture),
    this.ok(t.pet_name) && (this.pet_name = t.pet_name),
    this.ok(t.pet_level) && (this.pet_level = t.pet_level),
    this.ok(t.pet_color) && (this.pet_color = t.pet_color),
    this.ok(t.pet_id) && (this.pet_id = t.pet_id),
    this.ok(t.effectRemoveUrl) && (this.effectRemoveUrl = t.effectRemoveUrl),
    this.ok(t.effectHideUrl) && (this.effectHideUrl = t.effectHideUrl),
    this.ok(t.effectShowUrl) && (this.effectShowUrl = t.effectShowUrl),
    this.ok(t.avatar_background_img) && (this.backImage = t.avatar_background_img),
    this.ok(t.arkat_count) && (this.arkatCount = parseInt(t.arkat_count)),
    this.ok(t.effectHideMax) && (this.effectHideMax = parseInt(t.effectHideMax)),
    this.effectHideCur = 0,
    canvas.app.user.log("arts = " + t.arts);
    for (var a = this.ALL_UPDATE_FLAGS.length, s = 0; s < a; s++)
        e = this.ALL_UPDATE_FLAGS[s],
        this.updateFlags[e] || (this.updateFlags[e] = this.getDataHash(e) != this.updateHash[e]),
        this.updateHash[e] = this.getDataHash(e);
    this.calcHpMp(),
    this.SLOTS_COUNT = "1" == this.canputoff ? 26 : 15
}
,
canvas.app.user.Model.prototype.getDataHash = function(t) {
    switch (t) {
    case this.UPDATE_FLAG_PERS:
        return this.parts + this.mySk + this.myGender;
    case this.UPDATE_FLAG_TROPHY:
        return this.trophy_parts + this.trophyGender;
    case this.UPDATE_FLAG_ARTS:
        return this.arts + this.myLevel + this.arkatCount;
    case this.UPDATE_FLAG_PET:
        return this.pet_picture + this.pet_name + this.pet_level + this.pet_color + this.pet_id
    }
    return ""
}
,
canvas.app.user.Model.prototype.parseEffects = function() {
    var t, e, a, s = this.effect, i = Date.now();
    this.effects = [];
    for (var n = (e = JSON.parse(s)).length, o = this.effectHideCur = 0; o < n; o++)
        a = e[o],
        (t = new Object).timeLeft = 1e3 * parseInt(a.timeLeft),
        t.timeLeftStart = i,
        t.id = a.id,
        t.removable = "1" == a.removable,
        t.hidden = "1" == a.hidden,
        t.title = JSON.parse('"' + a.title + '"'),
        t.color = a.color,
        t.hidden && this.effectHideCur++,
        this.effects.push(t)
}
,
canvas.app.user.Model.prototype.removeEffect = function(t) {
    this.effects.splice(this.effects.indexOf(t), 1),
    t.hidden && this.effectHideCur--
}
,
canvas.app.user.Model.prototype.ok = function(t) {
    return null != t
}
,
canvas.app.user.Model.prototype.parseGender = function(t) {
    return "1" == t ? "M" : "F"
}
,
canvas.app.user.Model.prototype.getSkPath = function() {
    return canvas.Config.skPath + this.myGender + "/sk" + canvas.Functions.setNumberLen(String(this.mySk), 2) + "_UI"
}
,
canvas.app.user.Model.prototype.getTrophySkPath = function() {
    return canvas.Config.skPath + this.trophyGender + "/sk" + canvas.Functions.setNumberLen(String(this.trophySk), 2) + "_UI"
}
,
canvas.app.user.Model.prototype.calcHpMp = function() {
    var t;
    0 == this.myHPt && (this.myHP = this.myHPmax),
    0 == this.myMPt && (this.myMP = this.myMPmax),
    this.curTime = Date.now(),
    0 < this.myHPt && (t = (this.curTime - this.startTimeHP) / 1e3,
    this.curHP = Math.round(Math.min(this.myHPmax, this.myHP + this.myHPdlt * (t / this.myHPt)))),
    0 < this.myMPt && (t = (this.curTime - this.startTimeMP) / 1e3,
    this.curMP = Math.round(Math.min(this.myMPmax, this.myMP + this.myMPdlt * (t / this.myMPt))))
}
,
canvas.app.user.Model.prototype.getPetColor = function(t) {
    switch (parseInt(t)) {
    case 1:
        return 6710886;
    case 2:
        return 3381504;
    case 3:
        return 3342591;
    case 4:
        return 10027161;
    case 5:
        return 16711680
    }
    return 3355443
}
,
canvas.app.user.View = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.user.model;
    this.slots = [],
    this.background = new canvas.app.user.view.Background,
    this.addChild(this.background),
    t.showLocation ? (this.location = new canvas.app.user.view.LocationView,
    this.addChild(this.location),
    this.location.position.set(4, 391)) : (this.bottomItems = new canvas.app.user.view.BottomItems(this.slots),
    this.addChild(this.bottomItems),
    this.bottomItems.position.set(17, 377)),
    this.persContainer = new canvas.px.Container;
    t = t.localStorage.get("playerSize");
    t && this.persContainer.scale.set(parseFloat(t), parseFloat(t)),
    this.addChild(this.persContainer),
    this.updatePersPos();
    t = new canvas.px.Sprite(canvas.ResourceLoader.getTexture("user_mask"));
    this.addChild(t),
    t.position.set(55, 80),
    this.persContainer.mask = t,
    this.mountBottom = new canvas.px.Container,
    this.persContainer.addChild(this.mountBottom),
    this.skContainer = new canvas.px.Container,
    this.persContainer.addChild(this.skContainer),
    this.mountTop = new canvas.px.Container,
    this.persContainer.addChild(this.mountTop),
    this.leftButton = new canvas.app.user.view.LeftButton,
    this.addChild(this.leftButton),
    this.leftButton.position.set(81, 83),
    this.rightButton = new canvas.app.user.view.RightButton,
    this.addChild(this.rightButton),
    this.rightButton.position.set(210, 83),
    this.borders = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "main_bg")),
    this.addChild(this.borders),
    this.borders.position.set(10, 0),
    this.bars = new canvas.app.user.view.Bars,
    this.addChild(this.bars),
    this.bars.position.set(1, -7),
    this.levelField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_18_BOLD_STROKE,16772526,32,28,"center"),
    this.addChild(this.levelField),
    this.levelField.position.set(155, 345),
    this.createSlots(),
    this.petView = new canvas.app.user.view.PetView,
    this.petView.position.set(209, 14),
    this.addChild(this.petView),
    this.trophyView = new canvas.app.user.view.TrophyView,
    this.trophyView.position.set(82, 35),
    this.addChild(this.trophyView),
    this.switchStyleView = new canvas.app.user.view.SwitchStyleView,
    this.switchStyleView.position.set(32, 38),
    this.zoomView = new canvas.app.user.view.ZoomView,
    this.zoomView.position.set(208, 319),
    this.addChild(this.zoomView),
    this.effectsButton = new canvas.app.user.view.EffectsButton,
    this.effectsButton.position.set(147, 312),
    this.effectsWindow = new canvas.app.user.view.EffectsWindow,
    this.effectsWindow.position.set(41, 70),
    this.confirmWindow = new canvas.app.manor.view.controls.ConfirmWindow,
    this.confirmWindow.dragAvailable = !1,
    this.update()
}
,
canvas.app.user.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.user.View.prototype.update = function() {
    var t = canvas.app.user.model;
    if (this.background.update(),
    this.location && this.location.update(),
    this.bottomItems && this.bottomItems.update(),
    this.player && this.player.url != t.getSkPath() && (this.player.destroy(),
    this.player = null),
    this.player || (this.player = new canvas.animation.SkeletonInfo(t.getSkPath(),new canvas.px.Point(70,180),this.skContainer,t.mount),
    this.player.frameEvent = canvas.app.user.Event.ENTER_FRAME,
    this.player.loop = !0,
    this.skContainer.addChild(this.player)),
    this.player.skeletonData && this.player.skeletonData.source == t.parts || (this.player.skeletonData = new canvas.data.battle.SkeletonData(t.parts,t.myGender)),
    "1" == t.ghost ? (this.persContainer.filters = [canvas.Functions.getGlow(1, 2, 2, (t.bg,
    0), .1)],
    this.skContainer.filters = [canvas.Functions.getAlpha(.25)]) : this.persContainer.filters = this.skContainer.filters = [],
    "1" == t.farming ? (this.leftButton.visible = !0,
    this.leftButton.mode = "farming",
    this.leftButton.interactiveChildren = !1) : "0" != t.fightId ? (this.leftButton.visible = !0,
    this.leftButton.mode = "fighting",
    this.leftButton.interactiveChildren = !0) : this.leftButton.visible = !1,
    1 <= parseInt(t.punished) && parseInt(t.punished) <= 5 ? (this.rightButton.punished = t.punished,
    this.rightButton.visible = !0,
    4 == parseInt(t.punished) && (this.rightButton.countField.text = t.punish_cnt)) : this.rightButton.visible = !1,
    this.bars.update(),
    this.levelField.text = t.myLevel,
    t.updateFlags[t.UPDATE_FLAG_ARTS]) {
        t.updateFlags[t.UPDATE_FLAG_ARTS] = !1;
        for (var e = this.slots.length, a = t.arts.split(","), s = 0; s < e; s++)
            this.slots[s].data = a[s] ? a[s].split(":") : null
    }
    t.updateFlags[t.UPDATE_FLAG_PET] && (t.updateFlags[t.UPDATE_FLAG_PET] = !1,
    this.petView.update()),
    t.updateFlags[t.UPDATE_FLAG_TROPHY] && (t.updateFlags[t.UPDATE_FLAG_TROPHY] = !1,
    this.trophyView.update()),
    "0" != t.canputoff && ("1" == t.show_button_switch_view || "2" == t.show_button_switch_view) ? (this.addChild(this.switchStyleView),
    this.switchStyleView.type = t.show_button_switch_view) : this.removeIfExist(this.switchStyleView),
    this.updateEffects()
}
,
canvas.app.user.View.prototype.createSlots = function() {
    for (var t, e = 0; e <= 14; e++)
        t = new canvas.app.user.view.SlotView(e),
        this.slots[e] = t,
        this.addChild(t);
    this.slots[0].position.set(25, 276),
    this.slots[1].position.set(16, 208),
    this.slots[2].position.set(16, 136),
    this.slots[3].position.set(16, 66),
    this.slots[4].position.set(140, 28),
    this.slots[5].position.set(265, 68),
    this.slots[6].position.set(265, 136),
    this.slots[7].position.set(265, 207),
    this.slots[8].position.set(258, 276),
    this.slots[9].position.set(247, 346),
    this.slots[10].position.set(38, 345),
    this.slots[11].position.set(112, 385),
    this.slots[12].position.set(143, 385),
    this.slots[13].position.set(175, 385),
    this.slots[14].position.set(207, 385)
}
,
canvas.app.user.View.prototype.updateEffects = function() {
    var t = canvas.app.user.model;
    t.parseEffects(),
    0 < t.effects.length ? this.addChild(this.effectsButton) : this.hideEffects(),
    this.effectsWindow.update()
}
,
canvas.app.user.View.prototype.hideEffects = function() {
    this.removeIfExist(this.effectsButton),
    this.effectsWindowShowHide(!0)
}
,
canvas.app.user.View.prototype.effectsWindowShowHide = function(t) {
    null == t && (t = !1),
    t ? this.removeIfExist(this.effectsWindow) : this.addChildAt(this.effectsWindow, this.getChildIndex(this.effectsButton))
}
,
canvas.app.user.View.prototype.updatePersPos = function() {
    var t = canvas.app.user.model;
    this.persContainer.position.set(t.PLAYER_MC_X + Math.round(90 * (1 - this.persContainer.scale.x)), t.PLAYER_MC_Y + Math.round(160 * (1 - this.persContainer.scale.y)))
}
,
canvas.app.user.view.Background = function() {
    canvas.px.Container.call(this),
    this.image = ""
}
,
canvas.app.user.view.Background.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.user.view.Background.prototype.update = function() {
    var t, e;
    this.video && (e = canvas.app.user.model,
    t = this.image,
    "" != e.backImage ? this.image = e.backImage : this.image = e.bg,
    this.image != t && (this.removeChildren(),
    e = "" != e.backImage ? (this.video.src = canvas.Config.userBackgroundsPath + canvas.Functions.extractSwfName(e.backImage) + ".ogv",
    new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bg"))) : new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bg_" + ("1" == e.bg ? "h" : "m"))),
    this.addChild(e),
    e.x = 74))
}
,
canvas.app.user.view.Bars = function() {
    canvas.px.Container.call(this),
    this.hpLine = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "hp_line")),
    this.hpLine.position.set(92, 6),
    this.addChild(this.hpLine),
    this.mpLine = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "mp_line")),
    this.mpLine.position.set(171, 6),
    this.addChild(this.mpLine),
    this.hp = new canvas.ui.Progress,
    this.hp.setSize(68, 19),
    this.addChild(this.hp),
    this.hp.position.set(102, 9),
    this.mp = new canvas.ui.Progress,
    this.mp.setSize(68, 19),
    this.addChild(this.mp),
    this.mp.position.set(238, 9),
    this.mp.scale.x = -1,
    this.hpLine.mask = this.hp.sprite,
    this.mpLine.mask = this.mp.sprite,
    this.hp.progress = 0,
    this.mp.progress = 0,
    this.hpField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16748639,72,16,"center"),
    this.hpField.position.set(100, 13),
    this.addChild(this.hpField),
    this.mpField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,9819903,72,16,"center"),
    this.mpField.position.set(169, 13),
    this.addChild(this.mpField),
    this.update()
}
,
canvas.app.user.view.Bars.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.user.view.Bars.prototype.update = function() {
    var t = canvas.app.user.model;
    this.hpField.text = t.curHP + "/" + t.myHPmax,
    this.mpField.text = t.curMP + "/" + t.myMPmax,
    0 < t.myHPt ? this.hp.progress = 0 < t.curHP ? t.curHP / t.myHPmax : 0 : this.hp.progress = 0 == t.myHP ? 0 : 1,
    0 < t.myMPt ? this.mp.progress = 0 < t.curMP ? t.curMP / t.myMPmax : 0 : this.mp.progress = 0 == t.myMP ? 0 : 1
}
,
canvas.app.user.view.BottomItems = function(t) {
    var e;
    canvas.px.Container.call(this),
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slots_bg"))),
    this.back.position.set(0, 32),
    this.bottomContainer = new canvas.px.Container,
    this.addChild(this.bottomContainer),
    this.bottomContainer.position.set(0, 123),
    this.backRings = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_rings_bg")),
    this.back1 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_bg")),
    this.back2 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_bg")),
    this.back3 = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_bg")),
    this.backRings.y = 2,
    this.slots = t;
    for (var a = 15; a <= 25; a++)
        e = new canvas.app.user.view.SlotView(a),
        this.slots[a] = e;
    this.back.addChild(t[15]),
    t[15].position.set(5, 17),
    this.back.addChild(t[16]),
    t[16].position.set(86, 17),
    this.back.addChild(t[17]),
    t[17].position.set(167, 17),
    this.back.addChild(t[18]),
    t[18].position.set(248, 17),
    this.back2.addChild(t[19]),
    t[19].position.set(12, 9),
    this.back3.addChild(t[20]),
    t[20].position.set(12, 9),
    this.back1.addChild(t[21]),
    t[21].position.set(12, 9),
    this.backRings.addChild(t[24]),
    t[24].position.set(10, 41),
    this.backRings.addChild(t[25]),
    t[25].position.set(41, 41),
    this.backRings.addChild(t[22]),
    t[22].position.set(10, 10),
    this.backRings.addChild(t[23]),
    t[23].position.set(41, 10)
}
,
canvas.app.user.view.BottomItems.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.user.view.BottomItems.prototype.update = function() {
    var t = canvas.app.user.model;
    if (this.bottomContainer.removeChildren(),
    10 < t.myLevel) {
        this.bottomContainer.addChild(this.backRings),
        this.bottomContainer.addChild(this.back1),
        this.bottomContainer.addChild(this.back2),
        this.bottomContainer.addChild(this.back3);
        for (var e = 19; e <= 25; e++)
            this.slots[e].imgVisible = !0
    } else if (0 < t.arkatCount) {
        this.bottomContainer.addChild(this.backRings),
        this.bottomContainer.addChild(this.back2),
        this.bottomContainer.addChild(this.back3);
        for (e = 19; e <= 25; e++)
            this.slots[e].imgVisible = 21 != e
    } else {
        this.bottomContainer.addChild(this.back2),
        this.bottomContainer.addChild(this.back3);
        for (e = 19; e <= 25; e++)
            this.slots[e].imgVisible = e < 21
    }
    this.updatePositions()
}
,
canvas.app.user.view.BottomItems.prototype.updatePositions = function() {
    for (var t = this.bottomContainer.numChildren, e = 0, a = 0; a < t; a++)
        this.bottomContainer.getChildAt(a).x = e,
        e += this.bottomContainer.getChildAt(a).width - 3;
    switch (t) {
    case 2:
        this.bottomContainer.x = 74;
        break;
    case 3:
        this.bottomContainer.x = 38;
        break;
    default:
        this.bottomContainer.x = 0
    }
}
,
canvas.app.user.view.EffectRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, t),
    this.click = null,
    this.setSize(193, 25);
    var e = this.effectsHideAvailable();
    this.data ? (this.data.index % 2 != 0 && (t = new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "effect_back"),2,0,2,0),
    this.addChild(t),
    t.setSize(228, 25)),
    this.titleField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,0,125,14,"left","top",0,0,!0),
    this.addChild(this.titleField),
    this.titleField.text = "<font color='" + this.data.color + "'>" + this.data.title + "</font>",
    this.titleField.position.set(5, 5),
    this.timeField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,6770493,60,20,"left"),
    this.timeField.text = canvas.Functions.formatDate(this.data.timeLeft),
    this.timeField.position.set(135, 5),
    this.addChild(this.timeField),
    this.data.removable && (this.removeButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "effect_remove_button")),
    this.removeButton.position.set(170, 2),
    this.addChild(this.removeButton),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.removeButton, this.clickHandler, this)),
    this.data.hidden ? (this.showButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "effect_show")),
    this.showButton.position.set(203, 1),
    this.addChild(this.showButton),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.showButton, this.showClickHandler, this),
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
        target: this.showButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(813)))
    })) : (this.hideButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", e ? "effect_hide" : "effect_hide_disabled")),
    this.hideButton.position.set(203, 1),
    this.hideButton.buttonMode = e,
    this.addChild(this.hideButton),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hideButton, this.hideClickHandler, this),
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
        target: this.hideButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(811) + " " + canvas.app.user.model.effectHideCur + "/" + canvas.app.user.model.effectHideMax))
    }))) : (this.hideAllButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", 0 < canvas.app.user.model.effectHideMax ? e ? "effect_hide" : "effect_show" : "effect_hide_disabled")),
    this.hideAllButton.position.set(203, 1),
    this.hideAllButton.buttonMode = 0 < canvas.app.user.model.effectHideMax,
    this.addChild(this.hideAllButton),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hideAllButton, this.hideAllClickHandler, this),
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
        target: this.hideAllButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(e || canvas.app.user.model.effectHideMax < 1 ? 812 : 814)))
    }))
}
,
canvas.app.user.view.EffectRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.user.view.EffectRenderer.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.REMOVE_EFFECT, null, this.data)
}
,
canvas.app.user.view.EffectRenderer.prototype.showClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.SHOW_EFFECT, null, this.data)
}
,
canvas.app.user.view.EffectRenderer.prototype.hideClickHandler = function() {
    this.effectsHideAvailable() && canvas.EventManager.dispatchEvent(canvas.app.user.Event.HIDE_EFFECT, null, this.data)
}
,
canvas.app.user.view.EffectRenderer.prototype.hideAllClickHandler = function() {
    this.effectsHideAvailable() ? canvas.EventManager.dispatchEvent(canvas.app.user.Event.HIDE_ALL_EFFECTS, null, this.data) : canvas.EventManager.dispatchEvent(canvas.app.user.Event.SHOW_ALL_EFFECTS, null, this.data)
}
,
canvas.app.user.view.EffectRenderer.prototype.updateTime = function() {
    var t;
    this.data && (t = Date.now(),
    this.data.timeLeft -= t - this.data.timeLeftStart,
    this.data.timeLeftStart = t,
    this.timeField.text = 0 < this.data.timeLeft ? canvas.Functions.formatDate(this.data.timeLeft) : "")
}
,
canvas.app.user.view.EffectRenderer.prototype.effectsHideAvailable = function() {
    return canvas.app.user.model.effectHideCur < canvas.app.user.model.effectHideMax
}
,
canvas.app.user.view.EffectRenderer.prototype.destroy = function() {
    this.removeButton && canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.removeButton, this.clickHandler, this),
    this.showButton && canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_REMOVE, null, {
        target: this.showButton
    }),
    this.hideButton && canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_REMOVE, null, {
        target: this.hideButton
    }),
    this.hideAllButton && canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_REMOVE, null, {
        target: this.hideAllButton
    }),
    canvas.ui.ListRenderer.prototype.destroy.apply(this)
}
,
canvas.app.user.view.EffectsButton = function() {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "effects_button_back"))),
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "effects_button_front")),
    this.button.position.set(15, 3),
    this.addChild(this.button),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.button, this.overHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.button, this.outHandler, this)
}
,
canvas.app.user.view.EffectsButton.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.user.view.EffectsButton.prototype.overHandler = function() {
    effectAltSimple(2)
}
,
canvas.app.user.view.EffectsButton.prototype.outHandler = function() {
    effectAltSimple(0)
}
,
canvas.app.user.view.EffectsWindow = function() {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "effects_back")));
    var t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,6770493,80,20,"left");
    this.addChild(t),
    t.interactive = !1,
    t.position.set(14, 4),
    t.text = canvas.Translator.getText(800).toLowerCase(),
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,6770493,40,20,"left"),
    this.addChild(t),
    t.interactive = !1,
    t.position.set(142, 4),
    t.text = canvas.Translator.getText(723).toLowerCase(),
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,6770493,40,20,"left"),
    this.addChild(t),
    t.interactive = !1,
    t.position.set(180, 4),
    t.text = canvas.Translator.getText(802).toLowerCase(),
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,6770493,40,20,"left"),
    this.addChild(t),
    t.interactive = !1,
    t.position.set(216, 4),
    t.text = canvas.Translator.getText(810).toLowerCase(),
    this.list = new canvas.ui.List(canvas.ui.ListType.VERTICAL,1),
    this.addChild(this.list),
    this.list.position.set(8, 25),
    this.list.paddingV = 0,
    this.list.setSize(244, 220);
    var e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"))
      , a = new canvas.px.Container
      , s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_drag"),[0, 7, 0, 5])
      , t = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    t.scale.y = -1,
    t.position.y = 2 - t.height,
    a.addChild(t),
    s.setSize(21, 40),
    this.drag = s;
    s = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,e,a,new canvas.px.Mask(21,100),s,this);
    s.padding = 13,
    s.step = 30,
    s.setSize(12),
    this.list.scroll = s,
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "effects_info_button")),
    this.infoButton.position.set(114, -23),
    this.addChild(this.infoButton),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.infoClickHandler, this)
}
,
canvas.app.user.view.EffectsWindow.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.user.view.EffectsWindow.prototype.update = function() {
    var t = canvas.app.user.model
      , e = this.list.scroll ? this.list.scroll.current : 0
      , a = t.effects.length;
    this.list.clear();
    for (var s = 0; s < a; s++)
        t.effects[s].index = s,
        this.list.add(new canvas.app.user.view.EffectRenderer(t.effects[s]), !1);
    this.list.add(new canvas.app.user.view.EffectRenderer, !1),
    this.list.update(),
    this.list.scroll && 0 < e && (this.list.scroll.current = e,
    this.list.scrollHandler(null))
}
,
canvas.app.user.view.EffectsWindow.prototype.updateTime = function() {
    for (var t = canvas.app.user.model, e = this.list.items.length, a = !1, s = 0; s < e; s++)
        this.list.items[s].updateTime(),
        this.list.items[s].data && "" == this.list.items[s].timeField.text && (t.removeEffect(this.list.items[s].data),
        a = !0);
    a && this.update()
}
,
canvas.app.user.view.EffectsWindow.prototype.infoClickHandler = function() {
    var t = canvas.app.user.model;
    showEffectInfo(t.nick)
}
,
canvas.app.user.view.LeftButton = function() {
    this._mode = "fighting",
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            this._mode = t,
            this.button.sprite.texture = this.button.baseTexture = canvas.ResourceLoader.getImage("ui", this._mode)
        }
    }),
    this._visible = !1,
    Object.defineProperty(this, "visible", {
        get: function() {
            return this._visible
        },
        set: function(t) {
            this._visible = t,
            this.back && (this._visible ? (this.contains(this.back) || this.addChild(this.back),
            this.contains(this.button) || this.addChild(this.button)) : (this.contains(this.back) && this.removeChild(this.back),
            this.contains(this.button) && this.removeChild(this.button)))
        }
    }),
    canvas.px.Container.call(this),
    this.back = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left_button_back")),
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", this._mode)),
    this.button.position.set(7, 19),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this)
}
,
canvas.app.user.view.LeftButton.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.user.view.LeftButton.prototype.clickHandler = function() {
    var t = canvas.app.user.model;
    "fighting" == this.mode && showFightInfo(t.fightId)
}
,
canvas.app.user.view.LocationView = function() {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bg3_bottom"))),
    this.image = new canvas.ui.Image,
    this.addChild(this.image),
    this.image.position.set(28, 19),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top1"))).position.set(62, 82),
    this.townTitle = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,16769466,160,17,"center"),
    this.addChild(this.townTitle),
    this.townTitle.position.set(91, 87),
    this.locTitle = new canvas.ui.HtmlText(canvas.Translator.getLang() == canvas.Const.LANG_RU || canvas.Translator.getLang() == canvas.Const.LANG_EN ? canvas.Const.FONT_RADA_18 : canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,canvas.Const.FONT_TAHOMA_14_BOLD,16769466,264,42,"center","middle"),
    this.locTitle.position.set(38, 42),
    this.interactive = !0,
    this.mouseover = this.overHandler.bind(this),
    this.mouseout = this.outHandler.bind(this)
}
,
canvas.app.user.view.LocationView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.user.view.LocationView.prototype.update = function() {
    var t = canvas.app.user.model;
    this.image.setImage(t.townSrc),
    this.townTitle.text = t.myTitle,
    this.locTitle.text = t.myTown.toLowerCase() + (t.myLocation == t.myTitle ? "" : "<br/>" + t.myLocation.toLowerCase())
}
,
canvas.app.user.view.LocationView.prototype.overHandler = function() {
    this.contains(this.locTitle) || this.addChild(this.locTitle)
}
,
canvas.app.user.view.LocationView.prototype.outHandler = function() {
    this.contains(this.locTitle) && this.removeChild(this.locTitle)
}
,
canvas.app.user.view.PetView = function() {
    canvas.px.Container.call(this),
    this.container = new canvas.px.Container,
    this.addChild(this.container),
    this.msk = new canvas.px.Mask(60,70),
    this.addChild(this.msk),
    this.msk.position.set(2, -1),
    this.container.mask = this.msk,
    this.wall = new canvas.px.Mask(50,60),
    this.addChild(this.wall),
    this.wall.position.set(2, 9),
    this.wall.interactive = !0,
    this.wall.buttonMode = !0,
    this.levelBack = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.addChild(this.levelBack),
    this.levelBack.position.set(-4, 46),
    this.levelField = new canvas.ui.Text(canvas.Const.FONT_ARIAL_11_BOLD_STROKE,15719839,22,20,"center"),
    this.addChild(this.levelField),
    this.levelField.position.set(-3, 53),
    this.hint = new canvas.app.view.MappingHint,
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
        target: this.wall,
        params: new canvas.utils.HintParams(this.hint)
    }),
    this.wall.click = this.clickHandler.bind(this)
}
,
canvas.app.user.view.PetView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.user.view.PetView.prototype.update = function() {
    var t, e = canvas.app.user.model;
    this.mc && this.mc.destroy(),
    "" != e.pet_picture ? (t = canvas.Functions.extractSwfName(e.pet_picture),
    this.mc = new canvas.px.MovieClip(canvas.Config.petsUiPath + t + "/" + t,null,!1),
    this.mc.y = -2,
    this.container.addChild(this.mc),
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_UPDATE, this.mc, this.updateHandler, this),
    this.levelBack.texture = canvas.ResourceLoader.getImage("ui", "pet_level_back_" + ("0" == e.pet_color ? 1 : parseInt(e.pet_color))),
    this.levelField.text = e.pet_level,
    this.hint.update(e.pet_name + " [" + e.pet_level + "]", e.getPetColor(e.pet_color)),
    this.wall.interactive = !0) : (this.levelBack.texture = canvas.px.TextureEmpty,
    this.levelField.text = "",
    this.wall.interactive = !1)
}
,
canvas.app.user.view.PetView.prototype.updateHandler = function() {
    this.mc.mcChildsCache.mc1 ? (this.mc.stop(),
    this.mc.mcChildsCache.mc1.loop = !0,
    this.mc.mcChildsCache.mc1.play(),
    this.mc.mcChildsCache.mc1.skipMasks = !0,
    this.mc.mcChildsCache.mc1.frameEvent || (this.mc.mcChildsCache.mc1.frameEvent = canvas.app.user.Event.ENTER_FRAME)) : (this.mc.loop = !0,
    this.mc.gotoAndPlay = function() {}
    ,
    this.mc.stop = function() {}
    ,
    this.mc.frameEvent = canvas.app.user.Event.ENTER_FRAME),
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_UPDATE, this.mc, this.updateHandler, this)
}
,
canvas.app.user.view.PetView.prototype.clickHandler = function() {
    var t = canvas.app.user.model;
    showPetInfo(t.pet_id)
}
,
canvas.app.user.view.RightButton = function() {
    this._punished = 1,
    Object.defineProperty(this, "punished", {
        get: function() {
            return this._punished
        },
        set: function(t) {
            this._punished = t,
            this.button.sprite.texture = this.button.baseTexture = canvas.ResourceLoader.getImage("ui", "punished" + this._punished)
        }
    }),
    this._visible = !1,
    Object.defineProperty(this, "visible", {
        get: function() {
            return this._visible
        },
        set: function(t) {
            this._visible = t,
            this.button && (this._visible ? (this.contains(this.button) || this.addChild(this.button),
            4 != parseInt(this.punished) || this.contains(this.countBack) || this.addChild(this.countBack)) : (this.contains(this.countBack) && this.removeChild(this.countBack),
            this.contains(this.button) && this.removeChild(this.button)))
        }
    }),
    canvas.px.Container.call(this),
    this.countBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "punished_cnt_back")),
    this.countField = new canvas.ui.Text(canvas.Const.FONT_ARIAL_10_BOLD_STROKE,15719839,22,16,"center"),
    this.countField.position.set(-1, 2),
    this.countBack.addChild(this.countField),
    this.countBack.position.set(5, 50),
    this.button = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "punished" + this._punished)),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this)
}
,
canvas.app.user.view.RightButton.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.user.view.RightButton.prototype.clickHandler = function() {
    var t = canvas.app.user.model;
    showPunishmentInfo(t.nick)
}
,
canvas.app.user.view.SlotButton = function() {
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "slot_button")),
    this.title = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD,6507828,60,16,"center"),
    this.addChild(this.title),
    this.title.y = -1
}
,
canvas.app.user.view.SlotButton.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.user.view.SlotButton.prototype.setTitle = function(t) {
    this.title.text = t
}
,
canvas.app.user.view.SlotView = function(t) {
    this._img = null,
    Object.defineProperty(this, "img", {
        get: function() {
            return this._img
        },
        set: function(t) {
            this._img = t;
            var e = this.toGlobal(new canvas.px.Point(0,0))
              , t = canvas.app.user.model;
            this._img.style.left = e.x + 20 + ("0" == t.canputoff ? -20 : 0) + canvas.app.user.Const.LEFT + (this.isRing ? -2 : 0),
            this._img.style.top = e.y + 34 + ("0" == t.canputoff ? 20 : 0) + canvas.app.user.Const.TOP + (this.isRing ? -2 : 0),
            this.data && this.data[1] && (this._img.src = canvas.app.user.model.picPath + this.data[1]),
            this.isRing && (this._img.style.width = this._img.style.height = 30),
            this.updateImg()
        }
    }),
    this._imgVisible = !0,
    Object.defineProperty(this, "imgVisible", {
        get: function() {
            return this._imgVisible
        },
        set: function(t) {
            this._imgVisible = t,
            this.updateImg()
        }
    }),
    canvas.ui.ListRenderer.call(this),
    this.id = t,
    this.isRing = !1,
    this.isArkat = !1;
    var e = "item_back_default";
    switch (this.id) {
    case 15:
    case 16:
        e = "item_back_belt";
        break;
    case 17:
    case 18:
        e = "item_back_bag";
        break;
    case 19:
        e = "item_back_quiver";
        break;
    case 20:
        e = "item_back_chest";
        break;
    case 21:
        e = "item_back_bracelet";
        break;
    case 11:
    case 12:
    case 13:
    case 14:
        e = "item_back_default_small",
        this.isRing = !0;
        break;
    case 22:
    case 23:
    case 24:
    case 25:
        e = "item_back_ring",
        this.isRing = !0,
        this.isArkat = !0
    }
    this.back = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", e)),
    this.addChild(this.back),
    this.bottomContainer = new canvas.px.Container,
    this.topContainer = new canvas.px.Container,
    this.gravIcon = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "grav_icon")),
    this.gravIcon.position.set(20, 40),
    this.runeHole = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_hole")),
    this.runeHole.position.set(1, 40),
    this.runeOprava = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "rune_oprava")),
    this.runeOprava.position.set(1, 40),
    this.runeIcon = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.runeIcon.position.set(3, 42),
    this.runeIcon2 = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.runeIcon2.position.set(3, 42),
    this.addChild(this.bottomContainer),
    this.isRing || (this.centerButton = new canvas.app.user.view.SlotButton,
    this.centerButton.position.set(0, 24),
    this.topContainer.addChild(this.centerButton)),
    this.infoButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", this.isRing ? "ring_info_button" : "info_button"),[0, 0, 0, 0]),
    this.isRing ? this.infoButton.position.set(2, 24) : this.infoButton.position.set(40, 0),
    this.topContainer.addChild(this.infoButton),
    this.rollButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "roll_button"),[0, 0, 0, 0]),
    this.rollButton.position.set(0, 0),
    this.chantButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "chant_button"),[0, 0, 0, 0]),
    this.chantButton.position.set(20, 40),
    6 == this.id && (this.doubleHandWall = new canvas.px.Mask(60,60,0,.5)),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.chantButton, this.chantOverHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.chantButton, this.chantOutHandler, this),
    this.interactive = !0,
    this.buttonMode = !0,
    this.update()
}
,
canvas.app.user.view.SlotView.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.user.view.SlotView.prototype.update = function() {
    var t = canvas.app.user.model;
    this.doubleHandWall && this.removeIfExist(this.doubleHandWall),
    this.data && this.data[1] ? (this.aid = this.data[0],
    null != this.data[5] && "" != this.data[5] && null != this.data[5] && (this.data[5] < 2 || 6 < this.data[5] ? this.data[5] = 0 : this.data[5]--),
    this.back.alpha = 0,
    this.interactive = !0,
    this.back.interactive = !1,
    this.img && (this.img.src = t.picPath + this.data[1]),
    this.isRing || ("" != this.data[3] ? this.bottomContainer.addChild(this.gravIcon) : this.bottomContainer.removeIfExist(this.gravIcon),
    null != this.data[7] && 0 != parseInt(this.data[7]) ? (this.bottomContainer.addChild(this.runeHole),
    this.bottomContainer.addChild(this.runeIcon),
    this.bottomContainer.addChild(this.runeIcon2),
    this.bottomContainer.addChild(this.runeOprava)) : (this.bottomContainer.removeIfExist(this.runeHole),
    this.bottomContainer.removeIfExist(this.runeIcon),
    this.bottomContainer.removeIfExist(this.runeIcon2),
    this.bottomContainer.removeIfExist(this.runeOprava)),
    "" != this.data[2] ? (this.bottomContainer.contains(this.runeIcon) || this.bottomContainer.addChild(this.runeIcon),
    this.runeIcon.texture = canvas.ResourceLoader.getImage("ui", "rune_" + (10 * parseInt(this.data[2]) + 1 + parseInt(this.data[5])))) : this.bottomContainer.removeIfExist(this.runeIcon),
    "" != this.data[8] ? (this.bottomContainer.contains(this.runeIcon2) || this.bottomContainer.addChild(this.runeIcon2),
    this.runeIcon2.texture = canvas.ResourceLoader.getImage("ui", "rune2_" + (parseInt(this.data[8]) + 1))) : this.bottomContainer.removeIfExist(this.runeIcon2),
    this.centerButton && this.centerButton.setTitle(t.take_off),
    0 < parseInt(this.data[4]) ? this.topContainer.addChild(this.rollButton) : this.topContainer.removeIfExist(this.rollButton),
    0 < parseInt(this.data[6]) ? this.topContainer.addChild(this.chantButton) : this.topContainer.removeIfExist(this.chantButton),
    6 == this.id && "1" == t.dh && this.addChild(this.doubleHandWall))) : (this.back.alpha = 1,
    this.interactive = !1,
    this.isArkat && (this.id - 21 <= t.arkatCount ? (this.back.texture = canvas.ResourceLoader.getImage("ui", "item_back_default_small"),
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_REMOVE, null, {
        target: this.back
    }),
    this.back.interactive = !1) : (this.back.texture = canvas.ResourceLoader.getImage("ui", "item_back_ring"),
    this.back.interactive = !0,
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
        target: this.back,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(809)))
    }))),
    this.outHandler(),
    this.bottomContainer.removeChildren())
}
,
canvas.app.user.view.SlotView.prototype.clickHandler = function(t) {
    ("1" != canvas.app.user.model.canputoff || canvas.Functions.findParent(this.infoButton, t.target) ? showArtifactInfo : canvas.Functions.findParent(this.rollButton, t.target) ? artuse : canvas.Functions.findParent(this.chantButton, t.target) ? art_superstructure_destroy : artifact)(this.aid)
}
,
canvas.app.user.view.SlotView.prototype.overHandler = function() {
    var t = canvas.app.user.model;
    artifactAltSimple(this.aid, 2),
    "1" == t.canputoff && this.addChild(this.topContainer)
}
,
canvas.app.user.view.SlotView.prototype.outHandler = function() {
    var t = canvas.app.user.model;
    artifactAltSimple(this.aid, 0),
    "1" == t.canputoff && this.removeIfExist(this.topContainer)
}
,
canvas.app.user.view.SlotView.prototype.chantOverHandler = function() {
    var t = canvas.app.user.model;
    this.centerButton.setTitle(t.take_off_chant)
}
,
canvas.app.user.view.SlotView.prototype.chantOutHandler = function() {
    var t = canvas.app.user.model;
    this.centerButton.setTitle(t.take_off)
}
,
canvas.app.user.view.SlotView.prototype.updateImg = function() {
    this.img && (this.img.style.display = this.imgVisible ? "" : "none")
}
,
canvas.app.user.view.SwitchStyleView = function() {
    this._type = null,
    Object.defineProperty(this, "type", {
        get: function() {
            return this._type
        },
        set: function(t) {
            this._type = t,
            this.image.texture = canvas.ResourceLoader.getImage("ui", "switcher" + this._type),
            "1" == this._type ? this.image.position.set(10, 8) : this.image.position.set(7, 7)
        }
    }),
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "switcher_back")),
    this.image = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.addChild(this.image),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this, this.clickHandler, this)
}
,
canvas.app.user.view.SwitchStyleView.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.user.view.SwitchStyleView.prototype.clickHandler = function() {
    switchViewArtifact(),
    this.type = "1" == this.type ? "2" : "1"
}
,
canvas.app.user.view.TrophyView = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.user.model;
    this.bg = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.bg.buttonMode = !0,
    this.addChild(this.bg),
    this.bg.interactive = !0,
    this.bg.hitArea = new canvas.px.Rectangle(0,0,46,49),
    this.wall = new canvas.px.Mask(46,49),
    this.bg.addChild(this.wall),
    this.wall.interactive = !0,
    this.container = new canvas.px.Container,
    this.bg.addChild(this.container),
    this.container.filters = [canvas.Functions.getDropShadow(90, 2)],
    this.bgLevel = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.addChild(this.bgLevel),
    this.bgLevel.position.set(8, 31),
    this.bgLevel.interactive = !1,
    this.levelField = new canvas.ui.Text(canvas.Const.FONT_ARIAL_11_BOLD_STROKE,15719839,36,20,"center"),
    this.addChild(this.levelField),
    this.levelField.position.set(23, 38),
    this.deleteButton = "0" == t.canputoff ? new canvas.px.Container : new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "trophy_delete_button")),
    this.deleteButton.position.set(4, 35),
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
        target: this.deleteButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(t.take_off))
    }),
    this.hint = new canvas.app.view.MappingHint("111",6770493,!0,!0),
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.HINT_ADD, null, {
        target: this.wall,
        params: new canvas.utils.HintParams(this.hint)
    }),
    this.bg.click = this.clickHandler.bind(this),
    this.bg.mouseover = this.overHandler.bind(this),
    this.bg.mouseout = this.outHandler.bind(this)
}
,
canvas.app.user.view.TrophyView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.user.view.TrophyView.prototype.update = function() {
    var t, e = canvas.app.user.model;
    this.mc && this.mc.destroy(),
    "" != e.trophy_name ? (t = 1,
    e.trophyLevel == e.myLevel ? (e.textColor = 3381504,
    t = 2) : e.trophyLevel == e.myLevel + 1 ? (e.textColor = 3342591,
    t = 3) : e.trophyLevel == e.myLevel + 2 ? (e.textColor = 10027161,
    t = 4) : e.trophyLevel >= e.myLevel + 3 && (e.textColor = 16711680,
    t = 5),
    this.bg.texture = 0 == e.trophyLevel ? canvas.px.TextureEmpty : canvas.ResourceLoader.getImage("ui", "trophy_bg_" + t),
    this.bgLevel.texture = canvas.ResourceLoader.getImage("ui", "trophy_bg_level_" + t),
    this.mc = new canvas.animation.SkeletonInfo(e.getTrophySkPath()),
    this.mc.stop(),
    this.mc.position.set(-73, -2),
    this.container.addChild(this.mc),
    this.mc.skeletonData = new canvas.data.battle.SkeletonData(e.trophy_parts,e.trophyGender),
    this.levelField.text = 0 == e.trophyLevel ? "" : e.trophyLevel,
    this.addChildAt(this.bg, 0),
    t = e.alt + " ",
    "" != e.trophyClan && (t += "<img yOffset='4' src='" + e.trophyClan + "'/>"),
    "" != e.trophyRank && (t += "<img yOffset='4' src='" + e.trophyRank + "'/>"),
    t += e.trophy_name + " [" + e.trophyLevel + "]",
    this.hint.update("<b>" + t + "</b>", 6710886)) : (this.bg.texture = canvas.px.TextureEmpty,
    this.levelField.text = "",
    this.bgLevel.texture = canvas.px.TextureEmpty,
    this.removeIfExist(this.bg))
}
,
canvas.app.user.view.TrophyView.prototype.clickHandler = function(t) {
    var e = canvas.app.user.model;
    canvas.Functions.findParent(this.deleteButton, t.target) ? trophy_drop() : showUserInfo(e.trophy_name)
}
,
canvas.app.user.view.TrophyView.prototype.overHandler = function() {
    this.bg.addChild(this.deleteButton)
}
,
canvas.app.user.view.TrophyView.prototype.outHandler = function() {
    this.bg.removeIfExist(this.deleteButton)
}
,
canvas.app.user.view.ZoomView = function() {
    canvas.px.Container.call(this),
    this.zoomIn = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_in")),
    this.addChild(this.zoomIn),
    this.zoomIn.position.set(15, 0),
    this.zoomIn.sprite.hitArea = new canvas.px.Circle(12,12,12),
    this.zoomOut = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "zoom_out")),
    this.addChild(this.zoomOut),
    this.zoomOut.position.set(0, 15),
    this.zoomOut.sprite.hitArea = new canvas.px.Circle(12,12,12),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.zoomIn, this.clickInHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.zoomOut, this.clickOutHandler, this)
}
,
canvas.app.user.view.ZoomView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.user.view.ZoomView.prototype.clickInHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.ZOOM_IN)
}
,
canvas.app.user.view.ZoomView.prototype.clickOutHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.user.Event.ZOOM_OUT)
}
,
canvas.app.leftMenu.Const = {
    ON_PAGE: 6,
    ON_PAGE_MIN: 6,
    ON_PAGE_MAX: 12,
    MIN_COOLDOWN: 5,
    VARIANT_SLOTS_COUNT: 2,
    SLOT_HEIGHT: 45
},
canvas.app.leftMenu.Event = {
    ENTER_FRAME: "LeftMenu.ENTER_FRAME",
    CHANGE_PAGE: "LeftMenu.CHANGE_PAGE",
    SHOW_VARIANT_SLOTS: "LeftMenu.SHOW_VARIANT_SLOTS",
    SELECT_SLOT: "LeftMenu.SELECT_SLOT",
    UNSET_SLOT: "LeftMenu.UNSET_SLOT",
    SLOT_CHANGED: "LeftMenu.SLOT_CHANGED",
    SLOT_HIDED: "LeftMenu.SLOT_HIDED",
    BATTLE_ACTION: "LeftMenu.BATTLE_ACTION",
    FOCUS_FIRST_FREE_SLOT: "LeftMenu.FOCUS_FIRST_FREE_SLOT"
},
canvas.app.leftMenu.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.view = new canvas.app.leftMenu.View,
    this.addChild(this.view),
    this.unsetTimer = 0,
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.CHANGE_PAGE, null, this.pageHandler, this),
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.SELECT_SLOT, null, this.selectSlotHandler, this),
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.UNSET_SLOT, null, this.unsetSlotHandler, this),
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.SHOW_VARIANT_SLOTS, null, this.showVariantSlotHandler, this),
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.SLOT_HIDED, null, this.slotHidedHandler, this),
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.BATTLE_ACTION, null, this.battleActionHandler, this),
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this),
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.FOCUS_FIRST_FREE_SLOT, null, this.focusFirstFreeSlot, this),
    this.testSize(),
    this.focusFirstFreeSlot()
}
,
canvas.app.leftMenu.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.leftMenu.Main.prototype.swfObject = function(t) {
    var e, a;
    if (t)
        for (e in t)
            switch (e) {
            case "user|effects":
                var s, i = [], n = [];
                for (s in (a = t["user|effects"]).effects)
                    i[parseInt(s)] = a.effects[s];
                for (s in a.variant_effects)
                    n[parseInt(s)] = a.variant_effects[s];
                var o = {
                    EffList: i,
                    VariantEffList: n,
                    slotsTotal: a.effect_slot_num_max,
                    VariantSlotsTotal: a.variant_effect_slot_num_max
                };
                this.model.parse(o),
                canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.SLOT_CHANGED, null, this.slotChangedHandler, this),
                this.view.update(),
                canvas.EventManager.removeEventListener(canvas.app.leftMenu.Event.SLOT_CHANGED, null, this.slotChangedHandler, this);
                break;
            case "common|current_slot":
                this.model.itemWasEquipped = !0
            }
}
,
canvas.app.leftMenu.Main.prototype.swfData = function(t) {
    var e, a, s, i = t.split("@");
    if (2 == i.length)
        switch (i[0]) {
        case "EffList":
            this.model.parseBattleEffects(i[1]),
            this.view.update();
            break;
        case "update_cnt":
            s = i[1].split(","),
            e = this.model.addCount(s[0], parseInt(s[1])),
            (a = this.view.list.items[(e.slot - 1) % canvas.app.leftMenu.Const.ON_PAGE]).variantSlotsContainer.parent && (a._disabledVariant = !0),
            this.model.addCooldown(e),
            this.view.update();
            break;
        case "swap_slots":
            s = i[1].split(","),
            this.model.swapItems(s[0], s[2]),
            this.view.update();
            break;
        case "PrevPage":
            this.view.pager.currentPage--;
            break;
        case "NextPage":
            this.view.pager.currentPage++;
            break;
        case "HotKey":
            s = parseInt(i[1]) - 1,
            this.view.list.items[s] && this.view.list.items[s].items[0].clickHandler();
            break;
        case "cd_dec":
            this.model.deltaTurn(parseInt(i[1]))
        }
}
,
canvas.app.leftMenu.Main.prototype.pageHandler = function(t) {
    this.view.update()
}
,
canvas.app.leftMenu.Main.prototype.selectSlotHandler = function(t) {
    this.model.inBattle || (this.model.selectedRow = t.params.row,
    this.model.selectedColumn = t.params.column,
    this.model.selectedSlot = this.view.getSlotNum(this.model.selectedColumn, this.model.selectedRow),
    this.model.selectedSlotIsVariant = 0 < this.model.selectedColumn,
    this.view.selectSlot(this.model.selectedSlot, this.model.selectedSlotIsVariant),
    this.slotFocus(this.model.selectedSlot, this.model.selectedSlotIsVariant ? 1 : 0))
}
,
canvas.app.leftMenu.Main.prototype.focusFirstFreeSlot = function() {
    if (!this.model.selectedSlot && !this.model.inBattle) {
        for (var t = 1, e = 1, a = 0; a < this.model.slotsCount; a++)
            for (var s = 0; s < 3; s++)
                if (0 < s) {
                    if (!(e > this.model.variantSlotsCount)) {
                        if (!this.model.variantItems[e])
                            return this.slotFocus(e, 1),
                            this.model.itemWasEquipped && (this.view.pager.currentPage = Math.max(1, Math.ceil((e - 1) / (2 * canvas.app.leftMenu.Const.ON_PAGE)))),
                            void (this.model.itemWasEquipped = !1);
                        e++
                    }
                } else {
                    if (!this.model.items[t])
                        return this.slotFocus(t, 0),
                        this.model.itemWasEquipped && (this.view.pager.currentPage = Math.max(1, Math.ceil((t - 1) / canvas.app.leftMenu.Const.ON_PAGE))),
                        void (this.model.itemWasEquipped = !1);
                    t++
                }
        this.model.itemWasEquipped && (this.model.slotFocusIsVariant ? this.view.pager.currentPage = Math.max(1, Math.ceil(this.model.slotFocusNum / (2 * canvas.app.leftMenu.Const.ON_PAGE))) : this.view.pager.currentPage = Math.max(1, Math.ceil(this.model.slotFocusNum / canvas.app.leftMenu.Const.ON_PAGE))),
        this.model.itemWasEquipped = !1,
        this.slotFocus(0, 0)
    }
}
,
canvas.app.leftMenu.Main.prototype.slotFocus = function(t, e) {
    slotFocus(t, e),
    this.model.slotFocusNum = t,
    this.model.slotFocusIsVariant = e
}
,
canvas.app.leftMenu.Main.prototype.unsetSlotHandler = function(t) {
    this.model.selectedSlot = null,
    this.model.unsetList.push(t.params),
    this.unsetTimer || this.unsetTimerHandler()
}
,
canvas.app.leftMenu.Main.prototype.unsetTimerHandler = function(t) {
    0 < this.model.unsetList.length ? (this.unsetSlot(this.model.unsetList.shift()),
    this.unsetTimer = setTimeout(this.unsetTimerHandler.bind(this), 500)) : this.unsetTimer = 0
}
,
canvas.app.leftMenu.Main.prototype.unsetSlot = function(t) {
    var e = this.view.getSlotNum(t.column, t.row);
    unsetEffect(t.id, e) && (0 < t.column ? this.model.variantItems[e] = null : this.model.items[e] = null,
    this.view.update())
}
,
canvas.app.leftMenu.Main.prototype.showVariantSlotHandler = function(t) {
    for (var e = 0; e < canvas.app.leftMenu.Const.ON_PAGE; e++)
        e != t.params && this.view.list.items[e].hideVariantSlots()
}
,
canvas.app.leftMenu.Main.prototype.slotChangedHandler = function(t) {
    this.model.inBattle || (this.view.list.items[t.params].showVariantSlots(),
    this.showVariantSlotHandler(t))
}
,
canvas.app.leftMenu.Main.prototype.slotHidedHandler = function(t) {
    this.testSize()
}
,
canvas.app.leftMenu.Main.prototype.testSize = function() {
    for (var t = !1, e = 0; e < canvas.app.leftMenu.Const.ON_PAGE; e++)
        if (this.view.list.items[e].opened) {
            t = !0;
            break
        }
    var a = t ? 0 : -84;
    a != this.model.lastCanvasSize && (this.model.lastCanvasSize = a,
    this.view.position.set(-a, 0),
    setStyleSWF("left", a))
}
,
canvas.app.leftMenu.Main.prototype.battleActionHandler = function(t) {
    this.model.swfTransfer("game", t.params)
}
,
canvas.app.leftMenu.Main.prototype.frameHandler = function(t) {
    if (this.model.inBattle) {
        var e = this.model.groupCooldowns.length
          , a = !1;
        if (0 < e)
            for (var s, i, n = canvas.Functions.now(), o = 0; o < e; o++) {
                1 == (s = this.model.groupCooldowns[o]).type ? n >= s.finish && (this.model.groupCooldowns.splice(o, 1),
                a = !0) : s.current >= s.finish && (this.model.groupCooldowns.splice(o, 1),
                a = !0);
                for (var r = 0; r < canvas.app.leftMenu.Const.ON_PAGE; r++)
                    for (var c = 0; c < 3; c++)
                        (i = this.view.list.items[r].items[c]).data && i.data.cdGroupId == s.group && i.updateCooldown(a ? null : s);
                if (a)
                    return
            }
    }
}
,
canvas.app.leftMenu.Model = function(t) {
    t.EffList = t.EffList.split(","),
    t.VariantEffList = t.VariantEffList.split(","),
    this.persFlags = null != t.persFlags ? parseInt(t.persFlags) : 0,
    this.flagShowBattleHints = null == t.persFlags || canvas.Functions.testFlag(this.persFlags, 262144),
    this.unsetList = [],
    this.lastCanvasSize = 0,
    this.lastOnPageCount = 0,
    this.groupCooldowns = [],
    this.itemWasEquipped = !1,
    this.slotFocusNum = 0,
    this.slotFocusIsVariant = 0,
    this.parse(t)
}
,
canvas.app.leftMenu.Model.prototype.parse = function(t) {
    this.selectedSlot = null,
    this.items = t.EffList ? this.parseItems(t.EffList) : [],
    this.variantItems = t.VariantEffList ? this.parseItems(t.VariantEffList, !0) : [],
    this.slotsCount = t.slotsTotal ? parseInt(t.slotsTotal) : 0,
    this.variantSlotsCount = t.VariantSlotsTotal ? parseInt(t.VariantSlotsTotal) : 0,
    this.inBattle = !1,
    0 < this.groupCooldowns.length && (this.groupCooldowns = [])
}
,
canvas.app.leftMenu.Model.prototype.parseItems = function(t, e) {
    null == e && (e = !1);
    for (var a, s = [], i = t.length, n = 0; n < i; n++)
        (a = new canvas.data.leftMenu.ItemData(t[n].split(":"))).variant = e,
        s[a.slot] = a;
    return s
}
,
canvas.app.leftMenu.Model.prototype.inBattleFrame = function() {
    return this.swfTransfer("game", "ping@null")
}
,
canvas.app.leftMenu.Model.prototype.swfTransfer = function(t, e) {
    return swfTransfer("item", t, e)
}
,
canvas.app.leftMenu.Model.prototype.parseBattleEffects = function(t) {
    var e = t.split(String.fromCharCode(2));
    canvas.app.leftMenu.Const.MIN_COOLDOWN = parseFloat(e.pop());
    var a = e.length;
    this.items = [],
    this.variantItems = [];
    for (var s = 0; s < a; s++)
        item = new canvas.data.leftMenu.ItemData(e[s].split(String.fromCharCode(1))),
        item.variant ? (item.slot = (item.slot - 1) * canvas.app.leftMenu.Const.VARIANT_SLOTS_COUNT + (item.variantNum - 1),
        this.variantItems[item.slot] = item) : this.items[item.slot] = item,
        0 < item.cdLeft && this.addCooldown(item);
    this.inBattle = !0
}
,
canvas.app.leftMenu.Model.prototype.addCount = function(t, e) {
    this.items.length;
    var a = this.findItem(t);
    return a ? (a.count += e,
    a.count < 1 && (this.items[a.slot] = null),
    a) : (a = this.findVariantItem(t)) ? (a.count += e,
    a.count < 1 && (this.variantItems[a.slot] = null),
    a) : void 0
}
,
canvas.app.leftMenu.Model.prototype.findItem = function(t) {
    for (var e, a = this.items.length, s = 0; s < a; s++)
        if ((e = this.items[s]) && e.id == t)
            return e;
    return null
}
,
canvas.app.leftMenu.Model.prototype.findVariantItem = function(t) {
    for (var e, a = this.variantItems.length, s = 0; s < a; s++)
        if ((e = this.variantItems[s]) && e.id == t)
            return e;
    return null
}
,
canvas.app.leftMenu.Model.prototype.swapItems = function(t, e) {
    var a, s = this.findVariantItem(t);
    s && (a = this.items[Math.floor((s.slot - 1) / canvas.app.leftMenu.Const.VARIANT_SLOTS_COUNT) + 1]) && (t = s.slot,
    s.slot = a.slot,
    a.slot = t,
    this.items[s.slot] = s,
    (this.variantItems[a.slot] = a).variant = !0,
    s.variant = !1)
}
,
canvas.app.leftMenu.Model.prototype.addCooldown = function(t) {
    var e = {
        group: t.cdGroupId,
        type: t.cdType,
        finish: 1 == t.cdType ? canvas.Functions.now() + (0 < t.cdLeft ? t.cdLeft : t.cdTime) : t.cdTime
    };
    e.start = 1 == t.cdType ? e.finish - t.cdTime : 0,
    2 == e.type && (e.current = 0 < t.cdLeft ? e.finish - t.cdLeft : 0),
    t.cdLeft = 0;
    var a, s = this.groupCooldowns.length;
    if (0 < s)
        for (var i = 0; i < s; i++)
            if ((a = this.groupCooldowns[i]).group == e.group)
                return void (a.finish = Math.max(a.finish, e.finish));
    this.groupCooldowns.push(e)
}
,
canvas.app.leftMenu.Model.prototype.deltaTurn = function(t) {
    for (var e = this.groupCooldowns.length, a = 0; a < e; a++)
        2 == this.groupCooldowns[a].type && (this.groupCooldowns[a].current += t)
}
,
canvas.app.leftMenu.View = function() {
    canvas.px.Container.call(this),
    this.back = this.addChild(new canvas.px.Mask(150,1e3)),
    this.back.interactive = !0,
    this.back.click = this.backClickHandler.bind(this),
    this.pager = new canvas.app.leftMenu.view.PagerView,
    this.list = new canvas.ui.List(canvas.ui.ListType.VERTICAL,1),
    this.list.interactive = !1,
    this.addChild(this.list),
    this.list.position.set(0, 2),
    this.initList(),
    this.update()
}
,
canvas.app.leftMenu.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.leftMenu.View.prototype.initList = function() {
    this.list.clear(!1),
    this.list.setSize(150, canvas.app.leftMenu.Const.ON_PAGE * canvas.app.leftMenu.Const.SLOT_HEIGHT);
    for (var t = 0; t < canvas.app.leftMenu.Const.ON_PAGE; t++)
        this.list.add(new canvas.app.leftMenu.view.SlotView(t), !1);
    this.pager.position.set(0, this.list._height - 7),
    this.list.update()
}
,
canvas.app.leftMenu.View.prototype.update = function() {
    var t = canvas.app.leftMenu.model;
    this.pager.numPages = Math.ceil(t.slotsCount / canvas.app.leftMenu.Const.ON_PAGE);
    for (var e = (this.pager.currentPage - 1) * canvas.app.leftMenu.Const.ON_PAGE + 1, a = 0, s = e; s < e + canvas.app.leftMenu.Const.ON_PAGE; s++)
        t.inBattle || (this.list.items[a]._disabledVariant = !1),
        this.list.items[a].items[0].data = t.items[s],
        this.list.items[a].items[0].disabled = s > t.slotsCount,
        this.list.items[a].items[0].selected = a == t.selectedRow && 0 == t.selectedColumn,
        a++;
    var i, n, a = 0;
    for (s = e = (this.pager.currentPage - 1) * canvas.app.leftMenu.Const.ON_PAGE * 2 + 1; s < e + 2 * canvas.app.leftMenu.Const.ON_PAGE; s++)
        n = 1 == (i = s % 2 == 0 ? 2 : 1) && s == t.variantSlotsCount,
        t.inBattle && !this.list.items[a]._disabledVariant && (this.list.items[a]._disabledVariant = t.variantItems[s] && t.variantItems[s].disable),
        1 == i && (this.list.items[a].data = s > t.variantSlotsCount ? 1 : n ? 2 : 3),
        s <= t.variantSlotsCount && (this.list.items[a].items[n ? 2 : i].data = t.variantItems[s],
        this.list.items[a].items[n ? 2 : i].disabled = s > t.variantSlotsCount,
        this.list.items[a].items[n ? 2 : i].selected = a == t.selectedRow && t.selectedColumn == i),
        2 == i && a++;
    this.selectSlot(t.selectedSlot, t.selectedSlotIsVariant),
    canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.FOCUS_FIRST_FREE_SLOT),
    canvas.app.leftMenu.model.slotsCount > canvas.app.leftMenu.Const.ON_PAGE ? this.addChildAt(this.pager, 1) : this.removeIfExist(this.pager)
}
,
canvas.app.leftMenu.View.prototype.selectSlot = function(t, e) {
    for (var a = 0; a < canvas.app.leftMenu.Const.ON_PAGE; a++)
        for (var s = 0; s < 3; s++)
            this.list.items[a].items[s].selected = (0 == s && !e || 0 < s && e) && t == this.getSlotNum(s, a)
}
,
canvas.app.leftMenu.View.prototype.getSlotNum = function(t, e) {
    return 0 < t ? (this.pager.currentPage - 1) * canvas.app.leftMenu.Const.ON_PAGE * 2 + 2 * e + t : (this.pager.currentPage - 1) * canvas.app.leftMenu.Const.ON_PAGE + e + 1
}
,
canvas.app.leftMenu.View.prototype.backClickHandler = function(t) {
    for (var e = 0; e < canvas.app.leftMenu.Const.ON_PAGE; e++)
        this.list.items[e].hideVariantSlots()
}
,
canvas.app.leftMenu.view.ItemView = function(t, e) {
    this._disabled = !1,
    Object.defineProperty(this, "disabled", {
        get: function() {
            return this._disabled
        },
        set: function(t) {
            this._disabled = t,
            this.disabled ? (this.container.addChild(this.disabledImage),
            this.interactive = !1) : (this.container.removeIfExist(this.disabledImage),
            this.interactive = !0)
        }
    }),
    canvas.ui.ListRenderer.call(this),
    this.container = this.addChild(new canvas.px.Container),
    this.row = t,
    this.column = e,
    this.back = new canvas.px.Graphics,
    this.back.beginFill(0, 0),
    this.back.drawCircle(25, 23, 20, 20),
    this.back.endFill(),
    this.container.addChild(this.back),
    this.selector = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/item_select")),
    this.selector.position.set(7, 3),
    this.disabledImage = new canvas.px.Graphics,
    this.disabledImage.beginFill(6684672, .4),
    this.disabledImage.drawCircle(25, 23, 20, 20),
    this.disabledImage.endFill(),
    this.interactive = !0,
    this.buttonMode = !0,
    this.image = new canvas.ui.Image(null,null,null,!1),
    this.image.scale.set(2 / 3, 2 / 3),
    this.image.position.set(7, 3),
    this.container.addChild(this.image);
    e = new canvas.px.Graphics;
    e.beginFill(0, 1),
    e.drawCircle(20, 20, 20),
    e.endFill(),
    this.container.addChild(e),
    e.position.set(7, 3),
    this.image.mask = e,
    this.countField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE,16777215,20,15,"center"),
    this.addChild(this.countField),
    0 < this.column ? this.countField.position.set(16, 18) : this.countField.position.set(26, 27),
    this.cooldown = new canvas.px.RoundProgress(22,0,.8),
    this.container.addChild(this.cooldown),
    this.cooldown.progress = 0,
    this.cooldown.position.set(26, 22),
    this.cooldown.scale.x = -1,
    this.cooldownField = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD_STROKE,16777215,32,15,"center"),
    this.cooldownField.position.set(10, 17),
    this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/item_over")),
    this.light.position.set(7, 3),
    this.light.blendMode = canvas.px.BlendMode.OVERLAY,
    this.click = this.clickHandler.bind(this),
    this.mouseover = this.overHandler.bind(this),
    this.mouseout = this.outHandler.bind(this)
}
,
canvas.app.leftMenu.view.ItemView.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.leftMenu.view.ItemView.prototype.update = function() {
    var t = canvas.app.leftMenu.model;
    this.data ? (this.image.setImage(canvas.Config.artifactsPath + this.data.image),
    this.countField.text = 98 < this.data.count ? "99" : this.data.count) : (this.image.clear(),
    this.countField.text = ""),
    (null == this.oldData && null != this.data || null != this.oldData && null == this.data || null != this.data && null != this.oldData && this.data.id != this.oldData.id) && (canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.SLOT_CHANGED, null, this.row),
    this.updateCooldown(null)),
    t.inBattle || this.updateCooldown(null)
}
,
canvas.app.leftMenu.view.ItemView.prototype.updateSelection = function() {
    this._selected = !this.data && !this.disabled && this._selected,
    this.selected ? this.container.addChild(this.selector) : this.container.removeIfExist(this.selector)
}
,
canvas.app.leftMenu.view.ItemView.prototype.clickHandler = function() {
    var t = canvas.app.leftMenu.model;
    this.disabled || (t.inBattleFrame() ? this.data && 0 == this.cooldown.progress && (0 < this.column ? canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.BATTLE_ACTION, null, "swapSubSlot@" + this.data.id) : canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.BATTLE_ACTION, null, "useEffect@" + this.data.id)) : this.data ? canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.UNSET_SLOT, null, {
        id: this.data.id,
        row: this.row,
        column: this.singleSlot ? this.column - 1 : this.column
    }) : canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.SELECT_SLOT, null, {
        row: this.row,
        column: this.column
    }))
}
,
canvas.app.leftMenu.view.ItemView.prototype.overHandler = function() {
    var t = canvas.app.leftMenu.model;
    this.data && !this.disabled && (this.container.addChild(this.light),
    t.inBattle && !t.flagShowBattleHints || (artifactAltSimple(this.data.id, 2),
    canvas.app.leftMenu.view.ItemView.overedId = this.data.id),
    0 < this.column && (this.basePos = new canvas.px.Point(this.container.x,this.container.y),
    this.container.scale.set(.85, .85),
    this.container.position.set(this.basePos.x - 4, this.basePos.y - 3)),
    0 < this.cooldown.progress && this.container.addChild(this.cooldownField))
}
,
canvas.app.leftMenu.view.ItemView.prototype.outHandler = function() {
    this.container.removeIfExist(this.light),
    this.container.removeIfExist(this.cooldownField),
    0 < this.column && this.basePos && (this.container.scale.set(.7, .7),
    this.container.position.set(this.basePos.x, this.basePos.y)),
    this.data && this.data.id != canvas.app.leftMenu.view.ItemView.overedId || (artifactAltSimple(canvas.app.leftMenu.view.ItemView.overedId, 0),
    canvas.app.leftMenu.view.ItemView.overedId = 0)
}
,
canvas.app.leftMenu.view.ItemView.prototype.updateCooldown = function(t) {
    var e;
    t ? (e = Date.now(),
    1 == t.type ? (this.cooldownField.text = t.finish - canvas.Functions.now(),
    this.cooldown.progress = 1 - (e - 1e3 * t.start) / (1e3 * (t.finish - t.start) - 500)) : (this.cooldownField.text = t.finish - t.current,
    this.cooldown.progress = 1 - (t.current - t.start) / (t.finish - t.start))) : (this.cooldownField.text = "",
    this.cooldown.progress = 0)
}
,
canvas.app.leftMenu.view.ItemView.overedId = 0,
canvas.app.leftMenu.view.PagerView = function(t) {
    this._numPages = 1,
    Object.defineProperty(this, "numPages", {
        get: function() {
            return this._numPages
        },
        set: function(t) {
            this._numPages = t,
            this.currentPage = this.currentPage,
            this.update()
        }
    }),
    this._currentPage = 1,
    Object.defineProperty(this, "currentPage", {
        get: function() {
            return this._currentPage
        },
        set: function(t) {
            var e = this.currentPage;
            this._currentPage = t < 1 ? 1 : t > this.numPages ? this.numPages : t,
            this.update(),
            e != this.currentPage && canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.CHANGE_PAGE, null, this.currentPage)
        }
    }),
    canvas.px.Container.call(this),
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/pager_back"))),
    this.plusButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "left/pager_arrow"),canvas.ResourceLoader.getImage("ui", "left/pager_arrow_over"))),
    this.plusButton.position.set(46, 11),
    this.minusButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "left/pager_arrow"),canvas.ResourceLoader.getImage("ui", "left/pager_arrow_over"))),
    this.minusButton.scale.x = -1,
    this.minusButton.position.set(15, 11),
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,16699293,30,18,"center")),
    this.field.position.set(16, 9),
    this.field.interactive = !1,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.minusButton, this.minusClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.plusButton, this.plusClickHandler, this),
    this.update()
}
,
canvas.app.leftMenu.view.PagerView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.leftMenu.view.PagerView.prototype.update = function() {
    this.field.text = this.currentPage
}
,
canvas.app.leftMenu.view.PagerView.prototype.minusClickHandler = function() {
    this.currentPage--
}
,
canvas.app.leftMenu.view.PagerView.prototype.plusClickHandler = function() {
    this.currentPage++
}
,
canvas.app.leftMenu.view.SlotView = function(t) {
    this._disabledVariant = !1,
    Object.defineProperty(this, "disabledVariant", {
        get: function() {
            return this._disabledVariant
        },
        set: function(t) {
            this._disabledVariant = t,
            this.update()
        }
    }),
    canvas.ui.ListRenderer.call(this),
    this.index = t,
    this.interactive = !1,
    this.startPos = -24,
    this.endPos = 0,
    this.direction = 0,
    this.opened = !1,
    this.variantSlotsContainer = this.addChild(new canvas.px.Container),
    this.variantSlotsBack = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/variant_slots_back")),
    this.variantSlotsBack.position.set(0, -1),
    this.variantSlotsContainer.addChild(this.variantSlotsBack),
    this.variantSlotsContainer.position.set(this.startPos, 0);
    t = new canvas.px.Mask(80,45);
    t.position.set(65, 5),
    this.addChild(t),
    this.variantSlotsContainer.mask = t,
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/slot_back"))),
    this.back.position.set(11, 7),
    this.items = [];
    for (var e = 0; e < 3; e++) {
        var a = new canvas.app.leftMenu.view.ItemView(this.index,e);
        this.items.push(a),
        0 == e ? this.addChild(a) : (this.variantSlotsContainer.addChild(a),
        a.container.scale.set(.7, .7))
    }
    this.items[0].position.set(5, 5),
    this.items[1].position.set(11, 11),
    this.items[2].position.set(49, 11),
    this.front = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "left/slot_front"))),
    this.buttonsContainer = this.addChild(new canvas.px.Container),
    this.showButton = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "left/slot_arrow_right"),canvas.ResourceLoader.getImage("ui", "left/slot_arrow_right_over"),canvas.ResourceLoader.getImage("ui", "left/slot_arrow_right_down")),
    this.showButton.position.set(51, 12),
    this.hideButton = new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "left/slot_arrow_left"),canvas.ResourceLoader.getImage("ui", "left/slot_arrow_left_over"),canvas.ResourceLoader.getImage("ui", "left/slot_arrow_left_down")),
    this.hideButton.position.set(51, 12),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.showButton, this.showClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.hideButton, this.hideClickHandler, this),
    this.setSize(60, 39)
}
,
canvas.app.leftMenu.view.SlotView.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.leftMenu.view.SlotView.prototype.update = function() {
    if (this.data) {
        if (this.items[2].singleSlot = !1,
        this.disabledVariant)
            this.removeIfExist(this.variantSlotsContainer),
            this.endPos = 0;
        else
            switch (this.data) {
            case 1:
                this.removeIfExist(this.variantSlotsContainer),
                this.endPos = 0;
                break;
            case 2:
                this.addChildAt(this.variantSlotsContainer, 0),
                this.endPos = 19,
                this.items[2].singleSlot = !0;
                break;
            case 3:
                this.addChildAt(this.variantSlotsContainer, 0),
                this.endPos = 56
            }
        this.variantSlotsContainer.parent && (this.hideButton.parent || this.showButton.parent) || this.hideVariantSlots()
    } else
        this.removeIfExist(this.variantSlotsContainer)
}
,
canvas.app.leftMenu.view.SlotView.prototype.showVariantSlots = function() {
    this.variantSlotsContainer.parent && (this.direction = 1,
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.removeIfExist(this.showButton),
    this.addChild(this.hideButton),
    canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.SHOW_VARIANT_SLOTS, null, this.index))
}
,
canvas.app.leftMenu.view.SlotView.prototype.hideVariantSlots = function() {
    this.direction = -1,
    canvas.EventManager.addEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.removeIfExist(this.hideButton),
    this.addChild(this.showButton),
    this.variantSlotsContainer.parent || (this.removeIfExist(this.showButton),
    this.variantSlotsContainer.x = this.startPos)
}
,
canvas.app.leftMenu.view.SlotView.prototype.frameHandler = function() {
    try {
        0 != this.direction ? 0 < this.direction ? (this.opened = !0,
        this.variantSlotsContainer.x < this.endPos ? this.variantSlotsContainer.x = Math.min(this.variantSlotsContainer.x + 15, this.endPos) : (this.variantSlotsContainer.x = this.endPos,
        this.direction = 0)) : this.variantSlotsContainer.x > this.startPos ? this.variantSlotsContainer.x -= 15 : (this.variantSlotsContainer.x = this.startPos,
        this.direction = 0,
        this.opened = !1,
        canvas.EventManager.dispatchEvent(canvas.app.leftMenu.Event.SLOT_HIDED, null, this.index)) : canvas.EventManager.removeEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this)
    } catch (t) {
        canvas.EventManager.removeEventListener(canvas.app.leftMenu.Event.ENTER_FRAME, null, this.frameHandler, this)
    }
}
,
canvas.app.leftMenu.view.SlotView.prototype.showClickHandler = function() {
    this.showVariantSlots()
}
,
canvas.app.leftMenu.view.SlotView.prototype.hideClickHandler = function() {
    this.hideVariantSlots()
}
,
canvas.app.avatar.Const = {
    UPDATE_FLAG_PERS: "pers",
    MANOR_FLAG_EXP_DECR: 1,
    MANOR_FLAG_EXP_USE: 2,
    MANOR_FLAG_VALOR_USE: 4,
    USER_PREMIUM_DISPLAY_CURRENCY_GAME: 1,
    USER_PREMIUM_DISPLAY_CURRENCY_SILVER: 2,
    USER_PREMIUM_DISPLAY_CURRENCY_GOLD: 4,
    RESTORE_REFRESH: .5
},
canvas.app.avatar.Event = {
    ENTER_FRAME: "Avatar.ENTER_FRAME",
    HINT_ADD: "Avatar.HINT_ADD",
    HINT_REMOVE: "Avatar.HINT_REMOVE",
    UP_MANOR_MODE: "Avatar.UP_MANOR_MODE",
    PET_CLICK: "Avatar.PET_CLICK",
    RED_BUTTON_CLICK: "Avatar.RED_BUTTON_CLICK"
},
canvas.app.avatar.Main = function(t, e) {
    canvas.px.Container.call(this),
    this.model = t,
    this.hintManager = e,
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height),
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.UP_MANOR_MODE, null, this.handlerUpManorMode, this),
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.PET_CLICK, null, this.handlerPetClick, this),
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.RED_BUTTON_CLICK, null, this.handlerRedButtonClick, this),
    this.request = new canvas.utils.URLRequest,
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this),
    this.view = new canvas.app.avatar.View,
    this.addChild(this.view),
    this.addChild(this.hintContainer),
    this.timer = setInterval(this.timerHandler.bind(this), 1e3 * canvas.app.avatar.Const.RESTORE_REFRESH)
}
,
canvas.app.avatar.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.avatar.Main.prototype.swfObject = function(t) {
    var e, a;
    if (t)
        for (e in t)
            "user|view" === e && (a = t["user|view"],
            this.model.parse(a),
            this.view.update())
}
,
canvas.app.avatar.Main.prototype.swfData = function(t) {
    var e, a = t.split("@");
    if (2 == a.length)
        switch (a[0]) {
        case "updHP":
            e = a[1].split(","),
            this.model.hpCur = parseInt(e[0]),
            this.model.hpMax = parseInt(e[1]),
            this.model.hpTime = 0;
            break;
        case "updMP":
            e = a[1].split(","),
            this.model.mpCur = parseInt(e[0]),
            this.model.mpMax = parseInt(e[1]),
            this.model.mpTime = 0
        }
}
,
canvas.app.avatar.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.avatar.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.avatar.Main.prototype.handlerUpManorMode = function(t) {
    this.model.setEnergyMode(this.model.energyMode + 1),
    this.view.update()
}
,
canvas.app.avatar.Main.prototype.handlerPetClick = function(t) {
    var e;
    if (0 < this.model.petId)
        e = canvas.Config.entryPoint + "?object=pet&action=putoff&json_mode_on=1",
        this.request.type = "pet_putoff";
    else {
        if (!(0 < this.model.lastPetId))
            return;
        e = canvas.Config.entryPoint + "?object=pet&action=puton&ref=" + this.model.lastPetId + "&json_mode_on=1",
        this.request.type = "pet_puton"
    }
    this.request.load(e),
    this.view.lockButtons()
}
,
canvas.app.avatar.Main.prototype.handlerRedButtonClick = function(t) {
    var e = canvas.Config.entryPoint + "?object=user&action=redbutton_click&json_mode_on=1";
    this.request.type = "redbutton_click",
    this.request.load(e),
    this.view.lockButtons()
}
,
canvas.app.avatar.Main.prototype.timerHandler = function(t) {
    var e, a = this.model, s = Date.now(), i = s - a.startTime;
    0 != a.hpTime && (e = (s - a.hpStartTime) / 1e3,
    a.hpCur = Math.round(Math.min(a.hpMax, a.hp + (a.hpMax - a.hp) * (e / a.hpTime)))),
    0 != a.mpTime && (e = (s - a.mpStartTime) / 1e3,
    a.mpCur = Math.round(Math.min(a.mpMax, a.mp + (a.mpMax - a.mp) * (e / a.mpTime)))),
    0 < a.manorExpSpeed && (e = (s - a.manorExpStartTime) / 1e3,
    a.manorExpCur = Math.floor(Math.min(a.manorExpMax, a.manorExp + a.manorExpSpeed * e))),
    0 < a.manorValorSpeed && (e = (s - a.manorValorStartTime) / 1e3,
    a.manorValorCur = Math.floor(Math.min(a.manorValorMax, a.manorValor + a.manorValorSpeed * e))),
    0 < a.petTimeout && s > a.petTimeout && (a.petTimeout = 0,
    this.view.updatePetButton()),
    a.invTime -= i,
    this.view.updateTitles(),
    this.view.updatePremium(),
    this.view.redButton.updateTime(),
    a.startTime = s
}
,
canvas.app.avatar.Main.prototype.requestCompleteHandler = function() {
    var t, e, a = JSON.parse(this.request.request.responseText);
    switch (this.request.type) {
    case "pet_puton":
        (t = a["pet|puton"]) && 100 == t.status && (this.model.petId = this.model.lastPetId,
        _top().frames.main_frame.pet_effects = a["user|view"].pet_effects || [],
        this.model.petTimeout = Date.now() + 1500);
        break;
    case "pet_putoff":
        (t = a["pet|putoff"]) && 100 == t.status && (this.model.lastPetId = this.model.petId,
        this.model.petId = 0,
        _top().frames.main_frame.pet_effects = a["user|view"].pet_effects || [],
        this.model.petTimeout = Date.now() + 1500);
        break;
    case "redbutton_click":
        (t = a["user|redbutton_click"]) && 100 == t.status && t.redirect_url && canvas.Functions.navigateToURL(t.redirect_url, "_blank")
    }
    (e = a["user|view"]) && 100 == e.status && this.model.parse(e),
    t && t.error && showError(t.error),
    this.view.update()
}
,
canvas.app.avatar.Main.prototype.requestErrorHandler = function() {}
,
canvas.app.avatar.Model = function(t) {
    this.startTime = Date.now(),
    this.serverTime = new canvas.utils.ServerTime,
    this.localStorage = null,
    this.premiumLevel = 0,
    this.useTahoma = !1,
    this.energyMode = 0,
    this.availBotsKills = 0,
    this.updateFlags = {},
    this.updateHash = {},
    this.currencyFlags = 5,
    this.showMaxLevel = 0,
    this.showMaxRank = 0,
    this.lastPetId = 0,
    this.petId = 0,
    this.petTimeout = 0,
    this.redButtonGlobalTime = 0,
    this.redButtonUserTime = 0,
    this.redButtonLimit = 0,
    this.redButtonUsed = 0,
    this.redButtonHint = "",
    this.redButtonPicture = "",
    this.redButtonConfirm = !1,
    this.parse(t)
}
,
canvas.app.avatar.Model.prototype.parse = function(t) {
    var e, a, s, i, n = Date.now();
    if (this.ok(t.server_time) && this.ok(t.timezone) && this.serverTime.init(parseInt(t.server_time), .6 * parseInt(t.timezone)),
    this.ok(t.nick) && (this.login = t.nick),
    this.ok(t.exp) && (this.exp = parseInt(t.exp)),
    this.ok(t.expMax) && (this.expMax = parseInt(t.expMax)),
    this.ok(t.showMaxLevel) && (this.showMaxLevel = parseInt(t.showMaxLevel)),
    this.ok(t.showMaxRank) && (this.showMaxRank = parseInt(t.showMaxRank)),
    this.ok(t.rankHonorTable) && this.ok(t.honor) && this.ok(t.rankHonor)) {
        e = t.rankHonorTable.split("|"),
        a = parseInt(t.honor),
        s = parseInt(t.rankHonor);
        for (var o = i = 0; o < e.length; o++)
            e[o] == s && (i = null != e[o + 1] ? e[o + 1] : e[o]);
        this.valor = a - s,
        this.valorMax = i - s
    }
    this.ok(t.work) && (this.energy = parseInt(t.work)),
    this.ok(t.workMax) && (this.energyMax = parseInt(t.workMax)),
    this.ok(t.hp) && this.ok(t.hpMax) && this.ok(t.hpT) && (this.hp = this.hpCur = parseInt(t.hp),
    this.hpMax = parseInt(t.hpMax),
    this.hpTime = parseInt(t.hpT),
    this.hpStartTime = n),
    this.ok(t.mp) && this.ok(t.mpMax) && this.ok(t.mpT) && (this.mp = this.mpCur = parseInt(t.mp),
    this.mpMax = parseInt(t.mpMax),
    this.mpTime = parseInt(t.mpT),
    this.mpStartTime = n),
    this.ok(t.estateExp) && this.ok(t.exp_limit) && this.ok(t.exp_speed) && (this.manorExp = this.manorExpCur = parseInt(t.estateExp),
    this.manorExpMax = parseInt(t.exp_limit),
    this.manorExpSpeed = parseFloat(t.exp_speed),
    this.manorExpStartTime = n),
    this.ok(t.estateHonor) && this.ok(t.honor_limit) && this.ok(t.honor_speed) && (this.manorValor = this.manorValorCur = parseInt(t.estateHonor),
    this.manorValorMax = parseInt(t.honor_limit),
    this.manorValorSpeed = parseFloat(t.honor_speed),
    this.manorValorStartTime = n),
    this.ok(t.lvl) && (this.level = parseInt(t.lvl)),
    this.ok(t.moneyGame) && (n = t.moneyGame,
    this.bronze = null == n.split(".")[1] ? 0 : parseInt(n.split(".")[1].substr(0, 2)),
    n = (.01 * Math.floor(parseFloat(n))).toFixed(2),
    this.silver = null == n.split(".")[1] ? 0 : parseInt(n.split(".")[1].substr(0, 2)),
    this.gold = parseInt(n.split(".")[0])),
    this.ok(t.premium_level) && (this.premiumLevel = parseInt(t.premium_level)),
    this.ok(t.hide_premium) && 1 == parseInt(t.hide_premium) && (this.premiumLevel = 0),
    this.ok(t.moneyGold) && (this.crystal = parseFloat(t.moneyGold)),
    this.ok(t.moneySilver) && (this.rubin = parseFloat(t.moneySilver)),
    this.ok(t.effect) && (this.effects = parseInt(t.effect) < 0 ? 0 : parseInt(t.effect)),
    this.ok(t.gender) && (this.gender = "1" == t.gender ? "M" : "F"),
    this.ok(t.kind) && (this.race = "1" == t.kind ? "hum" : "mag"),
    this.ok(t.inv_time) && (this.invTime = 1e3 * parseInt(t.inv_time)),
    this.ok(t.parts) && (this.parts = t.parts),
    this.ok(t.dead) && (this.ghost = "1" == t.dead),
    this.ok(t.lang) && (this.useTahoma = "ru" != t.lang),
    this.ok(t.estateFlags) && (this.manorFlags = parseInt(t.estateFlags)),
    this.ok(t.avail_bots_kills_amount) && (this.availBotsKills = parseInt(t.avail_bots_kills_amount)),
    this.ok(t.display_currency) && (this.currencyFlags = parseInt(t.display_currency)),
    0 == this.energyMax ? 0 == this.mpMax ? this.currentView = 2 : this.currentView = 1 : 0 == this.mpMax ? this.currentView = 3 : this.currentView = 0,
    null == this.localStorage ? (this.localStorage = new canvas.utils.LocalStorage(canvas.Log.AVATAR),
    this.setEnergyMode(null == this.localStorage.get("energyMode") ? 0 : parseInt(this.localStorage.get("energyMode")), !1)) : this.setEnergyMode(this.energyMode),
    this.updateFlags[canvas.app.avatar.Const.UPDATE_FLAG_PERS] || (this.updateFlags[canvas.app.avatar.Const.UPDATE_FLAG_PERS] = this.parts + this.gender != this.updateHash[canvas.app.avatar.Const.UPDATE_FLAG_PERS]),
    this.updateHash[canvas.app.avatar.Const.UPDATE_FLAG_PERS] = this.parts + this.gender,
    this.petId = this.ok(t.pet_id) ? parseInt(t.pet_id) : 0,
    this.lastPetId = this.ok(t.last_pet_id) ? parseInt(t.last_pet_id) : 0,
    this.ok(t.redbutton_global_time) && (this.redButtonGlobalTime = parseInt(t.redbutton_global_time)),
    this.ok(t.redbutton_user_time) && (this.redButtonUserTime = parseInt(t.redbutton_user_time)),
    this.ok(t.redbutton_limit) && (this.redButtonLimit = parseInt(t.redbutton_limit)),
    this.ok(t.redbutton_used) && (this.redButtonUsed = parseInt(t.redbutton_used)),
    this.ok(t.redbutton_hint) && (this.redButtonHint = t.redbutton_hint),
    this.ok(t.redbutton_picture) && (this.redButtonPicture = t.redbutton_picture),
    this.ok(t.redbutton_confirm) && (this.redButtonConfirm = 0 < parseInt(t.redbutton_confirm))
}
,
canvas.app.avatar.Model.prototype.ok = function(t) {
    return null != t
}
,
canvas.app.avatar.Model.prototype.setEnergyMode = function(t, e) {
    switch (null == e && (e = !0),
    this.energyMode = 2 < t ? 0 : t,
    this.energyMode) {
    case 1:
        if (this.manorExpMax < 1)
            return void this.setEnergyMode(this.energyMode + 1);
        break;
    case 2:
        if (this.manorValorMax < 1)
            return void this.setEnergyMode(this.energyMode + 1)
    }
    e && this.localStorage.set("energyMode", this.energyMode)
}
,
canvas.app.avatar.Model.prototype.energyIsGrey = function() {
    switch (this.energyMode) {
    case 1:
        return !canvas.Functions.testFlag(this.manorFlags, canvas.app.avatar.Const.MANOR_FLAG_EXP_USE);
    case 2:
        return !canvas.Functions.testFlag(this.manorFlags, canvas.app.avatar.Const.MANOR_FLAG_VALOR_USE)
    }
    return !1
}
,
canvas.app.avatar.View = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.avatar.model
      , e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/exp_back")));
    e.position.set(76, 0),
    (e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/exp_front")))).position.set(76, 0),
    this.expProgress = this.addChild(new canvas.ui.Progress),
    this.expProgress.setSize(174, 13),
    this.expProgress.position.set(80, 4),
    this.expProgress.progress = 0,
    e.mask = this.expProgress.sprite,
    (e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/valor_back")))).position.set(76, 19),
    (e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/valor_front")))).position.set(76, 19),
    this.valorProgress = this.addChild(new canvas.ui.Progress),
    this.valorProgress.setSize(169, 13),
    this.valorProgress.position.set(84, 21),
    this.valorProgress.progress = 0,
    e.mask = this.valorProgress.sprite,
    this.hpBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/hp_back"))),
    this.hpBack.position.set(76, 36),
    this.hpFront = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/hp_front"))),
    this.hpFront.position.set(76, 36),
    this.hpProgress = this.addChild(new canvas.ui.Progress),
    this.hpProgress.setSize(83, 9),
    this.hpProgress.position.set(89, 37),
    this.hpProgress.progress = 0,
    this.hpFront.mask = this.hpProgress.sprite,
    this.mpBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/mp_back"))),
    this.mpBack.position.set(173, 36),
    this.mpFront = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/mp_front"))),
    this.mpFront.position.set(173, 36),
    this.mpProgress = this.addChild(new canvas.ui.Progress),
    this.mpProgress.setSize(76, 9),
    this.mpProgress.position.set(173, 37),
    this.mpProgress.progress = 0,
    this.mpFront.mask = this.mpProgress.sprite,
    this.manorBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/manor_grey_back"))),
    this.manorBack.position.set(76, 48),
    this.manorFront = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/manor_grey_front"))),
    this.manorFront.position.set(76, 48),
    this.manorProgress = this.addChild(new canvas.ui.Progress),
    this.manorProgress.setSize(152, 9),
    this.manorProgress.position.set(93, 50),
    this.manorProgress.progress = 0,
    this.manorFront.mask = this.manorProgress.sprite,
    this.expLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_big"))),
    this.valorLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_big"))),
    this.hpLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_small"))),
    this.mpLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_small"))),
    this.manorLine = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/line_small"))),
    (e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/uzor_right")))).position.set(237, 2),
    this.expField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE_BEVEL_SHARP,16777215,this.expProgress._width - 18,18,"left","top",0,0)),
    this.expField.position.set(this.expProgress.x + 22, 3),
    this.expField.buttonMode = !0,
    this.expField.interactive = !0,
    this.expField.back.interactive = !0,
    this.expField.mouseover = this.expOverHandler.bind(this),
    this.expField.mouseout = this.expOutHandler.bind(this),
    this.expField.click = this.expClickHandler.bind(this),
    this.expField.overed = !1,
    this.expField2 = this.addChild(new canvas.ui.Text(t.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,this.expProgress._width - 26,12,"center")),
    this.expField2.position.set(this.expProgress.x + 20, t.useTahoma ? 5 : 7),
    this.expField2.text = "",
    this.killHint = new canvas.app.view.MappingHint,
    canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.HINT_ADD, null, {
        target: this.expField.back,
        params: new canvas.utils.HintParams(this.killHint)
    }),
    this.valorField = this.addChild(new canvas.ui.Text(t.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,this.valorProgress._width,12,"center","top",0,0)),
    this.valorField.position.set(this.valorProgress.x + 6, t.useTahoma ? 21 : 23),
    this.valorField.interactive = !0,
    this.valorField.buttonMode = !0,
    this.valorField.mouseover = this.valorOverHandler.bind(this),
    this.valorField.mouseout = this.valorOutHandler.bind(this),
    this.valorField.click = this.valorClickHandler.bind(this),
    this.valorField.overed = !1,
    this.hpField = this.addChild(new canvas.ui.Text(t.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,100,12,"center","top",0,0)),
    this.hpField.position.set(this.hpProgress.x, t.useTahoma ? 35 : 37),
    this.hpField.interactive = !0,
    this.hpField.mouseover = this.hpOverHandler.bind(this),
    this.hpField.mouseout = this.hpOutHandler.bind(this),
    this.hpField.overed = !1,
    this.mpField = this.addChild(new canvas.ui.Text(t.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,100,12,"center","top",0,0)),
    this.mpField.position.set(this.mpProgress.x, t.useTahoma ? 35 : 37),
    this.mpField.interactive = !0,
    this.mpField.mouseover = this.mpOverHandler.bind(this),
    this.mpField.mouseout = this.mpOutHandler.bind(this),
    this.mpField.overed = !1,
    this.mpField.setSize(this.mpProgress._width),
    this.manorField = this.addChild(new canvas.ui.Text(t.useTahoma ? canvas.Const.FONT_TAHOMA_10_STROKE : canvas.Const.FONT_IFLASH,16777215,this.manorProgress._width + 10,12,"center","top",0,0)),
    this.manorField.position.set(this.manorProgress.x, t.useTahoma ? 47 : 49),
    this.manorField.interactive = !0,
    this.manorField.mouseover = this.manorOverHandler.bind(this),
    this.manorField.mouseout = this.manorOutHandler.bind(this),
    this.manorField.overed = !1,
    this.premiumButton = new canvas.app.avatar.view.PremiumButton,
    this.addChild(this.premiumButton),
    this.premiumButton.position.set(250, 2),
    this.premiumHint = new canvas.app.view.MappingHint,
    canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.HINT_ADD, null, {
        target: this.premiumButton,
        params: new canvas.utils.HintParams(this.premiumHint)
    }),
    this.moneyBack = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "avatar/money_back"),13,0,13,0)),
    this.moneyBack.position.set(78, 50),
    this.moneyBack.interactive = !0,
    this.moneyField = new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_10_BOLD_SHARP,canvas.Const.FONT_TAHOMA_10_BOLD_SHARP,3355392,300,20,"left"),
    this.addChild(this.moneyField),
    this.moneyField.position.set(96, 62),
    this.moneyButon = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "avatar/plus_button"))),
    this.moneyButon.position.set(269, 60),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.moneyButon, this.moneyClickHandler, this),
    this.switchButton = new canvas.app.avatar.view.SwitchButton(t.energyMode),
    this.addChild(this.switchButton),
    this.switchButton.position.set(252, 53),
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/back_" + t.race))),
    this.back.position.set(0, -2),
    this.playerContainer = this.addChild(new canvas.px.Container);
    e = new canvas.px.Graphics;
    e.beginFill(0, 1),
    e.drawCircle(44, 44, 34),
    e.endFill(),
    this.playerContainer.addChild(e),
    this.player = this.playerContainer.addChild(new canvas.animation.SkeletonAvatar(t.gender)),
    this.player.frameEvent = canvas.app.avatar.Event.ENTER_FRAME,
    this.player.position.set(-50, 15),
    this.player.mask = e,
    this.levelButton = this.addChild(new canvas.app.avatar.view.LevelButton),
    this.levelButton.position.set(34, 64),
    this.redButton = this.addChild(new canvas.app.avatar.view.RedButton),
    this.redButton.position.set(11, 64),
    this.effectsButton = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "avatar/effects_button")),
    this.effectsButton.position.set(56, 64),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.effectsButton, this.effectsClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.effectsButton, this.effectsOverHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.effectsButton, this.effectsOutHandler, this),
    this.petButton = this.addChild(new canvas.ui.SimpleButton),
    this.petButton.position.set(0, 34),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.petButton, this.petClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.petButton, this.petOverHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.petButton, this.petOutHandler, this),
    this.update()
}
,
canvas.app.avatar.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.avatar.View.prototype.update = function() {
    var t = canvas.app.avatar.model;
    1 == t.currentView || 2 == t.currentView ? (this.manorBack.texture = canvas.px.TextureEmpty,
    this.manorFront.texture = canvas.px.TextureEmpty,
    this.manorProgress.progress = 0,
    this.manorField.interactive = !1,
    this.switchButton.visible = !1,
    this.manorAvailable = !1) : (e = t.energyIsGrey() ? "grey" : this.switchButton.getColorByIndex(t.energyMode),
    this.manorBack.texture = canvas.ResourceLoader.getImage("ui", "avatar/manor_" + e + "_back"),
    this.manorFront.texture = canvas.ResourceLoader.getImage("ui", "avatar/manor_" + e + "_front"),
    this.manorField.interactive = !0,
    this.switchButton.visible = 0 < t.manorExpMax || 0 < t.manorValorMax,
    this.switchButton.mode = t.energyMode,
    this.manorAvailable = !0),
    2 == t.currentView || 3 == t.currentView ? (this.mpBack.texture = canvas.px.TextureEmpty,
    this.mpFront.texture = canvas.px.TextureEmpty,
    this.mpProgress.progress = 0,
    this.hpBack.texture = canvas.ResourceLoader.getImage("ui", "avatar/hp_back"),
    this.hpFront.texture = canvas.ResourceLoader.getImage("ui", "avatar/hp_front"),
    this.hpProgress.setSize(162, 9),
    this.mpField.interactive = !1,
    this.hpField.x = this.hpProgress.x + 4,
    this.manaAvailable = !1) : (this.mpBack.texture = canvas.ResourceLoader.getImage("ui", "avatar/mp_back"),
    this.mpFront.texture = canvas.ResourceLoader.getImage("ui", "avatar/mp_front"),
    this.hpBack.texture = canvas.ResourceLoader.getImage("ui", "avatar/hp_back_small"),
    this.hpFront.texture = canvas.ResourceLoader.getImage("ui", "avatar/hp_front_small"),
    this.hpProgress.setSize(83, 9),
    this.mpField.interactive = !0,
    this.hpField.x = this.hpProgress.x + 2,
    this.manaAvailable = !0),
    this.hpField.setSize(this.hpProgress._width),
    this.updateTitles(),
    this.updatePremium(),
    this.killHint.update(canvas.Translator.getText(507) + ": " + t.availBotsKills),
    t.updateFlags[canvas.app.avatar.Const.UPDATE_FLAG_PERS] && (this.player.skeletonData = new canvas.data.battle.SkeletonData(t.parts,t.gender),
    t.updateFlags[canvas.app.avatar.Const.UPDATE_FLAG_PERS] = !1),
    "1" == t.ghost ? (this.playerContainer.filters = [canvas.Functions.getGlow(1, 2, 2, (t.race,
    0), .1)],
    this.player.filters = [canvas.Functions.getAlpha(.25)]) : this.player.filters = this.playerContainer.filters = [];
    var e = "";
    canvas.Functions.testFlag(t.currencyFlags, canvas.app.avatar.Const.USER_PREMIUM_DISPLAY_CURRENCY_GAME) && (e = "<img src='avatar/money_gold' xOffset='-2' yOffset='1' atlas='ui'/>" + t.gold + "  <img src='avatar/money_silver' xOffset='-2' yOffset='1' atlas='ui'/>" + t.silver + "  <img src='avatar/money_bronze' xOffset='-2' yOffset='1' atlas='ui'/>" + t.bronze + "  "),
    0 < t.crystal && canvas.Functions.testFlag(t.currencyFlags, canvas.app.avatar.Const.USER_PREMIUM_DISPLAY_CURRENCY_GOLD) && (e += "<img src='avatar/money_crystal' xOffset='-2' yOffset='1' atlas='ui'/>" + t.crystal + "  "),
    0 < t.rubin && canvas.Functions.testFlag(t.currencyFlags, canvas.app.avatar.Const.USER_PREMIUM_DISPLAY_CURRENCY_SILVER) && (e += "<img src='avatar/money_rubin' xOffset='-2' yOffset='1' atlas='ui'/>" + t.rubin),
    this.moneyField.text = e,
    this.moneyBack.width = Math.max(160, this.moneyField.textWidth + 30),
    this.moneyBack.y = this.manorAvailable ? 59 : 47,
    this.moneyField.y = this.manorAvailable ? 62 : 50,
    this.moneyButon.position.set(this.moneyBack.width + 65, this.manorAvailable ? 60 : 48),
    this.levelButton.level = t.level,
    this.effectsTimer && clearTimeout(this.effectsTimer),
    0 < t.effects ? (this.addChild(this.effectsButton),
    t.effects < 2e5 && (this.effectsTimer = setTimeout(this.effectsTimerHandler.bind(this), 1e3 * t.effects))) : this.removeIfExist(this.effectsButton),
    this.petButton.baseTexture = this.petButton.sprite.texture = canvas.ResourceLoader.getImage("ui", 0 < t.petId ? "avatar/pet_enable" : "avatar/pet_disable"),
    this.petButton.enabled = (0 < t.lastPetId || 0 < t.petId) && 0 === t.petTimeout,
    this.redButton.update(),
    this.redButton.enabled = !0
}
,
canvas.app.avatar.View.prototype.updatePetButton = function() {
    var t = canvas.app.avatar.model;
    this.petButton.enabled = (0 < t.lastPetId || 0 < t.petId) && 0 === t.petTimeout
}
,
canvas.app.avatar.View.prototype.updateTitles = function() {
    var t, e, a, s, i, n, o, r = canvas.app.avatar.model, c = Date.now();
    if (this.expField.overed)
        this.expField2.text = canvas.Translator.getText(142).toLowerCase() + " " + (r.showMaxLevel ? r.showMaxLevel.toString() : r.exp.toString() + "/" + r.expMax.toString()),
        this.expField2.hAlign = "center",
        this.expField.text = "";
    else {
        if (a = 0 < r.invTime ? canvas.Translator.getText(3001) + " " + Math.ceil(r.invTime / 6e4) + " " + canvas.Translator.getText(2016) + "." : r.login,
        this.expField.text = a,
        115 < this.expField.textWidth)
            for (e = a.length - 2; 115 < this.expField.textWidth; )
                this.expField.text = a.substr(0, e--) + "...";
        r.showMaxLevel ? this.expField2.text = "" : (o = .5 < (n = r.exp / r.expMax) ? Math.floor(1e4 * n) : Math.ceil(1e4 * n),
        this.expField2.text = (.01 * o).toFixed(2) + "%",
        this.expField2.hAlign = "right")
    }
    if (i = r.exp / r.expMax,
    this.expProgress.progress = r.showMaxLevel ? 1 : i,
    this.valorField.overed ? this.valorField.text = r.showMaxRank ? r.showMaxRank.toString() : r.valor.toString() + "/" + r.valorMax.toString() : r.showMaxRank ? this.valorField.text = canvas.Translator.getText(3002) : (o = .5 < (n = r.valor / r.valorMax) ? Math.floor(1e4 * n) : Math.ceil(1e4 * n),
    this.valorField.text = canvas.Translator.getText(3002) + " " + (0 == r.valorMax ? "0" : (.01 * o).toFixed(2) + "%")),
    i = r.valor / r.valorMax,
    this.valorProgress.progress = r.showMaxRank ? 1 : i,
    this.manorAvailable) {
        if (this.manorField.overed)
            switch (r.energyMode) {
            case 1:
                s = "",
                0 < r.manorExpSpeed && c < (t = r.manorExpStartTime + 1e3 * Math.round((r.manorExpMax - r.manorExp) / r.manorExpSpeed)) && (s = " (" + canvas.Functions.formatDate(t - c, "00", 3, !1, !1) + ")"),
                this.manorField.text = Math.floor(r.manorExpCur / r.manorExpMax * 100).toString() + "%" + s;
                break;
            case 2:
                s = "",
                0 < r.manorValorSpeed && c < (t = r.manorValorStartTime + 1e3 * Math.round((r.manorValorMax - r.manorValor) / r.manorValorSpeed)) && (s = " (" + canvas.Functions.formatDate(t - c, "00", 3, !1, !1) + ")"),
                this.manorField.text = Math.floor(r.manorValorCur / r.manorValorMax * 100).toString() + "%" + s;
                break;
            default:
                this.manorField.text = Math.floor(r.energy / r.energyMax * 100).toString() + "%"
            }
        else
            switch (r.energyMode) {
            case 1:
                this.manorField.text = canvas.Translator.getText(505) + " " + r.manorExpCur.toString() + "/" + r.manorExpMax.toString();
                break;
            case 2:
                this.manorField.text = canvas.Translator.getText(506) + " " + r.manorValorCur.toString() + "/" + r.manorValorMax.toString();
                break;
            default:
                this.manorField.text = canvas.Translator.getText(149) + " " + r.energy.toString() + "/" + r.energyMax.toString()
            }
        switch (r.energyMode) {
        case 1:
            i = r.manorExpCur / r.manorExpMax;
            break;
        case 2:
            i = r.manorValorCur / r.manorValorMax;
            break;
        default:
            i = r.energy / r.energyMax
        }
        this.manorProgress.progress = i,
        this.manorField.alpha = r.energyIsGrey() ? .6 : 1
    } else
        this.manorField.text = "";
    this.hpField.overed ? this.hpField.text = canvas.Translator.getText(3003) + " " + Math.floor(r.hpCur / r.hpMax * 100).toString() + "%" : this.hpField.text = Math.round(r.hpCur).toString() + "/" + r.hpMax.toString(),
    i = r.hpCur / r.hpMax,
    this.hpProgress.progress = i,
    this.manaAvailable ? (this.mpField.overed ? this.mpField.text = canvas.Translator.getText(49) + " " + Math.floor(r.mpCur / r.mpMax * 100).toString() + "%" : this.mpField.text = Math.round(r.mpCur).toString() + "/" + r.mpMax.toString(),
    i = r.mpCur / r.mpMax,
    this.mpProgress.progress = i) : this.mpField.text = "",
    this.expLine.position.set(this.expProgress.x + Math.round(this.expProgress._width * this.expProgress.progress) - 2, 3),
    this.expLine.visible = 0 < this.expProgress.progress && this.expProgress.progress < 1,
    this.valorLine.position.set(this.valorProgress.x + Math.round(this.valorProgress._width * this.valorProgress.progress) - 2, 20),
    this.valorLine.visible = 0 < this.valorProgress.progress && this.valorProgress.progress < 1,
    this.hpLine.position.set(this.hpProgress.x + Math.round(this.hpProgress._width * this.hpProgress.progress) - 2, 37),
    this.hpLine.visible = 0 < this.hpProgress.progress && this.hpProgress.progress < 1,
    this.mpLine.position.set(this.mpProgress.x + Math.round(this.mpProgress._width * this.mpProgress.progress) - 2, 37),
    this.mpLine.visible = this.manaAvailable && 0 < this.mpProgress.progress && this.mpProgress.progress < 1,
    this.manorLine.position.set(this.manorProgress.x + Math.round(this.manorProgress._width * this.manorProgress.progress) - 2, 49),
    this.manorLine.visible = this.manorAvailable && 0 < this.manorProgress.progress && this.manorProgress.progress < 1
}
,
canvas.app.avatar.View.prototype.updatePremium = function() {
    var t = canvas.app.avatar.model
      , e = t.serverTime.getDate()
      , a = (11 == e.getMonth() ? new Date(e.getFullYear() + 1,0,1) : new Date(e.getFullYear(),e.getMonth() + 1,1)).getTime() - e.getTime()
      , e = canvas.Translator.getText(500);
    0 < t.premiumLevel && (e += " " + t.premiumLevel + " " + canvas.Translator.getText(2025) + ": " + canvas.Functions.formatDate(a, "00", 3, !1, !0, !1)),
    this.premiumButton.level = t.premiumLevel,
    this.premiumHint.update(e)
}
,
canvas.app.avatar.View.prototype.expOverHandler = function() {
    this.expField.overed = !0,
    this.updateTitles()
}
,
canvas.app.avatar.View.prototype.expOutHandler = function() {
    this.expField.overed = !1,
    this.updateTitles()
}
,
canvas.app.avatar.View.prototype.expClickHandler = function() {
    confirmCenterDiv("#exp_table", {
        width: 619,
        height: 350,
        type: "auto"
    })
}
,
canvas.app.avatar.View.prototype.valorOverHandler = function() {
    this.valorField.overed = !0,
    this.updateTitles()
}
,
canvas.app.avatar.View.prototype.valorOutHandler = function() {
    this.valorField.overed = !1,
    this.updateTitles()
}
,
canvas.app.avatar.View.prototype.valorClickHandler = function() {
    confirmCenterDiv("#rank_table", {
        width: 619,
        height: 350,
        type: "auto"
    })
}
,
canvas.app.avatar.View.prototype.hpOverHandler = function() {
    this.hpField.overed = !0,
    this.updateTitles()
}
,
canvas.app.avatar.View.prototype.hpOutHandler = function() {
    this.hpField.overed = !1,
    this.updateTitles()
}
,
canvas.app.avatar.View.prototype.mpOverHandler = function() {
    this.mpField.overed = !0,
    this.updateTitles()
}
,
canvas.app.avatar.View.prototype.mpOutHandler = function() {
    this.mpField.overed = !1,
    this.updateTitles()
}
,
canvas.app.avatar.View.prototype.manorOverHandler = function() {
    this.manorField.overed = !0,
    this.updateTitles()
}
,
canvas.app.avatar.View.prototype.manorOutHandler = function() {
    this.manorField.overed = !1,
    this.updateTitles()
}
,
canvas.app.avatar.View.prototype.moneyClickHandler = function() {
    processMenu("b36")
}
,
canvas.app.avatar.View.prototype.effectsClickHandler = function() {
    var t = canvas.app.avatar.model;
    showEffectInfo(t.login)
}
,
canvas.app.avatar.View.prototype.effectsOverHandler = function() {
    effectAltSimple(2)
}
,
canvas.app.avatar.View.prototype.effectsOutHandler = function() {
    effectAltSimple(0)
}
,
canvas.app.avatar.View.prototype.effectsTimerHandler = function() {
    this.removeIfExist(this.effectsButton)
}
,
canvas.app.avatar.View.prototype.petClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.PET_CLICK)
}
,
canvas.app.avatar.View.prototype.petOverHandler = function() {
    0 < canvas.app.avatar.model.petId && petAltSimple(2)
}
,
canvas.app.avatar.View.prototype.petOutHandler = function() {
    petAltSimple(0)
}
,
canvas.app.avatar.View.prototype.lockButtons = function() {
    this.petButton.enabled = !1,
    this.petOutHandler(),
    this.redButton.enabled = !1
}
,
canvas.app.avatar.view.LevelButton = function() {
    this._level = 0,
    Object.defineProperty(this, "level", {
        get: function() {
            return this._level
        },
        set: function(t) {
            this._level = t,
            this.field.text = this._level
        }
    }),
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "avatar/level_button")),
    this.field = this.sprite.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10_BOLD_SHARP,3355392,21,16,"center")),
    this.field.position.set(1, 4)
}
,
canvas.app.avatar.view.LevelButton.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.avatar.view.LevelButton.prototype.handlerUp = function(t) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, t);
    t = canvas.app.avatar.model;
    showUserInfo(t.login)
}
,
canvas.app.avatar.view.PremiumButton = function() {
    this._level = 0,
    Object.defineProperty(this, "level", {
        get: function() {
            return this._level
        },
        set: function(t) {
            this._level = t,
            this.image.texture = canvas.ResourceLoader.getImage("ui", "avatar/premium" + this._level)
        }
    }),
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "avatar/premium_back")),
    this.image = this.sprite.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
    this.image.position.set(6, 13)
}
,
canvas.app.avatar.view.PremiumButton.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.avatar.view.PremiumButton.prototype.handlerUp = function(t) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, t),
    openPremium()
}
,
canvas.app.avatar.view.RedButton = function() {
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", "avatar/red_button"));
    var t = new canvas.px.Graphics;
    t.beginFill(0, 1),
    t.drawCircle(11, 11, 10),
    t.endFill(),
    this.addChild(t),
    this.image = this.addChildAt(new canvas.ui.Image, 0),
    this.image.mask = t,
    this.infoHint = new canvas.app.view.MappingHint
}
,
canvas.app.avatar.view.RedButton.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.avatar.view.RedButton.prototype.handlerUp = function(t) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, t),
    canvas.app.avatar.model.redButtonConfirm ? _top().systemConfirm(canvas.Translator.getText(2020), canvas.Translator.getText(905), !1, function() {
        canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.RED_BUTTON_CLICK)
    }) : canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.RED_BUTTON_CLICK)
}
,
canvas.app.avatar.view.RedButton.prototype.update = function() {
    canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.HINT_REMOVE, null, {
        target: this
    });
    var t = canvas.app.avatar.model;
    this.image.setImage(t.redButtonPicture),
    t.redButtonHint && (this.infoHint.update(t.redButtonHint),
    canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.infoHint)
    })),
    this.updateTime()
}
,
canvas.app.avatar.view.RedButton.prototype.updateTime = function() {
    var t = canvas.app.avatar.model
      , t = 0 < (Math.min(t.redButtonGlobalTime, t.redButtonUserTime) < 0 ? 1 / 0 : Math.max(t.redButtonUserTime, t.redButtonGlobalTime) - t.serverTime.getTime()) && (t.redButtonLimit <= 0 || t.redButtonUsed < t.redButtonLimit);
    this.visible = t
}
,
canvas.app.avatar.view.SwitchButton = function(t) {
    this._mode = t,
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            if (this._mode != t) {
                var e = this._mode
                  , a = 0;
                for (this._mode = t; e != t; )
                    a++,
                    2 < ++e && (e = 0);
                this.start(120 * a)
            }
        }
    }),
    canvas.ui.SimpleButton.call(this, canvas.px.TextureEmpty),
    this.circle = this.sprite.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
    this.circle.pivot = new canvas.px.Point(9,9),
    this.arrow = this.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "avatar/switch_button_arrow"))),
    this.arrow.position.set(-15, -6),
    this.finish()
}
,
canvas.app.avatar.view.SwitchButton.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.avatar.view.SwitchButton.prototype.start = function(t) {
    0 < t && (this.targetRotation = t,
    this.currentRotation = 0,
    canvas.EventManager.addEventListener(canvas.app.avatar.Event.ENTER_FRAME, null, this.frameHandler, this))
}
,
canvas.app.avatar.view.SwitchButton.prototype.frameHandler = function() {
    this.currentRotation >= this.targetRotation ? (canvas.EventManager.removeEventListener(canvas.app.avatar.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.finish()) : (this.currentRotation += 15,
    this.currentRotation > this.targetRotation && (this.currentRotation = this.targetRotation),
    this.circle.rotation = canvas.Functions.degToRad(this.currentRotation))
}
,
canvas.app.avatar.view.SwitchButton.prototype.finish = function() {
    this.circle.texture = canvas.ResourceLoader.getImage("ui", "avatar/switch_button_" + this.getColorByIndex(this.mode)),
    this.circle.rotation = 0
}
,
canvas.app.avatar.view.SwitchButton.prototype.getColorByIndex = function(t) {
    switch (t) {
    case 0:
        return "blue";
    case 1:
        return "green";
    case 2:
        return "yellow"
    }
}
,
canvas.app.avatar.view.SwitchButton.prototype.handlerUp = function(t) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, t),
    0 == this.circle.rotation && canvas.EventManager.dispatchEvent(canvas.app.avatar.Event.UP_MANOR_MODE)
}
,
canvas.app.topMenu.Const = {
    BRILL_VERSION: 1,
    ID_LOCATION: 2
},
canvas.app.topMenu.Event = {
    ENTER_FRAME: "TopMenu.ENTER_FRAME",
    ITEM_DOWN: "TopMenu.ITEM_DOWN",
    ITEM_OVER: "TopMenu.ITEM_OVER",
    ITEM_OUT: "TopMenu.ITEM_OUT",
    ITEM_SELECT: "TopMenu.ITEM_SELECT",
    ITEM_DESELECT: "TopMenu.ITEM_DESELECT",
    ITEM_CLICK: "TopMenu.ITEM_CLICK"
},
canvas.app.topMenu.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.view = new canvas.app.topMenu.View,
    this.view.interactive = !0,
    this.view.mouseup = this.upHandler.bind(this),
    this.addChild(this.view),
    this.dragItem = null,
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_DOWN, null, this.itemDownHandler, this),
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_OVER, null, this.itemOverHandler, this),
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_SELECT, null, this.itemSelectHandler, this),
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_DESELECT, null, this.itemDeselectHandler, this),
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_CLICK, null, this.itemClickHandler, this),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_OUT, null, this.outHandler, this)
}
,
canvas.app.topMenu.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.topMenu.Main.prototype.swfObject = function(t) {
    if (t)
        for (var e in t)
            switch (e) {
            case "common|top_menu":
                this.model.dragging = 0 != parseInt(t[e].dragDropItems);
                break;
            case "bgFilledState":
                var a = parseInt(t[e]);
                switch (a) {
                case 1:
                case 2:
                    this.view.changeBg((a + 1).toString());
                    break;
                default:
                    this.view.changeBg("")
                }
            }
}
,
canvas.app.topMenu.Main.prototype.blinkButton = function(t, e) {
    var a = this.model;
    e ? a.blinkIds.indexOf(t) < 0 && a.blinkIds.push(t) : 0 <= a.blinkIds.indexOf(t) && a.blinkIds.splice(a.blinkIds.indexOf(t), 1),
    this.view.testBlink()
}
,
canvas.app.topMenu.Main.prototype.itemDownHandler = function(t) {
    this.dragItem = t.params
}
,
canvas.app.topMenu.Main.prototype.itemOverHandler = function(t) {
    if (this.model.dragging && this.dragItem && this.dragItem != t.params) {
        this.dragItem.wasChanged = !0,
        this.view.replace(this.dragItem, t.params);
        for (var e = this.view.items.length, a = "", s = 0; s < e; s++)
            a += (a ? "," : "") + this.view.items[s].data.id;
        this.model.localStorage.set("order", a),
        this.view.testSubMenuSides()
    }
}
,
canvas.app.topMenu.Main.prototype.upHandler = function() {
    this.dragItem = null
}
,
canvas.app.topMenu.Main.prototype.outHandler = function() {
    this.dragItem = null
}
,
canvas.app.topMenu.Main.prototype.itemSelectHandler = function(t) {
    this.view.selectItem(t.params)
}
,
canvas.app.topMenu.Main.prototype.itemDeselectHandler = function(t) {
    this.view.deselectItem(t.params)
}
,
canvas.app.topMenu.Main.prototype.itemClickHandler = function(t) {
    var e = t.params;
    if (0 <= this.model.blinkIds.indexOf(e.data.id) && (this.model.blinkIds.splice(this.model.blinkIds.indexOf(e.data.id), 1),
    new canvas.utils.URLRequest("/user_conf.php?mode=button_press&type=top&id=" + e.data.id).load()),
    canvas.app.topMenu.model.jsPopup)
        this.processMenu(e.data);
    else
        switch (e.data.id) {
        case 8:
            this.model.localStorage.set("brillVersion", canvas.app.topMenu.Const.BRILL_VERSION),
            this.processMenu(e.data);
            break;
        case 12:
            canvas.Functions.navigateToURL(canvas.Translator.getText(1100), "_blank");
            break;
        case 11:
            setTimeout(help_menu.bind(this, e.x - 25, e.y + 80), 100);
            break;
        case 17:
            canvas.Functions.navigateToURL("recruitment.php", "_blank");
            break;
        case 21:
            canvas.Functions.navigateToURL("info/info/", "_blank");
            break;
        case 22:
            canvas.Functions.navigateToURL("info/library/", "_blank");
            break;
        case 23:
            canvas.Functions.navigateToURL("info/news/", "_blank");
            break;
        default:
            this.processMenu(e.data)
        }
}
,
canvas.app.topMenu.Main.prototype.processMenu = function(t) {
    try {
        t.command && processMenu(t.command)
    } catch (t) {}
}
,
canvas.app.topMenu.Main.prototype.executeMenuId = function(t) {
    this.itemClickHandler({
        params: {
            data: this.model.itemsById[t]
        }
    })
}
,
canvas.app.topMenu.Model = function(t) {
    this.labels = t.labels.split("|"),
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.TOP_MENU),
    this.dragging = 0 != parseInt(t.dragDropItems),
    this.jsPopup = null != t.js_popup && "1" == t.js_popup;
    var e = parseInt(this.localStorage.get("brillVersion"));
    if (this.showBrillMessage = (!e || e != canvas.app.topMenu.Const.BRILL_VERSION) && t.br_msg,
    this.blinkIds = [],
    null != t.blink) {
        var a = t.blink.split("|");
        this.showBrillMessage && a.push(8);
        for (var s = a.length, i = 0; i < s; i++)
            "" != a[i] && this.blinkIds.indexOf(parseInt(a[i])) < 0 && this.blinkIds.push(parseInt(a[i]))
    }
    this.items = [],
    this.itemsById = {}
}
,
canvas.app.topMenu.Model.prototype.parseConfig = function(t) {
    if (t) {
        for (var e, a, s, i = t.data.children[0].children, n = i.length, t = this.localStorage.get("order"), o = t ? t.split(",") : null, r = 0; r < n; r++)
            if (a = this.parseItem(i[r]),
            o && (a.index = o.indexOf(a.id.toString())),
            this.items.push(a),
            this.itemsById[a.id] = a,
            0 < (e = i[r].children.length)) {
                a.items = [];
                for (var c = 0; c < e; c++)
                    s = this.parseItem(i[r].children[c]),
                    a.items.push(s)
            }
        o ? this.items.sort(function(t, e) {
            return t.index - e.index
        }) : this.items.sort(function(t, e) {
            return t.id - e.id
        })
    }
}
,
canvas.app.topMenu.Model.prototype.parseItem = function(t) {
    return {
        id: parseInt(t.attributes.id.value),
        label: t.attributes.label.value,
        command: t.attributes.command ? t.attributes.command.value : "",
        pict: t.attributes.pict.value.split(".")[0]
    }
}
,
canvas.app.topMenu.View = function() {
    canvas.px.Container.call(this),
    this.container = this.addChild(new canvas.px.Container),
    this.container.position.set(0, 6);
    var t, e = canvas.app.topMenu.model, a = e.items.length;
    this.items = [];
    for (var s = 0; s < a; s++)
        (t = this.container.addChild(new canvas.app.topMenu.view.ItemView(e.items[s]))).position.set(55 * s, 0),
        t.init(),
        this.items.push(t);
    this.testSubMenuSides(),
    setTimeout(this.testBlink.bind(this), 100)
}
,
canvas.app.topMenu.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.topMenu.View.prototype.update = function() {
    for (var t, e, a = this.items.length, s = 0; s < a; s++)
        e = 55 * s,
        (t = this.items[s]).x != e && t.go(e)
}
,
canvas.app.topMenu.View.prototype.testBlink = function() {
    for (var t = this.items.length, e = 0; e < t; e++)
        this.items[e].testBlink()
}
,
canvas.app.topMenu.View.prototype.replace = function(t, e) {
    var a = this.items.indexOf(t)
      , s = this.items.indexOf(e);
    this.items[a] = e,
    this.items[s] = t,
    this.container.addChild(t),
    e.interactive = e.container.interactive = !1,
    e.outHandler(),
    this.update()
}
,
canvas.app.topMenu.View.prototype.selectItem = function(t) {
    for (var e, a = this.items.length, s = 0; s < a; s++)
        t != (e = this.items[s]) && (e.mode = 2);
    t && this.container.addChild(t)
}
,
canvas.app.topMenu.View.prototype.deselectItem = function(t) {
    for (var e, a = this.items.length, s = 0; s < a; s++)
        t != (e = this.items[s]) && (e.mode = 0)
}
,
canvas.app.topMenu.View.prototype.testSubMenuSides = function() {
    for (var t, e = this.items.length, a = 0; a < e; a++)
        (t = this.items[a]).items && (t.menuSide = a <= .5 * e)
}
,
canvas.app.topMenu.View.prototype.changeBg = function(t) {
    for (var e, a = this.items.length, s = 0; s < a; s++)
        "battleField" == (e = this.items[s]).data.pict && (e.image.texture = canvas.ResourceLoader.getImage("ui", "top/battleField" + t))
}
,
canvas.app.topMenu.view.ItemView = function(t, e) {
    var a;
    if (this.data = t,
    this._mode = 0,
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            if (this._mode != t) {
                switch (this._mode = t) {
                case 0:
                    this.targetArrowRotation = 0,
                    this.targetArrowX = 36,
                    this.targetY = 0,
                    this.targetDarknees = 0,
                    this.targetItemsY = -80;
                    break;
                case 1:
                    this.targetArrowRotation = canvas.Functions.degToRad(180),
                    this.targetArrowX = 10,
                    this.targetY = 0,
                    this.targetDarknees = 0,
                    this.targetItemsY = 10;
                    break;
                case 2:
                    this.targetDarknees = 5,
                    this.targetY = -20,
                    this.targetItemsY = -80
                }
                canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this)
            }
        }
    }),
    this._darknees = 0,
    Object.defineProperty(this, "darknees", {
        get: function() {
            return this._darknees
        },
        set: function(t) {
            this._darknees != t && (this._darknees = t,
            this.filters = 0 < t ? [canvas.Functions.getBrightness(1 - .1 * t)] : [])
        }
    }),
    this._menuSide = !0,
    Object.defineProperty(this, "menuSide", {
        get: function() {
            return this._menuSide
        },
        set: function(t) {
            if (this._menuSide != t && (this._menuSide = t,
            this.items))
                for (var e = this.items.length, a = 0; a < e; a++)
                    this.items[a].x = this.items[a].targetX = t ? 50 * a : 50 * -a - 94
        }
    }),
    canvas.px.Container.call(this),
    null == e && (e = !1),
    this.isSmall = e,
    this.container = this.addChild(new canvas.px.Container),
    this.container.pivot = new canvas.px.Point(30,30),
    this.container.interactive = !0,
    this.isSmall ? (this.container.position.set(30, 30),
    this.back = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/item_back_small"))),
    a = canvas.ResourceLoader.getImage("ui", "top/" + t.pict),
    this.image = this.container.addChild(new canvas.px.Sprite(a)),
    this.front = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/item_front_small"))),
    this.back.position.set(8, 8),
    this.image.position.set(8, 0),
    this.hitArea = new canvas.px.Circle(34,30,26),
    this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/light_small")),
    this.light.position.set(7, 6)) : (this.container.position.set(30, 30),
    this.back = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/item_back"))),
    a = canvas.ResourceLoader.getImage("ui", "top/" + t.pict),
    this.image = this.container.addChild(new canvas.px.Sprite(a)),
    this.front = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/item_front"))),
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16770731,70,17,"center")),
    this.field.position.set(0, 60),
    this.back.position.set(6, 0),
    this.image.position.set(6, 0),
    this.hitArea = new canvas.px.Circle(34,30,30),
    this.field.alpha = 0,
    this.field.text = canvas.app.topMenu.model.labels[t.label],
    this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/light_big")),
    this.light.position.set(5, 0)),
    this.interactive = !0,
    this.buttonMode = !0,
    this.lightDirection = 0,
    this.mouseover = this.over2Handler.bind(this),
    this.container.mouseover = this.overHandler.bind(this),
    this.mouseout = this.outHandler.bind(this),
    this.mousedown = this.downHandler.bind(this),
    this.mouseup = this.upHandler.bind(this),
    this.click = this.clickHandler.bind(this),
    this.wasChanged = !1,
    this.data.items) {
        this.arrowBack = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/arrow_back"))),
        this.arrow = this.arrowBack.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "top/arrow"))),
        this.arrow.pivot = new canvas.px.Point(14,14),
        this.arrow.position.set(14, 14),
        this.arrowBack.position.set(36, 36),
        this.itemsContainer = new canvas.px.Container,
        this.itemsContainer.position.set(50, -80);
        var s, i = this.data.items.length;
        this.items = [];
        for (var n = 0; n < i; n++)
            (s = this.itemsContainer.addChild(new canvas.app.topMenu.view.ItemView(this.data.items[n],!0))).position.set(50 * n, 0),
            s.init(),
            this.items.push(s);
        canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_OVER, null, this.itemOverHandler, this),
        canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ITEM_OUT, null, this.itemOutHandler, this)
    }
}
,
canvas.app.topMenu.view.ItemView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.topMenu.view.ItemView.prototype.init = function() {
    this.targetAlpha = 0,
    this.targetScale = 1,
    this.targetArrowRotation = 0,
    this.targetArrowX = 36,
    this.targetX = this.x,
    this.targetY = 0,
    this.targetDarknees = 0,
    this.targetItemsY = -80
}
,
canvas.app.topMenu.view.ItemView.prototype.go = function(t) {
    this.targetX = t,
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.topMenu.view.ItemView.prototype.overHandler = function() {
    this.targetAlpha = 1,
    this.targetScale = 1.15,
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.over2Handler()
}
,
canvas.app.topMenu.view.ItemView.prototype.over2Handler = function() {
    this.overedItem || this.isSmall || !this.items || (this.field.text = canvas.app.topMenu.model.labels[this.data.label]),
    canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_OVER, null, this)
}
,
canvas.app.topMenu.view.ItemView.prototype.downHandler = function() {
    this.targetAlpha = 1,
    this.targetScale = 1 == this.mode ? 1 : .9,
    this.wasChanged = !1,
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this),
    0 != this.mode || this.isSmall || canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_DOWN, null, this)
}
,
canvas.app.topMenu.view.ItemView.prototype.upHandler = function() {
    this.targetAlpha = 1,
    this.targetScale = 1,
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.topMenu.view.ItemView.prototype.outHandler = function() {
    this.targetAlpha = 0,
    this.targetScale = 1,
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this),
    canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_OUT, null, this)
}
,
canvas.app.topMenu.view.ItemView.prototype.frameHandler = function() {
    var t;
    this.field && this.targetAlpha != this.field.alpha || this.targetScale != this.container.scale.x || this.targetX != this.x || this.targetY != this.y || this.arrowBack && (this.targetArrowX != this.arrowBack.x || this.targetArrowRotation != this.arrow.rotation) || this.targetDarknees != this.darknees || this.itemsContainer && this.targetItemsY != this.itemsContainer.y ? (this.field && (this.targetAlpha > this.field.alpha ? this.field.alpha = Math.min(this.field.alpha + .3, this.targetAlpha) : this.targetAlpha < this.field.alpha && (this.field.alpha = Math.max(this.field.alpha - .1, this.targetAlpha))),
    this.targetScale > this.container.scale.x ? (this.container.scale.x = Math.min(this.container.scale.x + .05, this.targetScale),
    this.container.scale.y = this.container.scale.x) : this.targetScale < this.container.scale.x && (this.container.scale.x = Math.max(this.container.scale.x - .1, this.targetScale),
    this.container.scale.y = this.container.scale.x),
    this.targetX > this.x ? (t = Math.round(.4 * Math.abs(this.targetX - this.x)),
    this.x = Math.min(this.x + Math.max(20, t), this.targetX)) : this.targetX < this.x && (t = Math.round(.4 * Math.abs(this.targetX - this.x)),
    this.x = Math.max(this.x - Math.max(20, t), this.targetX)),
    this.targetY > this.y ? this.y = Math.min(this.y + 5, this.targetY) : this.targetY < this.y && (this.y = Math.max(this.y - 5, this.targetY)),
    this.arrowBack && (this.targetArrowX > this.arrowBack.x ? this.arrowBack.x = Math.min(this.arrowBack.x + 8, this.targetArrowX) : this.targetArrowX < this.arrowBack.x && (this.arrowBack.x = Math.max(this.arrowBack.x - 8, this.targetArrowX)),
    this.targetArrowRotation > this.arrow.rotation ? this.arrow.rotation = Math.min(this.arrow.rotation + .8, this.targetArrowRotation) : this.targetArrowRotation < this.arrow.rotation && (this.arrow.rotation = Math.max(this.arrow.rotation - .8, this.targetArrowRotation))),
    this.targetDarknees > this.darknees ? this.darknees = Math.min(this.darknees + 2, this.targetDarknees) : this.targetDarknees < this.darknees && (this.darknees = Math.max(this.darknees - 2, this.targetDarknees)),
    this.itemsContainer && (this.targetItemsY > this.itemsContainer.y ? (this.contains(this.itemsContainer) || this.addChild(this.itemsContainer),
    this.itemsContainer.y = Math.min(this.itemsContainer.y + 20, this.targetItemsY)) : this.targetItemsY < this.itemsContainer.y ? (this.contains(this.itemsContainer) || this.addChild(this.itemsContainer),
    this.itemsContainer.y = Math.max(this.itemsContainer.y - 20, this.targetItemsY)) : this.targetItemsY < 0 && this.removeIfExist(this.itemsContainer))) : (canvas.EventManager.removeEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.interactive = this.container.interactive = !0)
}
,
canvas.app.topMenu.view.ItemView.prototype.clickHandler = function() {
    this.wasChanged || (this.data.items ? 1 == this.mode ? (this.mode = 0,
    canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_DESELECT, null, this)) : (this.mode = 1,
    canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_SELECT, null, this)) : (canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_DESELECT),
    canvas.EventManager.dispatchEvent(canvas.app.topMenu.Event.ITEM_CLICK, null, this),
    this.stopBlink()))
}
,
canvas.app.topMenu.view.ItemView.prototype.itemOverHandler = function(t) {
    0 <= this.items.indexOf(t.params) && (this.overedItem = t.params,
    this.field.text = canvas.app.topMenu.model.labels[t.params.data.label],
    this.targetAlpha = 1,
    this.targetScale = 1,
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.frameHandler, this))
}
,
canvas.app.topMenu.view.ItemView.prototype.itemOutHandler = function(t) {
    0 <= this.items.indexOf(t.params) && this.overedItem == t.params && (this.overedItem = null)
}
,
canvas.app.topMenu.view.ItemView.prototype.startBlink = function() {
    this.lightDirection = !0,
    this.light.alpha = 0,
    this.container.addChild(this.light),
    canvas.EventManager.addEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.blinkFrameHandler, this)
}
,
canvas.app.topMenu.view.ItemView.prototype.stopBlink = function() {
    this.container.removeIfExist(this.light),
    canvas.EventManager.removeEventListener(canvas.app.topMenu.Event.ENTER_FRAME, null, this.blinkFrameHandler, this)
}
,
canvas.app.topMenu.view.ItemView.prototype.blinkFrameHandler = function() {
    this.lightDirection ? (this.light.alpha = Math.min(this.light.alpha + .04, 1),
    1 == this.light.alpha && (this.lightDirection = !1)) : (this.light.alpha = Math.max(this.light.alpha - .04, 0),
    0 == this.light.alpha && (this.lightDirection = !0))
}
,
canvas.app.topMenu.view.ItemView.prototype.testBlink = function() {
    var t = !1;
    if (0 <= canvas.app.topMenu.model.blinkIds.indexOf(this.data.id) && (this.startBlink(),
    t = !0),
    this.items) {
        for (var e = this.items.length, a = !1, s = 0; s < e; s++)
            this.items[s].testBlink() && (a = !0);
        a && 1 != this.mode && this.clickHandler()
    }
    return t
}
,
canvas.app.rightMenu.Const = {
    MENU_TYPE_MAIL: 1,
    MENU_TYPE_BAG: 2,
    MENU_TYPE_MOUNT: 3,
    MENU_TYPE_NAV: 4,
    MENU_TYPE_PROF: 5,
    MENU_TYPE_QUEST: 6,
    MENU_TYPE_FRIENDS: 7
},
canvas.app.rightMenu.Event = {
    ENTER_FRAME: "RightMenu.ENTER_FRAME",
    MENU_CLICK: "RightMenu.MENU_CLICK",
    PANEL_CLOSED: "RightMenu.PANEL_CLOSED",
    ITEM_CLICK: "RightMenu.ITEM_CLICK"
},
canvas.app.rightMenu.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.back = this.addChild(new canvas.px.Mask(105,this.model.height)),
    this.back.interactive = !0,
    this.back.click = this.backClickHandler.bind(this),
    this.view = new canvas.app.rightMenu.View,
    this.addChild(this.view),
    setInterval(this.timerHandler.bind(this), 3e3),
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this),
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.MENU_CLICK, null, this.menuClickHandler, this),
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ITEM_CLICK, null, this.itemClickHandler, this),
    this.request = new canvas.utils.URLRequest("entry_point.php?object=user&json_mode_on=1&action=instapockets"),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.completeHandler, this)
}
,
canvas.app.rightMenu.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.rightMenu.Main.prototype.swfObject = function(t) {
    var e, a;
    if (t)
        for (e in t)
            switch (e) {
            case "user|mount":
                a = t[e],
                this.model.mount = 0 < a.mount_id ? a.is_mount ? 2 : 1 : 0,
                this.view.mountView.update();
                break;
            case "instapockets|init":
                this.request.load()
            }
}
,
canvas.app.rightMenu.Main.prototype.completeHandler = function(t) {
    var e = JSON.parse(this.request.request.responseText);
    if (e["user|instapockets"]) {
        var a, s = e["user|instapockets"], i = [];
        for (a in s.instapockets_artifact_list)
            i.push(s.instapockets_artifact_list[a]);
        this.model.parseSlots(s.instapockets_slot_num_max, i),
        this.view.update()
    }
}
,
canvas.app.rightMenu.Main.prototype.blinkButton = function(t, e) {
    var a = this.model;
    e ? a.blinkIds.indexOf(t) < 0 && a.blinkIds.push(t) : 0 <= a.blinkIds.indexOf(t) && a.blinkIds.splice(a.blinkIds.indexOf(t), 1),
    this.view.testBlink()
}
,
canvas.app.rightMenu.Main.prototype.handlerKey = function(t) {
    if (!document.activeElement || "HTMLInputElement" != document.activeElement.constructor.name) {
        var e = t.params.globalKeyCode
          , a = t.params.altKey;
        t.params.ctrlKey;
        if (t.params.shiftKey)
            switch (e) {
            case canvas.Const.KEYS.KEY_1:
                this.view.itemsPanel.useItem(0);
                break;
            case canvas.Const.KEYS.KEY_2:
                this.view.itemsPanel.useItem(1);
                break;
            case canvas.Const.KEYS.KEY_3:
                this.view.itemsPanel.useItem(2);
                break;
            case canvas.Const.KEYS.KEY_4:
                this.view.itemsPanel.useItem(3);
                break;
            case canvas.Const.KEYS.KEY_5:
                this.view.itemsPanel.useItem(4);
                break;
            case canvas.Const.KEYS.KEY_6:
                this.view.itemsPanel.useItem(5);
                break;
            case canvas.Const.KEYS.KEY_7:
                this.view.itemsPanel.useItem(6);
                break;
            case canvas.Const.KEYS.KEY_8:
                this.view.itemsPanel.useItem(7);
                break;
            case canvas.Const.KEYS.KEY_9:
                this.view.itemsPanel.useItem(8)
            }
        else
            a && e === canvas.Const.KEYS.L && openLocator()
    }
}
,
canvas.app.rightMenu.Main.prototype.timerHandler = function() {
    this.model.parseSessTarget(),
    this.view.navView.update()
}
,
canvas.app.rightMenu.Main.prototype.menuClickHandler = function(t) {
    var t = t.params
      , e = !1;
    switch (0 <= this.model.blinkIds.indexOf(t.id) && (e = !0,
    this.model.blinkIds.splice(this.model.blinkIds.indexOf(t.id), 1),
    new canvas.utils.URLRequest("/user_conf.php?mode=button_press&type=right&id=" + t.id).load()),
    t.id) {
    case canvas.app.rightMenu.Const.MENU_TYPE_MAIL:
        mailPopup(e ? 1 : 0);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_BAG:
        showExternalBackpack();
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_MOUNT:
        mountPopup(this.model.mount);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_NAV:
        var a = new canvas.utils.LocalStorage(canvas.Log.COMPASS)
          , s = a.get("width") || 0
          , a = a.get("height") || 0;
        showExternalNavigate(!0, s, a);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_PROF:
        openServiceCraft();
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_QUEST:
        openQuests();
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_FRIENDS:
        processMenu("b20")
    }
}
,
canvas.app.rightMenu.Main.prototype.itemClickHandler = function(t) {
    _top().frames.main_frame.instapocketUse(t.params.id)
}
,
canvas.app.rightMenu.Main.prototype.backClickHandler = function(t) {
    this.view.switchButton.opened && this.view.switchClickHandler()
}
,
canvas.app.rightMenu.Model = function(t) {
    this.blinkIds = [],
    this.items = [],
    this.itemsCapacity = 0,
    this.serverTime = new canvas.utils.ServerTime(t.serverTime),
    this.socGift = t.soc_gift ? parseInt(t.soc_gift) : 0,
    this.mount = t.mount ? parseInt(t.mount) : 0,
    this.friendsVisible = !t.friendsVisible || 1 == parseInt(t.friendsVisible),
    this.width = t.width,
    this.height = t.height;
    for (var e, a, s = 0, i = new Array; t["instapockets[" + s + "]"]; )
        e = t["instapockets[" + s + "]"].split(":"),
        i.push({
            slot_num: e[0],
            id: e[1],
            cnt: e[2],
            picture: e[3],
            time_expire: e[4]
        }),
        s++;
    if (this.parseSlots(t.instapockets_slot_num_max || 0, i),
    null != t.blink)
        for (var n = (i = t.blink.split("|")).length, s = 0; s < n; s++)
            a = parseInt(i[s]),
            this.blinkIds.indexOf(a) < 0 && this.blinkIds.push(a);
    this.parseSessTarget()
}
,
canvas.app.rightMenu.Model.prototype.parseSessTarget = function() {
    var t = canvas.Functions.getSessTarget();
    this.finishLocation = t.target,
    this.autoPenalty = t.autoPenalty
}
,
canvas.app.rightMenu.Model.prototype.parseSlots = function(t, e) {
    var a;
    this.itemsCapacity = t,
    this.items = new Array;
    for (var s = e.length, i = 0; i < s; i++)
        a = e[i],
        this.items[a.slot_num - 1] = a
}
,
canvas.app.rightMenu.View = function() {
    canvas.px.Container.call(this),
    this.menuContainer = this.addChild(new canvas.px.Container),
    this.itemsContainer = this.addChild(new canvas.px.Container),
    this.items = [];
    var t = canvas.app.rightMenu.model;
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_MAIL),
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_BAG),
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_MOUNT),
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_NAV),
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_PROF),
    this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_QUEST),
    t.friendsVisible && this.createMenuItem(canvas.app.rightMenu.Const.MENU_TYPE_FRIENDS);
    for (var e = this.items.length, a = 0; a < e; a++)
        this.items[a].y = 46 * a;
    this.switchButton = new canvas.app.rightMenu.view.SwitchButton,
    this.switchButton.position.set(-1, 56),
    this.itemsPanel = this.addChildAt(new canvas.app.rightMenu.view.ItemsPanel, 0),
    this.itemsPanel.position.set(-40, 50),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.switchButton, this.switchClickHandler, this),
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.PANEL_CLOSED, null, this.panelClosedHandler, this),
    this.update(),
    this.testBlink()
}
,
canvas.app.rightMenu.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.rightMenu.View.prototype.createMenuItem = function(t) {
    switch (t) {
    case canvas.app.rightMenu.Const.MENU_TYPE_MOUNT:
        this.mountView = this.menuContainer.addChildAt(new canvas.app.rightMenu.view.menu.MenuItemMount, 0),
        this.items.push(this.mountView);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_NAV:
        this.navView = this.menuContainer.addChildAt(new canvas.app.rightMenu.view.menu.MenuItemNav, 0),
        this.items.push(this.navView);
        break;
    default:
        this.items.push(this.menuContainer.addChildAt(new canvas.app.rightMenu.view.MenuItemView(t), 0))
    }
}
,
canvas.app.rightMenu.View.prototype.update = function() {
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this)
}
,
canvas.app.rightMenu.View.prototype.updateHandler = function() {
    canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this);
    var t = canvas.app.rightMenu.model;
    this.itemsPanel.update(),
    0 < t.itemsCapacity ? (this.addChild(this.switchButton),
    this.switchButton.opened ? (this.x = 40,
    this.itemsPanel.show()) : this.itemsPanel.hide()) : (this.removeIfExist(this.switchButton),
    this.switchButton.opened = !1,
    this.itemsPanel.hide(),
    this.itemsContainer.removeIfExist(this.itemsPanel))
}
,
canvas.app.rightMenu.View.prototype.panelClosedHandler = function() {
    this.x = 0
}
,
canvas.app.rightMenu.View.prototype.testBlink = function() {
    for (var t = this.items.length, e = canvas.app.rightMenu.model, a = 0; a < t; a++)
        0 <= e.blinkIds.indexOf(this.items[a].id) && this.items[a].startBlink()
}
,
canvas.app.rightMenu.View.prototype.switchClickHandler = function() {
    this.switchButton.parent && (this.switchButton.opened = !this.switchButton.opened,
    this.update())
}
,
canvas.app.rightMenu.view.ItemView = function() {
    canvas.ui.ListRenderer.call(this),
    this.image = this.addChild(new canvas.ui.Image),
    this.image.position.set(10, 10),
    this.image.scale.set(.45, .45),
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/slot_empty"))),
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE,16777215,20,14,"center")),
    this.field.position.set(20, 22),
    this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/slot_over")),
    this.light.position.set(4, 4),
    this.setSize(47, 40),
    this.hitArea = new canvas.px.Circle(22,22,22)
}
,
canvas.app.rightMenu.view.ItemView.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.rightMenu.view.ItemView.prototype.update = function() {
    this.data ? (this.back.texture = canvas.ResourceLoader.getImage("ui", "right/slot_transparent"),
    this.buttonMode = !0,
    this.image.setImage(canvas.Config.artifactsPath + this.data.picture),
    this.field.text = 1 < this.data.cnt ? this.data.cnt : "") : (this.back.texture = canvas.ResourceLoader.getImage("ui", "right/slot_empty"),
    this.buttonMode = !1,
    this.image.clear(),
    this.outHandler(),
    this.field.text = "")
}
,
canvas.app.rightMenu.view.ItemView.prototype.overHandler = function() {
    this.data && (this.addChild(this.light),
    artifactAltSimple(this.data.id, 2),
    canvas.app.rightMenu.view.ItemView.overedItem = this)
}
,
canvas.app.rightMenu.view.ItemView.prototype.outHandler = function() {
    this.removeIfExist(this.light),
    this.data && canvas.app.rightMenu.view.ItemView.overedItem == this && artifactAltSimple(this.data.id, 0)
}
,
canvas.app.rightMenu.view.ItemView.prototype.clickHandler = function() {
    this.data && canvas.EventManager.dispatchEvent(canvas.app.rightMenu.Event.ITEM_CLICK, null, this.data)
}
,
canvas.app.rightMenu.view.ItemsPanel = function() {
    canvas.px.Container.call(this),
    this.xPos = 40,
    this.container = new canvas.px.Container,
    this.hide(),
    this.interactive = !1,
    setInterval(this.timerHandler.bind(this), 1e3),
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1)),
    this.list.setSize(45, 500),
    this.list.paddingV = 0,
    this.list.interactive = !1,
    this.container.x = 40
}
,
canvas.app.rightMenu.view.ItemsPanel.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.rightMenu.view.ItemsPanel.prototype.update = function() {
    for (var t = canvas.app.rightMenu.model, e = Math.max(t.itemsCapacity, this.list.items.length), a = 0; a < e; a++)
        a >= this.list.items.length && this.list.add(new canvas.app.rightMenu.view.ItemView),
        a >= t.itemsCapacity ? this.list.removeAt(a) : this.list.items[a].data = a >= t.items.length ? null : t.items[a]
}
,
canvas.app.rightMenu.view.ItemsPanel.prototype.useItem = function(t) {
    this.list.items[t] && this.list.items[t].clickHandler()
}
,
canvas.app.rightMenu.view.ItemsPanel.prototype.hide = function() {
    this.interactiveChildren = !1,
    this.direction = !1,
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this)
}
,
canvas.app.rightMenu.view.ItemsPanel.prototype.show = function() {
    this.addChild(this.container),
    this.direction = !0,
    this.interactiveChildren = !1,
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this),
    setStyleSWF("right", 0, "items_right_cont")
}
,
canvas.app.rightMenu.view.ItemsPanel.prototype.updateHandler = function() {
    this.direction ? 0 < this.container.x ? this.container.x -= 10 : (canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this),
    this.interactiveChildren = !0) : this.container.x < this.xPos ? this.container.x += 10 : (this.removeIfExist(this.container),
    canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.updateHandler, this),
    setStyleSWF("right", -40, "items_right_cont"),
    canvas.EventManager.dispatchEvent(canvas.app.rightMenu.Event.PANEL_CLOSED))
}
,
canvas.app.rightMenu.view.ItemsPanel.prototype.timerHandler = function() {
    for (var t, e = canvas.app.rightMenu.model, a = e.items.length, s = !1, i = e.serverTime.getTime(), n = 0; n < a; n++)
        (t = e.items[n]) && 0 < t.time_expire && t.time_expire < i && (s = !(e.items[n] = null));
    s && this.update()
}
,
canvas.app.rightMenu.view.MenuItemView = function(t) {
    this.id = t,
    canvas.px.Container.call(this),
    this.defaultAlpha = 1,
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/menu_back"))),
    this.field = new canvas.ui.Text(canvas.Const.FONT_ARIAL_9_BOLD_STROKE,16770731,68,12,"center"),
    this.createImage(),
    this.front = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/menu_front"))),
    this.fieldBack = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/field_back"))),
    this.light = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/menu_light")),
    this.back.position.set(14, 5),
    this.light.position.set(15, 7),
    this.fieldBack.position.set(0, 27),
    this.addChild(this.field),
    this.field.position.set(0, 37),
    this.image.alpha = this.defaultAlpha,
    this.interactive = !0,
    this.buttonMode = !0,
    this.hitArea = new canvas.px.Circle(34,26,20),
    this.click = this.clickHandler.bind(this),
    this.mouseover = this.overHandler.bind(this),
    this.mouseout = this.outHandler.bind(this)
}
,
canvas.app.rightMenu.view.MenuItemView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.rightMenu.view.MenuItemView.prototype.createImage = function() {
    switch (this.id) {
    case canvas.app.rightMenu.Const.MENU_TYPE_MAIL:
        this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/mail_image"))),
        this.field.text = canvas.Translator.getText(3004),
        this.defaultAlpha = .4;
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_BAG:
        this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/bag_image"))),
        this.field.text = canvas.Translator.getText(102).toLowerCase();
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_MOUNT:
        this.image = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
        this.field.text = canvas.Translator.getText(3006);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_NAV:
        this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/nav_image_1"))),
        this.field.text = canvas.Translator.getText(3007);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_PROF:
        this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/prof_image"))),
        this.field.text = canvas.Translator.getText(3008);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_QUEST:
        this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/quest_image"))),
        this.field.text = canvas.Translator.getText(3005);
        break;
    case canvas.app.rightMenu.Const.MENU_TYPE_FRIENDS:
        this.image = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/friends_image"))),
        this.field.text = canvas.Translator.getText(3009),
        this.defaultAlpha = .4;
        break;
    default:
        this.image = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty))
    }
    this.image.position.set(14, 5)
}
,
canvas.app.rightMenu.view.MenuItemView.prototype.clickHandler = function() {
    this.stopBlink(),
    canvas.EventManager.dispatchEvent(canvas.app.rightMenu.Event.MENU_CLICK, null, this)
}
,
canvas.app.rightMenu.view.MenuItemView.prototype.overHandler = function() {
    this.addChild(this.light)
}
,
canvas.app.rightMenu.view.MenuItemView.prototype.outHandler = function() {
    this.removeIfExist(this.light)
}
,
canvas.app.rightMenu.view.MenuItemView.prototype.startBlink = function() {
    this.direction = !0,
    this.image.alpha = this.defaultAlpha,
    canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.blinkFrameHandler, this)
}
,
canvas.app.rightMenu.view.MenuItemView.prototype.stopBlink = function() {
    canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.blinkFrameHandler, this),
    this.image.alpha = this.defaultAlpha
}
,
canvas.app.rightMenu.view.MenuItemView.prototype.blinkFrameHandler = function() {
    this.direction ? (this.image.alpha = Math.min(this.image.alpha + .1, 1),
    1 == this.image.alpha && (this.direction = !1)) : (this.image.alpha = Math.max(this.image.alpha - .1, 0),
    0 == this.image.alpha && (this.direction = !0))
}
,
canvas.app.rightMenu.view.SwitchButton = function() {
    this._opened = !1,
    Object.defineProperty(this, "opened", {
        get: function() {
            return this._opened
        },
        set: function(t) {
            this._opened != t && ((this._opened = t) ? (this.baseTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_right"),
            this.overTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_right_over"),
            this.downTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_right_down")) : (this.baseTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left"),
            this.overTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left_over"),
            this.downTexture = canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left_down")),
            this.handlerOver())
        }
    }),
    canvas.ui.Button.call(this, canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left"), canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left_over"), canvas.ResourceLoader.getImage("ui", "right/slot_arrow_left_down"))
}
,
canvas.app.rightMenu.view.SwitchButton.prototype = Object.create(canvas.ui.Button.prototype),
canvas.app.rightMenu.view.menu.MenuItemMount = function() {
    this._state = -1,
    Object.defineProperty(this, "state", {
        get: function() {
            return this._state
        },
        set: function(t) {
            this._state != t && (this._state = t,
            this.image.texture = canvas.ResourceLoader.getImage("ui", "right/mount_image_" + (1 == t || 2 == t ? t : 3)))
        }
    }),
    canvas.app.rightMenu.view.MenuItemView.call(this, canvas.app.rightMenu.Const.MENU_TYPE_MOUNT),
    this.update()
}
,
canvas.app.rightMenu.view.menu.MenuItemMount.prototype = Object.create(canvas.app.rightMenu.view.MenuItemView.prototype),
canvas.app.rightMenu.view.menu.MenuItemMount.prototype.update = function() {
    this.state = canvas.app.rightMenu.model.mount
}
,
canvas.app.rightMenu.view.menu.MenuItemNav = function() {
    this._state = 1,
    Object.defineProperty(this, "state", {
        get: function() {
            return this._state
        },
        set: function(t) {
            this._state != t && (this._state = t,
            this.image.texture = canvas.ResourceLoader.getImage("ui", "right/nav_image_" + t),
            2 == t ? (canvas.EventManager.addEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.frameHandler, this),
            this.targetRotation = 0) : (canvas.EventManager.removeEventListener(canvas.app.rightMenu.Event.ENTER_FRAME, null, this.frameHandler, this),
            this.arrow.rotation = 0))
        }
    }),
    canvas.app.rightMenu.view.MenuItemView.call(this, canvas.app.rightMenu.Const.MENU_TYPE_NAV),
    this.arrow = this.image.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "right/nav_arrow"))),
    this.arrow.pivot = new canvas.px.Point(3,10),
    this.arrow.position.set(21, 17),
    this.update()
}
,
canvas.app.rightMenu.view.menu.MenuItemNav.prototype = Object.create(canvas.app.rightMenu.view.MenuItemView.prototype),
canvas.app.rightMenu.view.menu.MenuItemNav.prototype.update = function() {
    this.state = canvas.app.rightMenu.model.finishLocation ? 2 : 1,
    this.arrow.filters = 2 == this.state && 0 <= canvas.app.rightMenu.model.autoPenalty ? [canvas.Functions.getGlow(15, 8, 0, 12944691, .1)] : null
}
,
canvas.app.rightMenu.view.menu.MenuItemNav.prototype.frameHandler = function() {
    0 == this.targetRotation ? (this.targetRotation = 1 + canvas.Functions.degToRad(canvas.Functions.random(180)),
    this.rotateSpeed = canvas.Functions.degToRad(5 + canvas.Functions.random(10))) : this.arrow.rotation < this.targetRotation ? this.arrow.rotation = Math.min(this.arrow.rotation + this.rotateSpeed, this.targetRotation) : this.arrow.rotation > this.targetRotation ? this.arrow.rotation = Math.max(this.arrow.rotation - this.rotateSpeed, this.targetRotation) : this.targetRotation = 0
}
,
canvas.app.compass.Const = {
    SIZE: 580,
    TYPE_LOC: 0,
    TYPE_RES: 1,
    TYPE_MON: 2,
    TYPE_PERS: 3,
    TYPE_INST: 4,
    TYPE_COUNT: 5,
    TITLES: [3011, 3012, 3013, 1255, 3014]
},
canvas.app.compass.Element = function(t, e) {
    this._visible = !0,
    Object.defineProperty(this, "visible", {
        get: function() {
            return this._visible
        },
        set: function(t) {
            this._visible = t,
            this.root.style.display = t ? "block" : "none"
        }
    }),
    null == e && (e = "div"),
    this.root = document.createElement(e),
    t.appendChild(this.root),
    this.root.style.position = "absolute",
    this.root.style.left = this.root.style.right = 0
}
,
canvas.app.compass.Event = {
    ENTER_FRAME: "Compass.ENTER_FRAME",
    SHOW_LIST: "Compass.SHOW_LIST",
    HIDE_LIST: "Compass.HIDE_LIST",
    LIST_SELECT: "Compass.LIST_SELECT",
    CHECK_CHANGED: "Compass.CHECK_CHANGED",
    SEARCH: "Compass.SEARCH",
    READY: "Compass.READY"
},
canvas.app.compass.Main = function(t, e) {
    var a, s;
    for (this.model = t,
    this.root = e,
    this.root.onclick = this.upHandler.bind(this),
    this.back = new canvas.app.compass.view.TileBackView(this.root,canvas.app.compass.Const.SIZE,280),
    this.back.setTitle(canvas.Translator.toUpperCaseFirstChar(canvas.Translator.getText(3007)) + (this.model.FinishLocation ? " - " + this.model.LOC_BY_ID[this.model.FinishLocation] : "")),
    new canvas.app.compass.view.TitleView(this.root,canvas.Translator.getText(3010)),
    this.combo = new canvas.app.compass.view.ComboView(e,canvas.app.compass.Const.SIZE - 80),
    this.checksContainer = new canvas.app.compass.Element(e),
    this.checksContainer.root.style.top = 100,
    this.checks = [],
    a = 0; a < canvas.app.compass.Const.TYPE_COUNT; a++)
        new canvas.app.compass.view.CheckView(this.checksContainer.root,canvas.Translator.getText(canvas.app.compass.Const.TITLES[a]),a).selected = this.model.checks[a];
    if (this.titleBottom = new canvas.app.compass.view.TitleBottomView(this.root,canvas.app.compass.Const.SIZE - 80),
    this.titleBottom.setTitle(5),
    this.button = new canvas.app.compass.view.ButtonView(this.titleBottom.root),
    this.button.x = 220,
    this.button.y = -25,
    this.buttonAuto = new canvas.app.compass.view.ButtonView(this.titleBottom.root,160,canvas.Translator.getText(3032)),
    this.buttonAuto.x = 370,
    this.buttonAuto.y = -35,
    this.titleMiddle = new canvas.app.compass.Element(e),
    this.titleMiddle.root.innerText = canvas.Translator.getText(3017),
    this.titleMiddle.root.style.top = 140,
    this.comboMiddle = new canvas.app.compass.view.ComboBox(e,canvas.app.compass.Const.SIZE - 80),
    this.comboMiddle.root.style.top = 160,
    this.list = new canvas.app.compass.view.ObjectsList(e,canvas.app.compass.Const.SIZE - 80),
    this.list.visible = !1,
    canvas.EventManager.addEventListener(canvas.app.compass.Event.SHOW_LIST, null, this.showListHandler, this),
    canvas.EventManager.addEventListener(canvas.app.compass.Event.HIDE_LIST, null, this.hideListHandler, this),
    canvas.EventManager.addEventListener(canvas.app.compass.Event.LIST_SELECT, null, this.listSelectHandler, this),
    canvas.EventManager.addEventListener(canvas.app.compass.Event.CHECK_CHANGED, null, this.checkHandler, this),
    canvas.EventManager.addEventListener(canvas.app.compass.Event.SEARCH, null, this.searchHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ComboBoxEvent.EVENT_SELECT, this.comboMiddle, this.comboHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buttonAuto, this.clickHandler, this),
    this.update(),
    this.model.FinishLocation) {
        e = this.model.localStorage.get("state");
        if (e) {
            var i = e.split(",");
            if (this.combo.data = {
                id: i[0],
                name: i[1],
                type: parseInt(i[2])
            },
            this.update(),
            "" != i[3])
                for (s = this.comboMiddle.items.length,
                a = 0; a < s; a++)
                    if (parseInt(this.comboMiddle.items[a].id) == parseInt(i[3])) {
                        this.comboMiddle.selectedIndex = a,
                        this.comboHandler();
                        break
                    }
            this.setClearMode(!0)
        }
    }
    if (this.model.targetName) {
        for (this.combo.input.value = this.model.targetName,
        this.combo.changeHandler(),
        s = this.model.SEARCH_DATA.length,
        a = 0; a < s; a++)
            if (0 < this.model.SEARCH_DATA[a].length) {
                this.listSelectHandler({
                    params: this.model.SEARCH_DATA[a][0]
                });
                break
            }
        this.model.targetName = null
    }
}
,
canvas.app.compass.Main.prototype.upHandler = function(t) {
    this.hideListHandler(),
    this.comboMiddle.opened = !1
}
,
canvas.app.compass.Main.prototype.clickHandler = function(t) {
    this.model.clearMode && t.target == this.button ? this.model.setPoint(0) : (this.model.setPoint(this.model.TARGET + (t.target == this.buttonAuto ? "_" + this.model.autoPenalty + (0 == parseInt(this.combo.data.id) ? "_1" : "") : "")),
    this.model.MEMORY_AR = [this.combo.data.id, this.combo.data.name, this.combo.data.type, this.comboMiddle.visible ? this.comboMiddle.selectedItem.id : ""],
    this.model.localStorage.set("state", this.model.MEMORY_AR.join(",")),
    t.target != this.buttonAuto || !window.opener || !window.opener.getSWF || window.opener.getSWF("estate") || (t = window.opener.getSWF("top_mnu")) && t.executeMenuId(canvas.app.topMenu.Const.ID_LOCATION)),
    windowClose()
}
,
canvas.app.compass.Main.prototype.comboHandler = function() {
    this.applySearch(this.model.WAY_LIST_AR[this.comboMiddle.selectedIndex]),
    this.setClearMode(!1)
}
,
canvas.app.compass.Main.prototype.showListHandler = function() {
    this.list.visible = !0,
    this.combo.opened = !0
}
,
canvas.app.compass.Main.prototype.hideListHandler = function() {
    this.list.visible = !1,
    this.combo.opened = !1
}
,
canvas.app.compass.Main.prototype.listSelectHandler = function(t) {
    this.hideListHandler(),
    this.combo.data = t.params,
    this.update()
}
,
canvas.app.compass.Main.prototype.searchHandler = function(t) {
    this.update(t.params)
}
,
canvas.app.compass.Main.prototype.checkHandler = function(t) {
    this.model.checks[t.params.index] = t.params.selected ? 1 : 0,
    this.model.saveChecks(),
    this.update()
}
,
canvas.app.compass.Main.prototype.update = function(t) {
    if (this.titleMiddle.visible = !1,
    this.comboMiddle.visible = !1,
    this.comboMiddle.opened = !1,
    this.titleBottom.visible = !1,
    this.button.visible = !1,
    this.combo.data) {
        this.model.searchWays(this.combo.data),
        this.button.visible = !0,
        this.setClearMode(!1);
        var e = this.model.WAY_LIST_AR.length;
        if (0 < e) {
            if (1 < e) {
                for (var a = [], s = 0; s < e; s++)
                    a.push({
                        id: this.model.WAY_LIST_AR[s].value,
                        value: this.model.WAY_LIST_AR[s].title
                    });
                this.comboMiddle.items = a,
                this.titleMiddle.visible = !0,
                this.comboMiddle.visible = !0
            }
            this.applySearch(this.model.WAY_LIST_AR[0])
        } else
            this.titleBottom.visible = !0,
            this.titleBottom.setNotFoundTitle(),
            this.button.visible = !1
    } else
        this.model.search(t),
        this.list.update()
}
,
canvas.app.compass.Main.prototype.applySearch = function(t) {
    this.titleBottom.visible = !0,
    0 < t.steps ? (this.titleBottom.setTitle(t.steps, this.model.getWaysChain(t.locs)),
    this.model.TARGET = t.value,
    this.button.visible = !0) : (this.titleBottom.setNotFoundTitle(canvas.Translator.getText(3023)),
    this.button.visible = !1,
    this.buttonAuto.visible = !1)
}
,
canvas.app.compass.Main.prototype.setClearMode = function(t) {
    this.model.clearMode = t,
    this.model.autoPenalty < 0 || 0 <= this.model.autoPenaltyCur ? (this.button.title = t ? canvas.Translator.getText(193) : canvas.Translator.getText(3022),
    this.button.width = 260,
    this.button.x = 235,
    this.buttonAuto.visible = !1) : (this.button.width = 160,
    this.button.x = 70,
    this.button.title = t ? canvas.Translator.getText(193) : canvas.Translator.getText(3024),
    this.buttonAuto.visible = !0)
}
,
canvas.app.compass.Model = function(t) {
    this.allChecksSelected = !1,
    this.initChecks(),
    this.findWay = new canvas.app.world.engine.FindWay,
    this.CfgLink = t.CfgLink || "images/locale/ru/compass_conf.xml",
    this.CfgWorldLink = t.CfgWorldLink || "images/data/locale/ru/world_conf.xml?ux=1507796560",
    this.AreasXML_Path = t.AreasXML_Path || "images/data/locale/ru/xml_map/",
    this.race = null == t.race || "1" == t.race ? "hum" : "mag",
    this.manorLocationId = null == t.EstateLocationId ? 0 : parseInt(t.EstateLocationId),
    this.autoPenalty = null == t.autoPenalty ? -1 : parseInt(t.autoPenalty),
    this.myLocVerge = {},
    this.SEARCH_DATA = [[], [], [], [], []],
    this.LOC_BY_ID = {},
    this.LOC_LIST_AR = [],
    this.MAIN_LIST_AR = [],
    this.MON_LIST_AR = [],
    this.RES_LIST_AR = [],
    this.PERS_LIST_AR = [],
    this.INST_LIST_AR = [],
    this.PATH_LIST_AR = [],
    this.WAY_LIST_AR = [[0, 0]],
    this.MEMORY_AR = [],
    this.COMBOBOX_TITLE = [],
    this.FlagLocation = "303",
    this.areas_xml = [],
    this.TARGET = 0,
    this.targetName = t.GmNav ? t.GmNav.replace(/'/g, "`") : null,
    null != getCookie && (t = getCookie("sess_location"),
    this.parse_my_flag(t),
    t = canvas.Functions.getSessTarget(),
    this.autoPenaltyCur = t.autoPenalty,
    t.target ? this.FinishLocation = t.target.split("|")[0] : this.FinishLocation = t.target,
    this.mMem = getCookie("sess_navigate_memory"),
    this.mArr = getCookie("sess_navigate_array"))
}
,
canvas.app.compass.Model.prototype.initChecks = function() {
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.COMPASS);
    var t = this.localStorage.get("width") || 0
      , e = this.localStorage.get("height") || 0;
    t && e && window.resizeTo(t, e);
    var a, e = this.localStorage.get("checks");
    if (e) {
        this.checks = e.split(","),
        a = this.checks.length;
        for (var s = 0; s < a; s++)
            this.checks[s] = parseInt(this.checks[s])
    } else
        this.checks = [1, 1, 1, 1, 1];
    this.testChecks()
}
,
canvas.app.compass.Model.prototype.saveChecks = function() {
    this.localStorage.set("checks", this.checks.join(",")),
    this.testChecks()
}
,
canvas.app.compass.Model.prototype.saveWindowSize = function(t, e) {
    this.localStorage && (this.localStorage.set("width", t),
    this.localStorage.set("height", e))
}
,
canvas.app.compass.Model.prototype.testChecks = function() {
    var t = this.checks.length;
    this.allChecksSelected = !0;
    for (var e = 0; e < t; e++)
        if (this.checks[e])
            return void (this.allChecksSelected = !1)
}
,
canvas.app.compass.Model.prototype.parse_my_flag = function(t) {
    null == t || 2 == (t = t.split("|")).length && (t[0],
    t = t[1],
    this.FlagLocation = t,
    this.P1 = parseInt(this.FlagLocation))
}
,
canvas.app.compass.Model.prototype.initConfig = function() {
    var t = (new DOMParser).parseFromString("<root>" + canvas.ResourceLoader.get("config").xhr.responseText + "</root>", "text/xml");
    this.parse_compass_config(t)
}
,
canvas.app.compass.Model.prototype.parse_world_confing = function(t) {
    for (var e, a, s, i, n = t.childNodes, o = 0; o < n.length; o++)
        if ("world" == n[o].nodeName)
            for (s = n[o].childNodes,
            e = 0; e < s.length; e++)
                if ("areas_xml" === s[e].nodeName)
                    for (i = s[e].childNodes,
                    a = 0; a < i.length; a++)
                        "file" == i[a].nodeName && null != i[a].attributes.src && this.areas_xml.push(this.AreasXML_Path + i[a].attributes.src.value)
}
,
canvas.app.compass.Model.prototype.parse_compass_config = function(t) {
    for (var e, a, s = t.firstChild.childNodes, i = 0; i < s.length; i++) {
        if ("selection" == s[i].nodeName)
            for (e = s[i].childNodes,
            a = 0; a < e.length; a++)
                "title" == e[a].nodeName && null != e[a].attributes.name && this.MAIN_LIST_AR.push([e[a].nodeName, e[a].attributes.name.value]),
                "item" == e[a].nodeName && null != e[a].attributes.id && null != e[a].attributes.name && this.MAIN_LIST_AR.push([parseInt(e[a].attributes.id.value), e[a].attributes.name.value]);
        if ("locations" == s[i].nodeName)
            for (e = s[i].childNodes,
            a = 0; a < e.length; a++)
                if ("title" == e[a].nodeName && null != e[a].attributes.name && this.LOC_LIST_AR.push([e[a].nodeName, e[a].attributes.name.value]),
                "loc" == e[a].nodeName && null != e[a].attributes.id && null != e[a].attributes.name && null != e[a].attributes.verges) {
                    var n = !0;
                    if (null != e[a].attributes.race && e[a].attributes.race.value != this.race && (n = !1),
                    n) {
                        for (var o, r = [], c = e[a].attributes.verges.value.split("|"), p = [], h = 0; h < c.length; h++)
                            2 == (o = c[h].split(",")).length && (r[h] = [o[0], o[1]],
                            -1 == p.indexOf(o[0]) && p.push(o[0]),
                            -1 == p.indexOf(o[1]) && p.push(o[1]));
                        this.myLocVerge[e[a].attributes.id.value] = r,
                        this.LOC_LIST_AR.push([parseInt(e[a].attributes.id.value), e[a].attributes.name.value]);
                        for (var l = 0; l < r.length; l++)
                            this.PATH_LIST_AR.push(r[l]),
                            this.PATH_LIST_AR[this.PATH_LIST_AR.length - 1].push(parseInt(e[a].attributes.id.value))
                    }
                }
        if ("resurses" == s[i].nodeName)
            for (e = s[i].childNodes,
            a = 0; a < e.length; a++)
                "title" == e[a].nodeName && null != e[a].attributes.name && this.RES_LIST_AR.push([e[a].nodeName, e[a].attributes.name.value]);
        if ("monsters" == s[i].nodeName)
            for (e = s[i].childNodes,
            a = 0; a < e.length; a++)
                "title" == e[a].nodeName && null != e[a].attributes.name && this.MON_LIST_AR.push([e[a].nodeName, e[a].attributes.name.value]);
        if ("pers" == s[i].nodeName)
            for (e = s[i].childNodes,
            a = 0; a < e.length; a++)
                "title" == e[a].nodeName && null != e[a].attributes.name && this.PERS_LIST_AR.push([e[a].nodeName, e[a].attributes.name.value]);
        if ("inst" == s[i].nodeName)
            for (e = s[i].childNodes,
            a = 0; a < e.length; a++)
                "title" == e[a].nodeName && null != e[a].attributes.name && this.INST_LIST_AR.push([e[a].nodeName, e[a].attributes.name.value])
    }
    0 < this.manorLocationId ? (this.MAIN_LIST_AR.push([this.manorLocationId, canvas.Translator.getText(148)]),
    this.manorComboIndex = this.MAIN_LIST_AR.length - 1,
    this.LOC_LIST_AR[0] = [this.manorLocationId, canvas.Translator.getText(148)]) : this.LOC_LIST_AR[0] = null
}
,
canvas.app.compass.Model.prototype.parse_areas = function() {
    for (var t, e, a, s, i = this.areas_xml.length, n = 0; n < i; n++)
        for (t = canvas.ResourceLoader.get(this.areas_xml[n]).data.childNodes,
        a = 0; a < t.length; a++)
            if ("areas" == t[a].nodeName)
                for (e = t[a].childNodes,
                s = 0; s < e.length; s++)
                    "area" == e[s].nodeName && this.parse_area(e[s]);
    this.LOC_LIST_AR = this.sortLocArr(this.LOC_LIST_AR),
    this.PERS_LIST_AR = this.sortLocArr(this.PERS_LIST_AR),
    this.RES_LIST_AR = this.sortLocArr(this.RES_LIST_AR),
    this.MON_LIST_AR = this.sortLocArr(this.MON_LIST_AR);
    for (i = this.LOC_LIST_AR.length,
    n = 0; n < i; n++)
        this.LOC_LIST_AR[n] && (this.LOC_BY_ID[this.LOC_LIST_AR[n][0]] = this.LOC_LIST_AR[n][1])
}
,
canvas.app.compass.Model.prototype.parse_area = function(t) {
    t.attributes;
    for (var e, a, s, i, n, o = t.childNodes, r = 0; r < o.length; r++)
        if ("location" == o[r].nodeName && null != (n = o[r].attributes).id)
            for (s = o[r].childNodes,
            e = 0; e < s.length; e++)
                if ("object" == s[e].nodeName)
                    for (i = s[e].childNodes,
                    a = 1; a < i.length; a++)
                        ("item" == i[a].nodeName || "star_2" == s[e].attributes.id.value && "title" == i[a].nodeName) && this.addObjLoc(s[e].attributes.id.value, i[a].childNodes[0].nodeValue, n.id.value, s[e].attributes.race);
                else
                    "title" == s[e].nodeName && this.setLocName(n.id.value, s[e].childNodes[0].nodeValue)
}
,
canvas.app.compass.Model.prototype.setLocName = function(t, e) {
    if (null != e)
        for (var a = 1; a < this.LOC_LIST_AR.length; a++)
            this.LOC_LIST_AR[a][0] == t && (this.LOC_LIST_AR[a][1] = e)
}
,
canvas.app.compass.Model.prototype.addObjLoc = function(t, e, a, s) {
    switch (t) {
    case "chel_blue":
    case "chel_red":
    case "chel_gray":
    case "group_red":
    case "group_blue":
    case "group_gray":
    case "tower":
        if ("hum" == this.race && "chel_red" == t || "mag" == this.race && "chel_blue" == t)
            break;
        if ("hum" == this.race && "group_red" == t || "mag" == this.race && "group_blue" == t)
            break;
        this.addObjToArr(this.PERS_LIST_AR, e, a);
        break;
    case "farm_fish":
    case "farm_floor":
    case "farm_rock":
        this.addObjToArr(this.RES_LIST_AR, e, a);
        break;
    case "monster":
    case "boss":
        if ("hum" == this.race && 37 == a)
            break;
        if ("mag" == this.race && 36 == a)
            break;
        this.addObjToArr(this.MON_LIST_AR, e, a);
        break;
    case "star_2":
        null != s && s.value != this.race || this.addObjToArr(this.INST_LIST_AR, e, a)
    }
}
,
canvas.app.compass.Model.prototype.addObjToArr = function(t, e, a) {
    for (var s = !1, i = 1; i < t.length; i++)
        t[i][1] == e && (s = !0,
        t[i][0].push(a));
    s || t.push([[a], e])
}
,
canvas.app.compass.Model.prototype.sortLocArr = function(t) {
    var e = t.shift()
      , a = [];
    return a.push(e),
    t.sort(function(t, e) {
        return t[1] > e[1] ? 1 : t[1] < e[1] ? -1 : 0
    }),
    a.concat(t)
}
,
canvas.app.compass.Model.prototype.getCorrectInfoText = function(t) {
    var e, a = t % 10;
    if (11 == t || 12 == t || 13 == t || 14 == t)
        e = String(t) + " " + canvas.Translator.getText(3016);
    else
        switch (a) {
        case 1:
            e = String(t) + " " + canvas.Translator.getText(3020);
            break;
        case 2:
        case 3:
        case 4:
            e = String(t) + " " + canvas.Translator.getText(3021);
            break;
        case 0:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
            e = String(t) + " " + canvas.Translator.getText(3016)
        }
    return e
}
,
canvas.app.compass.Model.prototype.setPoint = function(t) {
    0 == t ? canvas.Functions.deleteSessTarget() : setCookie("sess_target", t.toString())
}
,
canvas.app.compass.Model.prototype.getLocationsPaths = function(t) {
    var e, a = t.length;
    this.WAY_LIST_AR = [];
    for (var s = 0; s < a; s++)
        0 < (e = this.findWay.finder(this.P1, t[s])).length && 0 <= e[0] && this.WAY_LIST_AR.push({
            value: t[s],
            title: this.LOC_BY_ID[t[s]] + " (" + (e.length - 1) + ")",
            steps: e.length - 1,
            locs: e.reverse()
        });
    this.WAY_LIST_AR.sort(function(t, e) {
        return t.steps - e.steps
    })
}
,
canvas.app.compass.Model.prototype.findObjectByName = function(t, e) {
    for (var a = t.length, s = 0; s < a; s++)
        if (0 <= t[s][1].toLowerCase().search(e.toLowerCase()))
            return s;
    return -1
}
,
canvas.app.compass.Model.prototype.search = function(t) {
    var e, a, s, i = canvas.Functions.getCyrillicInput(t);
    this.SEARCH_DATA = [[], [], [], [], []];
    var n = !!this.targetName || this.allChecksSelected;
    if (n || this.checks[canvas.app.compass.Const.TYPE_LOC]) {
        for (e = this.LOC_LIST_AR.length,
        a = 0; a < e; a++)
            this.LOC_LIST_AR[a] && (s = {
                id: a,
                name: this.LOC_LIST_AR[a][1],
                type: canvas.app.compass.Const.TYPE_LOC
            },
            0 == a && (s.skipSort = !0),
            (!t || 0 <= s.name.toLowerCase().indexOf(t.toLowerCase()) || 0 <= s.name.toLowerCase().indexOf(i.toLowerCase())) && this.SEARCH_DATA[canvas.app.compass.Const.TYPE_LOC].push(s));
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_LOC].sort(this.sortByTitle)
    }
    if (n || this.checks[canvas.app.compass.Const.TYPE_RES]) {
        for (e = this.RES_LIST_AR.length,
        a = 1; a < e; a++)
            s = {
                id: a,
                name: this.RES_LIST_AR[a][1],
                type: canvas.app.compass.Const.TYPE_RES
            },
            (!t || 0 <= s.name.toLowerCase().indexOf(t.toLowerCase()) || 0 <= s.name.toLowerCase().indexOf(i.toLowerCase())) && this.SEARCH_DATA[canvas.app.compass.Const.TYPE_RES].push(s);
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_RES].sort(this.sortByTitle)
    }
    if (n || this.checks[canvas.app.compass.Const.TYPE_MON]) {
        for (e = this.MON_LIST_AR.length,
        a = 1; a < e; a++)
            s = {
                id: a,
                name: this.MON_LIST_AR[a][1],
                type: canvas.app.compass.Const.TYPE_MON
            },
            (!t || 0 <= s.name.toLowerCase().indexOf(t.toLowerCase()) || 0 <= s.name.toLowerCase().indexOf(i.toLowerCase())) && this.SEARCH_DATA[canvas.app.compass.Const.TYPE_MON].push(s);
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_MON].sort(this.sortByTitle)
    }
    if (n || this.checks[canvas.app.compass.Const.TYPE_PERS]) {
        for (e = this.PERS_LIST_AR.length,
        a = 1; a < e; a++)
            s = {
                id: a,
                name: this.PERS_LIST_AR[a][1],
                type: canvas.app.compass.Const.TYPE_PERS
            },
            (!t || 0 <= s.name.toLowerCase().indexOf(t.toLowerCase()) || 0 <= s.name.toLowerCase().indexOf(i.toLowerCase())) && this.SEARCH_DATA[canvas.app.compass.Const.TYPE_PERS].push(s);
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_PERS].sort(this.sortByTitle)
    }
    if (n || this.checks[canvas.app.compass.Const.TYPE_INST]) {
        for (e = this.INST_LIST_AR.length,
        a = 1; a < e; a++)
            s = {
                id: a,
                name: this.INST_LIST_AR[a][1],
                type: canvas.app.compass.Const.TYPE_INST
            },
            (!t || 0 <= s.name.toLowerCase().indexOf(t.toLowerCase()) || 0 <= s.name.toLowerCase().indexOf(i.toLowerCase())) && this.SEARCH_DATA[canvas.app.compass.Const.TYPE_INST].push(s);
        this.SEARCH_DATA[canvas.app.compass.Const.TYPE_INST].sort(this.sortByTitle)
    }
}
,
canvas.app.compass.Model.prototype.sortByTitle = function(t, e) {
    return t.skipSort ? -1 : e.skipSort || t.name > e.name ? 1 : t.name < e.name ? -1 : 0
}
,
canvas.app.compass.Model.prototype.searchWays = function(t) {
    var e = [];
    switch (t.type) {
    case canvas.app.compass.Const.TYPE_LOC:
        e.push(parseInt(this.LOC_LIST_AR[t.id][0]));
        break;
    case canvas.app.compass.Const.TYPE_RES:
        e = this.RES_LIST_AR[t.id][0];
        break;
    case canvas.app.compass.Const.TYPE_MON:
        e = this.MON_LIST_AR[t.id][0];
        break;
    case canvas.app.compass.Const.TYPE_PERS:
        e = this.PERS_LIST_AR[t.id][0];
        break;
    case canvas.app.compass.Const.TYPE_INST:
        e = this.INST_LIST_AR[t.id][0]
    }
    this.getLocationsPaths(e)
}
,
canvas.app.compass.Model.prototype.getWaysChain = function(t) {
    for (var e = [], a = t.length, s = 0; s < a; s++)
        e.push(this.LOC_BY_ID[t[s]]);
    return e
}
,
canvas.app.compass.Model.prototype.getColorByWayLen = function(t) {
    return t < 4 ? "red" : t < 9 ? "blue" : "grey"
}
,
canvas.app.compass.view.ButtonView = function(t, e, a) {
    this._title = "",
    Object.defineProperty(this, "title", {
        get: function() {
            return this._title
        },
        set: function(t) {
            this._title !== t && (this._title = t,
            this.field.innerText = t)
        }
    }),
    this._textColor = "#000000",
    Object.defineProperty(this, "textColor", {
        get: function() {
            return this._textColor
        },
        set: function(t) {
            this._textColor !== t && (this._textColor = t,
            this.field.style.color = t)
        }
    }),
    this._visible = !0,
    Object.defineProperty(this, "visible", {
        get: function() {
            return this._visible
        },
        set: function(t) {
            this._visible = t,
            this.root.style.display = t ? "block" : "none"
        }
    }),
    this._width = 220,
    Object.defineProperty(this, "width", {
        get: function() {
            return this._width
        },
        set: function(t) {
            this._width !== t && (this._width = t,
            this.root.style.width = t,
            this.button.style.width = t - 66)
        }
    }),
    this._x = 0,
    Object.defineProperty(this, "x", {
        get: function() {
            return this._x
        },
        set: function(t) {
            this._x !== t && (this._x = t,
            this.root.style.marginLeft = t)
        }
    }),
    this._y = 0,
    Object.defineProperty(this, "y", {
        get: function() {
            return this._y
        },
        set: function(t) {
            this._y !== t && (this._y = t,
            this.root.style.marginTop = t)
        }
    }),
    null == e && (e = 220);
    var s = document.createElement("div");
    s.className = "popup_center",
    s.style.height = 35,
    t.appendChild(s),
    this.root = s;
    t = document.createElement("div");
    t.className = "popup_btn",
    s.appendChild(t);
    s = document.createElement("div");
    t.appendChild(s);
    t = document.createElement("button");
    t.type = "button",
    s.appendChild(t),
    t.onclick = this.clickHandler.bind(this),
    t.style.outline = "none",
    this.button = t,
    this.field = document.createElement("span"),
    this.button.appendChild(this.field),
    this.title = a,
    this.textColor = "#F9DFA1",
    this.width = e
}
,
canvas.app.compass.view.ButtonView.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.ui.ButtonEvent.EVENT_CLICK, this)
}
,
canvas.app.compass.view.CheckView = function(t, e, a) {
    this._selected = !1,
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            this._selected = t,
            this.outHandler()
        }
    }),
    this.index = a,
    this.root = document.createElement("span"),
    t.appendChild(this.root),
    this.img = document.createElement("span"),
    this.root.appendChild(this.img),
    this.img.style.display = "inline-block",
    this.img.style.width = 23,
    this.img.style.height = 23,
    this.img.style.background = "url('../images/gui/gui-checkbox.png') no-repeat",
    this.img.style.backgroundPosition = "0px -23px",
    this.img.style.verticalAlign = "middle";
    t = document.createElement("span");
    this.root.appendChild(t),
    t.innerText = " " + e.toLowerCase(),
    t.style.display = "inline",
    this.root.style.margin = 5,
    this.root.style.cursor = "pointer",
    this.root.onmouseover = this.overHandler.bind(this),
    this.root.onmouseout = this.outHandler.bind(this),
    this.root.onclick = this.clickHandler.bind(this)
}
,
canvas.app.compass.view.CheckView.prototype.overHandler = function() {
    this.img.style.backgroundPosition = this.selected ? "0px -92px" : "0px -115px"
}
,
canvas.app.compass.view.CheckView.prototype.outHandler = function() {
    this.img.style.backgroundPosition = this.selected ? "0px 0px" : "0px -23px"
}
,
canvas.app.compass.view.CheckView.prototype.clickHandler = function() {
    this.selected = !this.selected,
    this.overHandler(),
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.CHECK_CHANGED, null, {
        index: this.index,
        selected: this.selected
    })
}
,
canvas.app.compass.view.ComboBox = function(t, e) {
    this._items = null,
    Object.defineProperty(this, "items", {
        get: function() {
            return this._items
        },
        set: function(t) {
            this._items = t,
            this.update(),
            this.selectedIndex = 0
        }
    }),
    this._selectedIndex = 0,
    Object.defineProperty(this, "selectedIndex", {
        get: function() {
            return this._selectedIndex
        },
        set: function(t) {
            this._selectedIndex = t,
            this.updateValue()
        }
    }),
    Object.defineProperty(this, "selectedItem", {
        get: function() {
            return this.items[this.selectedIndex]
        }
    }),
    this._opened = !1,
    Object.defineProperty(this, "opened", {
        get: function() {
            return this._opened
        },
        set: function(t) {
            this._opened = t,
            this.list.style.display = t ? "block" : "none",
            this.img.style.backgroundPosition = t ? "-47px" : "0px"
        }
    }),
    canvas.app.compass.Element.call(this, t),
    null == e && (e = 400),
    this.width = e;
    var a = document.createElement("div");
    a.style.width = e,
    a.style.height = 23,
    a.style.position = "relative",
    a.style.background = "url('../images/gui/input.png') no-repeat",
    a.style.backgroundPosition = e - 1e3 + "px -23px",
    a.style.cursor = "pointer",
    a.onclick = this.clickHandler.bind(this),
    a.onmouseover = this.overHandler.bind(this),
    a.onmouseout = this.outHandler.bind(this),
    this.root.appendChild(a),
    this.divCenter = a;
    t = document.createElement("div");
    a.appendChild(t),
    t.style.background = "url('../images/gui/input.png') no-repeat",
    t.style.backgroundPosition = "0px 0px",
    t.style.width = 10,
    t.style.height = 22,
    t.style.left = -6,
    t.style.position = "absolute",
    this.divLeft = t,
    t = document.createElement("div"),
    a.appendChild(t),
    t.style.background = "url('../images/gui/btn-select.png') no-repeat",
    t.style.width = 24,
    t.style.height = 24,
    t.style.right = 0,
    t.style.position = "absolute",
    this.img = t,
    this.list = document.createElement("div"),
    this.list.style.width = e,
    this.list.style.height = "auto",
    this.list.style.maxHeight = 108,
    this.list.style.position = "relative",
    this.list.style.background = "#f8e5a8",
    this.list.style.border = "#e3b360 1px solid",
    this.list.style.borderRadius = "4px",
    this.list.style.boxShadow = "0px 3px 3px 1px rgba(41, 13, 5, 0.4)",
    this.list.style.overflow = "auto",
    this.list.style.marginRight = 4,
    this.root.appendChild(this.list),
    this.title = document.createElement("div"),
    this.divCenter.appendChild(this.title),
    this.title.style.textAlign = "left",
    this.title.style.height = 12,
    this.title.style.paddingTop = 4,
    this.opened = !1
}
,
canvas.app.compass.view.ComboBox.prototype = Object.create(canvas.app.compass.Element.prototype),
canvas.app.compass.view.ComboBox.prototype.update = function() {
    for (var t; this.list.hasChildNodes(); )
        (t = this.list.removeChild(this.list.lastChild)).onmouseover = null,
        t.onmouseout = null,
        t.onclick = null;
    for (var e = this.items.length, a = 0; a < e; a++)
        (t = document.createElement("div")).innerText = this.items[a].value,
        t.align = "left",
        t.style.padding = 4,
        t.style.paddingLeft,
        t.style.cursor = "pointer",
        t.onmouseover = this.itemOverHandler,
        t.onmouseout = this.itemOutHandler,
        t.onclick = this.itemClickHandler.bind(this),
        t.index = a,
        this.list.appendChild(t)
}
,
canvas.app.compass.view.ComboBox.prototype.updateValue = function() {
    this.title.innerText = this.items[this.selectedIndex].value
}
,
canvas.app.compass.view.ComboBox.prototype.clickHandler = function(t) {
    this.opened = !this.opened,
    t.stopPropagation()
}
,
canvas.app.compass.view.ComboBox.prototype.overHandler = function() {
    this.divCenter.style.backgroundPosition = this.width - 1e3 + "px -69px",
    this.divLeft.style.backgroundPosition = "0px -46px"
}
,
canvas.app.compass.view.ComboBox.prototype.outHandler = function() {
    this.divCenter.style.backgroundPosition = this.width - 1e3 + "px -23px",
    this.divLeft.style.backgroundPosition = "0px 0px"
}
,
canvas.app.compass.view.ComboBox.prototype.itemClickHandler = function(t) {
    this.selectedIndex = t.target.index,
    this.opened = !1,
    canvas.EventManager.dispatchEvent(canvas.ui.ComboBoxEvent.EVENT_SELECT, this, this.items[this.selectedIndex])
}
,
canvas.app.compass.view.ComboBox.prototype.itemOverHandler = function() {
    this.style.background = "#eccf93"
}
,
canvas.app.compass.view.ComboBox.prototype.itemOutHandler = function() {
    this.style.background = 0
}
,
canvas.app.compass.view.ComboView = function(t, e) {
    this._resetMode = !1,
    Object.defineProperty(this, "resetMode", {
        get: function() {
            return this._resetMode
        },
        set: function(t) {
            (this._resetMode = t) ? (this.button.style.background = "url('../images/gui/btn-clear.png') no-repeat",
            this.button.style.backgroundPosition = "2px 0px",
            this.button.style.height = 17,
            this.button.style.top = 2) : (this.opened = this._opened,
            this.button.style.top = 0)
        }
    }),
    this._opened = !1,
    Object.defineProperty(this, "opened", {
        get: function() {
            return this._opened
        },
        set: function(t) {
            this._opened = t,
            this.resetMode || (this.button.style.background = "url('../images/gui/btn-select.png') no-repeat",
            this.button.style.backgroundPosition = t ? "-47px 0px" : "0px 0px",
            this.button.style.height = 19)
        }
    }),
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t,
            this.data && (this.input.value = this.data.name),
            this.update()
        }
    }),
    canvas.app.compass.Element.call(this, t),
    null == e && (e = 400),
    this.width = e,
    this.root.style.top = 70;
    var a = document.createElement("div");
    a.style.width = e,
    a.style.height = 23,
    a.style.position = "relative",
    a.style.background = "url('../images/gui/input.png') no-repeat",
    a.style.backgroundPosition = e - 1e3 + "px -23px",
    this.root.appendChild(a),
    this.divCenter = a;
    t = document.createElement("div");
    a.appendChild(t),
    t.style.background = "url('../images/btn-filter-search.png') no-repeat",
    t.style.width = 24,
    t.style.height = 24,
    t.style.left = -10,
    t.style.top = -1,
    t.style.position = "absolute",
    t = document.createElement("div"),
    a.appendChild(t),
    t.style.background = "url('../images/gui/btn-select.png') no-repeat",
    t.style.width = 24,
    t.style.height = 19,
    t.style.right = 0,
    t.style.cursor = "pointer",
    t.style.position = "absolute",
    t.onclick = this.clickHandler.bind(this),
    this.button = t,
    this.label1 = document.createElement("label"),
    a.appendChild(this.label1),
    this.label1.style.width = 200,
    this.label1.style.height = 24,
    this.label1.style.left = 17,
    this.label1.style.top = 4,
    this.label1.style.color = "#b69372",
    this.label1.style.position = "absolute",
    this.label1.htmlFor = "compassInput",
    this.label1.style.cursor = "text",
    this.label1.style.textAlign = "left",
    this.label1.innerText = canvas.Translator.getText(3040),
    this.label2 = document.createElement("label"),
    a.appendChild(this.label2),
    this.label2.style.width = 150,
    this.label2.style.height = 24,
    this.label2.style.right = 25,
    this.label2.style.top = 4,
    this.label2.style.color = "#b69372",
    this.label2.style.position = "absolute",
    this.label2.style.cursor = "pointer",
    this.label2.style.textAlign = "right",
    this.label2.innerText = canvas.Translator.getText(3041),
    this.label2.onclick = this.clickHandler.bind(this),
    this.input = document.createElement("input"),
    a.appendChild(this.input),
    this.input.style.width = e - 50,
    this.input.style.height = 24,
    this.input.style.paddingBottom = 2,
    this.input.style.marginRight = 20,
    this.input.type = "text",
    this.input.style.border = 0,
    this.input.style.outline = 0,
    this.input.style.background = 0,
    this.input.id = this.input.name = "compassInput",
    this.input.oninput = this.changeHandler.bind(this);
    a = this.overHandler.bind(this),
    e = this.outHandler.bind(this);
    this.input.onmouseover = a,
    this.input.onmouseout = e,
    this.label1.onmouseover = a,
    this.label1.onmouseout = e,
    this.label2.onmouseover = a,
    this.label2.onmouseout = e,
    this.button.onmouseover = this.buttonOverHandler.bind(this),
    this.button.onmouseout = this.buttonOutHandler.bind(this),
    this.opened = !1
}
,
canvas.app.compass.view.ComboView.prototype = Object.create(canvas.app.compass.Element.prototype),
canvas.app.compass.view.ComboView.prototype.update = function() {
    this.label1.style.display = this.label2.style.display = "" == this.input.value ? "block" : "none",
    this.resetMode = this.data || 2 < this.input.value.length
}
,
canvas.app.compass.view.ComboView.prototype.changeHandler = function() {
    this.data = null,
    2 < this.input.value.length ? (canvas.EventManager.dispatchEvent(canvas.app.compass.Event.SEARCH, null, this.input.value),
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.SHOW_LIST)) : (canvas.EventManager.dispatchEvent(canvas.app.compass.Event.SEARCH, null, ""),
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.HIDE_LIST))
}
,
canvas.app.compass.view.ComboView.prototype.overHandler = function() {
    this.divCenter.style.backgroundPosition = this.width - 1e3 + "px -69px"
}
,
canvas.app.compass.view.ComboView.prototype.outHandler = function() {
    this.divCenter.style.backgroundPosition = this.width - 1e3 + "px -23px"
}
,
canvas.app.compass.view.ComboView.prototype.buttonOverHandler = function() {
    this.resetMode ? this.button.style.backgroundPosition = "2px -17px" : this.overHandler()
}
,
canvas.app.compass.view.ComboView.prototype.buttonOutHandler = function() {
    this.resetMode ? this.button.style.backgroundPosition = "2px 0px" : this.outHandler()
}
,
canvas.app.compass.view.ComboView.prototype.clickHandler = function(t) {
    this.resetMode ? (this.input.value = "",
    this.changeHandler()) : canvas.EventManager.dispatchEvent(this.opened ? canvas.app.compass.Event.HIDE_LIST : canvas.app.compass.Event.SHOW_LIST),
    t.stopPropagation()
}
,
canvas.app.compass.view.ObjectsList = function(t, e) {
    canvas.app.compass.Element.call(this, t),
    null == e && (e = 400),
    this.root.style.top = 93;
    t = document.createElement("div");
    t.style.width = e - 16,
    t.style.height = "auto",
    t.style.maxHeight = 150,
    t.style.position = "relative",
    t.style.background = "#f8e5a8",
    t.style.border = "#e3b360 1px solid",
    t.style.borderRadius = "4px",
    t.style.boxShadow = "0px 3px 3px 1px rgba(41, 13, 5, 0.4)",
    t.style.padding = 8,
    t.style.overflow = "auto",
    this.root.appendChild(t),
    this.container = t
}
,
canvas.app.compass.view.ObjectsList.prototype = Object.create(canvas.app.compass.Element.prototype),
canvas.app.compass.view.ObjectsList.prototype.update = function() {
    for (var t, e, a, s, i, n = canvas.app.compass.model; this.container.hasChildNodes(); )
        (t = this.container.removeChild(this.container.lastChild)).onmouseover = null,
        t.onmouseout = null,
        t.onclick = null;
    for (a = 0; a < canvas.app.compass.Const.TYPE_COUNT; a++)
        if (0 < (i = n.SEARCH_DATA[a].length))
            for ((e = document.createElement("div")).innerText = canvas.Translator.getText(canvas.app.compass.Const.TITLES[a]),
            e.align = "left",
            e.style.padding = 2,
            e.style.fontSize = 14,
            e.style.fontWeight = "bold",
            this.container.appendChild(e),
            s = 0; s < i; s++)
                t = n.SEARCH_DATA[a][s],
                (e = document.createElement("div")).innerText = t.name,
                e.align = "left",
                e.style.margin = 2,
                e.style.paddingLeft = 8,
                e.style.cursor = "pointer",
                e.onmouseover = this.overHandler,
                e.onmouseout = this.outHandler,
                e.onclick = this.clickHandler,
                e.id = t.id,
                e.type = a,
                this.container.appendChild(e);
    this.container.hasChildNodes() || ((e = document.createElement("div")).innerText = canvas.Translator.getText(3018),
    e.align = "left",
    e.style.margin = 2,
    e.style.paddingLeft = 8,
    this.container.appendChild(e))
}
,
canvas.app.compass.view.ObjectsList.prototype.overHandler = function() {
    this.style.background = "#eccf93",
    this.style.color = "#b80504"
}
,
canvas.app.compass.view.ObjectsList.prototype.outHandler = function() {
    this.style.background = 0,
    this.style.color = null
}
,
canvas.app.compass.view.ObjectsList.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.compass.Event.LIST_SELECT, null, {
        id: this.id,
        type: this.type,
        name: this.innerText
    })
}
,
canvas.app.compass.view.TileBackView = function(t, e, a) {
    canvas.app.compass.Element.call(this, t);
    var s = document.createElement("div");
    s.className = "popup-top-left",
    s.style.width = e,
    s.style.height = 36,
    this.root.appendChild(s);
    var i = document.createElement("div");
    i.className = "popup-top-right",
    i.style.backgroundImage = "url('../images/popup-top-right-2.png')",
    i.style.height = 36,
    s.appendChild(i);
    t = document.createElement("div");
    t.className = "popup-top-center",
    t.style.height = 36,
    i.appendChild(t);
    s = document.createElement("div");
    s.style.paddingTop = 5,
    s.style.paddingLeft = 18,
    s.style.color = "#ffffff",
    s.style.fontWeight = "normal",
    s.style.fontSize = 16,
    t.appendChild(s),
    this.field = s;
    i = document.createElement("div");
    i.className = "popup-left-center",
    i.style.width = e,
    i.style.height = a - 53,
    this.root.appendChild(i);
    s = document.createElement("div");
    s.className = "popup-right-center",
    s.style.height = a - 53,
    i.appendChild(s),
    (t = document.createElement("div")).className = "popup_global_content",
    t.style.height = a - 53,
    s.appendChild(t);
    s = document.createElement("div");
    s.className = "popup-left-bottom",
    s.style.width = e,
    s.style.height = 17,
    this.root.appendChild(s);
    e = document.createElement("div");
    e.className = "popup-right-bottom",
    e.style.height = 17,
    s.appendChild(e);
    s = document.createElement("div");
    s.className = "popup-bottom-center",
    s.style.height = 17,
    e.appendChild(s),
    this.container = t
}
,
canvas.app.compass.view.TileBackView.prototype = Object.create(canvas.app.compass.Element.prototype),
canvas.app.compass.view.TileBackView.prototype.setTitle = function(t) {
    this.field.innerText = 45 < t.length ? t.substr(0, 45) + "..." : t
}
,
canvas.app.compass.view.TitleBottomView = function(t, e) {
    canvas.app.compass.Element.call(this, t),
    this._root = t,
    null == e && (e = 400),
    this.width = e,
    this.root.style.top = 225,
    this.field = document.createElement("div"),
    this.root.appendChild(this.field),
    this.field.style.color = "#6b382d",
    this.field.style.fontWeight = "bold",
    this.field.style.fontSize = 14,
    this.field.style.width = e,
    this.field.style.marginRight = 10,
    this.field.style.textAlign = "left",
    this.link = document.createElement("span"),
    this.field.appendChild(this.link),
    this.link.style.color = "#6b382d",
    this.link.style.borderBottom = "1px dashed",
    this.link.style.fontSize = 14,
    this.link.onmouseover = this.overHandler.bind(this),
    this.link.onmouseout = this.outHandler.bind(this),
    this.link.onmousemove = this.moveHandler.bind(this),
    this.alt = document.createElement("div"),
    this.alt.style.maxWidth = e,
    this.alt.style.position = "absolute",
    this.alt.style.textAlign = "left",
    this.alt.style.fontWeight = "normal",
    this.alt.style.background = "#f8e5a8",
    this.alt.style.border = "#e3b360 1px solid",
    this.alt.style.borderRadius = "4px",
    this.alt.style.boxShadow = "0px 3px 3px 1px rgba(41, 13, 5, 0.4)",
    this.alt.style.padding = 8,
    this.alt.style.lineHeight = 2,
    this.alt.style.top = 20,
    this.outHandler()
}
,
canvas.app.compass.view.TitleBottomView.prototype = Object.create(canvas.app.compass.Element.prototype),
canvas.app.compass.view.TitleBottomView.prototype.setTitle = function(t, e) {
    var a = canvas.app.compass.model;
    if (this.field.innerText = canvas.Translator.getText(3015) + " ",
    this.field.appendChild(this.link),
    this.field.appendChild(this.alt),
    this.link.innerText = a.getCorrectInfoText(t),
    e) {
        for (var s = e.length, i = "", n = 0; n < s; n++)
            i && (i += " " + String.fromCharCode(8594) + " "),
            i += e[n];
        this.alt.innerText = i
    } else
        this.alt.innerText = ""
}
,
canvas.app.compass.view.TitleBottomView.prototype.setNotFoundTitle = function(t) {
    this.field.innerText = t || canvas.Translator.getText(3019),
    this.link.innerText = ""
}
,
canvas.app.compass.view.TitleBottomView.prototype.overHandler = function(t) {
    this.alt.style.display = "block",
    this.alt.style.minWidth = 50 < this.alt.clientHeight ? this.width : 0,
    this.moveHandler(t),
    this._root.appendChild(this.alt)
}
,
canvas.app.compass.view.TitleBottomView.prototype.outHandler = function() {
    this.alt.style.display = "none"
}
,
canvas.app.compass.view.TitleBottomView.prototype.moveHandler = function(t) {
    var e = t.layerX + 10
      , a = e + this.alt.clientWidth - window.innerWidth + 5;
    0 <= a && (e -= a),
    e <= 0 && (e = 5),
    this.alt.style.left = e,
    0 <= (a = (e = 225 + t.layerY + 20) + this.alt.clientHeight - window.innerHeight + 5) && (e = e - this.alt.clientHeight - 30),
    e <= 0 && (e = 5),
    this.alt.style.top = e
}
,
canvas.app.compass.view.TitleView = function(t, e) {
    canvas.app.compass.Element.call(this, t),
    this.root.style.color = "#6b382d",
    this.root.style.fontWeight = "bold",
    this.root.style.fontSize = 14,
    this.root.style.top = 40,
    this.root.innerText = e
}
,
canvas.app.compass.view.TitleView.prototype = Object.create(canvas.app.compass.Element.prototype),
canvas.app.magic.Const = {
    TYPE_MAGIC: "magic",
    TYPE_AURA: "aura",
    TYPE_SHADOW: "shadow"
},
canvas.app.magic.Event = {
    ENTER_FRAME: "Magic.ENTER_FRAME",
    HINT_ADD: "Magic.HINT_ADD",
    HINT_REMOVE: "Magic.HINT_REMOVE",
    DESELECT_ALL: "Magic.DESELECT_ALL"
},
canvas.app.magic.Main = function(t, e) {
    switch (canvas.px.Container.call(this),
    this.model = t,
    this.hintManager = e,
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height),
    canvas.EventManager.addEventListener(canvas.app.magic.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.magic.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    this.model.type) {
    case canvas.app.magic.Const.TYPE_AURA:
        this.view = new canvas.app.magic.view.ViewAura;
        break;
    case canvas.app.magic.Const.TYPE_SHADOW:
        this.view = new canvas.app.magic.view.ViewShadow;
        break;
    default:
        this.view = new canvas.app.magic.view.ViewMagic
    }
    this.addChild(this.view),
    this.addChild(this.hintContainer)
}
,
canvas.app.magic.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.magic.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.magic.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.magic.Model = function(t) {
    this.picPath = t.PicPath || "images/data/artifacts/",
    this.parse(t.EffList || ""),
    this.slotsTotal = t.slotsTotal ? parseInt(t.slotsTotal) : 8
}
,
canvas.app.magic.Model.prototype.parse = function(t) {
    this.items = [];
    for (var e, a, s = t.split(","), i = s.length, n = 0; n < i; n++)
        e = s[n].split(":"),
        (a = {}).slot = parseInt(e[0]),
        a.id = e[1],
        a.title = e[2],
        a.level = parseInt(e[3]),
        a.mp = parseInt(e[4]),
        a.picture = e[5],
        this.items[a.slot] = a
}
,
canvas.app.magic.View = function() {
    canvas.px.Container.call(this),
    this.createBack(),
    this.createSlots(),
    this.createFront();
    for (var t = this.slots.length, e = 0; e < t; e++)
        this.addChild(this.slots[e].numImage);
    canvas.EventManager.addEventListener(canvas.app.magic.Event.DESELECT_ALL, null, this.deselectAllHandler, this)
}
,
canvas.app.magic.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.magic.View.prototype.createBack = function() {
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")))
}
,
canvas.app.magic.View.prototype.createFront = function() {
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "front_slots")));
    t.position.set(32, 7),
    (t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "front_numbers")))).position.set(62, 37)
}
,
canvas.app.magic.View.prototype.createSlots = function() {
    var t = canvas.app.magic.modelMagic;
    this.slots = [];
    for (var e, a = [[90, 8], [125, 19], [146, 50], [147, 86], [125, 115], [90, 127], [55, 115], [33, 86], [33, 50], [55, 20]], s = [[101, 44], [124, 52], [136, 72], [136, 95], [123, 113], [101, 119], [78, 113], [66, 93], [65, 70], [78, 52]], i = 0; i < 10; i++)
        (e = new canvas.px.Sprite(canvas.px.TextureEmpty)).position.set(s[i][0], s[i][1]),
        (e = new canvas.app.magic.view.slots.SlotMagic(i,e)).position.set(a[i][0], a[i][1]),
        this.addChild(e),
        this.slots.push(e),
        e.data = t.items[i + 1]
}
,
canvas.app.magic.View.prototype.deselectAllHandler = function() {
    for (var t = this.slots.length, e = 0; e < t; e++)
        this.slots[e].selected = !1
}
,
canvas.app.magic.view.SlotView = function(t, e, a) {
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t,
            this.update()
        }
    }),
    this._selected = !1,
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            (this._selected = t) ? this.addChild(this.selector) : this.removeIfExist(this.selector)
        }
    }),
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", a)),
    this.index = t,
    this.numImage = e,
    this.msk = this.createMask(),
    this.sprite.addChild(this.msk),
    this.image = this.createImage(),
    this.sprite.addChild(this.image),
    this.image.mask = this.msk,
    this.selector = this.createSelector(),
    this.hint = new canvas.app.view.PxHint,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this, this.clickHandler, this)
}
,
canvas.app.magic.view.SlotView.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.magic.view.SlotView.prototype.createSelector = function() {
    return new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_selector"))
}
,
canvas.app.magic.view.SlotView.prototype.update = function() {
    var t = canvas.app.magic.model;
    this.data ? (this.selected = !1,
    this.hint.text = this.data.title + "\n" + canvas.Translator.getText(49) + " " + this.data.mp,
    canvas.EventManager.dispatchEvent(canvas.app.magic.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint)
    }),
    this.image.setImage(t.picPath + this.data.picture),
    this.numImage.texture = canvas.ResourceLoader.getImage("ui", "num_" + this.data.level)) : (canvas.EventManager.dispatchEvent(canvas.app.magic.Event.HINT_REMOVE, null, {
        target: this
    }),
    this.image.clear(),
    this.numImage.texture = canvas.px.TextureEmpty)
}
,
canvas.app.magic.view.SlotView.prototype.clickHandler = function() {
    this.data ? spell_take_off(this.data.id) : (canvas.EventManager.dispatchEvent(canvas.app.magic.Event.DESELECT_ALL),
    this.selected = !0,
    spell_slot(this.index + 1))
}
,
canvas.app.magic.view.SlotView.prototype.createMask = function() {
    var t = new canvas.px.Graphics;
    return t.beginFill(0, 1),
    t.drawCircle(19, 19, 18),
    t.endFill(),
    this.sprite.hitArea = new canvas.px.Circle(19,19,18),
    t
}
,
canvas.app.magic.view.SlotView.prototype.createImage = function() {
    var t = new canvas.ui.Image;
    return t.scale.set(.63, .63),
    t
}
,
canvas.app.magic.view.ViewAura = function() {
    canvas.app.magic.View.call(this)
}
,
canvas.app.magic.view.ViewAura.prototype = Object.create(canvas.app.magic.View.prototype),
canvas.app.magic.view.ViewAura.prototype.createFront = function() {
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "aura_front_slots")));
    t.position.set(46, 22),
    (t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "aura_front_numbers")))).position.set(75, 53)
}
,
canvas.app.magic.view.ViewAura.prototype.createSlots = function() {
    var t = canvas.app.magic.modelAura;
    this.slots = [];
    for (var e, a = [[122, 24], [122, 98], [48, 98], [48, 24]], s = [[123, 60], [123, 103], [78, 103], [78, 60]], i = 0; i < 4; i++)
        (e = new canvas.px.Sprite(canvas.px.TextureEmpty)).position.set(s[i][0], s[i][1]),
        (e = new canvas.app.magic.view.slots.SlotAura(i,e)).position.set(a[i][0], a[i][1]),
        this.addChild(e),
        this.slots.push(e),
        e.data = t.items[i + 1]
}
,
canvas.app.magic.view.ViewMagic = function() {
    canvas.app.magic.View.call(this)
}
,
canvas.app.magic.view.ViewMagic.prototype = Object.create(canvas.app.magic.View.prototype),
canvas.app.magic.view.ViewShadow = function() {
    canvas.app.magic.View.call(this)
}
,
canvas.app.magic.view.ViewShadow.prototype = Object.create(canvas.app.magic.View.prototype),
canvas.app.magic.view.ViewShadow.prototype.createBack = function() {
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "shadow_back")))
}
,
canvas.app.magic.view.ViewShadow.prototype.createFront = function() {
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "shadow_top"))).position.set(50, 50)
}
,
canvas.app.magic.view.ViewShadow.prototype.createSlots = function() {
    var t = canvas.app.magic.modelShadow;
    this.slots = [];
    for (var e, a = [[79, 23], [119, 40], [136, 80], [119, 119], [79, 136], [40, 119], [23, 80], [40, 40]], s = [[85, 50], [108, 59], [119, 85], [108, 110], [85, 120], [60, 110], [50, 85], [60, 59]], i = 0; i < 8; i++)
        (e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "shadow_disabled_slot"))).position.set(s[i][0], s[i][1]),
        (e = new canvas.app.magic.view.slots.SlotShadow(i,e)).position.set(a[i][0], a[i][1]),
        this.addChild(e),
        this.slots.push(e),
        e.data = t.items[i + 1]
}
,
canvas.app.magic.view.slots.SlotAura = function(t, e) {
    canvas.app.magic.view.SlotView.call(this, t, e, "aura_slot")
}
,
canvas.app.magic.view.slots.SlotAura.prototype = Object.create(canvas.app.magic.view.SlotView.prototype),
canvas.app.magic.view.slots.SlotAura.prototype.createSelector = function() {
    return new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "aura_slot_selector"))
}
,
canvas.app.magic.view.slots.SlotAura.prototype.createMask = function() {
    var t = new canvas.px.Graphics;
    return t.beginFill(16777215, 1),
    t.drawCircle(26, 26, 25),
    t.endFill(),
    this.sprite.hitArea = new canvas.px.Circle(26,26,25),
    t
}
,
canvas.app.magic.view.slots.SlotAura.prototype.createImage = function() {
    var t = new canvas.ui.Image;
    return t.scale.set(.8, .8),
    t
}
,
canvas.app.magic.view.slots.SlotMagic = function(t, e) {
    canvas.app.magic.view.SlotView.call(this, t, e, "slot")
}
,
canvas.app.magic.view.slots.SlotMagic.prototype = Object.create(canvas.app.magic.view.SlotView.prototype),
canvas.app.magic.view.slots.SlotShadow = function(t, e) {
    canvas.app.magic.view.SlotView.call(this, t, e, "shadow_circle"),
    this.lockImage = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "shadow_lock")),
    this.lockImage.position.set(-3, -2)
}
,
canvas.app.magic.view.slots.SlotShadow.prototype = Object.create(canvas.app.magic.view.SlotView.prototype),
canvas.app.magic.view.slots.SlotShadow.prototype.update = function() {
    var t = canvas.app.magic.modelShadow;
    this.data ? (this.selected = !1,
    this.hint.text = this.data.title + "\n" + canvas.Translator.getText(49) + " " + this.data.mp,
    canvas.EventManager.dispatchEvent(canvas.app.magic.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint)
    }),
    this.image.setImage(t.picPath + this.data.picture),
    this.numImage.texture = canvas.px.TextureEmpty) : (canvas.EventManager.dispatchEvent(canvas.app.magic.Event.HINT_REMOVE, null, {
        target: this
    }),
    this.image.clear(),
    this.index >= t.slotsTotal ? (this.numImage.texture = canvas.ResourceLoader.getImage("ui", "shadow_disabled_slot"),
    this.addChild(this.lockImage),
    this.interactiveChildren = !1) : (this.numImage.texture = canvas.px.TextureEmpty,
    this.interactiveChildren = !0,
    this.removeIfExist(this.lockImage)))
}
,
canvas.app.birthday.Const = {
    configUrl: "entry_point.php?object=friend&json_mode_on=1&action=birthday_conf"
},
canvas.app.birthday.Event = {
    ENTER_FRAME: "Birthday.ENTER_FRAME",
    GIFT_USER: "Birthday.GIFT_USER",
    GIFT_GIFT: "Birthday.GIFT_GIFT",
    UPDATE: "Birthday.UPDATE"
},
canvas.app.birthday.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.windowsManager = new canvas.utils.WindowsManager,
    this.view = new canvas.app.birthday.View,
    this.addChild(this.view),
    this.windowsContainer = new canvas.px.Container,
    this.addChild(this.windowsContainer),
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view),
    canvas.EventManager.addEventListener(canvas.app.birthday.Event.GIFT_USER, null, this.giftUserHandler, this),
    canvas.EventManager.addEventListener(canvas.app.birthday.Event.GIFT_GIFT, null, this.giftHandler, this),
    canvas.EventManager.addEventListener(canvas.app.birthday.Event.UPDATE, null, this.update, this),
    this.model.init()
}
,
canvas.app.birthday.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.birthday.Main.prototype.giftUserHandler = function(t) {
    canvas.ResourceLoader.inProgress || (this.model.selectedUser = t.params.id,
    canvas.ResourceLoader.remove("birthday_conf"),
    canvas.EventManager.addEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this),
    canvas.ResourceLoader.add([["birthday_conf", canvas.app.birthday.Const.configUrl]]))
}
;
canvas.app.birthday.Main.prototype.giftHandler = function(t) {
    this.model.gift(t.params.id),
    canvas.utils.WindowsManager.instance.closeWindow(this.view.itemsWindow)
}
,
canvas.app.birthday.Main.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ResourceLoader.EVENT_COMPLETE, null, this.completeHandler, this),
    this.model.init()
}
,
canvas.app.birthday.Main.prototype.update = function() {
    this.view.update(),
    this.model.selectedUser && canvas.utils.WindowsManager.instance.openWindow(this.view.itemsWindow)
}
,
canvas.app.birthday.Model = function(t) {
    this.selectedUser = t.userId && parseInt(t.userId) ? t.userId : ""
}
,
canvas.app.birthday.Model.prototype.init = function() {
    var t, e, a, s = JSON.parse(canvas.ResourceLoader.get("birthday_conf").data)["friend|birthday_conf"];
    this.users = new Array;
    var i, n = s.users.length;
    for (i = 0; i < n; i++)
        e = s.users[i],
        (t = new Object).id = e.id,
        t.nick = e.nick,
        t.parts = e.parts,
        t.background = e.background,
        t.gender = 2 == parseInt(e.gender) ? canvas.Const.GENDER.FEMALE : canvas.Const.GENDER.MALE,
        t.kind = parseInt(e.kind),
        t.sk = 1,
        this.users.push(t);
    this.items = new Array;
    var o = new Array
      , n = s.items.length;
    for (i = 0; i < n; i++)
        e = s.items[i],
        (a = new Object).id = e.id,
        a.artikul = e.artikul_id,
        this.items.push(a),
        o.push(e.artikul_id);
    canvas.EventManager.addEventListener(canvas.Event.ARTIKULS_LOADED, null, this.artikulsLoaded, this),
    canvas.data.Artikuls.get(o) && this.artikulsLoaded()
}
,
canvas.app.birthday.Model.prototype.artikulsLoaded = function() {
    canvas.EventManager.removeEventListener(canvas.Event.ARTIKULS_LOADED, null, this.artikulsLoaded, this);
    for (var t, e = this.items.length, a = 0; a < e; a++)
        (t = canvas.data.Artikuls.get(this.items[a].artikul)) && (this.items[a].picture = t.picture);
    canvas.EventManager.dispatchEvent(canvas.app.birthday.Event.UPDATE)
}
,
canvas.app.birthday.Model.prototype.closeBirthdayWindow = function() {
    closeBirthdayWindow(this.selectedUser)
}
,
canvas.app.birthday.Model.prototype.openPremiumStore = function(t) {
    null == t && (t = "gifts"),
    openPremiumStore(t)
}
,
canvas.app.birthday.Model.prototype.gift = function(t) {
    for (var e, a, s = this.users.length, i = 0; i < s; i++)
        (e = this.users[i]).id == this.selectedUser && (a = e.nick);
    showMsg("action_form.php?artifact_id=" + t + "&in[nick]=" + a)
}
,
canvas.app.birthday.View = function() {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("birthday", "window_back"))),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "birthday"))).position.set(115, 70),
    this.headerField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7158283,300,50,"center")),
    this.headerField.position.set(210, 222),
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.HORIZONTAL,1)),
    this.list.y = 260,
    this.list.setSize(420, 165);
    var t = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("birthday", "arrow"))
      , e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("birthday", "arrow"));
    e.scale.x = -1,
    this.scroll = new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL,t,e),
    this.addChild(this.scroll),
    this.scroll.setSize(425, 50),
    this.scroll.position.set(135, 313),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scroll, this.scrollHandler, this),
    this.listTargetX = 0,
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("birthday", "main_window_close_base"),canvas.ResourceLoader.getImage("birthday", "main_window_close_over"),canvas.ResourceLoader.getImage("birthday", "main_window_close_down"))),
    this.closeButton.position.set(582, 142),
    this.itemsWindow = new canvas.app.birthday.view.ItemsWindow,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.closeHandler, this)
}
,
canvas.app.birthday.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.birthday.View.prototype.update = function() {
    var t = canvas.app.birthday.model
      , e = t.users.length;
    this.headerField.text = canvas.Translator.getText(1 < e ? 1509 : 1515, [e]),
    this.list.clear(!1);
    for (var a = 0; a < e; a++)
        this.list.add(new canvas.app.birthday.view.UserListRenderer(t.users[a],!1));
    this.list.update(),
    this.list.x = 1 == e ? 294 : 2 == e ? 222 : 151,
    this.scroll.max = e - 3,
    this.scrollHandler()
}
,
canvas.app.birthday.View.prototype.scrollHandler = function() {
    0 == this.scroll.max ? (this.scroll.minusView.visible = !1,
    this.scroll.plusView.visible = !1) : 0 == this.scroll.current ? (this.scroll.minusView.visible = !1,
    this.scroll.plusView.visible = !0) : this.scroll.current == this.scroll.max ? (this.scroll.minusView.visible = !0,
    this.scroll.plusView.visible = !1) : (this.scroll.minusView.visible = !0,
    this.scroll.plusView.visible = !0),
    this.listTargetX = 140 * -this.scroll.current,
    canvas.EventManager.addEventListener(canvas.app.birthday.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.birthday.View.prototype.frameHandler = function() {
    var t;
    this.listTargetX > this.list.container.x ? (t = this.list.container.x + 20,
    this.list.container.x = t > this.listTargetX ? this.listTargetX : t) : this.listTargetX < this.list.container.x ? (t = this.list.container.x - 20,
    this.list.container.x = t < this.listTargetX ? this.listTargetX : t) : canvas.EventManager.removeEventListener(canvas.app.birthday.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.birthday.View.prototype.closeHandler = function() {
    canvas.app.birthday.model.closeBirthdayWindow()
}
,
canvas.app.birthday.view.ItemListRenderer = function(t) {
    this.image = new canvas.ui.Image,
    canvas.ui.ListRenderer.call(this, t, 67, 67),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("birthday", "item_back"))),
    this.addChild(this.image),
    this.image.position.set(6, 5),
    this.buttonMode = !0,
    this.hint = new canvas.px.Sprite(canvas.ResourceLoader.getImage("birthday", "item_plane")),
    this.hint.position.set(6, 29);
    var e = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,6507828,60,16,"center");
    this.hint.addChild(e),
    e.text = canvas.Translator.getText(115).toLowerCase(),
    this.data = t
}
,
canvas.app.birthday.view.ItemListRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.birthday.view.ItemListRenderer.prototype.update = function() {
    this.data ? this.image.setImage(this.data.picture) : this.image.clear()
}
,
canvas.app.birthday.view.ItemListRenderer.prototype.overHandler = function() {
    this.data && (this.addChild(this.hint),
    _top().artifactAltSimple(this.data.artikul, 2))
}
,
canvas.app.birthday.view.ItemListRenderer.prototype.outHandler = function() {
    this.removeIfExist(this.hint),
    this.data && _top().artifactAltSimple(this.data.artikul, 0)
}
,
canvas.app.birthday.view.ItemListRenderer.prototype.clickHandler = function() {
    this.outHandler(),
    canvas.EventManager.dispatchEvent(canvas.app.birthday.Event.GIFT_GIFT, null, this.data)
}
,
canvas.app.birthday.view.ItemListRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
,
canvas.app.birthday.view.ItemsWindow = function() {
    canvas.app.manor.view.WindowManorBase.call(this, 360, 305, canvas.Translator.getText(1511)),
    this.dragAvailable = !1,
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,4)),
    this.list.position.set(25, 35),
    this.list.setSize(290, 215),
    this.list.scrollPadding = 20;
    var t = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"))
      , e = new canvas.px.Container
      , a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_drag"),[0, 7, 0, 5])
      , s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_vertical_arrow"));
    s.scale.y = -1,
    s.position.y = 2 - s.height,
    e.addChild(s),
    a.setSize(21, 40);
    a = new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,t,e,new canvas.px.Mask(21,100),a,this.list.container,!0,!0);
    a.padding = 13,
    a.step = 30,
    a.setSize(16),
    this.list.scroll = a,
    this.buyButton = this.addChild(new canvas.app.view.MainButton),
    this.buyButton.setSize(180),
    this.buyButton.setTitle(canvas.Translator.getText(1512)),
    this.buyButton.position.set(92, 249)
}
,
canvas.app.birthday.view.ItemsWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.birthday.view.ItemsWindow.prototype.update = function() {
    var t = canvas.app.birthday.model;
    this.list.clear(!1);
    for (var e, a = t.items.length, s = 0; s < a; s++)
        e = new canvas.app.birthday.view.ItemListRenderer(t.items[s]),
        this.list.add(e);
    this.list.update()
}
,
canvas.app.birthday.view.ItemsWindow.prototype.clickHandler = function(t) {
    var e = canvas.app.birthday.model;
    if (canvas.Functions.findParent(this.buyButton, t.target))
        return e.closeBirthdayWindow(),
        void e.openPremiumStore();
    canvas.px.Window.prototype.clickHandler.call(this, t)
}
,
canvas.app.birthday.view.ItemsWindow.prototype.hide = function() {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this),
    canvas.app.birthday.model.selectedUser = ""
}
,
canvas.app.birthday.view.UserListRenderer = function(t) {
    canvas.ui.ListRenderer.call(this, t, 135, 165),
    this.container = this.addChild(new canvas.px.Container),
    this.container.x = 15,
    this.back = this.container.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
    this.back.y = 29,
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("birthday", "user_back"))).position.set(15, 25),
    this.fieldNick = this.container.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_BOLD,7092268,100,20,"center")),
    this.fieldNick.x = 4,
    this.button = this.container.addChild(new canvas.app.view.MainButton),
    this.button.setSize(136),
    this.button.setTitle(canvas.Translator.getText(1510)),
    this.button.position.set(-15, 130),
    this.msk = new canvas.px.Graphics,
    this.msk.beginFill(0, 1),
    this.msk.drawCircle(53, 79, 34),
    this.msk.endFill(),
    this.container.addChild(this.msk),
    this.update(),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this)
}
,
canvas.app.birthday.view.UserListRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.birthday.view.UserListRenderer.prototype.update = function() {
    if (this.data && this.fieldNick) {
        if (this.back.texture = canvas.ResourceLoader.getImage("birthday", "back_" + (this.data.gender == canvas.Const.KIND.HUM ? "h" : "m")),
        this.fieldNick.text = this.data.nick,
        this.fieldNick.height > this.fieldNick._height)
            for (var t = this.fieldNick.text.length - 1; this.fieldNick.height > this.fieldNick._height; )
                this.fieldNick.text = this.fieldNick.text.substr(0, t--) + "...";
        this.player && this.player.destroy(),
        this.player = new canvas.animation.SkeletonAvatar(this.data.gender,this.data.parts),
        this.player.frameEvent = canvas.app.birthday.Event.ENTER_FRAME,
        this.container.addChild(this.player),
        this.player.position.set(-41, 50),
        this.player.mask = this.msk
    }
}
,
canvas.app.birthday.view.UserListRenderer.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.birthday.Event.GIFT_USER, null, this.data)
}
,
canvas.app.birthday.view.UserListRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.clickHandler, this),
    this.player && this.player.destroy()
}
,
canvas.app.cube.Const = {
    NUM_SLOTS: 9
},
canvas.app.cube.Event = {
    ENTER_FRAME: "Cube.ENTER_FRAME",
    HINT_ADD: "Cube.HINT_ADD",
    HINT_REMOVE: "Cube.HINT_REMOVE"
},
canvas.app.cube.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.view = new canvas.app.cube.View,
    this.addChild(this.view),
    this.hintManager = new canvas.utils.HintManager,
    this.hintContainer = this.addChild(new canvas.px.Container),
    this.hintContainer.interactive = !0,
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height),
    canvas.EventManager.addEventListener(canvas.app.cube.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.cube.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    this.update()
}
,
canvas.app.cube.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.cube.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.cube.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.cube.Main.prototype.update = function() {
    this.view.update()
}
,
canvas.app.cube.Main.prototype.swfObject = function(t) {
    var e, a;
    if (t)
        for (e in t)
            if (a = t[e],
            this.model.testStatus(a))
                switch (e) {
                case "cube|puton":
                    this.model.putOn(a.cube_artifact),
                    this.update();
                    break;
                case "cube|putoff":
                    this.model.putOff(a.cube_artifact),
                    this.update();
                    break;
                case "cube|craft":
                    this.model.craft(a.result_artifact),
                    this.view.showAnimation();
                    break;
                case "cube|use_recipe":
                    this.model.useRecipe(a.cube_artifacts),
                    this.update()
                }
}
,
canvas.app.cube.Model = function(t) {
    this.parse(t.artifacts),
    this.resultArtifact = null
}
,
canvas.app.cube.Model.prototype.parse = function(t) {
    var e, a, s;
    if (this.items = new Array,
    t) {
        s = (e = t.split(",")).length;
        for (var i = 0; i < s; i++)
            a = e[i].split(":"),
            this.items.push(new canvas.data.cube.ItemData(a[0],a[2],a[1],a[3]))
    }
}
,
canvas.app.cube.Model.prototype.putOn = function(t) {
    var e, a;
    this.clearResult(),
    a = this.items.length;
    for (var s = 0; s < a; s++)
        if ((e = this.items[s]).id == t.id)
            return void (e.count = t.cnt);
    this.items.push(new canvas.data.cube.ItemData(t.id,t.picture,t.title,t.cnt))
}
,
canvas.app.cube.Model.prototype.putOff = function(t) {
    for (var e, a = this.items.length, s = 0; s < a; s++)
        if ((e = this.items[s]) && e.id == t)
            return void this.items.splice(s, 1);
    this.clearResult()
}
,
canvas.app.cube.Model.prototype.craft = function(t) {
    this.resultArtifact = new canvas.data.cube.ItemData(t.id,t.picture,t.title,t.cnt),
    this.items = new Array,
    this.items[canvas.app.cube.Const.NUM_SLOTS - 1] = this.resultArtifact
}
,
canvas.app.cube.Model.prototype.useRecipe = function(t) {
    var e;
    this.clearResult(!0);
    for (var a = t.length, s = 0; s < a; s++)
        e = t[s],
        this.items.push(new canvas.data.cube.ItemData(e.id,e.picture,e.title,e.cnt))
}
,
canvas.app.cube.Model.prototype.clearResult = function(t) {
    null == t && (t = !1),
    null == this.resultArtifact && !t || (this.resultArtifact = null,
    this.items = new Array)
}
,
canvas.app.cube.Model.prototype.testStatus = function(t) {
    return !t || !t.hasOwnProperty("status") || 100 == t.status || null == t.error
}
,
canvas.app.cube.View = function() {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back"))),
    this.transformButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "button_back"))),
    this.transformButton.position.set(19, 258);
    var t, e = this.transformButton.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "cube")));
    e.position.set(Math.round(.5 * (220 - e.width)), Math.round(.5 * (36 - e.height))),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "front"))),
    this.items = [],
    this.container = this.addChild(new canvas.px.Container);
    for (var a = [[14, 13], [93, 13], [173, 13], [173, 99], [173, 185], [93, 185], [14, 185], [14, 99], [94, 99]], s = canvas.app.cube.model, i = 0; i < canvas.app.cube.Const.NUM_SLOTS; i++)
        t = this.container.addChild(new canvas.app.cube.view.ItemRenderer(i,s.items[i])),
        this.items.push(t),
        t.position.set(a[i][0], a[i][1]);
    this.container.setChildIndex(this.items[canvas.app.cube.Const.NUM_SLOTS - 1], 0),
    this.anim = new canvas.px.MovieClip(canvas.Config.effectsPath + "cube"),
    this.anim.stop(),
    this.anim.frameEvent = canvas.app.cube.Event.ENTER_FRAME,
    this.anim.position.set(0, 5),
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_UPDATE, this.anim, this.frameHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.transformButton, this.clickHandler, this)
}
,
canvas.app.cube.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.cube.View.prototype.update = function() {
    for (var t = canvas.app.cube.model, e = !1, a = 0; a < canvas.app.cube.Const.NUM_SLOTS; a++)
        this.items[a].data = t.items[a],
        !e && this.items[a].data && a < canvas.app.cube.Const.NUM_SLOTS - 1 && (e = !0);
    this.transformButton.enabled = e
}
,
canvas.app.cube.View.prototype.frameHandler = function() {
    22 == this.anim.currentFrame ? (this.update(),
    this.transformButton.enabled = !1) : 40 == this.anim.currentFrame && (this.removeIfExist(this.anim),
    this.interactiveChildren = !0,
    this.update())
}
,
canvas.app.cube.View.prototype.showAnimation = function() {
    this.transformButton.enabled = !1,
    this.addChild(this.anim),
    this.anim.gotoAndPlay(1),
    this.interactiveChildren = !1
}
,
canvas.app.cube.View.prototype.clickHandler = function() {
    craft_cube_artifacts()
}
,
canvas.app.cube.view.ItemRenderer = function(t, e) {
    this.index = t,
    this.image = new canvas.ui.Image,
    this.front = this.createFront(),
    this.countContainer = new canvas.px.Mask(34,16,7230284,1),
    this.countContainer.position.set(6, 46),
    this.countField = this.countContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,16177574,34,20,"center")),
    this.countField.y = 1,
    this.hintView = new canvas.app.view.MappingHint,
    canvas.ui.ListRenderer.call(this, e, 67, 67),
    this.addChild(this.image),
    this.image.position.set(4, 4),
    this.hitArea = new canvas.px.Rectangle(0,0,60,60),
    this.hint = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot_hint_back")),
    this.hint.position.set(6, 29);
    t = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,6507828,60,16,"center");
    this.hint.addChild(t),
    t.text = canvas.Translator.getText(1e3).toLowerCase(),
    t.y = -1,
    this.infoButton = this.hint.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "info"))),
    this.infoButton.position.set(37, -24),
    this.data = e
}
,
canvas.app.cube.view.ItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.cube.view.ItemRenderer.prototype.createFront = function() {
    switch (this.index) {
    case 0:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot1"));
        break;
    case 1:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot2"));
        break;
    case 2:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot1")),
        sprite.scale.x = -1,
        sprite.x = 70;
        break;
    case 3:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot3")),
        sprite.scale.x = -1,
        sprite.x = 70;
        break;
    case 4:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot1")),
        sprite.scale.set(-1, -1),
        sprite.position.set(70, 68);
        break;
    case 5:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot2")),
        sprite.scale.y = -1,
        sprite.y = 68;
        break;
    case 6:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot1")),
        sprite.scale.y = -1,
        sprite.y = 68;
        break;
    case 7:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot3"));
        break;
    default:
        sprite = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "slot0"))
    }
    return sprite
}
,
canvas.app.cube.view.ItemRenderer.prototype.update = function() {
    this.data ? (this.image.setImage(this.data.image),
    this.hintView.update(this.data.title),
    canvas.EventManager.dispatchEvent(canvas.app.cube.Event.HINT_ADD, null, {
        target: this.image,
        params: new canvas.utils.HintParams(this.hintView,!0)
    }),
    1 < this.data.count && (this.addChild(this.countContainer),
    this.countField.text = this.data.count),
    this.addChild(this.front),
    this.buttonMode = !0) : (canvas.EventManager.dispatchEvent(canvas.app.cube.Event.HINT_REMOVE, null, {
        target: this.image
    }),
    this.image.clear(),
    this.removeIfExist(this.countContainer),
    this.removeIfExist(this.front),
    this.buttonMode = !1,
    this.outHandler())
}
,
canvas.app.cube.view.ItemRenderer.prototype.overHandler = function() {
    this.data && this.addChildAt(this.hint, this.numChildren - 1)
}
,
canvas.app.cube.view.ItemRenderer.prototype.outHandler = function() {
    this.removeIfExist(this.hint)
}
,
canvas.app.cube.view.ItemRenderer.prototype.clickHandler = function(t) {
    this.data && (canvas.Functions.findParent(this.infoButton, t.target) ? showArtifactInfo(this.data.id) : artifactAct(this.data.id, "4"))
}
,
canvas.app.cube.view.ItemRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
,
canvas.app.casino.Const = {
    LINES_COUNT: 5,
    REQUEST_SPIN: "spin",
    REQUEST_OPEN_CARD: "open_card",
    LINES_INDEXES: [[5, 6, 7, 8, 9], [0, 1, 2, 3, 4], [10, 11, 12, 13, 14], [0, 6, 12, 8, 4], [10, 6, 2, 8, 14]]
},
canvas.app.casino.Event = {
    ENTER_FRAME: "Casino.ENTER_FRAME",
    HINT_ADD: "Casino.HINT_ADD",
    HINT_REMOVE: "Casino.HINT_REMOVE",
    SHOW_LINES: "Casino.SHOW_LINES",
    HIDE_LINES: "Casino.HIDE_LINES",
    DRUM_COMPLETE: "Casino.DRUM_COMPLETE",
    SHOW_MESSAGE: "Casino.SHOW_MESSAGE",
    UPDATE_BET: "Casino.UPDATE_BET",
    OPEN_CARD: "Casino.OPEN_CARD"
},
canvas.app.casino.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.hintManager = new canvas.utils.HintManager,
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height),
    canvas.EventManager.addEventListener(canvas.app.casino.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.casino.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    this.windowsManager = new canvas.utils.WindowsManager,
    this.windowsContainer = new canvas.px.Container,
    this.view = this.addChild(new canvas.app.casino.View),
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view),
    this.addChild(this.windowsContainer),
    this.addChild(this.hintContainer),
    this.request = new canvas.utils.URLRequest,
    this.update(),
    this.view.init(),
    this.updateBetHandler(),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton, this.playClickHandler, this),
    canvas.EventManager.addEventListener(canvas.app.casino.Event.SHOW_LINES, null, this.showLinesHandler, this),
    canvas.EventManager.addEventListener(canvas.app.casino.Event.HIDE_LINES, null, this.hideLinesHandler, this),
    canvas.EventManager.addEventListener(canvas.app.casino.Event.DRUM_COMPLETE, null, this.drumCompleteHandler, this),
    canvas.EventManager.addEventListener(canvas.app.casino.Event.SHOW_MESSAGE, null, this.showMessageHandler, this),
    canvas.EventManager.addEventListener(canvas.app.casino.Event.UPDATE_BET, null, this.updateBetHandler, this),
    canvas.EventManager.addEventListener(canvas.app.casino.Event.OPEN_CARD, null, this.openCardHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this)
}
,
canvas.app.casino.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.casino.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.casino.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.casino.Main.prototype.update = function() {
    this.view.update()
}
,
canvas.app.casino.Main.prototype.swfObject = function(t) {
    if (t)
        for (var e in t)
            t[e]
}
,
canvas.app.casino.Main.prototype.requestCompleteHandler = function() {
    if (this.model.parseResponse(this.request.request.responseText),
    this.model.error)
        return canvas.EventManager.dispatchEvent(canvas.app.casino.Event.SHOW_MESSAGE, null, this.model.error),
        void (this.model.error = "");
    switch (this.request.type) {
    case canvas.app.casino.Const.REQUEST_SPIN:
        this.view.spin();
        break;
    case canvas.app.casino.Const.REQUEST_OPEN_CARD:
        this.view.updateSuperGame(),
        setTimeout(this.updateExternalMoney.bind(this), 1e3)
    }
}
,
canvas.app.casino.Main.prototype.requestErrorHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.SHOW_MESSAGE, null, canvas.Translator.getText(426)),
    this.update()
}
,
canvas.app.casino.Main.prototype.sendRequest = function(t, e) {
    var a = "casino_conf.php?mode=slots&is_gold=" + (this.model.isGold ? "1" : "0") + "&bandit=" + this.model.bandit + "&action=" + t;
    null != e && (a += e),
    (this.request.type = t) === canvas.app.casino.Const.REQUEST_SPIN && (a += "&bet=" + (this.view.betStepper.selectedIndex + 1) + "&type=" + (this.view.lineStepper.selectedIndex + 1)),
    this.request.load(a)
}
,
canvas.app.casino.Main.prototype.playClickHandler = function() {
    this.model.isSuperGame || this.view.superGame.active ? (this.model.clear(),
    this.view.closeSuperGame()) : (this.sendRequest(canvas.app.casino.Const.REQUEST_SPIN),
    this.view.playButton.enabled = !1)
}
,
canvas.app.casino.Main.prototype.showLinesHandler = function() {
    this.view.showActiveLines()
}
,
canvas.app.casino.Main.prototype.hideLinesHandler = function() {
    this.view.hideActiveLines()
}
,
canvas.app.casino.Main.prototype.drumCompleteHandler = function() {
    this.view.isDrumsStopped() && (this.view.updateAfterSpin(),
    this.updateExternalMoney(),
    this.model.clear())
}
,
canvas.app.casino.Main.prototype.showMessageHandler = function(t) {
    this.view.messageWindow.init(t.params),
    this.windowsManager.openWindow(this.view.messageWindow)
}
,
canvas.app.casino.Main.prototype.updateBetHandler = function() {
    this.model.linesCount = this.view.lineStepper.values[this.view.lineStepper.selectedIndex],
    this.model.betValue = this.view.betStepper.values[this.view.betStepper.selectedIndex],
    this.model.localStorage.set("selectedLine", this.view.lineStepper.selectedIndex),
    this.model.localStorage.set("selectedBet", this.view.betStepper.selectedIndex),
    this.view.update()
}
,
canvas.app.casino.Main.prototype.openCardHandler = function(t) {
    this.model.cards.push(t.params),
    this.sendRequest(canvas.app.casino.Const.REQUEST_OPEN_CARD, "&card=" + t.params)
}
,
canvas.app.casino.Main.prototype.updateExternalMoney = function() {
    0 != this.model.deltaMoney && casino_user_money_update(this.model.deltaMoney)
}
,
canvas.app.casino.Model = function(t) {
    var e, a;
    for (canvas.Config.initLang(t.GrPack.split("/")[2]),
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.CASINO),
    this.linesCount = 1,
    this.betValue = 100,
    this.type = null == t.type ? 1 : parseInt(t.type),
    this.bet = null == t.bet ? 1 : parseInt(t.bet),
    this.bets = null == t.bets ? [1, 2, 3, 4, 5] : t.bets.split(","),
    e = this.bets.length,
    a = 0; a < e; a++)
        this.bets[a] = parseFloat(this.bets[a]);
    for (this.types = null == t.types ? [1, 2, 3, 4, 5] : t.types.split(","),
    e = this.types.length,
    a = 0; a < e; a++)
        this.types[a] = parseInt(this.types[a]);
    for (this.cardTypes = null == t.card_types || "" == t.card_types ? [] : t.card_types.split(","),
    e = this.cardTypes.length,
    a = 0; a < e; a++)
        this.cardTypes[a] = parseInt(this.cardTypes[a]);
    for (this.cards = null == t.cards || "" == t.cards ? [] : t.cards.split(","),
    e = this.cards.length,
    a = 0; a < e; a++)
        this.cards[a] = parseInt(this.cards[a]);
    this.freeSpins = null == t.free_spins ? 0 : parseInt(t.free_spins),
    this.isGold = null != t.is_gold && 0 != parseInt(t.is_gold),
    this.jackpot = null == t.jackpot ? 0 : parseFloat(t.jackpot),
    this.money = null == t.money ? 0 : parseFloat(t.money),
    this.isSuperGame = null != t.super_game && 0 != parseInt(t.super_game),
    this.bandit = null == t.bandit ? 1 : parseInt(t.bandit),
    this.figs = [],
    this.combos = [],
    this.prize = 0,
    this.currentPrize = 0,
    this.deltaMoney = 0,
    this.error = ""
}
,
canvas.app.casino.Model.prototype.parseResponse = function(t) {
    t = (new DOMParser).parseFromString(t, "text/xml").firstChild,
    t.attributes.action.value;
    t.attributes.prize ? this.prize = parseFloat(t.attributes.prize.value) : (this.prize = 0,
    t.attributes.current_prize ? this.currentPrize = parseFloat(t.attributes.current_prize.value) : this.currentPrize = 0),
    t.attributes.super_game && (this.isSuperGame = 0 != parseInt(t.attributes.super_game.value));
    for (var e, a, s, i, n, o = t.childNodes, r = o.length, c = 0; c < r; c++)
        switch (o[c].nodeName) {
        case "user":
            e = this.money,
            o[c].attributes.money && (this.money = parseFloat(o[c].attributes.money.value)),
            o[c].attributes.jackpot && (this.jackpot = parseFloat(o[c].attributes.jackpot.value)),
            o[c].attributes.free_spins ? this.freeSpins = parseInt(o[c].attributes.free_spins.value) : this.freeSpins = 0,
            this.deltaMoney = this.money - e;
            break;
        case "error":
            this.error = o[c].firstChild.nodeValue;
            break;
        case "figs":
            e = o[c].childNodes,
            this.figs = [[parseInt(e[0].firstChild.nodeValue), parseInt(e[5].firstChild.nodeValue), parseInt(e[10].firstChild.nodeValue)], [parseInt(e[1].firstChild.nodeValue), parseInt(e[6].firstChild.nodeValue), parseInt(e[11].firstChild.nodeValue)], [parseInt(e[2].firstChild.nodeValue), parseInt(e[7].firstChild.nodeValue), parseInt(e[12].firstChild.nodeValue)], [parseInt(e[3].firstChild.nodeValue), parseInt(e[8].firstChild.nodeValue), parseInt(e[13].firstChild.nodeValue)], [parseInt(e[4].firstChild.nodeValue), parseInt(e[9].firstChild.nodeValue), parseInt(e[14].firstChild.nodeValue)]];
            break;
        case "combos":
            if (0 < (r = (e = o[c].childNodes).length)) {
                this.combos = [];
                for (var p = 0; p < r; p++) {
                    s = (a = e[p].childNodes).length,
                    i = [];
                    for (var h = 0; h < s; h++)
                        i.push(parseInt(a[h].firstChild.nodeValue));
                    if (0 <= (n = this.getLineByCombo(i))) {
                        this.combos[n] = [];
                        for (h = 0; h < s; h++)
                            this.combos[n].push(canvas.app.casino.Const.LINES_INDEXES[n].indexOf(i[h]))
                    }
                }
            }
            break;
        case "card":
            o[c].attributes.type && o[c].attributes.result && "1" == o[c].attributes.result.value && this.cardTypes.push(parseInt(o[c].attributes.type.value))
        }
}
,
canvas.app.casino.Model.prototype.getLineByCombo = function(t) {
    for (var e, a, s = canvas.app.casino.Const.LINES_INDEXES.length, i = t.length, n = 0; n < s; n++) {
        for (a = !0,
        e = 0; e < i; e++)
            if (canvas.app.casino.Const.LINES_INDEXES[n].indexOf(t[e]) < 0) {
                a = !1;
                break
            }
        if (a)
            return n
    }
    return -1
}
,
canvas.app.casino.Model.prototype.clear = function() {
    this.prize = this.currentPrize = 0,
    this.combos = [],
    this.figs = [],
    this.deltaMoney = 0,
    this.cards = [],
    this.cardTypes = []
}
,
canvas.app.casino.View = function() {
    var t, e, a;
    canvas.px.Container.call(this);
    var s = canvas.app.casino.model;
    for (this.anims = [],
    this._curAnimIndex = 0,
    Object.defineProperty(this, "curAnimIndex", {
        get: function() {
            return this._curAnimIndex
        },
        set: function(t) {
            this._curAnimIndex = t >= this.anims.length ? 0 : t,
            setTimeout(this.playAnim.bind(this), 1e3 + 2e3 * Math.random())
        }
    }),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back"))),
    this.drumsContainer = this.addChild(new canvas.px.Container),
    this.drumsContainer.position.set(56, 60),
    (e = this.addChild(new canvas.px.Mask(430,220))).position.set(this.drumsContainer.x - 20, this.drumsContainer.y - 10),
    this.drumsContainer.mask = e,
    this.drums = [],
    a = 0; a < 5; a++)
        (e = this.drumsContainer.addChild(new canvas.app.casino.view.DrumView)).position.set(79 * a, 0),
        this.drums.push(e);
    for ((e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "gradient")))).position.set(48, 50),
    (e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "front")))).y = 5,
    this.animFront = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient1")),
    this.animFront.frameEvent = canvas.app.casino.Event.ENTER_FRAME,
    (t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("front_mask")))).position.set(0, 3),
    this.animFront.mask = t,
    this.anims.push(this.animFront),
    (e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("title_jackpot")))).position.set(65, 16),
    this.animJackpot = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient2")),
    this.animJackpot.frameEvent = canvas.app.casino.Event.ENTER_FRAME,
    this.animJackpot.position.set(e.x, e.y - 25),
    (t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("title_jackpot")))).position.set(e.x, e.y),
    this.animJackpot.mask = t,
    this.anims.push(this.animJackpot),
    (e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("title_prize")))).position.set(420 - e.width, 16),
    this.animPrize = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient2")),
    this.animPrize.frameEvent = canvas.app.casino.Event.ENTER_FRAME,
    this.animPrize.position.set(e.x, e.y - 25),
    (t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("title_prize")))).position.set(e.x, e.y),
    this.animPrize.mask = t,
    this.anims.push(this.animPrize),
    (e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("dragon_mask")))).position.set(198, 0),
    this.animDragon = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient3")),
    this.animDragon.frameEvent = canvas.app.casino.Event.ENTER_FRAME,
    this.animDragon.position.set(e.x - 20, e.y),
    (t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("dragon_mask")))).position.set(e.x, e.y),
    this.animDragon.mask = t,
    this.anims.push(this.animDragon),
    this.playButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getTexture("play_button_mask"))),
    this.playButton.position.set(376, 276),
    this.animPlayButton = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "gradient4")),
    this.animPlayButton.frameEvent = canvas.app.casino.Event.ENTER_FRAME,
    this.animPlayButton.position.set(this.playButton.x, this.playButton.y),
    (t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getTexture("play_button_mask")))).position.set(this.playButton.x, this.playButton.y),
    this.animPlayButton.mask = t,
    (e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "title_play")))).position.set(this.playButton.x + Math.round(.5 * (this.playButton.width - e.width)), this.playButton.y + 20),
    this.anims.push(this.animPlayButton),
    (e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "title_lines")))).position.set(50 + Math.round(.5 * (68 - e.width)), 289),
    (e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "title_bet")))).position.set(140 + Math.round(.5 * (80 - e.width)), 289),
    (e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "title_sum")))).position.set(259 + Math.round(.5 * (80 - e.width)), 289),
    this.moneyJackpot = this.addChild(new canvas.app.view.Money(16699904,canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,!s.isGold,70,20,"center","top",!1)),
    this.moneyJackpot.position.set(130, 14),
    this.moneyWin = this.addChild(new canvas.app.view.Money(16699904,canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,!s.isGold,70,20,"center","top",!1)),
    this.moneyWin.displayBronze = !1,
    this.moneyWin.numbersCount = 2,
    this.moneyWin.position.set(280, 14),
    this.moneySum = this.addChild(new canvas.app.view.Money(16699904,canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,!s.isGold,80,20,"center","top",!1)),
    this.moneySum.position.set(260, 301),
    this.freeSpinsField = new canvas.ui.Text(canvas.Const.FONT_ARIAL_11,0,80,20,"center"),
    this.freeSpinsField.position.set(260, 304),
    this.lineStepper = this.addChild(new canvas.app.casino.view.LineStepper(65)),
    this.lineStepper.position.set(51, 301),
    this.betStepper = this.addChild(new canvas.app.casino.view.BetStepper(91)),
    this.betStepper.position.set(137, 301),
    this.linesContainer = this.addChild(new canvas.px.Container),
    this.lines = [],
    a = 0; a < canvas.app.casino.Const.LINES_COUNT; a++)
        switch (e = this.linesContainer.addChild(new canvas.app.casino.view.SelectorView(a)),
        this.lines.push(e),
        a) {
        case 3:
            e.position.set(10, 48);
            break;
        case 1:
            e.position.set(10, 90);
            break;
        case 0:
            e.position.set(10, 140);
            break;
        case 2:
            e.position.set(10, 189);
            break;
        case 4:
            e.position.set(10, 236)
        }
    for (this.winAnimation = new canvas.px.MovieClip(canvas.Config.langPath + "mci/casino_win"),
    this.winAnimation.stop(),
    this.winAnimation.frameEvent = canvas.app.casino.Event.ENTER_FRAME,
    this.winAnimation.position.set(-10, 10),
    this.hint = new canvas.app.casino.view.HintView(""),
    this.messageWindow = new canvas.app.manor.view.controls.MessageWindow,
    this.messageWindow.dragAvailable = !1,
    this.anims.length,
    a = 0; a < this.anims.length; a++)
        this.anims[a].stop();
    this.playAnim(),
    this.superGame = new canvas.app.casino.view.SuperGame,
    this.superGame.position.set(83, 90),
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.winAnimation, this.winAnimationCompleteHandler, this)
}
,
canvas.app.casino.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.casino.View.prototype.update = function() {
    var t = canvas.app.casino.model;
    this.lineStepper.values = t.types,
    this.betStepper.values = t.bets,
    t.isGold ? (this.moneyJackpot.gems = t.jackpot,
    this.moneySum.gems = t.linesCount * t.betValue) : (this.moneyJackpot.gold = canvas.Functions.getMoneyGold(t.jackpot),
    this.moneySum.money = canvas.Functions.getMoney(t.linesCount * t.betValue)),
    t.isSuperGame || (t.money < t.linesCount * t.betValue ? (this.playButton.enabled = !1,
    this.hint.setText(canvas.Translator.getText(3025)),
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.HINT_ADD, null, {
        target: this.playButton,
        params: new canvas.utils.HintParams(this.hint,!1,canvas.utils.HintPos.LEFT_TOP)
    })) : (this.playButton.enabled = !0,
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.HINT_REMOVE, null, {
        target: this.playButton
    }))),
    0 < t.freeSpins ? (t.isSuperGame || (this.playButton.enabled = !0),
    this.addChild(this.freeSpinsField),
    this.freeSpinsField.text = t.freeSpins + " " + canvas.Translator.getText(1601),
    this.removeIfExist(this.moneySum),
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.HINT_REMOVE, null, {
        target: this.playButton
    })) : (this.addChild(this.moneySum),
    this.removeIfExist(this.freeSpinsField))
}
,
canvas.app.casino.View.prototype.init = function() {
    var t = canvas.app.casino.model
      , e = t.localStorage.get("selectedLine")
      , a = t.localStorage.get("selectedBet");
    null != e && (this.lineStepper.selectedIndex = parseInt(e)),
    null != a && (this.betStepper.selectedIndex = parseInt(a)),
    0 < t.freeSpins && (this.lineStepper.selectedIndex = t.type - 1,
    this.betStepper.selectedIndex = t.bet - 1),
    this.testSuperGame()
}
,
canvas.app.casino.View.prototype.testSuperGame = function() {
    canvas.app.casino.model.isSuperGame && this.openSuperGame()
}
,
canvas.app.casino.View.prototype.updateAfterSpin = function() {
    var t = canvas.app.casino.model;
    if (this.blink(!1),
    0 < t.prize) {
        this.playWinAnimation(),
        this.setWinValue(t.prize);
        for (var e = this.lines.length, a = 0; a < e; a++)
            this.lines[a].resultValues = t.combos[a] || []
    }
    this.update(),
    this.testSuperGame()
}
,
canvas.app.casino.View.prototype.playAnim = function() {
    this.anims[this.curAnimIndex].gotoAndPlay(1),
    this.curAnimIndex++
}
,
canvas.app.casino.View.prototype.showActiveLines = function() {
    for (var t = this.lines.length, e = this.lineStepper.values[this.lineStepper.selectedIndex], a = 0; a < t; a++)
        a < e ? this.lines[a].overHandler() : this.lines[a].outHandler()
}
,
canvas.app.casino.View.prototype.hideActiveLines = function() {
    for (var t = this.lines.length, e = 0; e < t; e++)
        this.lines[e].outHandler()
}
,
canvas.app.casino.View.prototype.playWinAnimation = function() {
    this.addChild(this.winAnimation),
    this.winAnimation.gotoAndPlay(2)
}
,
canvas.app.casino.View.prototype.winAnimationCompleteHandler = function() {
    this.removeIfExist(this.winAnimation)
}
,
canvas.app.casino.View.prototype.blink = function(t) {
    null == t && (t = !0);
    for (var e = this.lines.length, a = 0; a < e; a++)
        this.lines[a].blink = t
}
,
canvas.app.casino.View.prototype.isDrumsStopped = function() {
    for (var t = this.drums.length, e = 0; e < t; e++)
        if (this.drums[e].active)
            return !1;
    return !0
}
,
canvas.app.casino.View.prototype.spin = function() {
    for (var t = canvas.app.casino.model, e = this.drums.length, a = 0; a < e; a++)
        t.figs[a] && (this.drums[a].result = t.figs[a]);
    for (e = this.lines.length,
    a = 0; a < e; a++)
        this.lines[a].resultValues = [];
    this.moneyWin.reset(),
    this.blink(!0)
}
,
canvas.app.casino.View.prototype.openSuperGame = function() {
    this.addChild(this.superGame),
    this.superGame.show(),
    this.updateSuperGame(),
    this.removeIfExist(this.linesContainer),
    this.addChild(this.winAnimation),
    this.hideDrums()
}
,
canvas.app.casino.View.prototype.updateSuperGame = function() {
    var t = canvas.app.casino.model;
    this.superGame.update(),
    this.playButton.enabled = t.cards.length >= canvas.app.casino.Const.LINES_COUNT,
    0 < t.prize ? this.setWinValue(t.prize) : 0 < t.currentPrize && this.setWinValue(t.currentPrize)
}
,
canvas.app.casino.View.prototype.setWinValue = function(t) {
    var e = canvas.app.casino.model;
    this.moneyWin.displaySilver = !0,
    this.moneyWin.animateToValue(e.isGold ? null : canvas.Functions.getMoney(t), e.isGold ? t : null)
}
,
canvas.app.casino.View.prototype.closeSuperGame = function() {
    this.superGame.hide(),
    this.addChild(this.linesContainer),
    this.showDrums()
}
,
canvas.app.casino.View.prototype.showDrums = function() {
    for (var t = this.drums.length, e = 0; e < t; e++)
        this.drums[e].show()
}
,
canvas.app.casino.View.prototype.hideDrums = function() {
    for (var t = this.drums.length, e = 0; e < t; e++)
        this.drums[e].hide()
}
,
canvas.app.casino.view.CardView = function(t) {
    canvas.px.Container.call(this),
    this.index = t,
    this._result = 0,
    Object.defineProperty(this, "result", {
        get: function() {
            return this._result
        },
        set: function(t) {
            this._result = t,
            this.resultImage.texture = canvas.ResourceLoader.getImage("ui", "card_result_" + this._result)
        }
    }),
    this._state = 0,
    Object.defineProperty(this, "state", {
        get: function() {
            return this._state
        },
        set: function(t) {
            this._state = t,
            this.update()
        }
    }),
    this._targetFrame = 0,
    Object.defineProperty(this, "targetFrame", {
        get: function() {
            return this._targetFrame
        },
        set: function(t) {
            this._targetFrame = t,
            canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this)
        }
    }),
    this.image = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
    this.image.pivot = new canvas.px.Point(45,46),
    this.questionImage = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "icon_question")),
    this.questionImage.position.set(-Math.round(.5 * this.questionImage.width), 5 - Math.round(.5 * this.questionImage.height)),
    this.resultImage = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.resultImage.pivot = new canvas.px.Point(45,46),
    this.blink = new canvas.px.MovieClip(canvas.Config.effectsPath + "casino_blink"),
    this.blink.frameEvent = canvas.app.casino.Event.ENTER_FRAME,
    this.currentFrame = 0,
    this.scaleArray = [.99, .98, .97, .96, .97, .98, .99, 1, 1.01, 1.02, 1.03, 1.04, 1.03, 1.02, 1.01, 1],
    this.scaleIndex = 0,
    this.buttonMode = !0,
    this.mouseover = this.overHandler.bind(this),
    this.mouseout = this.outHandler.bind(this),
    this.click = this.clickHandler.bind(this),
    this.hitArea = new canvas.px.Rectangle(-32,-32,64,64),
    this.delay = 0
}
,
canvas.app.casino.view.CardView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.casino.view.CardView.prototype.update = function() {
    switch (canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame2Handler, this),
    this.image.scale.set(1, 1),
    this.interactive = !1,
    this.removeIfExist(this.questionImage),
    this.removeIfExist(this.blink),
    this.removeIfExist(this.resultImage),
    this.state) {
    case 0:
        this.currentFrame = 0,
        this.targetFrame = 3,
        this.scaleIndex = 0,
        this.image.texture = canvas.px.TextureEmpty;
        break;
    case 1:
    case 2:
        this.targetFrame = 3;
        break;
    case 3:
        this.currentFrame = 0,
        this.targetFrame = 4;
        break;
    case 4:
        this.currentFrame = 0,
        this.targetFrame = 5;
        break;
    case 5:
        this.currentFrame = 0,
        this.targetFrame = 4
    }
    this.outHandler()
}
,
canvas.app.casino.view.CardView.prototype.updateAfterAnim = function() {
    switch (this.state) {
    case 0:
        this.interactive = !0,
        canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame2Handler, this);
        break;
    case 1:
        this.addChild(this.questionImage);
        break;
    case 3:
        this.addChild(this.resultImage),
        this.addChild(this.blink),
        this.blink.gotoAndPlay(1);
        break;
    case 4:
        this.parent.removeChild(this);
        break;
    case 5:
        this.addChild(this.resultImage)
    }
}
,
canvas.app.casino.view.CardView.prototype.frameHandler = function() {
    0 < this.delay-- || (this.image.texture = canvas.ResourceLoader.getImage("ui", "card_frame_" + (4 <= this.currentFrame && 5 == this.targetFrame ? 4 : this.currentFrame)),
    this.targetFrame > this.currentFrame || this.targetFrame < this.currentFrame ? this.currentFrame++ : (canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.updateAfterAnim()))
}
,
canvas.app.casino.view.CardView.prototype.frame2Handler = function() {
    this.image.scale.set(this.scaleArray[this.scaleIndex], this.scaleArray[this.scaleIndex]),
    this.scaleIndex++,
    this.scaleIndex >= this.scaleArray.length && (this.scaleIndex = 0)
}
,
canvas.app.casino.view.CardView.prototype.overHandler = function() {
    this.filters = [canvas.Functions.getBrightness(1.3)]
}
,
canvas.app.casino.view.CardView.prototype.light = function() {
    this.filters = [canvas.Functions.getBrightness(1.5)]
}
,
canvas.app.casino.view.CardView.prototype.outHandler = function() {
    this.filters = []
}
,
canvas.app.casino.view.CardView.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.OPEN_CARD, null, this.index),
    this.interactive = !1,
    this.outHandler()
}
,
canvas.app.casino.view.DrumImage = function(t) {
    canvas.px.Container.call(this),
    this._index = 1,
    Object.defineProperty(this, "index", {
        get: function() {
            return this._index
        },
        set: function(t) {
            this._index = t,
            this.imageBlur.texture = canvas.ResourceLoader.getImage("ui", "image" + this.index + "_blur"),
            this.image.texture = canvas.ResourceLoader.getImage("ui", "image" + this.index)
        }
    }),
    this._blur = !1,
    Object.defineProperty(this, "blur", {
        get: function() {
            return this._blur
        },
        set: function(t) {
            this._blur = t,
            canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this)
        }
    }),
    this.imageBlur = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
    this.imageBlur.position.set(-10, -10),
    this.image = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
    this.imageBlur.alpha = 0,
    this.index = t
}
,
canvas.app.casino.view.DrumImage.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.casino.view.DrumImage.prototype.frameHandler = function() {
    this.blur && 1 != this.imageBlur.alpha ? (this.imageBlur.alpha += .1,
    1 < this.imageBlur.alpha && (this.imageBlur.alpha = 1),
    this.image.alpha = 1 - this.imageBlur.alpha) : this.blur || 0 == this.imageBlur.alpha ? canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this) : (this.imageBlur.alpha -= .4,
    this.imageBlur.alpha < 0 && (this.imageBlur.alpha = 0),
    this.image.alpha = 1 - this.imageBlur.alpha)
}
,
canvas.app.casino.view.DrumView = function(t) {
    canvas.px.Container.call(this),
    Object.defineProperty(this, "images", {
        get: function() {
            return this._images
        },
        set: function(t) {
            this._images = t,
            canvas.Functions.randomArray(this._images),
            this.update()
        }
    }),
    this._result = [1, 2, 3],
    Object.defineProperty(this, "result", {
        get: function() {
            return this._result
        },
        set: function(t) {
            this._result = t,
            this.play()
        }
    }),
    this.container = this.addChild(new canvas.px.Container),
    this.images = null == t ? [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] : t,
    this.animFrames = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0],
    this.animIndex = 0,
    this.active = !1,
    this.startY = 0,
    this.targetY = 0
}
,
canvas.app.casino.view.DrumView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.casino.view.DrumView.prototype.update = function() {
    canvas.Functions.destroyChildren(this.container);
    var t, e, a = this.images.length;
    for (this.items = [],
    t = 0; t < a; t++)
        (e = this.container.addChild(new canvas.app.casino.view.DrumImage(this.images[t]))).y = 70 * t,
        this.items.push(e);
    for (t = a; t < a + 3; t++)
        (e = this.container.addChild(new canvas.app.casino.view.DrumImage(this.images[t - a]))).y = 70 * t,
        this.items.push(e)
}
,
canvas.app.casino.view.DrumView.prototype.play = function() {
    this.active = !0,
    this.index = 0,
    this.animIndex = 0,
    this.finishIndex = 20 + Math.round(50 * Math.random());
    for (var t = this.items.length, e = 0; e < t; e++)
        this.items[e].blur = !0;
    canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.casino.view.DrumView.prototype.frameHandler = function() {
    if (0 <= this.container.y && (this.container.y = 70 * -this.images.length),
    this.container.y += 20 < this.index ? 50 : 2 * this.index,
    this.index++,
    this.index > this.finishIndex) {
        canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this);
        this.items.length;
        for (var t, e = this.result.length, a = this.images.length, s = 0; s < e; s++) {
            t = this.items[s].index,
            this.items[s].index = this.result[s],
            this.items[s + a].index = this.result[s];
            for (var i = s + 1; i < a; i++)
                this.items[i].index == this.items[s].index && (this.items[i].index = t)
        }
        canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame2Handler, this)
    }
}
,
canvas.app.casino.view.DrumView.prototype.frame2Handler = function() {
    if (this.container.y < 0)
        this.container.y += 40,
        0 < this.container.y && (this.container.y = 0);
    else {
        if (0 == this.animIndex)
            for (var t = this.items.length, e = 0; e < t; e++)
                this.items[e].blur = !1;
        null != this.animFrames[this.animIndex] ? this.container.y = this.animFrames[this.animIndex++] : (this.active = !1,
        canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame2Handler, this),
        canvas.EventManager.dispatchEvent(canvas.app.casino.Event.DRUM_COMPLETE))
    }
}
,
canvas.app.casino.view.DrumView.prototype.hide = function() {
    this.startY = this.container.y,
    this.targetY = -1e3,
    canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame3Handler, this)
}
,
canvas.app.casino.view.DrumView.prototype.show = function() {
    this.targetY = this.startY,
    canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame3Handler, this)
}
,
canvas.app.casino.view.DrumView.prototype.frame3Handler = function() {
    var t;
    this.container.y > this.targetY ? ((t = this.container.y - 40) < this.targetY && (t = this.targetY),
    this.container.y = t) : this.container.y < this.targetY ? ((t = this.container.y + 40) > this.targetY && (t = this.targetY),
    this.container.y = t) : canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frame3Handler, this)
}
,
canvas.app.casino.view.HintView = function(t) {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "big_alt"))),
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_13,canvas.Const.FONT_TAHOMA_13_BOLD,6770493,200,62,"center","middle")),
    this.field.position.set(19, 12),
    null != t && this.setText(t),
    this.interactiveChildren = !1
}
,
canvas.app.casino.view.HintView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.casino.view.HintView.prototype.setText = function(t) {
    this.field.text = t
}
,
canvas.app.casino.view.LineStepper = function(t) {
    canvas.px.Container.call(this),
    this._values = [1],
    Object.defineProperty(this, "values", {
        get: function() {
            return this._values
        },
        set: function(t) {
            this._values = t,
            this.update()
        }
    }),
    this._selectedIndex = 0,
    Object.defineProperty(this, "selectedIndex", {
        get: function() {
            return this._selectedIndex
        },
        set: function(t) {
            this._selectedIndex = t >= this.values.length ? 0 : t < 0 ? this.values.length - 1 : t,
            this.update(),
            canvas.EventManager.dispatchEvent(canvas.app.casino.Event.UPDATE_BET)
        }
    }),
    this._width = t || 100,
    this.arrowLeft = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_base"),canvas.ResourceLoader.getImage("ui", "arrow_over"),canvas.ResourceLoader.getImage("ui", "arrow_down"))),
    this.arrowLeft.scale.x = -1,
    this.arrowLeft.x = -this.arrowLeft.width,
    this.arrowRight = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_base"),canvas.ResourceLoader.getImage("ui", "arrow_over"),canvas.ResourceLoader.getImage("ui", "arrow_down"))),
    this.arrowRight.x = this._width - this.arrowRight.width,
    this.createField(),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.arrowLeft, this.leftClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.arrowRight, this.rightClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.arrowRight, this.overHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OVER, this.arrowLeft, this.overHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.arrowRight, this.outHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_OUT, this.arrowLeft, this.outHandler, this)
}
,
canvas.app.casino.view.LineStepper.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.casino.view.LineStepper.prototype.update = function() {
    this.field.text = this.values[this.selectedIndex]
}
,
canvas.app.casino.view.LineStepper.prototype.createField = function() {
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,15786161,this._width - 35,20,"center")),
    this.field.position.set(18, 0)
}
,
canvas.app.casino.view.LineStepper.prototype.leftClickHandler = function() {
    0 < canvas.app.casino.model.freeSpins || (this.selectedIndex--,
    this.overHandler())
}
,
canvas.app.casino.view.LineStepper.prototype.rightClickHandler = function() {
    0 < canvas.app.casino.model.freeSpins || (this.selectedIndex++,
    this.overHandler())
}
,
canvas.app.casino.view.LineStepper.prototype.overHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.SHOW_LINES)
}
,
canvas.app.casino.view.LineStepper.prototype.outHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.casino.Event.HIDE_LINES)
}
,
canvas.app.casino.view.SelectorView = function(t) {
    switch (canvas.px.Container.call(this),
    this._values = [],
    Object.defineProperty(this, "values", {
        get: function() {
            return this._values
        },
        set: function(t) {
            this._values = t,
            this.update()
        }
    }),
    this._resultValues = [],
    Object.defineProperty(this, "resultValues", {
        get: function() {
            return this._resultValues
        },
        set: function(t) {
            this._resultValues = this.values = t
        }
    }),
    this._blink = !1,
    Object.defineProperty(this, "blink", {
        get: function() {
            return this._blink
        },
        set: function(t) {
            this._blink = t,
            this.blink ? (this.blinkContainer.alpha = Math.random(),
            this.addChild(this.blinkContainer),
            canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.blinkFrameHandler, this)) : (canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.blinkFrameHandler, this),
            this.container.addChild(this.blinkContainer),
            this.blinkContainer.alpha = 1)
        }
    }),
    this.blinkDirection = !0,
    this.index = t,
    this.index) {
    case 0:
        this.color = "yellow";
        break;
    case 1:
        this.color = "blue";
        break;
    case 2:
        this.color = "red";
        break;
    case 3:
        this.color = "orange";
        break;
    case 4:
        this.color = "green"
    }
    this.container = this.addChild(new canvas.px.Container),
    this.backContainer = this.addChild(new canvas.px.Container),
    this.selectorsContainer = this.addChild(new canvas.px.Container),
    this.arrowLeft = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "arrow_" + this.color))),
    this.arrowRight = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "arrow_" + this.color))),
    this.arrowLeft.pivot = this.arrowRight.pivot = new canvas.px.Point(30,10),
    this.button = this.addChild(new canvas.px.Graphics),
    this.button.beginFill(0, 0),
    this.button.drawCircle(18, 18, 18),
    this.button.endFill(),
    this.button.interactive = !0,
    this.button.buttonMode = !0;
    var e = this.button.addChild(new canvas.px.Graphics);
    switch (e.beginFill(0, 0),
    e.drawCircle(18, 18, 18),
    e.endFill(),
    e.x = 436,
    this.blinkContainer = this.container.addChild(new canvas.px.Container),
    e = this.blinkContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "circle_" + this.color))),
    (e = this.blinkContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "circle_" + this.color)))).x = 436,
    (e = this.blinkContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,16777215,20,20,"center"))).text = this.index + 1,
    e.position.set(7, 7),
    (e = this.blinkContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,16777215,20,20,"center"))).text = this.index + 1,
    e.position.set(443, 7),
    this.index) {
    case 0:
        this.back = this.backContainer.addChild(new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color))),
        this.back.width = 370,
        this.back.height = 7,
        this.back.position.set(48, 16),
        this.arrowLeft.scale.x = -1,
        this.arrowLeft.position.set(25, 20),
        this.arrowRight.position.set(445, 20);
        break;
    case 1:
        this.back = this.backContainer.addChild(new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color))),
        this.back.width = 370,
        this.back.height = 7,
        this.back.position.set(48, -3),
        this.arrowLeft.scale.x = -1,
        this.arrowLeft.position.set(25, 20),
        this.arrowRight.position.set(445, 20);
        break;
    case 2:
        this.back = this.backContainer.addChild(new canvas.px.TilingSprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color))),
        this.back.width = 370,
        this.back.height = 7,
        this.back.position.set(48, 32),
        this.arrowLeft.scale.x = -1,
        this.arrowLeft.position.set(25, 20),
        this.arrowRight.position.set(445, 20);
        break;
    case 3:
        this.back = this.backContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color))),
        this.back.position.set(48, 16),
        this.arrowLeft.scale.x = -1,
        this.arrowLeft.position.set(25, 10),
        this.arrowRight.position.set(445, 10);
        break;
    case 4:
        this.back = this.backContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back_" + this.color))),
        this.back.position.set(48, -146),
        this.arrowLeft.scale.x = -1,
        this.arrowLeft.position.set(25, 8),
        this.arrowRight.position.set(445, 8)
    }
    this.backMask = new canvas.px.Graphics,
    this.backContainer.addChild(this.backMask),
    this.back.mask = this.backMask,
    this.selectors = [];
    for (var a = 0; a < 5; a++)
        switch (e = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "selector_" + this.color)),
        this.selectors.push(e),
        this.selectorsContainer.addChild(e),
        e.position.set(38 + 80 * a, 0),
        this.index) {
        case 0:
            e.x += 0 == a ? 4 : 2,
            e.y = -11;
            break;
        case 1:
            e.x += 0 == a ? 4 : 2,
            e.y = -30;
            break;
        case 2:
            e.x += 0 == a ? 4 : 2,
            e.y = 5;
            break;
        case 3:
            switch (a) {
            case 0:
                e.y = 5;
                break;
            case 1:
                e.y = 70;
                break;
            case 2:
                e.y = 140;
                break;
            case 3:
                e.y = 70;
                break;
            case 4:
                e.y = 5
            }
            break;
        case 4:
            switch (a) {
            case 0:
                e.y = -45;
                break;
            case 1:
                e.y = -115;
                break;
            case 2:
                e.y = -180;
                break;
            case 3:
                e.y = -115;
                break;
            case 4:
                e.y = -45
            }
        }
    this.animArr = [4, 8, 4, 0, -4, -8, -4, 0],
    this.animIndex = 0,
    this.button.mouseover = this.overHandler.bind(this),
    this.button.mouseout = this.outHandler.bind(this),
    this.values = []
}
,
canvas.app.casino.view.SelectorView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.casino.view.SelectorView.prototype.update = function() {
    var t = !1;
    if (this.backMask.clear(),
    this.selectorsContainer.removeChildren(),
    this.container.parent || (t = !0),
    this.removeIfExist(this.container),
    0 != this.values.length) {
        t && this.playAnim(),
        this.addChild(this.container),
        this.backMask.beginFill(0, 1);
        var e = 0;
        switch (this.index) {
        case 0:
            e = 10;
            break;
        case 1:
            e = -10;
            break;
        case 2:
            e = 20;
            break;
        case 3:
            for (this.backMask.drawCircle(113, 73, 20),
            this.backMask.drawCircle(193, 140, 20),
            this.backMask.drawCircle(270, 138, 20),
            this.backMask.drawCircle(352, 73, 20),
            s = 0; s < 5; s++)
                if (this.values.indexOf(s) < 0)
                    switch (s) {
                    case 0:
                        this.backMask.drawCircle(72, 40, 32);
                        break;
                    case 1:
                        this.backMask.drawCircle(153, 106, 32);
                        break;
                    case 2:
                        this.backMask.drawCircle(232, 175, 32);
                        break;
                    case 3:
                        this.backMask.drawCircle(310, 105, 32);
                        break;
                    case 4:
                        this.backMask.drawCircle(392, 40, 32)
                    }
            break;
        case 4:
            for (this.backMask.drawCircle(113, -45, 20),
            this.backMask.drawCircle(193, -112, 20),
            this.backMask.drawCircle(271, -111, 20),
            this.backMask.drawCircle(352, -47, 20),
            s = 0; s < 5; s++)
                if (this.values.indexOf(s) < 0)
                    switch (s) {
                    case 0:
                        this.backMask.drawCircle(73, -11, 32);
                        break;
                    case 1:
                        this.backMask.drawCircle(153, -79, 32);
                        break;
                    case 2:
                        this.backMask.drawCircle(232, -145, 32);
                        break;
                    case 3:
                        this.backMask.drawCircle(311, -79, 32);
                        break;
                    case 4:
                        this.backMask.drawCircle(390, -11, 32)
                    }
        }
        if (0 != e)
            for (this.backMask.drawRect(102, e, 20, 20),
            this.backMask.drawRect(182, e, 20, 20),
            this.backMask.drawRect(262, e, 20, 20),
            this.backMask.drawRect(342, e, 20, 20),
            s = 0; s < 5; s++)
                if (this.values.indexOf(s) < 0)
                    switch (s) {
                    case 0:
                        this.backMask.drawRect(46, e - 10, 56, 40);
                        break;
                    case 1:
                        this.backMask.drawRect(122, e - 10, 60, 40);
                        break;
                    case 2:
                        this.backMask.drawRect(202, e - 10, 60, 40);
                        break;
                    case 3:
                        this.backMask.drawRect(282, e - 10, 60, 40);
                        break;
                    case 4:
                        this.backMask.drawRect(362, e - 10, 60, 40)
                    }
        this.backMask.endFill();
        for (var a = this.values.length, s = 0; s < a; s++)
            this.selectorsContainer.addChild(this.selectors[this.values[s]])
    }
}
,
canvas.app.casino.view.SelectorView.prototype.overHandler = function() {
    var t = canvas.app.casino.model;
    this.blink || t.isSuperGame || (this.values = [0, 1, 2, 3, 4])
}
,
canvas.app.casino.view.SelectorView.prototype.outHandler = function() {
    this.values = this.resultValues
}
,
canvas.app.casino.view.SelectorView.prototype.playAnim = function() {
    this.animIndex = 0,
    canvas.EventManager.addEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.casino.view.SelectorView.prototype.frameHandler = function() {
    this.animIndex >= this.animArr.length ? (canvas.EventManager.removeEventListener(canvas.app.casino.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.arrowLeft.rotation = this.arrowRight.rotation = 0) : this.arrowLeft.rotation = this.arrowRight.rotation = canvas.Functions.degToRad(this.animArr[this.animIndex++])
}
,
canvas.app.casino.view.SelectorView.prototype.blinkFrameHandler = function() {
    this.blinkDirection ? (this.blinkContainer.alpha += .2,
    1 <= this.blinkContainer.alpha && (this.blinkContainer.alpha = 1,
    this.blinkDirection = !this.blinkDirection)) : (this.blinkContainer.alpha -= .2,
    this.blinkContainer.alpha <= 0 && (this.blinkContainer.alpha = 0,
    this.blinkDirection = !this.blinkDirection))
}
,
canvas.app.casino.view.SuperGame = function() {
    var t;
    canvas.px.Container.call(this),
    this.cards = [];
    for (var e = 0; e < 15; e++)
        (t = new canvas.app.casino.view.CardView(e)).position.set(e % 5 * 80, 69 * Math.floor(e / 5)),
        e % 5 || (t.x += 2),
        this.cards.push(t);
    this.animArray = [0, 4, 5, 9, 10, 14, 1, 3, 6, 8, 11, 13, 2, 7, 12],
    this.active = !1
}
,
canvas.app.casino.view.SuperGame.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.casino.view.SuperGame.prototype.show = function() {
    for (var t, e = this.animArray.length, a = 0; a < e; a++)
        t = this.cards[this.animArray[a]],
        this.addChild(t),
        t.delay = a,
        t.state = 0;
    this.active = !0
}
,
canvas.app.casino.view.SuperGame.prototype.update = function() {
    var t, e, a, s, i, n = canvas.app.casino.model, o = this.cards.length, r = n.cards.length, c = r >= canvas.app.casino.Const.LINES_COUNT;
    if (c) {
        e = new Array;
        for (var p = 0; p < o; p++)
            e[t = p % 5] || (e[t] = [0, 1, 2]),
            0 <= (i = n.cards.indexOf(p)) && e[t].splice(e[t].indexOf(n.cardTypes[i] - 1), 1)
    }
    for (p = 0; p < o; p++)
        3 != (s = this.cards[p]).state ? (t = p % 5,
        0 <= (i = n.cards.indexOf(p)) ? (s.result = n.cardTypes[i] - 1,
        s.state = 3,
        c && s.light()) : t < r ? c ? (a = canvas.Functions.random(e[t].length),
        s.result = e[t][a],
        e[t].splice(a, 1),
        s.state = 5) : s.state = 2 : s.state = t == r ? 0 : 1) : c && s.light()
}
,
canvas.app.casino.view.SuperGame.prototype.hide = function() {
    for (var t, e = this.animArray.length, a = 0; a < e; a++)
        t = this.cards[this.animArray[a]],
        this.addChild(t),
        t.delay = a,
        t.state = 4;
    this.active = !1
}
,
canvas.app.casino.view.BetStepper = function(t) {
    canvas.app.casino.view.LineStepper.call(this, t)
}
,
canvas.app.casino.view.BetStepper.prototype = Object.create(canvas.app.casino.view.LineStepper.prototype),
canvas.app.casino.view.BetStepper.prototype.update = function() {
    canvas.app.casino.model.isGold ? this.field.gems = this.values[this.selectedIndex] : this.field.money = canvas.Functions.getMoney(this.values[this.selectedIndex])
}
,
canvas.app.casino.view.BetStepper.prototype.createField = function() {
    var t = canvas.app.casino.model;
    this.field = this.addChild(new canvas.app.view.Money(16699904,canvas.Const.FONT_MYRIAD_PRO_15_BOLD_STROKE,!t.isGold,this._width - 40,20,"center","top",!1)),
    this.field.position.set(20, 0)
}
,
canvas.app.casino.view.BetStepper.prototype.overHandler = function() {}
,
canvas.app.casino.view.BetStepper.prototype.outHandler = function() {}
,
canvas.app.diceGame.Const = {
    REQUEST_INIT: "Init",
    REQUEST_THROW: "Throw",
    REQUEST_THROW_SUPER: "ThrowSuper",
    REQUEST_OBJECT: "HeavensGift",
    DICE_COUNT: 5,
    PRICE_TYPE_SILVER: 1,
    PRICE_TYPE_BRILLIANT: 3
},
canvas.app.diceGame.Event = {
    ENTER_FRAME: "DiceGame.ENTER_FRAME",
    HINT_ADD: "DiceGame.HINT_ADD",
    HINT_REMOVE: "DiceGame.HINT_REMOVE",
    THROW_COMPLETE: "DiceGame.THROW_COMPLETE"
},
canvas.app.diceGame.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.hintManager = new canvas.utils.HintManager,
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height),
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    this.view = new canvas.app.diceGame.View,
    this.addChild(this.view),
    this.addChild(this.hintContainer),
    this.request = new canvas.utils.URLRequest,
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton, this.playClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton2, this.play2ClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.HtmlTextEvent.EVENT_LINK, this.view.infoField, this.infoClickHandler, this),
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.THROW_COMPLETE, null, this.throwCompleteHandler, this)
}
,
canvas.app.diceGame.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.diceGame.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.diceGame.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.diceGame.Main.prototype.requestCompleteHandler = function() {
    this.model.parse(JSON.parse(this.request.request.responseText)[canvas.app.diceGame.Const.REQUEST_OBJECT + "|" + this.request.type]),
    this.view.dicesAnim.start()
}
,
canvas.app.diceGame.Main.prototype.requestErrorHandler = function() {}
,
canvas.app.diceGame.Main.prototype.sendRequest = function(t) {
    var e = this.model.entryPoint + "?object=" + canvas.app.diceGame.Const.REQUEST_OBJECT + "&action=" + t + "&json_mode_on=1";
    this.request.type = t,
    this.request.load(e),
    this.view.lockButtons()
}
,
canvas.app.diceGame.Main.prototype.closeClickHandler = function() {
    closeHeavensGift()
}
,
canvas.app.diceGame.Main.prototype.infoClickHandler = function() {
    canvas.Functions.navigateToURL(canvas.Translator.getText(609), "_blank")
}
,
canvas.app.diceGame.Main.prototype.playClickHandler = function() {
    this.sendRequest(canvas.app.diceGame.Const.REQUEST_THROW)
}
,
canvas.app.diceGame.Main.prototype.play2ClickHandler = function() {
    this.sendRequest(canvas.app.diceGame.Const.REQUEST_THROW_SUPER)
}
,
canvas.app.diceGame.Main.prototype.throwCompleteHandler = function() {
    this.view.update()
}
,
canvas.app.diceGame.Model = function(t) {
    this.entryPoint = t.dice_game_controller_url || canvas.Config.entryPoint
}
,
canvas.app.diceGame.Model.prototype.parse = function(t) {
    var e, a, s, i;
    if (null != t.state && (null != t.state.user_id && (this.userID = t.state.user_id),
    null != t.state.today_game_cnt && (this.gameIndex = parseInt(t.state.today_game_cnt)),
    null != t.state.progress_super_game_cnt && (this.superGameProgress = parseInt(t.state.progress_super_game_cnt)),
    null != t.state.prize_num && (this.selectedItemIndex = t.state.prize_num)),
    null != t.progress_super_game_max && (this.superGameMax = parseInt(t.progress_super_game_max)),
    null != t.prize_list)
        for (this.items = new Array,
        i = t.prize_list.length,
        s = 0; s < i; s++)
            e = t.prize_list[s],
            (a = new Object).id = e.artikul_id,
            a.image = e.picture,
            a.title = "Item" + a.id,
            this.items.push(a);
    null == t.butt && null != t.butt || (this.buttonEnabled = null != t.butt),
    null != t.butt_cost && (null != t.butt_cost.money && (this.buttonPrice = t.butt_cost.money),
    null != t.butt_cost.money_type && (this.buttonPriceType = parseInt(t.butt_cost.money_type))),
    null == t.butt_super && null != t.butt_super || (this.button2Enabled = null != t.butt_super),
    null != t.dice_res && (this.dicesResult = t.dice_res,
    null != this.dicesResult && (this.dicesCount = this.dicesResult.length))
}
,
canvas.app.diceGame.View = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.diceGame.model;
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "back"))),
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("diceGame", "main_window_close_base"),canvas.ResourceLoader.getImage("diceGame", "main_window_close_over"),canvas.ResourceLoader.getImage("diceGame", "main_window_close_down"),null)),
    this.closeButton.position.set(422, 0),
    canvas.EventManager.dispatchEvent(canvas.app.diceGame.Event.HINT_ADD, null, {
        target: this.closeButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(608)))
    });
    var e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_15_BOLD_STROKE,16118721,this.width - 20,20,"center"));
    e.position.set(0, 6),
    e.text = canvas.Translator.getText(600),
    (e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,270,22,"center"))).position.set(91, 45),
    e.text = canvas.Translator.getText(601),
    (e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,340,22,"center"))).position.set(54, 132),
    e.text = canvas.Translator.getText(602),
    (e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,340,22,"center"))).position.set(54, 132),
    e.text = canvas.Translator.getText(602),
    (e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,85,22,"center"))).position.set(72, 219),
    e.text = canvas.Translator.getText(603),
    (e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,103,22,"center"))).position.set(260, 219),
    e.text = canvas.Translator.getText(604),
    this.infoField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11_BOLD,7158283,394,90,"left")),
    this.infoField.position.set(26, 409),
    this.infoField.text = canvas.Translator.getText(605);
    var a, s, i, n = 28;
    for (this.dices = new Array,
    s = 0; s < canvas.app.diceGame.Const.DICE_COUNT; s++)
        a = this.addChild(new canvas.app.diceGame.view.DiceItem(s < 4,s < 2 ? 1 : s < 4 ? 2 : 3)),
        this.dices.push(a),
        a.position.set(n, 68),
        n += 45;
    for (this.progressor = this.addChild(new canvas.app.diceGame.view.ProgressView),
    this.progressor.position.set(33, 155),
    this.playButton = this.addChild(new canvas.app.view.MainButton(null,null,null,null,null,!0)),
    this.playButton.setSize(170),
    this.playButton.position.set(255, 75),
    this.playButton2 = this.addChild(new canvas.app.view.MainButton),
    this.playButton2.setSize(185),
    this.playButton2.position.set(240, 160),
    this.playButton2.setTitle(canvas.Translator.getText(606)),
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,6)),
    this.list.setSize(220, 150),
    this.list.position.set(206, 250),
    this.list._paddingV = this.list._paddingH = 2,
    s = 0; s < 24; s++)
        i = new canvas.app.diceGame.view.ItemRenderer(s + 1),
        this.list.add(i, !1),
        i.data = t.items[s];
    this.list.update(),
    this.dicesAnim = this.addChild(new canvas.app.diceGame.view.DicesAnim),
    this.dicesAnim.position.set(35, 250),
    this.update()
}
,
canvas.app.diceGame.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.diceGame.View.prototype.update = function() {
    for (var t, e = canvas.app.diceGame.model, a = this.list.items.length, s = 0; s < a; s++)
        (t = this.list.items[s]).selector.visible = t.id == e.selectedItemIndex,
        t.selector.visible && t.startFlicking(5);
    for (a = this.dices.length,
    s = 0; s < a; s++)
        this.dices[s].selector.visible = e.gameIndex == s + 1;
    this.progressor.progress = e.superGameProgress / e.superGameMax,
    this.progressor.field.text = e.superGameProgress + "/" + e.superGameMax,
    0 < parseFloat(e.buttonPrice) ? this.playButton.setTitle(canvas.Translator.getText(607) + " " + parseFloat(e.buttonPrice).toString() + " <img src='" + (e.buttonPriceType == canvas.app.diceGame.Const.PRICE_TYPE_BRILLIANT ? "money_crystal" : "money_silver") + "' xOffset='0' yOffset='2' atlas='diceGame'/>") : this.playButton.setTitle(canvas.Translator.getText(606)),
    this.playButton.enabled = e.buttonEnabled,
    this.playButton2.enabled = e.button2Enabled
}
,
canvas.app.diceGame.View.prototype.lockButtons = function() {
    this.playButton.enabled = !1,
    this.playButton2.enabled = !1
}
,
canvas.app.diceGame.view.DiceItem = function(t, e) {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "dice_back"))),
    this.selector = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "dice_selector"))),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "dice" + e))),
    this.selector.visible = !1,
    t && this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "dice_arrow"))).position.set(38, 15)
}
,
canvas.app.diceGame.view.DiceItem.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.diceGame.view.DicesAnim = function() {
    canvas.px.Container.call(this),
    this.container = this.addChild(new canvas.px.Container),
    this.DICE_SIZE = 35
}
,
canvas.app.diceGame.view.DicesAnim.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.diceGame.view.DicesAnim.prototype.start = function() {
    var t = canvas.app.diceGame.model;
    this.dices = new Array,
    canvas.Functions.destroyChildren(this.container),
    this.cells = [new canvas.px.Rectangle(0,0,72 - this.DICE_SIZE,68 - this.DICE_SIZE), new canvas.px.Rectangle(72,0,72 - this.DICE_SIZE,68 - this.DICE_SIZE), new canvas.px.Rectangle(0,68,72 - this.DICE_SIZE,68 - this.DICE_SIZE), new canvas.px.Rectangle(72,68,72 - this.DICE_SIZE,68 - this.DICE_SIZE)],
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.index = t.dicesCount + 7,
    this.delayIndex = 0,
    this.animIndex = 0
}
,
canvas.app.diceGame.view.DicesAnim.prototype.throwDice = function(t) {
    var e = new canvas.px.MovieClip(canvas.Config.effectsPath + "dice" + t,null,!1);
    e.frameEvent = canvas.app.diceGame.Event.ENTER_FRAME;
    var a = canvas.Functions.random(this.cells.length)
      , t = this.cells[a];
    this.cells.splice(a, 1),
    e.position.set(Math.round(.5 * e.width + t.x + Math.random() * t.width), Math.round(.5 * e.height + t.y + Math.random() * t.height)),
    this.container.addChild(e),
    this.dices.push(e),
    e.scale.set(3, 3),
    e.gotoAndPlay(1)
}
,
canvas.app.diceGame.view.DicesAnim.prototype.frameHandler = function() {
    for (var t, e = canvas.app.diceGame.model, a = this.dices.length, s = 0; s < a; s++)
        1 < (t = this.dices[s]).scale.x ? t.scale.x -= .1 : t.scale.x = 1,
        1 < t.scale.y ? t.scale.y -= .1 : t.scale.y = 1;
    0 < this.index ? 0 < this.delayIndex ? this.delayIndex-- : (this.animIndex < e.dicesCount && this.throwDice(e.dicesResult[this.animIndex++]),
    this.delayIndex = 10,
    this.index--) : this.finish()
}
,
canvas.app.diceGame.view.DicesAnim.prototype.finish = function() {
    canvas.EventManager.removeEventListener(canvas.app.diceGame.Event.ENTER_FRAME, null, this.frameHandler, this),
    canvas.EventManager.dispatchEvent(canvas.app.diceGame.Event.THROW_COMPLETE)
}
,
canvas.app.diceGame.view.ItemRenderer = function(t) {
    canvas.ui.ListRenderer.call(this),
    this.id = t,
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "item_back"))),
    this.setSize(this.width, this.height),
    this.selector = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "item_selector"))),
    this.selector.position.set(-1, -1),
    this.selector.visible = !1,
    this.image = this.addChild(new canvas.ui.Image),
    this.image.position.set(2, 2),
    this.image.scale.set(.5, .5),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "item_count"))).position.set(16, 19),
    this.countField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16765254,16,16,"center")),
    this.countField.position.set(17, 21),
    this.countField.text = this.id,
    this.mouseover = this.overHandler.bind(this),
    this.mouseout = this.outHandler.bind(this),
    this.interactive = !0
}
,
canvas.app.diceGame.view.ItemRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.diceGame.view.ItemRenderer.prototype.update = function() {
    this.data && this.image.setImage(this.data.image)
}
,
canvas.app.diceGame.view.ItemRenderer.prototype.overHandler = function() {
    this.data && (canvas.app.diceGame.view.ItemRenderer.overedItem = this,
    _top().showAltInHeavensGift(this.data.id, 2))
}
,
canvas.app.diceGame.view.ItemRenderer.prototype.outHandler = function() {
    this.data && canvas.app.diceGame.view.ItemRenderer.overedItem == this && _top().showAltInHeavensGift(this.data.id, 0)
}
,
canvas.app.diceGame.view.ItemRenderer.prototype.startFlicking = function() {
    canvas.EventManager.addEventListener(canvas.app.diceGame.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.index = 5,
    this.direction = !0,
    this.selector.visible = !0,
    this.selector.alpha = 0
}
,
canvas.app.diceGame.view.ItemRenderer.prototype.frameHandler = function() {
    if (0 < this.index) {
        if (this.direction && 1 <= this.selector.alpha)
            return this.index--,
            void (this.direction = !1);
        this.selector.alpha += this.direction ? .2 : -.2,
        this.selector.alpha <= 0 && !this.direction && (this.direction = !0)
    } else
        canvas.EventManager.removeEventListener(canvas.app.diceGame.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.diceGame.view.ProgressView = function(t, e) {
    canvas.ui.Progress.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "progress_back")));
    var a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "progress_full")));
    a.position.set(5, 11),
    this.sprite.position.set(5, 11),
    this.setSize(a.width, a.height),
    a.mask = this.sprite,
    (a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("diceGame", "progress_icon")))).position.set(157, -4),
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE,16511686,151,20,"center")),
    this.field.position.set(7, 15)
}
,
canvas.app.diceGame.view.ProgressView.prototype = Object.create(canvas.ui.Progress.prototype),
canvas.app.diceGame.view.ProgressView.prototype.update = function() {
    canvas.ui.Progress.prototype.update.call(this)
}
,
canvas.app.treasure.Const = {
    BASE_ROTATIONS: [90, -90, 0, -180, -90]
},
canvas.app.treasure.Event = {
    ENTER_FRAME: "Treasure.ENTER_FRAME",
    CRACK_GEMS_CONFIRM: "Treasure.CRACK_GEMS_CONFIRM"
},
canvas.app.treasure.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.model.halfWidth = Math.round(.5 * this.model.width),
    this.view = new canvas.app.treasure.View,
    this.addChild(this.view),
    this.view.y = 6,
    this.windowsManager = new canvas.utils.WindowsManager,
    this.windowsContainer = this.addChild(new canvas.px.Container),
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.crackGemButton, this.crackGemClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.crackProfButton, this.crackProfClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.openButton, this.openClickHandler, this);
    for (var e = this.view.circles.length, a = 0; a < e; a++)
        canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.circles[a].getChildAt(0), this.clickHandler, this);
    canvas.EventManager.addEventListener(canvas.app.treasure.Event.CRACK_GEMS_CONFIRM, null, this.crackGemConfirmHandler, this),
    this.view.circlesContainer.mouseover = this.overHandler.bind(this),
    this.view.circlesContainer.mouseout = this.outHandler.bind(this)
}
,
canvas.app.treasure.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.treasure.Main.prototype.closeClickHandler = function() {
    closePuzzle()
}
,
canvas.app.treasure.Main.prototype.crackGemClickHandler = function() {
    this.windowsManager.openWindow(this.view.confirmWin),
    this.view.confirmWin.init(canvas.Translator.getText(905), {
        name: canvas.app.treasure.Event.CRACK_GEMS_CONFIRM
    }, canvas.Translator.getText(900), canvas.Translator.getText(2019))
}
,
canvas.app.treasure.Main.prototype.crackProfClickHandler = function() {
    openPuzzle("breakopen")
}
,
canvas.app.treasure.Main.prototype.openClickHandler = function() {
    openPuzzle("solve", this.model.logTurns.join(","))
}
,
canvas.app.treasure.Main.prototype.crackGemConfirmHandler = function() {
    openPuzzle("purchase")
}
,
canvas.app.treasure.Main.prototype.overHandler = function(t) {
    this.view.circlesContainer.mousemove = this.moveHandler.bind(this),
    this.moveHandler(t)
}
,
canvas.app.treasure.Main.prototype.outHandler = function() {
    this.view.circlesContainer.mousemove = null,
    this.view.leftArrow.visible = this.view.rightArrow.visible = !1
}
,
canvas.app.treasure.Main.prototype.moveHandler = function(t) {
    this.model.direction = t.data.global.x < this.model.halfWidth,
    this.view.leftArrow.visible = this.model.direction,
    this.view.rightArrow.visible = !this.model.direction
}
,
canvas.app.treasure.Main.prototype.clickHandler = function(t) {
    if (null != t.target.circleIndex) {
        var t = t.target.circleIndex - 1
          , e = this.model.relationsMatrix[t]
          , a = this.view.circles.length;
        if (null != e) {
            this.model.puzzleComplete = !0;
            for (var s = 0; s < a; s++)
                e[s] && (this.model.targetRotations[s] += this.model.direction ? 90 : -90),
                this.model.puzzleComplete && this.model.targetRotations[s] % 360 != 0 && (this.model.puzzleComplete = !1)
        }
        this.model.logTurns.push(this.model.direction ? 1 + t : -(1 + t)),
        this.view.update()
    }
}
,
canvas.app.treasure.Main.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.crackGemButton, this.crackGemClickHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.crackProfButton, this.crackProfClickHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.openButton, this.openClickHandler, this);
    for (var t = this.view.circles.length, e = 0; e < t; e++)
        canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.circles[e].getChildAt(0), this.clickHandler, this);
    canvas.EventManager.removeEventListener(canvas.app.treasure.Event.CRACK_GEMS_CONFIRM, null, this.crackGemConfirmHandler, this),
    this.view.circlesContainer.mouseover = null,
    this.view.circlesContainer.mouseout = null,
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.treasure.Model = function(t) {
    this.baseState = null == t.puzzle ? [1, 0, 2, 3, 1] : t.puzzle.split("-"),
    this.maxTurns = null == t.steps ? 24 : parseInt(t.steps),
    this.canBreakOpen = null == t.can_breakopen ? 0 : parseFloat(t.can_breakopen),
    this.canPurchase = null == t.can_purchase ? 0 : parseFloat(t.can_purchase);
    var e = null == t.matrix ? "1010111101101011011110001" : parseInt(t.matrix).toString(2);
    this.relationsMatrix = new Array,
    this.logTurns = new Array;
    for (var a = new Array, s = e.length, i = 1; i <= s; i++)
        a.push("1" == e.charAt(i - 1)),
        i % 5 == 0 && (this.relationsMatrix.push(a),
        a = new Array);
    this.targetRotations = [0, 0, 0, 0, 0],
    this.puzzleComplete = !1
}
,
canvas.app.treasure.View = function() {
    canvas.px.Container.call(this);
    var t, e, a, s, i = canvas.app.treasure.model;
    for (this.confirmWin = new canvas.app.manor.view.controls.ConfirmWindow,
    this.confirmWin.dragAvailable = !1,
    this.circles = new Array,
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "back"))),
    this.leftArrow = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "arrow_left"))),
    this.leftArrow.position.set(50, 165),
    this.leftArrow.visible = !1,
    this.rightArrow = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "arrow_right"))),
    this.rightArrow.position.set(515, 165),
    this.rightArrow.visible = !1,
    this.circlesContainer = this.addChild(new canvas.px.Container),
    this.circlesContainer.interactive = !0,
    t = 1; t <= 5; t++)
        (e = (s = this.circlesContainer.addChild(new canvas.px.Container)).addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("treasure", "circle" + t)))).pivot = new canvas.px.Point(Math.round(.5 * e.width),Math.round(.5 * e.height)),
        e.rotation = canvas.Functions.degToRad(canvas.app.treasure.Const.BASE_ROTATIONS[t - 1]),
        this.circles.push(s),
        s.position.set(306, 214),
        a = Math.round(.5 * e.width),
        e.sprite.hitArea = new canvas.px.Circle(a,a,a),
        s.rotation = canvas.Functions.degToRad(90 * i.baseState[t - 1]),
        e.circleIndex = t,
        i.targetRotations[t - 1] = canvas.Functions.radToDeg(s.rotation);
    (e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "arrow_center")))).position.set(282, -10),
    this.progressBar = this.addChild(new canvas.app.treasure.view.ProgressBar),
    this.progressBar.position.set(85, 391),
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("treasure", "cross_base"),canvas.ResourceLoader.getImage("treasure", "cross_over"))),
    this.closeButton.position.set(524, 40),
    this.crackGemButton = this.addChild(new canvas.app.treasure.view.Button),
    this.crackGemButton.position.set(53, 433),
    this.crackProfButton = this.addChild(new canvas.app.treasure.view.Button),
    this.crackProfButton.position.set(218, 433),
    this.crackProfButton.field.y -= 10,
    this.openButton = this.addChild(new canvas.app.treasure.view.Button),
    this.openButton.setTitle(canvas.Translator.getText(901)),
    this.openButton.position.set(384, 433),
    this.openButton.enabled = !1,
    this.update()
}
,
canvas.app.treasure.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.treasure.View.prototype.update = function() {
    var t = canvas.app.treasure.model;
    this.crackGemButton.enabled = 0 < t.canPurchase,
    this.crackGemButton.setTitle(canvas.Translator.getText(900) + (0 == t.canPurchase ? "" : " " + t.canPurchase.toString()) + " <img src='money_crystal' xOffset='0' yOffset='3' atlas='treasure'/>"),
    this.crackProfButton.enabled = 0 < t.canBreakOpen,
    this.crackProfButton.setTitle(canvas.Translator.getText(900) + (0 == t.canBreakOpen ? "" : " " + t.canBreakOpen.toString()) + " <img src='key' xOffset='0' yOffset='4' atlas='treasure'/>"),
    this.progressBar.setTitle(canvas.Translator.getText(902) + ": " + t.logTurns.length + "/" + t.maxTurns),
    this.progressBar.progress = t.logTurns.length / t.maxTurns,
    t.puzzleComplete ? (this.circlesContainer.interactiveChildren = !1,
    this.openButton.enabled = !0) : 1 == this.progressBar.progress && (this.progressBar.setTitle(canvas.Translator.getText(903)),
    this.circlesContainer.interactiveChildren = !1),
    canvas.EventManager.addEventListener(canvas.app.treasure.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.treasure.View.prototype.frameHandler = function() {
    for (var t, e, a, s = this.circles.length, i = canvas.app.treasure.model, n = !1, o = 0; o < s; o++)
        null != (t = this.circles[o]) && (e = canvas.Functions.degToRad(i.targetRotations[o]),
        t.rotation > e ? ((a = t.rotation - .05) < e && (a = e),
        t.rotation = a,
        n = !0) : t.rotation < e && (e < (a = t.rotation + .05) && (a = e),
        t.rotation = a,
        n = !0));
    n || canvas.EventManager.removeEventListener(canvas.app.treasure.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.treasure.view.Button = function() {
    canvas.ui.Button.call(this, canvas.ResourceLoader.getImage("treasure", "button_base"), canvas.ResourceLoader.getImage("treasure", "button_over"), null, canvas.ResourceLoader.getImage("treasure", "button_disabled")),
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,15848845,151,20,"center")),
    this.field.position.set(10, 16),
    this.field.interactive = !1
}
,
canvas.app.treasure.view.Button.prototype = Object.create(canvas.ui.Button.prototype),
canvas.app.treasure.view.Button.prototype.setTitle = function(t) {
    this.field.text = t
}
,
canvas.app.treasure.view.ProgressBar = function() {
    canvas.ui.Progress.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "progress_back")));
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("treasure", "progress")));
    t.position.set(11, 8),
    this.sprite.position.set(t.x, t.y),
    this.setSize(t.width, t.height),
    t.mask = this.sprite,
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,15848845,this._width,20,"center")),
    this.field.position.set(t.x, 13)
}
,
canvas.app.treasure.view.ProgressBar.prototype = Object.create(canvas.ui.Progress.prototype),
canvas.app.treasure.view.ProgressBar.prototype.setTitle = function(t) {
    this.field.text = t
}
,
canvas.app.wheel.Const = {
    ROTATE_DELTA: 45,
    NUM_SECTORS: 8,
    OBJECT_NAME: "wheelfortune",
    REQUEST_INIT: "init",
    REQUEST_SPIN: "spin",
    REQUEST_NEWGAME: "new_game",
    REQUEST_USE: "use",
    REQUEST_RESET: "reset"
},
canvas.app.wheel.Event = {
    ENTER_FRAME: "Wheel.ENTER_FRAME",
    HINT_ADD: "Wheel.HINT_ADD",
    HINT_REMOVE: "Wheel.HINT_REMOVE",
    COMPLETE: "Wheel.COMPLETE",
    NEW_GAME: "Wheel.NEW_GAME",
    USE: "Wheel.USE"
},
canvas.app.wheel.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.view = this.addChild(new canvas.app.wheel.View),
    this.windowsManager = new canvas.utils.WindowsManager,
    this.windowsContainer = this.addChild(new canvas.px.Container),
    this.hintManager = new canvas.utils.HintManager,
    this.hintContainer = this.addChild(new canvas.px.Container),
    this.hintContainer.interactive = !0,
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height),
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.COMPLETE, null, this.wheelCompleteHandler, this),
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.NEW_GAME, null, this.newGameHandler, this),
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.USE, null, this.useHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.button, this.buttonClickHandler, this),
    this.sendRequest(canvas.app.wheel.Const.REQUEST_INIT)
}
,
canvas.app.wheel.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.wheel.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.wheel.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.wheel.Main.prototype.resize = function() {
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view)
}
,
canvas.app.wheel.Main.prototype.swfObject = function(t) {
    var e, a;
    if (t)
        for (e in t)
            switch (a = t[e],
            canvas.Functions.testStatus(a) || showError(a.error),
            e) {
            case canvas.app.wheel.Const.OBJECT_NAME + "|" + canvas.app.wheel.Const.REQUEST_INIT:
            case canvas.app.wheel.Const.OBJECT_NAME + "|" + canvas.app.wheel.Const.REQUEST_NEWGAME:
            case canvas.app.wheel.Const.OBJECT_NAME + "|" + canvas.app.wheel.Const.REQUEST_SPIN:
                this.parseData(a, e.split("|")[1]);
                break;
            case canvas.app.wheel.Const.OBJECT_NAME + "|" + canvas.app.wheel.Const.REQUEST_RESET:
                this.sendRequest(canvas.app.wheel.Const.REQUEST_INIT)
            }
}
,
canvas.app.wheel.Main.prototype.parseData = function(t, e) {
    if (this.model.data = t,
    this.model.update(),
    t.error)
        return canvas.app.wheel.Const.REQUEST_SPIN,
        void (e != canvas.app.wheel.Const.REQUEST_NEWGAME && this.view.wheel.stopRotate({}));
    switch (this.view.wheel.stopRotate(t),
    this.view.timer.update(t),
    e) {
    case canvas.app.wheel.Const.REQUEST_INIT:
        this.view.init(),
        this.update(!1);
        break;
    case canvas.app.wheel.Const.REQUEST_NEWGAME:
        this.update(!1)
    }
}
,
canvas.app.wheel.Main.prototype.requestCompleteHandler = function() {
    this.model.parse(JSON.parse(this.request.request.responseText)[canvas.app.wheel.Const.REQUEST_OBJECT + "|" + this.request.type])
}
,
canvas.app.wheel.Main.prototype.requestErrorHandler = function() {}
,
canvas.app.wheel.Main.prototype.sendRequest = function(t) {
    t != canvas.app.wheel.Const.REQUEST_NEWGAME && t != canvas.app.wheel.Const.REQUEST_USE && this.view.wheel.startRotate(),
    wheelFortuneAction(t)
}
,
canvas.app.wheel.Main.prototype.wheelCompleteHandler = function() {
    this.update(!0)
}
,
canvas.app.wheel.Main.prototype.update = function(t) {
    this.view.update(t)
}
,
canvas.app.wheel.Main.prototype.buttonClickHandler = function() {
    this.view.button.buttonMode && (this.sendRequest(canvas.app.wheel.Const.REQUEST_SPIN),
    this.view.button.enabled = !1)
}
,
canvas.app.wheel.Main.prototype.newGameHandler = function() {
    this.sendRequest(canvas.app.wheel.Const.REQUEST_NEWGAME)
}
,
canvas.app.wheel.Main.prototype.useHandler = function() {
    this.sendRequest(canvas.app.wheel.Const.REQUEST_USE)
}
,
canvas.app.wheel.Model = function(t) {
    this.urlInit = t.init_url || "/mini_game_conf.php?mode=wheel_fortune&action=init",
    this.urlSpin = t.spin_url || "/mini_game_conf.php?mode=wheel_fortune&action=spin",
    this.urlNewGame = t.newgame_url || "/mini_game_conf.php?mode=wheel_fortune&action=new_game",
    this.gamePrce = t.game_price ? parseInt(t.game_price) : 100,
    this.gamePriceUrl = t.game_price_url,
    this.maxPrize = parseInt(t["highest[WF_MAX_PRIZE]"]) || 0,
    this.maxUserPrize = parseInt(t["highest[WF_MAX_USER]"]) || 0
}
,
canvas.app.wheel.Model.prototype.update = function() {
    null != this.data.prize && (this.maxUserPrize = Math.max(parseInt(this.data.prize), this.maxUserPrize),
    this.maxPrize = Math.max(this.maxPrize, this.maxUserPrize))
}
,
canvas.app.wheel.View = function() {
    canvas.px.Container.call(this),
    this.wheel = new canvas.app.wheel.view.WheelView,
    this.wheel.position.set(163, 163),
    this.button = new canvas.app.wheel.view.SpinButton,
    this.button.position.set(103, 103),
    this.infoView = new canvas.app.wheel.view.GameInfoView,
    this.timer = this.addChild(new canvas.app.wheel.view.TimerView)
}
,
canvas.app.wheel.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.wheel.View.prototype.init = function() {
    this.addChild(this.wheel),
    this.addChild(this.button),
    this.addChild(this.infoView),
    this.addChild(this.timer)
}
,
canvas.app.wheel.View.prototype.update = function(t) {
    var e = canvas.app.wheel.model;
    this.button.update(e.data),
    this.infoView.update(e.data, t)
}
,
canvas.app.wheel.view.GameInfoView = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.wheel.model
      , e = this.addChild(new canvas.ui.Text(canvas.Const.FONT_CUPRUM_22_BOLD,5913896,300,35,"center"));
    e.position.set(310, 122),
    e.text = canvas.Translator.getText(1516),
    this.fieldContainer = this.addChild(new canvas.px.Container),
    this.fieldContainer.position.set(460, 170),
    this.field = this.fieldContainer.addChild(new canvas.ui.Text(canvas.Const.FONT_CUPRUM_40_BOLD,5913896,100,40,"center")),
    this.field.text = "0%",
    this.field.position.set(-50, -20),
    this.maxWinValue = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_CUPRUM_12_BOLD,canvas.Const.FONT_CUPRUM_12_BOLD,5913896,240,70,"center","middle")),
    this.maxWinValue.position.set(340, 50),
    this.maxDailyWinValue = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_CUPRUM_12_BOLD,canvas.Const.FONT_CUPRUM_12_BOLD,5913896,240,70,"center","middle")),
    this.maxDailyWinValue.position.set(340, 195),
    this.useBonus = this.addChild(new canvas.app.view.MainButton),
    this.useBonus.setSize(200),
    this.useBonus.setTitle(canvas.Translator.getText(1517)),
    this.useBonus.position.set(361, 260),
    this.newGame = this.addChild(new canvas.app.view.MainButton(null,null,null,null,null,!0)),
    this.newGame.setSize(200),
    this.newGame.setTitle(canvas.Translator.getText(1518) + " " + t.gamePrce + " <img src='" + t.gamePriceUrl + "' xOffset='0' yOffset='2'/>"),
    this.newGame.position.set(361, 295),
    this.window = new canvas.app.manor.view.controls.ConfirmWindow,
    this.window.dragAvailable = !1,
    this.window.messageField.color = 10027008,
    this.window.init(canvas.Translator.getText(1519), {
        name: canvas.app.wheel.Event.NEW_GAME
    }),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.useBonus, this.useBonusHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.newGame, this.newGameHandler, this)
}
,
canvas.app.wheel.view.GameInfoView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.wheel.view.GameInfoView.prototype.useBonusHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.USE)
}
,
canvas.app.wheel.view.GameInfoView.prototype.newGameHandler = function() {
    0 < this.data.prize ? canvas.utils.WindowsManager.instance.openWindow(this.window) : (this.newGame.enabled = !1,
    canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.NEW_GAME))
}
,
canvas.app.wheel.view.GameInfoView.prototype.update = function(t, e) {
    var a = canvas.app.wheel.model;
    null == e && (e = !0),
    this.data = t,
    this.field.color = 5913896,
    e ? (this.fieldContainer.scale.set(1.5, 1.5),
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.frameHandler, this)) : this.field.text = this.data.prize + "%",
    this.useBonus.visible = t.useButtonVisible,
    this.useBonus.enabled = t.useButtonEnabled,
    this.newGame.visible = t.newGameButtonVisible,
    this.newGame.enabled = t.newGameButtonEnabled;
    t = parseInt(t.game_price);
    this.newGame.setTitle(canvas.Translator.getText(1518) + (0 < t ? " " + t + " <img src='" + a.gamePriceUrl + "' xOffset='0' yOffset='2'/>" : "")),
    this.maxDailyWinValue.text = canvas.Translator.getText(1528) + ": <br/><font face='" + canvas.Const.FONT_CUPRUM_22_BOLD + "'>" + a.maxUserPrize + "%</font>",
    this.maxWinValue.text = canvas.Translator.getText(1527) + ": <br/><font face='" + canvas.Const.FONT_CUPRUM_22_BOLD + "'>" + a.maxPrize + "%</font>"
}
,
canvas.app.wheel.view.GameInfoView.prototype.frameHandler = function() {
    var t;
    1 < this.fieldContainer.scale.x ? ((t = this.fieldContainer.scale.x - .05) <= 1 && (t = 1),
    this.fieldContainer.scale.set(t, t),
    t <= 1.4 && 1.3 <= t && 12532224 != this.field.color && (this.field.text = this.data.prize + "%",
    this.field.color = 12532224)) : (this.field.color = 5913896,
    canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.frameHandler, this))
}
,
canvas.app.wheel.view.PlayAddBonus = function() {
    canvas.px.MovieClip.call(this, canvas.Config.effectsPath + "wheel_bonus"),
    this.stop(),
    this.frameEvent = canvas.app.wheel.Event.ENTER_FRAME,
    this.removeIfExist(this.container),
    this.field = new canvas.ui.Text(canvas.Const.FONT_CUPRUM_24_BOLD_STROKE_BROWN,16774656,53,32,"center","middle"),
    this.field.position.set(15, 25)
}
,
canvas.app.wheel.view.PlayAddBonus.prototype = Object.create(canvas.px.MovieClip.prototype),
canvas.app.wheel.view.PlayAddBonus.prototype.stop = function() {
    canvas.px.MovieClip.prototype.stop.call(this),
    this.removeIfExist(this.container)
}
,
canvas.app.wheel.view.PlayAddBonus.prototype.render = function() {
    var t;
    canvas.px.MovieClip.prototype.render.call(this),
    2 == this.currentFrame && this.addChild(this.container),
    !this.field || this.field.parent || (t = this.container.getChildByName("im_0001")) && t.addChild(this.field)
}
,
canvas.app.wheel.view.PlayAddBonus.prototype.start = function(t) {
    this.gotoAndPlay(1),
    this.field.text = t.value + "%"
}
,
canvas.app.wheel.view.SpinButton = function() {
    this._hintEnabled = !0,
    Object.defineProperty(this, "hintEnabled", {
        get: function() {
            return this._hintEnabled
        },
        set: function(t) {
            this._hintEnabled = t,
            this.enabled = this._enabled
        }
    }),
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("wheel", "play_button_empty")),
    this._enabled = !0,
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this.field.font = canvas.Const.FONT_CUPRUM_22_BOLD_STROKE,
            this.field.text = canvas.Translator.getText(1521),
            this.isGameOver || (this._enabled = t,
            this.buttonMode = t,
            this.isOver ? this.handlerOver() : this.handlerOut(),
            this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("wheel", t ? "play_button_empty" : "play_button_disabled_empty"),
            this.field.font = canvas.Const.FONT_CUPRUM_34_BOLD_STROKE,
            this.field.text = canvas.Translator.getText(1522),
            this._enabled ? canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.HINT_REMOVE, null, {
                target: this
            }) : this.hintEnabled && canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.HINT_ADD, null, {
                target: this,
                params: new canvas.utils.HintParams(this.hint)
            }))
        }
    }),
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_CUPRUM_22_BOLD_STROKE,16777215,110,100,"center","middle")),
    this.field.position.set(7, 10),
    this.hint = new canvas.app.view.MappingHint(canvas.Translator.getText(1526)),
    this.isGameOver = !1
}
,
canvas.app.wheel.view.SpinButton.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.wheel.view.SpinButton.prototype.handlerOver = function(t) {
    this.isOver = !0,
    this.filters = [canvas.Functions.getBrightness(1.2)]
}
,
canvas.app.wheel.view.SpinButton.prototype.handlerOut = function(t) {
    this.isOver = !1,
    this.filters = null
}
,
canvas.app.wheel.view.SpinButton.prototype.gameOver = function(t) {
    (this.isGameOver = t) ? (this.buttonMode = !1,
    this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("wheel", "play_button_disabled_empty"),
    this.field.font = canvas.Const.FONT_CUPRUM_22_BOLD_STROKE,
    this.field.text = canvas.Translator.getText(1521)) : (this.field.font = canvas.Const.FONT_CUPRUM_34_BOLD_STROKE,
    this.field.text = canvas.Translator.getText(1522))
}
,
canvas.app.wheel.view.SpinButton.prototype.update = function(t) {
    this.gameOver(t.game_over),
    this.enabled = t.spinButtonEnabled,
    this.hintEnabled = t.hintEnabled
}
,
canvas.app.wheel.view.TimerView = function() {
    canvas.px.Container.call(this),
    this.position.set(300, 15),
    this.field = new canvas.ui.Text(canvas.Const.FONT_CUPRUM_16_BOLD,5913896,290,30,"center")
}
,
canvas.app.wheel.view.TimerView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.wheel.view.TimerView.prototype.timerHandler = function() {
    this.timeLeft = this.timeEnd - Date.now() / 1e3,
    this.leftH = Math.floor(this.timeLeft / 3600),
    this.timeLeft -= 3600 * this.leftH,
    this.leftM = Math.floor(this.timeLeft / 60),
    this.timeLeft -= 60 * this.leftM,
    this.leftS = Math.floor(this.timeLeft),
    this.field.text = canvas.Translator.getText(1520) + " " + this.timeToStr(this.leftH) + ":" + this.timeToStr(this.leftM) + ":" + this.timeToStr(this.leftS)
}
,
canvas.app.wheel.view.TimerView.prototype.timeToStr = function(t) {
    t = "00" + t;
    return t.slice(t.length - 2)
}
,
canvas.app.wheel.view.TimerView.prototype.update = function(t) {
    this.timeEnd = Date.now() / 1e3 + t.time_end - t.time,
    this.timeEnd < 0 && (this.timeEnd = 0),
    this.timeEnd ? (this.addChild(this.field),
    this.timer && clearInterval(this.timer),
    this.timer = setInterval(this.timerHandler.bind(this), 500)) : (this.removeIfExist(this.field),
    this.timer && clearInterval(this.timer))
}
,
canvas.app.wheel.view.WheelItem = function(t) {
    canvas.px.Container.call(this),
    this.index = t,
    this.image = this.addChild(new canvas.px.Sprite),
    this.image.position.set(-33, -33),
    this.field = new canvas.ui.Text(canvas.Const.FONT_CUPRUM_24_BOLD_STROKE_BROWN,16774656,53,32,"center"),
    this.field.position.set(-26, -14)
}
,
canvas.app.wheel.view.WheelItem.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.wheel.view.WheelItem.prototype.update = function(t) {
    this.data = t || {};
    t = this.data.mode || "empty";
    this.image.texture = canvas.ResourceLoader.getImage("wheel", "bonus_" + t),
    "plus" == t ? (this.field.text = this.data.value + "%",
    this.addChild(this.field)) : this.removeIfExist(this.field)
}
,
canvas.app.wheel.view.WheelView = function() {
    canvas.px.Container.call(this),
    this.rotateCont = this.addChild(new canvas.px.Container);
    var t = this.rotateCont.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("wheel", "wheel_back")));
    t.position.set(-Math.round(.5 * t.width), -Math.round(.5 * t.height)),
    this.rotate = 0,
    this.items = [];
    for (var e, a = 2 * Math.PI / canvas.app.wheel.Const.NUM_SECTORS, s = 0; s < canvas.app.wheel.Const.NUM_SECTORS; s++)
        e = new canvas.app.wheel.view.WheelItem(s),
        this.items.push(e),
        e.update({
            mode: "empty"
        }),
        this.rotateCont.addChild(e),
        e.position.set(116 * Math.cos(a * s), 116 * Math.sin(a * s));
    this.playAdd = this.addChild(new canvas.app.wheel.view.PlayAddBonus),
    canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_COMPLETE, this.playAdd, this.playAddCompleteHandler, this)
}
,
canvas.app.wheel.view.WheelView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.wheel.view.WheelView.prototype.playAddCompleteHandler = function() {
    this.dropComplete()
}
,
canvas.app.wheel.view.WheelView.prototype.dropComplete = function() {
    canvas.EventManager.dispatchEvent(canvas.app.wheel.Event.COMPLETE, null, this.data)
}
,
canvas.app.wheel.view.WheelView.prototype.applyRotate = function() {
    var t;
    for (this.rotateCont.rotation = canvas.Functions.degToRad(this.rotate),
    t = 0; t < canvas.app.wheel.Const.NUM_SECTORS; t++)
        this.items[t].rotation = -canvas.Functions.degToRad(this.rotate)
}
,
canvas.app.wheel.view.WheelView.prototype.startFrameHandler = function() {
    this.speed < 20 && (this.speed += 1),
    this.rotate += this.speed,
    this.applyRotate()
}
,
canvas.app.wheel.view.WheelView.prototype.stopFrameHandler = function() {
    this.rotate += .2 * (this.endRotate - this.rotate),
    Math.abs(this.rotate - this.endRotate) < 1 && !this.aplayedBonus && this.applyBonuses(),
    Math.abs(this.rotate - this.endRotate) < .1 && (this.rotate = this.endRotate,
    this.rotate -= 360 * Math.floor(this.rotate / 360),
    this.endRotate = this.rotate,
    canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.stopFrameHandler, this)),
    this.applyRotate()
}
,
canvas.app.wheel.view.WheelView.prototype.startRotate = function() {
    this.speed = 1,
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.startFrameHandler, this),
    canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.stopFrameHandler, this)
}
,
canvas.app.wheel.view.WheelView.prototype.stopRotate = function(t) {
    this.oldData = this.data,
    this.data = t,
    this.aplayedBonus = !1,
    t.cur_sector;
    t = t.cur_sector || 0;
    this.endRotate = 360 * Math.ceil(this.rotate / 360) + 1080 - canvas.app.wheel.Const.ROTATE_DELTA * t,
    canvas.EventManager.removeEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.startFrameHandler, this),
    canvas.EventManager.addEventListener(canvas.app.wheel.Event.ENTER_FRAME, null, this.stopFrameHandler, this)
}
,
canvas.app.wheel.view.WheelView.prototype.applyBonuses = function() {
    this.aplayedBonus = !0;
    var t = this.data.sectors;
    if (t && (this.data.hasOwnProperty("cur_sector") ? (this.bonusData = this.oldData.sectors[this.data.cur_sector],
    "plus" == this.bonusData.mode ? this.playAdd.start(this.bonusData) : this.dropComplete()) : (this.bonusData = null,
    this.dropComplete()),
    !(this.data.game_over && 0 < this.data.spin_cnt)))
        for (var e, a = 0; a < canvas.app.wheel.Const.NUM_SECTORS; a++)
            e = t[a],
            this.items[a].update(e)
}
,
canvas.app.mirror.Const = {
    OBJECT_NAME: "magic_mirror",
    REQUEST_CONF: "conf",
    REQUEST_PLAY: "play",
    REQUEST_SUBMIT: "submit"
},
canvas.app.mirror.Event = {
    ENTER_FRAME: "Mirror.ENTER_FRAME",
    HINT_ADD: "Mirror.HINT_ADD",
    HINT_REMOVE: "Mirror.HINT_REMOVE",
    SELECT_MIRROR: "Mirror.SELECT_MIRROR"
},
canvas.app.mirror.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.hintManager = new canvas.utils.HintManager,
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height),
    canvas.EventManager.addEventListener(canvas.app.mirror.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.mirror.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    this.view = new canvas.app.mirror.View,
    this.addChild(this.view),
    this.addChild(this.hintContainer),
    this.windowsManager = new canvas.utils.WindowsManager,
    this.windowsContainer = this.addChild(new canvas.px.Container),
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view),
    this.request = new canvas.utils.URLRequest,
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.questionButton, this.questionClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton, this.playClickHandler, this),
    canvas.EventManager.addEventListener(canvas.app.mirror.Event.SELECT_MIRROR, null, this.selectMirrorHandler, this),
    this.sendRequest(canvas.app.mirror.Const.REQUEST_CONF),
    this.timer10 = 0,
    this.timer = setInterval(this.timerHandler.bind(this), 1e3)
}
,
canvas.app.mirror.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.mirror.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.mirror.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.mirror.Main.prototype.requestCompleteHandler = function() {
    if (this.model.parseConf(JSON.parse(this.request.request.responseText), this.request.type),
    100 != this.model.status)
        return this.view.messageWindow.init("" == this.model.error ? canvas.Translator.getText(426) : this.model.error),
        void this.windowsManager.openWindow(this.view.messageWindow);
    var t, e, a, s;
    switch (this.view.update(),
    this.request.type) {
    case canvas.app.mirror.Const.REQUEST_CONF:
        if (this.model.gameData.active && (s = this.model.localStorage.get("turns")))
            for (a = (t = s.split(",")).length,
            e = 0; e < a; e++)
                this.view.mirrors.items[parseInt(t[e])].handlerUp();
        break;
    case canvas.app.mirror.Const.REQUEST_PLAY:
        this.model.gameData.currentPrizeIndex = -1,
        this.view.reset(),
        this.view.finishAnimation();
        break;
    case canvas.app.mirror.Const.REQUEST_SUBMIT:
        this.view.startAnimation(),
        this.model.turnsHistory = ""
    }
}
,
canvas.app.mirror.Main.prototype.requestErrorHandler = function() {}
,
canvas.app.mirror.Main.prototype.sendRequest = function(t) {
    var e = "entry_point.php?object=" + canvas.app.mirror.Const.OBJECT_NAME + "&action=" + t + "&json_mode_on=1";
    this.request.type = t,
    this.request.load(e)
}
,
canvas.app.mirror.Main.prototype.closeClickHandler = function() {
    this.click(),
    _top().closeMagicMirror()
}
,
canvas.app.mirror.Main.prototype.questionClickHandler = function() {
    this.click(),
    canvas.Functions.navigateToURL(canvas.Translator.getText(1407), "_blank")
}
,
canvas.app.mirror.Main.prototype.playClickHandler = function() {
    this.click(),
    !this.model.gameData.active && this.model.money >= this.model.gameData.price && (this.view.playButton.enabled = !1,
    this.sendRequest(canvas.app.mirror.Const.REQUEST_PLAY))
}
,
canvas.app.mirror.Main.prototype.selectMirrorHandler = function(t) {
    this.click(),
    this.view.mirrors.openNext(parseInt(t.params)),
    this.model.turnsHistory = this.model.turnsHistory + ("" == this.model.turnsHistory ? "" : ",") + t.params,
    this.model.calcPoints(this.view.mirrors.step),
    this.view.currentPoints.update(),
    this.model.calcCurrentPrize(),
    this.view.selectCurrentPrize(),
    3 <= this.view.mirrors.step && (this.view.mirrors.interactiveChildren = !1,
    this.sendRequest(canvas.app.mirror.Const.REQUEST_SUBMIT))
}
,
canvas.app.mirror.Main.prototype.click = function() {
    this.view.playButton.blicking.stop(),
    this.timer10 = 0
}
,
canvas.app.mirror.Main.prototype.timerHandler = function() {
    this.timer10++,
    10 < this.timer10 && (this.timer10 = 0,
    (this.model.gameData.active ? this.view.mirrors : this.view.playButton).blicking.start(1)),
    5 < this.timer10 && this.view.finishAnimation(),
    this.model.serverTime.getTime() >= this.model.gameData.finishTime && this.closeClickHandler()
}
,
canvas.app.mirror.Main.prototype.destroy = function() {
    this.view.destroy(),
    canvas.EventManager.removeEventListener(canvas.app.mirror.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.removeEventListener(canvas.app.mirror.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this),
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.closeButton, this.closeClickHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.questionButton, this.questionClickHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.view.playButton, this.playClickHandler, this),
    canvas.EventManager.removeEventListener(canvas.app.mirror.Event.SELECT_MIRROR, null, this.selectMirrorHandler, this),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }]),
    clearInterval(this.timer)
}
,
canvas.app.mirror.Model = function(t) {
    this._turnsHistory = "",
    Object.defineProperty(this, "turnsHistory", {
        get: function() {
            return this._turnsHistory
        },
        set: function(t) {
            this._turnsHistory = t,
            this.localStorage.set("turns", t)
        }
    }),
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.MIRROR),
    this.serverTime = new canvas.utils.ServerTime,
    this.serverRandomizer = new canvas.utils.ServerRandomizer,
    this.gameData = new Object,
    this.gameData.prizePool = new Array,
    this.gameData.active = !1,
    this.gameData.firstGame = !0,
    this.gameData.price = 100
}
,
canvas.app.mirror.Model.prototype.parseConf = function(t, e) {
    null == e && (e = "conf"),
    this.serverTime.init(t.state.server_time),
    this.money = parseFloat(t.state.money);
    var a, s, i, n = t[canvas.app.mirror.Const.OBJECT_NAME + "|" + canvas.app.mirror.Const.REQUEST_CONF];
    for (i in this.status = n.status,
    this.error = n.error || "",
    this.gameData.luck = n.luck,
    this.gameData.total = n.total,
    this.gameData.superGame = n.super,
    this.gameData.max_luck = n.max_luck,
    this.gameData.finishTime = n.ftime,
    this.gameData.price = n.price ? parseFloat(n.price) : 100,
    this.gameData.guaranteedPrizes = new Array,
    n.guaranteed_prizes)
        a = n.guaranteed_prizes[i],
        (s = new Object).count = parseInt(a.total_score),
        s.itemCount = parseInt(a.artikul_cnt),
        s.title = a.title,
        s.image = a.picture,
        s.articulID = a.artikul_id,
        s.luck = parseInt(a.luck),
        s.points = parseInt(a.points),
        this.gameData.guaranteedPrizes.push(s);
    if (this.gameData.guaranteedPrizes.sort(function(t, e) {
        return t.count - e.count
    }),
    n.prize_pool) {
        for (i in this.gameData.prizePool = new Array,
        n.prize_pool)
            a = n.prize_pool[i],
            (s = new Object).count = parseInt(i),
            s.itemCount = parseInt(a.artikul_cnt),
            s.title = a.title,
            s.image = a.picture,
            s.articulID = a.artikul_id,
            s.luck = parseInt(a.luck),
            s.points = parseInt(a.points),
            this.gameData.prizePool.push(s);
        this.gameData.prizePool.sort(function(t, e) {
            return t.count - e.count
        })
    }
    this.gameData.step = 0,
    this.gameData.active = n.active,
    this.serverRandomizer.init(parseInt(n.seed), 48271, 0, 2147483647),
    this.gameData.mirrors = [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 5, 5, 5],
    this.gameData.active && (this.gameData.mirrors = this.serverRandomizer.lcgShuffle(this.gameData.mirrors))
}
,
canvas.app.mirror.Model.prototype.calcPoints = function(t) {
    for (var e = 0, a = 0; a < t; a++)
        e += this.gameData.mirrors[a];
    this.gameData.points = e
}
,
canvas.app.mirror.Model.prototype.calcCurrentPrize = function() {
    for (var t, e = 0, a = 0, s = this.gameData.prizePool.length, a = 0; a < s; a++)
        (t = this.gameData.prizePool[a]).count <= this.gameData.points && t.count > e && (e = t.count,
        this.gameData.currentPrizeIndex = a)
}
,
canvas.app.mirror.Model.prototype.calcGuaranteedPrize = function() {
    for (var t, e = 0, a = 0, s = -1, i = this.gameData.guaranteedPrizes.length, a = 0; a < i; a++)
        (t = this.gameData.guaranteedPrizes[a]).count <= this.gameData.total && t.count > e && (e = t.count,
        s = a);
    return s
}
,
canvas.app.mirror.View = function() {
    canvas.px.Container.call(this);
    var t, e, a;
    canvas.app.mirror.model;
    for (this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "back"))),
    this.closeButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("mirror", "main_window_close_base"),canvas.ResourceLoader.getImage("mirror", "main_window_close_over"),canvas.ResourceLoader.getImage("mirror", "main_window_close_down"),null)),
    this.closeButton.position.set(497, -2),
    this.questionButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("mirror", "button_question"),canvas.ResourceLoader.getImage("mirror", "button_question_over"),canvas.ResourceLoader.getImage("mirror", "button_question_down"),canvas.ResourceLoader.getImage("mirror", "button_question_disabled"))),
    this.questionButton.position.set(450, 27),
    this.questionButton.sprite.hitArea = new canvas.px.Circle(34,19,16),
    this.headerField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_15_BOLD_STROKE,16118721,this.width - 20,20,"center")),
    this.headerField.text = canvas.Translator.getText(1400),
    this.headerField.y = 6,
    this.titleField1 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12,7158283,300,40,"center")),
    this.titleField1.text = canvas.Translator.getText(1401),
    this.titleField1.position.set(116, 46),
    this.titleField2 = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12,7158283,230,40,"center")),
    this.titleField2.text = canvas.Translator.getText(1404),
    this.titleField2.position.set(255, 305),
    this.titleField3 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,60,40,"center")),
    this.titleField3.text = canvas.Translator.getText(1405),
    this.titleField3.position.set(65, 364),
    this.titleField3 = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7158283,220,40,"center")),
    this.titleField3.text = canvas.Translator.getText(1406),
    this.titleField3.position.set(157, 426),
    this.currentPoints = this.addChild(new canvas.app.mirror.view.CurrentPoints),
    this.currentPoints.position.set(423, 60),
    this.topItems = new Array,
    t = 0; t < 5; t++)
        (e = this.addChild(new canvas.app.mirror.view.ItemBig)).position.set(48 + 77 * t, 78),
        this.topItems.push(e);
    for (this.bottomContainer = this.addChild(new canvas.px.Container),
    this.bottomContainerBlicking = new canvas.app.mirror.view.Blicking(this.bottomContainer,16777215,40,3),
    this.bottomItems = new Array,
    t = 0; t < 8; t++)
        a = new canvas.app.mirror.view.ItemSmall,
        this.bottomContainer.addChild(a),
        a.position.set(100 + 50 * t, 456),
        t < 7 && this.bottomContainer.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "arrow"))).position.set(a.x + 38, a.y + 7),
        this.bottomItems.push(a);
    this.mirrors = this.addChild(new canvas.app.mirror.view.Mirrors),
    this.mirrors.position.set(14 - this.mirrors.container.x, 152 - this.mirrors.container.y),
    this.playButton = this.addChild(new canvas.app.view.MainButton),
    this.playButton.setSize(170),
    this.playButton.enabled = !1,
    this.playButton.position.set(40 + Math.round(.5 * (240 - this.playButton._width)), 302),
    this.playButton.blicking = new canvas.app.mirror.view.Blicking(this.playButton,16777215,40,2),
    this.coins = this.addChild(new canvas.app.view.Money(16375713,canvas.Const.FONT_TAHOMA_11_BOLD,null,null,null,null,null,!1)),
    this.coins.interactiveChildren = !1,
    this.luckProgress = this.addChild(new canvas.app.mirror.view.LuckProgress),
    this.luckProgress.position.set(158, 354),
    this.luckProgress.interactive = !0,
    this.prizeIcon = this.bottomContainer.addChild(new canvas.app.mirror.view.PrizeIcon),
    this.prizeIcon.position.set(43, 453),
    this.prizeIcon.interactive = !0,
    this.messageWindow = new canvas.app.manor.view.controls.MessageWindow,
    this.messageWindow.dragAvailable = !1,
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_ADD, null, {
        target: this.prizeIcon,
        params: new canvas.utils.HintParams(new canvas.app.view.BigHint("",canvas.Translator.getText(1409)),!0,canvas.utils.HintPos.RIGHT_TOP)
    }),
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_ADD, null, {
        target: this.luckProgress,
        params: new canvas.utils.HintParams(new canvas.app.view.BigHint("",canvas.Translator.getText(1408)),!0)
    }),
    canvas.EventManager.addEventListener(canvas.app.mirror.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.mirror.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.mirror.View.prototype.update = function() {
    var t = canvas.app.mirror.model;
    !t.gameData.active && t.gameData.firstGame && this.playButton.blicking.start(1),
    this.coins.money = 100 * t.gameData.price,
    this.playButton.setSize(130 + this.coins.width),
    this.playButton._width < 170 && this.playButton.setSize(170),
    this.playButton.setTitle(canvas.Translator.getText(1403)),
    this.coins.position.set(this.playButton.x + this.playButton._width - this.coins.width - 34, this.playButton.y + 9),
    this.playButton.field.x = 23 - Math.round(.5 * this.coins.width),
    this.playButton.enabled = !t.gameData.active && t.money >= t.gameData.price,
    this.mirrors.interactiveChildren = t.gameData.active;
    for (var e = this.bottomItems.length, a = 0; a < e; a++)
        this.bottomItems[a].data = t.gameData.guaranteedPrizes[a];
    for (e = this.topItems.length,
    a = 0; a < e; a++)
        this.topItems[a].data = t.gameData.prizePool[a];
    if (this.luckProgress.progress = Math.round(t.gameData.luck / t.gameData.max_luck * 100),
    this.luckProgress.progressField.text = t.gameData.luck.toString(),
    this.prizeIcon.field.text = t.gameData.total.toString(),
    t.gameData.active && this.mirrors.step < t.gameData.step)
        for (a = 0; a < t.gameData.step - this.mirrors.step; a++)
            this.mirrors.openNext(a);
    this.selectGuaranteedPrize()
}
,
canvas.app.mirror.View.prototype.frameHandler = function() {
    this.luckProgress.frameUpdate(),
    this.mirrors.frameUpdate()
}
,
canvas.app.mirror.View.prototype.reset = function() {
    var t = canvas.app.mirror.model;
    this.mirrors.reset(),
    this.selectCurrentPrize(),
    this.currentPoints.pointsField.text = "0",
    t.turnsHistory = ""
}
,
canvas.app.mirror.View.prototype.selectCurrentPrize = function() {
    for (var t = canvas.app.mirror.model, e = this.topItems.length, a = 0; a < e; a++)
        this.topItems[a].selected = !1;
    (t = this.topItems[t.gameData.currentPrizeIndex]) && (t.selected = !0)
}
,
canvas.app.mirror.View.prototype.selectGuaranteedPrize = function() {
    for (var t = canvas.app.mirror.model.calcGuaranteedPrize(), e = this.bottomItems.length, a = 0; a < e; a++)
        this.bottomItems[a].selected = !1;
    (t = this.bottomItems[t]) && (t.selected = !0)
}
,
canvas.app.mirror.View.prototype.startAnimation = function() {
    var t = canvas.app.mirror.model
      , t = this.topItems[t.gameData.currentPrizeIndex];
    t && t.blicking.start(1),
    this.luckProgress.blicking.start(1),
    this.bottomContainerBlicking.start(1)
}
,
canvas.app.mirror.View.prototype.finishAnimation = function() {
    for (var t = this.topItems.length, e = 0; e < t; e++)
        this.topItems[e].blicking.stop();
    this.luckProgress.blicking.stop(),
    this.bottomContainerBlicking.stop()
}
,
canvas.app.mirror.View.prototype.destroy = function() {
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_REMOVE, null, {
        target: this.prizeIcon
    }),
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_REMOVE, null, {
        target: this.luckProgress
    }),
    canvas.EventManager.removeEventListener(canvas.app.mirror.Event.ENTER_FRAME, null, this.frameHandler, this),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }])
}
,
canvas.app.mirror.view.Blicking = function(t, e, a, s, i) {
    this.view = t,
    this.color = e || 0,
    this.frequency = null == a ? 70 : a,
    this.step = null == s ? 3 : s,
    this.frameEvent = null == i ? canvas.app.mirror.Event.ENTER_FRAME : i,
    this.n = 1
}
,
canvas.app.mirror.view.Blicking.prototype.start = function(t) {
    null == t && (t = -1),
    this.count = t - 1,
    canvas.EventManager.addEventListener(this.frameEvent, null, this.frameHandler, this),
    this.blur = 1,
    this.view && (this.view.filters = [canvas.Functions.getGlow(10, 0, 1.8, this.color, .1)])
}
,
canvas.app.mirror.view.Blicking.prototype.stop = function() {
    this.n = 1,
    canvas.EventManager.removeEventListener(this.frameEvent, null, this.frameHandler, this),
    this.view && (this.view.filters = [])
}
,
canvas.app.mirror.view.Blicking.prototype.frameHandler = function() {
    if (this.blur += this.n,
    this.blur >= this.frequency)
        this.n = -this.step;
    else if (this.blur <= 8) {
        if (this.n < 0)
            if (0 < this.count)
                this.count--;
            else if (0 == this.count)
                return void this.stop();
        this.n = this.step
    }
    this.view && (this.view.filters = [canvas.Functions.getGlow(10, 0, .1 * this.blur, this.color, .1)])
}
,
canvas.app.mirror.view.CurrentPoints = function() {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "points_back")));
    var t = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_10,7158283,60,40,"center"));
    t.text = canvas.Translator.getText(1402),
    t.position.set(10, 63),
    this.pointsField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_AMERICAN_TEXT_40_SHADOW_GRADIENT,void 0,60,40,"center")),
    this.pointsField.position.set(8, 17),
    this.pointsField.text = "0"
}
,
canvas.app.mirror.view.CurrentPoints.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.mirror.view.CurrentPoints.prototype.update = function() {
    var t = canvas.app.mirror.model;
    this.pointsField.text = t.gameData.points || 0
}
,
canvas.app.mirror.view.ItemBig = function() {
    canvas.ui.ListRenderer.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_big_back"))),
    this.image = this.addChild(new canvas.ui.Image),
    this.image.position.set(4, 4),
    this.selector = new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_big_selector")),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_big_count_back"))).position.set(43, 43),
    this.countField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_18,16765254,30,20,"center")),
    this.countField.position.set(43, 47),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "gradient"))).position.set(43, 43),
    this.blicking = new canvas.app.mirror.view.Blicking(this,16777215,40,3),
    this.hint = new canvas.app.view.MappingHint,
    this.image.buttonMode = !0,
    this.click = this.clickHandler.bind(this)
}
,
canvas.app.mirror.view.ItemBig.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.mirror.view.ItemBig.prototype.update = function() {
    if (!this.data)
        return this.countField.text = "?",
        canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_REMOVE, null, {
            target: this.image
        }),
        void (this.interactive = !1);
    this.interactive = !0,
    this.image.setImage(this.data.image),
    this.countField.text = this.data.count,
    this.hint.update(this.data.title + (1 < this.data.itemCount ? " x" + this.data.itemCount : "")),
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_ADD, null, {
        target: this.image,
        params: new canvas.utils.HintParams(this.hint,!0)
    })
}
,
canvas.app.mirror.view.ItemBig.prototype.updateSelection = function() {
    this.selected ? this.addChildAt(this.selector, this.getChildIndex(this.countField) - 1) : this.removeIfExist(this.selector)
}
,
canvas.app.mirror.view.ItemBig.prototype.clickHandler = function() {
    canvas.Functions.navigateToURL("/artifact_info.php?artikul_id=" + this.data.articulID, "_blank")
}
,
canvas.app.mirror.view.ItemMirror = function() {
    this._points = 0,
    Object.defineProperty(this, "points", {
        get: function() {
            return this._points
        },
        set: function(t) {
            switch (this._points = t,
            this.interactive = this.interactiveChildren = !1,
            this._points) {
            case 1:
                this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("mirror", "item_mirror_blue");
                break;
            case 2:
                this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("mirror", "item_mirror_green");
                break;
            case 5:
                this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("mirror", "item_mirror_red");
                break;
            default:
                this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("mirror", "item_mirror_back"),
                this.interactive = this.interactiveChildren = !0
            }
        }
    }),
    canvas.ui.SimpleButton.call(this, canvas.px.TextureEmpty),
    this.points = 0,
    this.hitArea = new canvas.px.Circle(34,44,30)
}
,
canvas.app.mirror.view.ItemMirror.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.mirror.view.ItemMirror.prototype.handlerUp = function(t) {
    canvas.ui.SimpleButton.prototype.handlerUp.call(this, t),
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.SELECT_MIRROR, null, this.name)
}
,
canvas.app.mirror.view.ItemSmall = function() {
    canvas.ui.ListRenderer.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_small_back"))),
    this.image = this.addChild(new canvas.ui.Image),
    this.image.position.set(2, 2),
    this.image.scale.set(.5, .5),
    this.selector = new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_small_selector")),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "item_small_count_back"))).position.set(2, 27),
    this.countField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16765254,30,20,"center")),
    this.countField.position.set(1, 31),
    this.hint = new canvas.app.view.MappingHint,
    this.image.buttonMode = !0,
    this.click = this.clickHandler.bind(this)
}
,
canvas.app.mirror.view.ItemSmall.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.mirror.view.ItemSmall.prototype.update = function() {
    if (!this.data)
        return this.countField.text = "",
        canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_REMOVE, null, {
            target: this.image
        }),
        void (this.interactive = !1);
    this.interactive = !0,
    this.image.setImage(this.data.image),
    this.countField.text = this.data.count,
    this.hint.update(this.data.title + (1 < this.data.itemCount ? " x" + this.data.itemCount : "")),
    canvas.EventManager.dispatchEvent(canvas.app.mirror.Event.HINT_ADD, null, {
        target: this.image,
        params: new canvas.utils.HintParams(this.hint,!0)
    })
}
,
canvas.app.mirror.view.ItemSmall.prototype.updateSelection = function() {
    this.selected ? this.addChildAt(this.selector, this.getChildIndex(this.countField) - 1) : this.removeIfExist(this.selector)
}
,
canvas.app.mirror.view.ItemSmall.prototype.clickHandler = function() {
    canvas.Functions.navigateToURL("/artifact_info.php?artikul_id=" + this.data.articulID, "_blank")
}
,
canvas.app.mirror.view.LuckProgress = function() {
    this._progress = 0,
    Object.defineProperty(this, "progress", {
        get: function() {
            return this._progress
        },
        set: function(t) {
            this._progress = t < 0 ? 0 : 100 < t ? 100 : t;
            t = canvas.app.mirror.model;
            this.luckIcon.texture = canvas.ResourceLoader.getImage("mirror", "luck_icon" + (100 == this._progress || t.gameData.superGame ? "2" : ""))
        }
    }),
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "luck_progress_back"))),
    this.line = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "luck_progress_line"))),
    this.line.position.set(2, 14);
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "luck_progress_top")));
    this.luckIcon = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "luck_icon"))),
    this.luckIcon.position.set(257, -18),
    this.lineMask = this.addChild(new canvas.px.Mask(this.line.width - 15,this.line.height)),
    this.lineMask.position.set(this.line.x, this.line.y),
    this.line.mask = this.lineMask,
    this.progressField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_16_BOLD_STROKE,16511686,40,20,"center")),
    this.progressField.position.set(284, 18),
    this.blicking = new canvas.app.mirror.view.Blicking(this,16777215,40,3),
    this.lineMask.scale.x = 0
}
,
canvas.app.mirror.view.LuckProgress.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.mirror.view.LuckProgress.prototype.frameUpdate = function() {
    var t = .01 * this.progress
      , e = t > this.lineMask.scale.x ? .01 : t < this.lineMask.scale.x ? -.01 : 0;
    e *= 10 * Math.abs(t - this.lineMask.scale.x),
    this.lineMask.scale.x += e,
    (0 < e && this.lineMask.scale.x > t || e < 0 && this.lineMask.scale.x < t) && (this.lineMask.scale.x = t)
}
,
canvas.app.mirror.view.Mirrors = function() {
    canvas.px.Container.call(this),
    this.step = 0,
    this.animation = !1,
    this.container = this.addChild(new canvas.px.Container),
    this.items = new Array;
    for (var t, e = 32, a = 0, s = 0; s < 15; s++)
        (t = this.container.addChild(new canvas.app.mirror.view.ItemMirror)).position.set(e, a),
        e += 62,
        6 == s && (a += 60,
        e = 0),
        t.name = s,
        this.items.push(t);
    this.container.position.set(-Math.round(.5 * this.width), -Math.round(.5 * this.height)),
    this.blicking = new canvas.app.mirror.view.Blicking(this,16777215,40,3)
}
,
canvas.app.mirror.view.Mirrors.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.mirror.view.Mirrors.prototype.reset = function() {
    var t = canvas.app.mirror.model;
    t.gameData.firstGame ? (this.reset2(),
    t.gameData.firstGame = !1) : this.animation = !0
}
,
canvas.app.mirror.view.Mirrors.prototype.reset2 = function() {
    var t, e = this.items.length;
    for (i = 0; i < e; i++)
        (t = this.items[i]).points = 0,
        t.filters = [];
    this.step = 0,
    clearTimeout(this.timer)
}
,
canvas.app.mirror.view.Mirrors.prototype.openNext = function(t) {
    var e = canvas.app.mirror.model;
    this.items[t].points = e.gameData.mirrors[this.step],
    this.items[t].filters = [canvas.Functions.getGlow(10, 2, 1.8, 16777150, .1)],
    this.step++,
    3 == this.step && (this.lastMirrors = e.gameData.mirrors,
    clearTimeout(this.timer),
    this.timer = setTimeout(this.timerHandler.bind(this), 1e3))
}
,
canvas.app.mirror.view.Mirrors.prototype.frameUpdate = function() {
    this.animation && (this.scale.x -= .05,
    this.scale.y = this.scale.x,
    this.scale.x <= 0 && (this.animation = !1,
    this.scale.x = this.scale.y = 1,
    this.reset2()))
}
,
canvas.app.mirror.view.Mirrors.prototype.openAll = function() {
    for (var t, e = 0, a = 3; a < 15; a++) {
        for (; 0 != (t = this.items[e]).points; )
            e++;
        t.points = this.lastMirrors[a]
    }
}
,
canvas.app.mirror.view.Mirrors.prototype.timerHandler = function() {
    this.openAll()
}
,
canvas.app.mirror.view.PrizeIcon = function() {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("mirror", "prize_icon"))),
    this.field = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_14_BOLD_STROKE,16511686,50,20,"center")),
    this.field.position.set(-2, 33)
}
,
canvas.app.mirror.view.PrizeIcon.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanCitadel.Const = {
    MAP_ORIGINAL_WIDTH: 1050,
    MAP_ORIGINAL_HEIGHT: 1e3,
    MAP_WIDTH: 1074,
    MAP_HEIGHT: 1024,
    MAP_DIFF: 12,
    MAP_POINTS: [[334, 338], [852, 293], [606, 391], [691, 209], [143, 603], [559, 124], [289, 496], [703, 505], [924, 435], [839, 677], [248, 678], [477, 731], [492, 909], [878, 853], [960, 169], [170, 863]],
    TYPE_ID_SANCTUARY: 5,
    SANCTUARY_ON_PAGE: 3
},
canvas.app.clanCitadel.Event = {
    ENTER_FRAME: "ClanCitadel.ENTER_FRAME",
    ENTER_FRAME_WIN: "ClanCitadel.ENTER_FRAME_WIN",
    HINT_ADD: "ClanCitadel.HINT_ADD",
    HINT_REMOVE: "ClanCitadel.HINT_REMOVE",
    SELECT: "ClanCitadel.SELECT",
    CHANGE_BUILD_MODE: "ClanCitadel.CHANGE_BUILD_MODE",
    BUILD: "ClanCitadel.BUILD",
    EXIT: "ClanCitadel.EXIT",
    SANCTUARY_SELECT: "ClanCitadel.SANCTUARY_SELECT"
},
canvas.app.clanCitadel.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.hintManager = new canvas.utils.HintManager,
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    this.windowsContainer = new canvas.px.Container,
    this.view = this.addChild(new canvas.app.clanCitadel.View),
    this.addChild(this.windowsContainer),
    this.addChild(this.hintContainer),
    this.update(),
    this.windowsManager = new canvas.utils.WindowsManager(this.view.wall),
    this.request = new canvas.utils.URLRequest,
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.SELECT, null, this.selectHandler, this),
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.CHANGE_BUILD_MODE, null, this.changeBuildModeHandler, this),
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.BUILD, null, this.buildHandler, this),
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.EXIT, null, this.exitHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.completeHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.errorHandler, this),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_OPEN, null, this.openWinHandler, this),
    canvas.EventManager.addEventListener(canvas.px.WindowEvent.EVENT_CLOSE, null, this.closeWinHandler, this)
}
,
canvas.app.clanCitadel.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanCitadel.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.clanCitadel.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.clanCitadel.Main.prototype.update = function() {
    this.view.update()
}
,
canvas.app.clanCitadel.Main.prototype.resize = function(t, e) {
    this.view.resize(),
    this.windowsManager.init(this.windowsContainer, t, e, this.view),
    this.hintManager.init(this.hintContainer, t, e),
    this.view.position.set(Math.round(.5 * (t - this.model.width)), Math.round(.5 * (e - this.model.height)))
}
,
canvas.app.clanCitadel.Main.prototype.selectHandler = function(t) {
    this.view.map.scrollV.wasDragged || this.view.map.scrollH.wasDragged || (this.model.buildMode ? (this.windowsManager.openWindow(this.view.buildWindow, !1),
    this.view.buildWindow.data = t.params) : t.params.url ? canvas.Functions.navigateToURL(t.params.url, "_self") : t.params.type_id === canvas.app.clanCitadel.Const.TYPE_ID_SANCTUARY && (this.view.sanctuaryWindow = new canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow,
    this.windowsManager.openWindow(this.view.sanctuaryWindow)))
}
,
canvas.app.clanCitadel.Main.prototype.changeBuildModeHandler = function(t) {
    this.model.buildMode = !this.model.buildMode,
    this.update()
}
,
canvas.app.clanCitadel.Main.prototype.buildHandler = function(t) {
    this.request.load(canvas.Config.entryPoint + "?object=clan&action=building_create&building_artikul_id=" + t.params.id + "&json_mode_on=1")
}
,
canvas.app.clanCitadel.Main.prototype.exitHandler = function(t) {
    canvas.Functions.navigateToURL("/area.php?exit=1", "_self")
}
,
canvas.app.clanCitadel.Main.prototype.completeHandler = function(t) {
    var e, a, s = JSON.parse(this.request.request.response);
    for (a in s) {
        if ((e = s[a]).error)
            return this.view.messageWindow.init(e.error),
            void this.windowsManager.openWindow(this.view.messageWindow, !1);
        switch (a) {
        case "clan|building_list":
            this.model.parseConfig(e),
            this.update();
            break;
        case "state":
            this.model.parseState(e)
        }
    }
}
,
canvas.app.clanCitadel.Main.prototype.errorHandler = function(t) {
    this.view.messageWindow.init(canvas.Translator.getText(426)),
    this.windowsManager.openWindow(this.view.messageWindow, !1)
}
,
canvas.app.clanCitadel.Main.prototype.openWinHandler = function(t) {
    this.hintManager.hide(),
    t.params == this.view.sanctuaryWindow && (this.model.paused = !0)
}
,
canvas.app.clanCitadel.Main.prototype.closeWinHandler = function(t) {
    this.model.paused = !1,
    this.view.sanctuaryWindow && t.params == this.view.sanctuaryWindow && (this.view.sanctuaryWindow.destroy(),
    this.view.sanctuaryWindow = null)
}
,
canvas.app.clanCitadel.Model = function(t) {
    this.guestMode = null != t.Guest && "1" == t.Guest,
    this.clanId = null != t.clan_id ? parseInt(t.clan_id) : 0,
    this.clanBuildingsAmf = t.amf_url || "images/data/locale/ru/amf/clan_buildings.amf",
    this.clanResourcesAmf = t.resources_amf || "images/data/locale/ru/amf/clan_resources.amf",
    this.sanctuaryAmf = t.sanctuaryAmfPath || "images/data/locale/ru/amf/clan_sanctuary.amf",
    this.configUrl = canvas.Config.entryPoint + "?object=clan&sq=1&action=building_list&json_mode_on=1" + (this.guestMode ? "&Guest=1&clan_id=" + this.clanId : ""),
    this.configSanctuaryUrl = canvas.Config.entryPoint + "?object=clan&action=building_action&building_type_id=" + canvas.app.clanCitadel.Const.TYPE_ID_SANCTUARY + "&building_action=conf&json_mode_on=1",
    this.buildMode = !1,
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.CLAN_CITADEL),
    this.sanctuary = {},
    this.paused = !1
}
,
canvas.app.clanCitadel.Model.prototype.init = function() {
    this.buildingsData = [];
    for (var t, e = canvas.ResourceLoader.get("buildings"), a = e.length, s = 0; s < a; s++)
        t = e[s],
        this.buildingsData[t.type_id] || (this.buildingsData[t.type_id] = []),
        this.buildingsData[t.type_id][t.level] = t;
    for (this.resourcesData = {},
    a = (e = canvas.ResourceLoader.get("resources")).length,
    s = 0; s < a; s++)
        t = e[s],
        this.resourcesData[t.id] = t;
    this.resourcesData.energy = {
        id: "energy",
        title: canvas.Translator.getText(107),
        ord: 0
    },
    this.guestMode || (this.parseState(JSON.parse(canvas.ResourceLoader.get("config").data).state),
    this.parseConfigSanctuary(JSON.parse(canvas.ResourceLoader.get("configSanctuary").data)["clan|building_action|" + canvas.app.clanCitadel.Const.TYPE_ID_SANCTUARY + "|conf"])),
    this.parseConfig(JSON.parse(canvas.ResourceLoader.get("config").data)["clan|building_list"])
}
,
canvas.app.clanCitadel.Model.prototype.parseSanctuary = function() {
    var t = canvas.ResourceLoader.get("sanctuary");
    this.sanctuary.items = new Array,
    this.sanctuary.allItemsByID = new Object;
    for (var e, a, s, i, n, o, r = this.buildings[canvas.app.clanCitadel.Const.TYPE_ID_SANCTUARY].level, c = r; c <= r + 1; c++)
        if (item = t[c],
        null != item) {
            for (c == r && ((n = new Object).id = "",
            n.image = item.cup.pic_small,
            n.comment = "",
            n.title = canvas.Translator.getText(1255),
            a = new Array,
            n.list = a,
            this.sanctuary.items.push(n)),
            i = (e = item.cup["npc_list_" + (1 == this.race ? "hum" : "mag")]).length,
            s = 0; s < i; s++)
                (o = e[s]) && null == this.sanctuary.allItemsByID[o.id] && ((n = new Object).id = o.id,
                n.image = o.picture,
                n.comment = r < c ? canvas.Translator.getText(1252) + " " + c : canvas.Translator.getText(1254),
                n.locked = r < c,
                n.title = o.title,
                null != this.sanctuary.npcLinks && (n.url = this.sanctuary.npcLinks[n.id]),
                a && a.push(n),
                this.sanctuary.allItemsByID[n.id] = n);
            for (i = (e = item.npc_list).length,
            s = 0; s < i; s++)
                (o = e[s]) && null == this.sanctuary.allItemsByID[o.id] && ((n = new Object).id = o.id,
                n.image = o.picture,
                n.comment = r < c ? canvas.Translator.getText(1252) + " " + c : canvas.Translator.getText(1253),
                n.locked = r < c,
                n.title = o.title,
                null != this.sanctuary.npcLinks && (n.url = this.sanctuary.npcLinks[n.id]),
                this.sanctuary.items.push(n),
                this.sanctuary.allItemsByID[n.id] = n)
        }
}
,
canvas.app.clanCitadel.Model.prototype.parseState = function(t) {
    this.race = null == t.kind ? 1 : parseInt(t.kind)
}
,
canvas.app.clanCitadel.Model.prototype.parseConfig = function(t) {
    this.buildMode = !1,
    this.resources = t.resources,
    this.schemes = t.schemes || {};
    for (var e, a, s = t.buildings, i = [], n = s.length, o = 0; o < n; o++)
        i[s[o].type_id] = s[o];
    for (this.buildings = [],
    n = canvas.app.clanCitadel.Const.MAP_POINTS.length,
    o = 0; o < n; o++)
        (e = i[a = o + 1] || {
            type_id: a,
            level: 0
        }).data = this.buildingsData[a] ? this.buildingsData[a][e.level] : null,
        e.dataNext = this.buildingsData[a] ? this.buildingsData[a][parseInt(e.level) + 1] : null,
        this.buildings[a] = e;
    this.parseSanctuary()
}
,
canvas.app.clanCitadel.Model.prototype.testRequirements = function(t) {
    if (!t)
        return !1;
    if (!t.cost && !t.scheme_artikul_id)
        return !0;
    if (t.cost)
        for (var e, a = t.cost.costs, s = a.length, i = 0; i < s; i++)
            if (e = a[i],
            !this.resources[e.type] || e.cnt > parseInt(this.resources[e.type].value))
                return !1;
    return !(t.scheme_artikul_id && (!this.schemes[t.scheme_artikul_id] || parseInt(this.schemes[t.scheme_artikul_id]) < parseInt(t.scheme_cnt)))
}
,
canvas.app.clanCitadel.Model.prototype.parseConfigSanctuary = function(t) {
    this.sanctuary.npcLinks = t.npc_urls
}
,
canvas.app.clanCitadel.View = function() {
    canvas.px.Container.call(this),
    this.map = this.addChild(new canvas.app.clanCitadel.view.Map),
    canvas.app.clanCitadel.model.guestMode || (this.map.position.set(canvas.app.clanCitadel.Const.MAP_DIFF, canvas.app.clanCitadel.Const.MAP_DIFF),
    this.resourcesPanel = this.addChild(new canvas.app.clanCitadel.view.ResourcesPanel),
    this.buildingsPanel = this.addChild(new canvas.app.clanCitadel.view.BuildingsPanel),
    this.wall = this.addChild(new canvas.px.Mask(100,100,0,.7)),
    this.wall.position.set(10, 10),
    this.wall.active = !1,
    this.contour = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "contour"),49,49,49,49)),
    this.header = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "tile_header"),30,0,30,0)),
    this.header.width = 150,
    this.header.y = -6,
    this.title = this.header.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13_BOLD,16118721,150,20,"center")),
    this.title.text = canvas.Translator.getText(1202),
    this.title.y = 8,
    this.closeButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "close_button"))),
    this.closeButton.y = -2,
    this.buildButton = this.addChild(new canvas.app.clanCitadel.view.BuildButton),
    this.buildWindow = new canvas.app.clanCitadel.view.BuildWindow,
    this.messageWindow = new canvas.app.manor.view.controls.MessageWindow,
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
        target: this.closeButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(150)))
    }),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.closeClickHandler, this))
}
,
canvas.app.clanCitadel.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanCitadel.View.prototype.resize = function() {
    var t = canvas.app.clanCitadel.model;
    t.guestMode ? this.map.setSize(t.width, t.height) : (this.map.setSize(t.width - 2 * canvas.app.clanCitadel.Const.MAP_DIFF, t.height - 2 * canvas.app.clanCitadel.Const.MAP_DIFF),
    this.contour.width = t.width,
    this.contour.height = t.height,
    this.header.x = Math.round(.5 * (t.width - this.header.width)),
    this.closeButton.x = t.width - 45,
    this.buildButton.position.set(t.width - 66, t.height - 65),
    this.buildingsPanel.x = t.width - this.buildingsPanel._width,
    this.wall.setSize(t.width - 20, t.height - 20))
}
,
canvas.app.clanCitadel.View.prototype.update = function() {
    var t = canvas.app.clanCitadel.model;
    this.map.update(),
    t.guestMode || (this.resourcesPanel.update(),
    this.buildingsPanel.update(),
    this.buildButton.buildMode = t.buildMode)
}
,
canvas.app.clanCitadel.View.prototype.closeClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.EXIT)
}
,
canvas.app.clanCitadel.view.Back = function() {
    for (var t in canvas.px.Container.call(this),
    this.mc = this.addChild(new canvas.px.MovieClip(canvas.Config.effectsPath + "citadel_back")),
    this.mc.frameEvent = canvas.app.clanCitadel.Event.ENTER_FRAME,
    this.mc.mcChildsCache)
        this.mc.mcChildsCache[t].loop = !0,
        this.mc.mcChildsCache[t].frameEvent = canvas.app.clanCitadel.Event.ENTER_FRAME,
        this.mc.mcChildsCache[t].play()
}
,
canvas.app.clanCitadel.view.Back.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanCitadel.view.BuildButton = function() {
    this._buildMode = !1,
    Object.defineProperty(this, "buildMode", {
        get: function() {
            return this._buildMode
        },
        set: function(t) {
            this._buildMode = t,
            this.hint.update(canvas.Translator.toUpperCaseFirstChar(canvas.Translator.getText(t ? 1201 : 1299))),
            this.sprite.texture = this.baseTexture = canvas.ResourceLoader.getImage("ui", t ? "exit_button" : "build_button")
        }
    }),
    canvas.ui.SimpleButton.call(this, canvas.px.TextureEmpty),
    this.hint = new canvas.app.view.MappingHint,
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint,!1,canvas.utils.HintPos.LEFT_TOP)
    }),
    this.buildMode = !1,
    this.click = this.clickHandler.bind(this)
}
,
canvas.app.clanCitadel.view.BuildButton.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.clanCitadel.view.BuildButton.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.CHANGE_BUILD_MODE)
}
,
canvas.app.clanCitadel.view.BuildWindow = function() {
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t,
            this.update()
        }
    }),
    this._width = 400,
    canvas.app.manor.view.WindowManorBase.call(this, this._width, 300, canvas.Translator.getText(178)),
    this.headField = this.addChild(new canvas.app.view.MacroHtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7026733,320,300,"center","top")),
    this.headField.position.set(40, 30),
    this.list = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,3)),
    this.list.setSize(300, 200),
    this.list._paddingV = 0,
    this.list.x = 50,
    this.bottomField = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12,canvas.Const.FONT_TAHOMA_12_BOLD,7026733,320,300,"center","top")),
    this.bottomField.position.set(40, 0),
    this.buildButton = this.addChild(new canvas.app.view.MainButton),
    this.buildButton.x = 48,
    this.buildButton.setTitle(canvas.Translator.getText(178)),
    this.cancelButton = this.addChild(new canvas.app.view.MainButton),
    this.cancelButton.x = 202,
    this.cancelButton.setTitle(canvas.Translator.getText(2019)),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.cancelButton, this.cancelClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.buildButton, this.buildClickHandler, this)
}
,
canvas.app.clanCitadel.view.BuildWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.clanCitadel.view.BuildWindow.prototype.update = function() {
    var t = canvas.app.clanCitadel.model;
    if (this.data) {
        this.headField.text = "<b>" + this.data.title + "</b><br/><br/>" + this.data.description + "<br/><br/><b>" + canvas.Translator.getText(121) + "</b>",
        this.list.clear(),
        this.list.y = this.headField.y + this.headField.textHeight + 10;
        var e, a = 0;
        if (this.data.cost) {
            for (a = this.data.cost.costs.length,
            e = 0; e < a; e++)
                this.list.add(new canvas.app.clanCitadel.view.ResourceCostRenderer(this.data.cost.costs[e]), !1);
            this.list.update()
        }
        this.data.scheme_artikul_id ? this.bottomField.text = "<b>" + canvas.Translator.getText(1203) + "</b><br/><br/><a normal='1' href='artifact_info.php?artikul_id=" + this.data.scheme_artikul_id + "'>" + this.data.scheme_artikul_title + " [" + (t.schemes[this.data.scheme_artikul_id] || "0") + "/" + this.data.scheme_cnt + "]</a>" : this.bottomField.text = "",
        this.bottomField.y = this.list.y + 20 * Math.ceil(a / 3) + 5,
        this.buildButton.y = this.cancelButton.y = this.bottomField.y + this.bottomField.textHeight + 5,
        this.setSize(this._width, this.buildButton.y + 60),
        this.buildButton.enabled = t.testRequirements(this.data)
    }
}
,
canvas.app.clanCitadel.view.BuildWindow.prototype.cancelClickHandler = function() {
    canvas.utils.WindowsManager.instance.closeWindow(this)
}
,
canvas.app.clanCitadel.view.BuildWindow.prototype.buildClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.BUILD, null, this.data),
    this.cancelClickHandler()
}
,
canvas.app.clanCitadel.view.BuildingRenderer = function() {
    canvas.ui.ListRenderer.call(this),
    this.hint = new canvas.app.view.MappingHint,
    this.mouseover = this.overHandler.bind(this),
    this.mouseout = this.outHandler.bind(this),
    this.click = this.clickHandler.bind(this)
}
,
canvas.app.clanCitadel.view.BuildingRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.clanCitadel.view.BuildingRenderer.prototype.update = function() {
    this.data != this.oldData && (this.clear(),
    this.data && (t = canvas.Functions.extractSwfName(this.data.building_swfs[0].swf),
    this.mc = this.addChild(new canvas.px.MovieClip(canvas.Config.clanBuildingsPath + t + "/" + t)),
    this.mc.frameEvent = canvas.app.clanCitadel.Event.ENTER_FRAME,
    this.mc.interactive = !1,
    this.mc.interactiveChildren = !1,
    this.mc.ready ? this.readyHandler() : canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this)));
    var t = canvas.app.clanCitadel.model;
    t.buildMode && this.data ? this.mc && (this.mc.filters = [canvas.Functions.getGlow(10, .8, 0, t.testRequirements(this.data) ? 65382 : 16711680, .1)]) : this.mc && (this.mc.filters = null)
}
,
canvas.app.clanCitadel.view.BuildingRenderer.prototype.readyHandler = function() {
    if (canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this),
    1 < this.mc.totalFrames && (this.mc.loop = !0),
    this.mc.mcChildsCache)
        for (var t in this.mc.mcChildsCache)
            this.mc.mcChildsCache[t].frameEvent = this.mc.frameEvent,
            this.mc.mcChildsCache[t].play();
    this.polygon = this.addChild(new canvas.px.Polygon(this.mc.data.data.polygon)),
    this.polygon.position.set(this.mc.data.data.x, this.mc.data.data.y),
    this.polygon.interactive = !0,
    this.polygon.buttonMode = !0,
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
        target: this.polygon,
        params: new canvas.utils.HintParams(this.hint)
    }),
    this.hint.update(this.data.title + " [" + this.data.level + "]")
}
,
canvas.app.clanCitadel.view.BuildingRenderer.prototype.clear = function() {
    this.mc && (canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.mc, this.readyHandler, this),
    this.mc.destroy()),
    this.polygon && (this.removeIfExist(this.polygon),
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_REMOVE, null, {
        target: this.polygon
    }),
    this.polygon.destroy(),
    this.polygon = null)
}
,
canvas.app.clanCitadel.view.BuildingRenderer.prototype.overHandler = function() {
    this.filters = [canvas.Functions.getBrightness()]
}
,
canvas.app.clanCitadel.view.BuildingRenderer.prototype.outHandler = function() {
    this.filters = null
}
,
canvas.app.clanCitadel.view.BuildingRenderer.prototype.clickHandler = function() {
    canvas.app.clanCitadel.model.guestMode || canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.SELECT, null, this.data)
}
,
canvas.app.clanCitadel.view.BuildingTitleRenderer = function(t, e) {
    canvas.ui.ListRenderer.call(this),
    this.setSize(200, 20),
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,15250952,this._width,this._height,"left")),
    this.buttonMode = !0,
    this.isExit = e,
    this.data = t
}
,
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.update = function() {
    var t = canvas.app.clanCitadel.model;
    this.data && (t = t.buildMode ? t.testRequirements(this.data) ? "icon_build_green" : "icon_build_red" : "icon_enter",
    this.field.text = "<img src='" + t + "' atlas='ui' yOffset='" + (this.isExit ? 2 : 0) + "'/>  " + this.data.title + (this.data.level ? " [" + this.data.level + "]" : ""))
}
,
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.clickHandler = function() {
    this.isExit ? canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.EXIT) : canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.SELECT, null, this.data)
}
,
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.overHandler = function() {
    this.filters = [canvas.Functions.getBrightness(1.2)]
}
,
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.outHandler = function() {
    this.filters = null
}
,
canvas.app.clanCitadel.view.BuildingTitleRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this)
}
,
canvas.app.clanCitadel.view.BuildingsPanel = function() {
    this._showed = !0,
    Object.defineProperty(this, "showed", {
        get: function() {
            return this._showed
        },
        set: function(t) {
            this._showed = t,
            this.updatePos()
        }
    }),
    canvas.px.Container.call(this);
    canvas.app.clanCitadel.model;
    this._width = 200,
    this.container = this.addChild(new canvas.px.Container),
    this.container.position.set(-10, 10),
    this.button = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "panel_button_back"))),
    this.button.position.set(this._width - 45, 80),
    this.arrow = this.button.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "panel_button_arrow"))),
    this.arrow.position.set(14, 21),
    this.hint = new canvas.app.view.MappingHint,
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
        target: this.button,
        params: new canvas.utils.HintParams(this.hint)
    }),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this),
    this.back = this.container.addChild(new canvas.px.RoundRect(0,.5,200,200,10,10)),
    this.msk = this.addChild(new canvas.px.Mask(this.back.width,this.back.height)),
    this.msk.position.set(this.container.x, this.container.y),
    this.container.mask = this.msk,
    this.list = this.container.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1)),
    this.list.position.set(6, 10),
    this.list.setSize(this._width, 1e3),
    this.list._paddingV = 0;
    var t = canvas.app.clanCitadel.model.localStorage.get("rightShowed");
    this.showed = null == t || "1" == t,
    this.container.x = this.targetPos
}
,
canvas.app.clanCitadel.view.BuildingsPanel.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanCitadel.view.BuildingsPanel.prototype.updatePos = function() {
    this.button && (this.showed ? (this.arrow.scale.x = 1,
    this.arrow.x = 14,
    this.hint.update(canvas.Translator.getText(188)),
    this.targetPos = -10) : (this.arrow.scale.x = -1,
    this.arrow.x = 29,
    this.hint.update(canvas.Translator.getText(189)),
    this.targetPos = 200),
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME, null, this.frameHandler, this))
}
,
canvas.app.clanCitadel.view.BuildingsPanel.prototype.update = function() {
    var t = canvas.app.clanCitadel.model;
    this.list.clear();
    for (var e, a, s = t.buildings.length - 1, i = 0; i < s; i++)
        e = t.buildings[i + 1],
        (e = t.buildMode ? e && e.dataNext ? e.dataNext : null : e && e.data ? e.data : null) && (a = new canvas.app.clanCitadel.view.BuildingTitleRenderer(e),
        this.list.add(a, !1));
    t.buildMode || ((a = new canvas.app.clanCitadel.view.BuildingTitleRenderer).setSize(0, 10),
    this.list.add(a, !1),
    a = new canvas.app.clanCitadel.view.BuildingTitleRenderer({
        title: canvas.Translator.getText(152)
    },!0),
    this.list.add(a, !1)),
    this.list.update(),
    this.back.h = this.list.container.height + 18,
    this.msk.setSize(-1, this.back.h),
    this.button.y = Math.round(.5 * this.back.h) - 20
}
,
canvas.app.clanCitadel.view.BuildingsPanel.prototype.buttonClickHandler = function() {
    this.showed = !this.showed,
    canvas.app.clanCitadel.model.localStorage.set("rightShowed", this.showed ? "1" : "0")
}
,
canvas.app.clanCitadel.view.BuildingsPanel.prototype.frameHandler = function() {
    this.container.x != this.targetPos ? this.container.x < this.targetPos ? this.container.x = Math.min(this.container.x + 20, this.targetPos) : this.container.x = Math.max(this.container.x - 20, this.targetPos) : canvas.EventManager.removeEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.clanCitadel.view.Map = function() {
    canvas.px.Container.call(this),
    this._width = 0,
    this._height = 0,
    this.container = this.addChild(new canvas.px.Container),
    this.msk = this.addChild(new canvas.px.Mask(100,100)),
    this.container.mask = this.msk,
    this.back = this.container.addChild(new canvas.app.clanCitadel.view.Back),
    this.buildingsContainer = this.container.addChild(new canvas.px.Container);
    for (var t = canvas.app.clanCitadel.Const.MAP_POINTS.length, e = 0; e < t; e++)
        this.buildingsContainer.addChild(new canvas.app.clanCitadel.view.BuildingRenderer).position.set(canvas.app.clanCitadel.Const.MAP_POINTS[e][0], canvas.app.clanCitadel.Const.MAP_POINTS[e][1]);
    this.scrollV = this.addChild(new canvas.ui.Scroll(canvas.ui.ScrollType.VERTICAL,null,null,new canvas.px.Sprite(canvas.px.TextureEmpty),new canvas.px.Sprite(canvas.px.TextureEmpty),this.container,!0)),
    this.scrollV.step = 40,
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollV, this.scrollHandler, this),
    this.scrollH = this.addChild(new canvas.ui.Scroll(canvas.ui.ScrollType.HORIZONTAL,null,null,new canvas.px.Sprite(canvas.px.TextureEmpty),new canvas.px.Sprite(canvas.px.TextureEmpty),this,!0,!1)),
    canvas.EventManager.addEventListener(canvas.ui.ScrollEvent.EVENT_SCROLL, this.scrollH, this.scrollHandler, this),
    this.firstResize = !0
}
,
canvas.app.clanCitadel.view.Map.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanCitadel.view.Map.prototype.setSize = function(t, e) {
    this._width = t,
    this._height = e,
    this.msk.setSize(this._width, this._height),
    this.scrollV.max = canvas.app.clanCitadel.Const.MAP_ORIGINAL_HEIGHT - this._height,
    this.scrollH.max = canvas.app.clanCitadel.Const.MAP_ORIGINAL_WIDTH - this._width,
    this.firstResize && (this.firstResize = !1,
    t = canvas.app.clanCitadel.model.localStorage.get("mapX") || 0,
    e = canvas.app.clanCitadel.model.localStorage.get("mapY") || 10,
    this.scrollH.current = Math.round(this.scrollH.max * parseInt(t) * .01),
    this.scrollV.current = Math.round(this.scrollV.max * parseInt(e) * .01)),
    this.updateScrollPos()
}
,
canvas.app.clanCitadel.view.Map.prototype.update = function() {
    for (var t, e, a = canvas.app.clanCitadel.model, s = a.buildings.length - 1, i = 0; i < s; i++)
        t = a.buildings[i + 1],
        e = this.buildingsContainer.getChildAt(i),
        a.buildMode ? e.data = t && t.dataNext ? t.dataNext : null : e.data = t && t.data ? t.data : null
}
,
canvas.app.clanCitadel.view.Map.prototype.scrollHandler = function() {
    this.updateScrollPos(),
    canvas.app.clanCitadel.model.localStorage.set("mapX", Math.round(this.scrollH.current / Math.max(1, this.scrollH.max) * 100)),
    canvas.app.clanCitadel.model.localStorage.set("mapY", Math.round(this.scrollV.current / Math.max(1, this.scrollV.max) * 100))
}
,
canvas.app.clanCitadel.view.Map.prototype.updateScrollPos = function() {
    this.container.position.set(-this.scrollH.current, -this.scrollV.current)
}
,
canvas.app.clanCitadel.view.ResourceCostRenderer = function(t) {
    canvas.ui.ListRenderer.call(this),
    this.setSize(100, 20),
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE,canvas.Const.FONT_TAHOMA_12_BOLD_STROKE,11534336,this._width,this._height,"center")),
    this.hint = new canvas.app.view.MappingHint,
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint)
    }),
    this.data = t
}
,
canvas.app.clanCitadel.view.ResourceCostRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.clanCitadel.view.ResourceCostRenderer.prototype.update = function() {
    var t;
    this.data && (t = parseInt(canvas.app.clanCitadel.model.resources[this.data.type].value),
    this.field.text = "<img src='res_" + this.data.type + "' atlas='ui'/> <font color='#" + (t < this.data.cnt ? "ff3333" : "00ff66") + "'>" + t + "/" + this.data.cnt + "</font>",
    t = canvas.app.clanCitadel.model.resourcesData[this.data.type],
    this.hint.update(t ? t.title : ""))
}
,
canvas.app.clanCitadel.view.ResourceCostRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this),
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_REMOVE, null, {
        target: this
    })
}
,
canvas.app.clanCitadel.view.ResourceCountRenderer = function(t, e, a) {
    canvas.ui.ListRenderer.call(this),
    this.setSize(100, 20),
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD,canvas.Const.FONT_TAHOMA_12_BOLD_STROKE,3394611,this._width,this._height,"left")),
    this.hint = new canvas.app.view.MappingHint(e),
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint,!0)
    }),
    this.type = t,
    this.infoLink = a,
    this.infoLink && (this.buttonMode = !0)
}
,
canvas.app.clanCitadel.view.ResourceCountRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.clanCitadel.view.ResourceCountRenderer.prototype.update = function() {
    var t;
    this.data && (t = parseInt(this.data.value),
    this.field.text = "<img src='res_" + this.type + "' atlas='ui'/> " + t + (parseInt(this.data.limit) ? "/" + this.data.limit : ""))
}
,
canvas.app.clanCitadel.view.ResourceCountRenderer.prototype.clickHandler = function() {
    this.infoLink && canvas.Functions.navigateToURL(this.infoLink, "_blank")
}
,
canvas.app.clanCitadel.view.ResourceCountRenderer.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this),
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_REMOVE, null, {
        target: this
    })
}
,
canvas.app.clanCitadel.view.ResourcesPanel = function() {
    this._showed = !0,
    Object.defineProperty(this, "showed", {
        get: function() {
            return this._showed
        },
        set: function(t) {
            this._showed = t,
            this.updatePos()
        }
    }),
    canvas.px.Container.call(this);
    var t = canvas.app.clanCitadel.model;
    this.container = this.addChild(new canvas.px.Container),
    this.container.position.set(10, 10),
    this.button = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "panel_button_back"))),
    this.button.scale.x = -1,
    this.button.position.set(44, 80),
    this.arrow = this.button.sprite.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "panel_button_arrow"))),
    this.arrow.position.set(14, 21),
    this.hint = new canvas.app.view.MappingHint,
    canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.HINT_ADD, null, {
        target: this.button,
        params: new canvas.utils.HintParams(this.hint)
    }),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.button, this.buttonClickHandler, this),
    this.back = this.container.addChild(new canvas.px.RoundRect(0,.5,200,200,10,10)),
    this.msk = this.addChild(new canvas.px.Mask(this.back.width,this.back.height)),
    this.msk.position.set(this.container.x, this.container.y),
    this.container.mask = this.msk;
    var e = 10;
    this.items = {},
    this.moneyView = this.container.addChild(new canvas.app.view.Money(3394611,canvas.Const.FONT_TAHOMA_11_BOLD)),
    this.moneyView.position.set(32, e),
    e += 20;
    var a, s, i, n, o = [];
    for (n in t.resourcesData)
        o.push(t.resourcesData[n]);
    for (o.sort(function(t, e) {
        return parseInt(t.ord) - parseInt(e.ord)
    }),
    i = o.length,
    s = 0; s < i; s++)
        a = o[s],
        this.items[a.id] = this.container.addChild(new canvas.app.clanCitadel.view.ResourceCountRenderer(a.id,a.title,"energy" == a.id ? "" : "artifact_info.php?artikul_id=" + a.artikul_id)),
        this.items[a.id].position.set(32, e),
        e += 20;
    var r = canvas.app.clanCitadel.model.localStorage.get("leftShowed");
    this.showed = null == r || "1" == r,
    this.container.x = this.targetPos
}
,
canvas.app.clanCitadel.view.ResourcesPanel.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanCitadel.view.ResourcesPanel.prototype.updatePos = function() {
    this.button && (this.showed ? (this.arrow.scale.x = 1,
    this.arrow.x = 14,
    this.hint.update(canvas.Translator.getText(188)),
    this.targetPos = 10) : (this.arrow.scale.x = -1,
    this.arrow.x = 29,
    this.hint.update(canvas.Translator.getText(189)),
    this.targetPos = -200),
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME, null, this.frameHandler, this))
}
,
canvas.app.clanCitadel.view.ResourcesPanel.prototype.update = function() {
    var t, e = canvas.app.clanCitadel.model;
    for (t in this.moneyView.money = 100 * parseFloat(e.resources.money.value),
    this.items)
        this.items[t].data = e.resources[t]
}
,
canvas.app.clanCitadel.view.ResourcesPanel.prototype.buttonClickHandler = function() {
    this.showed = !this.showed,
    canvas.app.clanCitadel.model.localStorage.set("leftShowed", this.showed ? "1" : "0")
}
,
canvas.app.clanCitadel.view.ResourcesPanel.prototype.frameHandler = function() {
    this.container.x != this.targetPos ? this.container.x < this.targetPos ? this.container.x = Math.min(this.container.x + 20, this.targetPos) : this.container.x = Math.max(this.container.x - 20, this.targetPos) : canvas.EventManager.removeEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.clanCitadel.view.sanctuary.ListItem = function() {
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t,
            this._data ? this.update() : this.parent && (this.parent.removeChild(this),
            this.targetAlpha = 0,
            this.targetScale = 0)
        }
    }),
    canvas.px.Container.call(this),
    this.targetPoint = new canvas.px.Point(300),
    this.targetAlpha = 0,
    this.targetScale = 0,
    this.container = this.addChild(new canvas.px.Container),
    this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "sanctuary_window"))),
    this.topField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7092753,this.container.width,20,"center")),
    this.bottomField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_13,7092753,this.topField._width,20,"center")),
    this.image = this.container.addChild(new canvas.ui.Image),
    this.image.position.set(26, 57),
    this.image.interactive = !1,
    this.lockedImage = this.container.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "sanctuary_lock"))),
    this.lockedImage.position.set(200, 200),
    this.container.pivot = new canvas.px.Point(Math.round(.5 * this.container.width),Math.round(.5 * this.container.height)),
    this.topField.position.set(-4 - this.container.pivot.x, 11 - this.container.pivot.y),
    this.topField.baseY = this.topField.y,
    this.bottomField.position.set(-4 - this.container.pivot.x, 244 - this.container.pivot.y),
    this.bottomField.baseY = this.bottomField.y,
    this.interactive = !0
}
,
canvas.app.clanCitadel.view.sanctuary.ListItem.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanCitadel.view.sanctuary.ListItem.prototype.update = function() {
    this.topField.text = this.data.title || "No title",
    this.bottomField.text = this.data.comment || "",
    this.bottomField.color = this.data.locked ? 7929856 : 2931200,
    this.lockedImage.visible = this.data.locked,
    this.data.image && this.image.setImage(this.data.image)
}
,
canvas.app.clanCitadel.view.sanctuary.ListItem.prototype.updateScale = function() {
    1 != this.container.scale.x ? (this.topField.y = this.topField.baseY + 25,
    this.bottomField.y = this.bottomField.baseY - 23) : (this.topField.y = this.topField.baseY,
    this.bottomField.y = this.bottomField.baseY)
}
,
canvas.app.clanCitadel.view.sanctuary.ListView = function() {
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            var e = !this._data;
            if (this._data = t,
            this._data) {
                var a, s, i = this._data.length;
                if (i > this.items.length)
                    for (a = this.items.length; a < i; a++)
                        (s = new canvas.app.clanCitadel.view.sanctuary.ListItem).y = 150,
                        s.alpha = 0,
                        this.items.push(s);
                for (i = this.items.length,
                a = 0; a < i; a++)
                    this.items[a].data = this._data[a];
                this.update(e)
            }
        }
    }),
    this._currentIndex = 0,
    Object.defineProperty(this, "currentIndex", {
        get: function() {
            return this._currentIndex
        },
        set: function(t) {
            var e = this.data.length;
            this._currentIndex = t < 0 ? 0 : e <= t ? e - 1 : t,
            this.leftArrow.visible = e > canvas.app.clanCitadel.Const.SANCTUARY_ON_PAGE - 2 && 0 < this._currentIndex,
            this.rightArrow.visible = e > canvas.app.clanCitadel.Const.SANCTUARY_ON_PAGE - 2 && this._currentIndex < e - 1,
            this.update(),
            canvas.EventManager.dispatchEvent(canvas.app.clanCitadel.Event.SANCTUARY_SELECT, null, this.data[this.currentIndex])
        }
    }),
    canvas.px.Container.call(this),
    this.items = new Array,
    this.container = this.addChild(new canvas.px.Container),
    this.leftArrow = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "sanctuary_arrow"))),
    this.leftArrow.y = 135,
    this.rightArrow = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "sanctuary_arrow"))),
    this.rightArrow.position.set(600, 135),
    this.rightArrow.scale.x = -1,
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME_WIN, null, this.updateHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.leftArrowClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.rightArrowClickHandler, this),
    this.interactive = !0,
    this.click = this.clickHandler.bind(this)
}
,
canvas.app.clanCitadel.view.sanctuary.ListView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.update = function(t) {
    var e, a, s = this.data.length;
    if (0 != s) {
        for (e = 0; e < s; e++)
            a = this.items[e],
            e < this.currentIndex - 1 ? (a.targetAlpha = 0,
            a.targetScale = 0,
            a.targetPoint.x = 40,
            a.targetPoint.y = 165,
            0 < a.alpha && this.container.addChildAt(a, 0)) : e == this.currentIndex - 1 ? (a.targetAlpha = 1,
            a.targetScale = .8,
            a.targetPoint.x = 140,
            a.targetPoint.y = 165,
            this.container.addChild(a)) : e == this.currentIndex ? (a.targetAlpha = 1,
            a.targetScale = 1,
            a.targetPoint.x = 300,
            a.targetPoint.y = 150) : e == this.currentIndex + 1 ? (a.targetAlpha = 1,
            a.targetScale = .8,
            a.targetPoint.x = 464,
            a.targetPoint.y = 165,
            this.container.addChild(a)) : (a.targetAlpha = 0,
            a.targetScale = 0,
            a.targetPoint.x = 564,
            a.targetPoint.y = 165,
            0 < a.alpha && this.container.addChildAt(a, 0)),
            t && (a.alpha = a.targetAlpha,
            a.container.scale.x = a.container.scale.y = a.targetScale,
            a.position.set(a.targetPoint.x, a.targetPoint.y),
            a.updateScale());
        this.container.addChild(this.items[this.currentIndex])
    }
}
,
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.updateHandler = function() {
    for (var t, e, a = this.items.length, s = 0; s < a; s++)
        (t = this.items[s]).targetAlpha != t.alpha ? (e = t.targetAlpha > t.alpha,
        t.alpha += e ? .15 : -.15,
        t.targetAlpha > t.alpha != e && (t.alpha = t.targetAlpha)) : 0 == t.alpha && this.container.contains(t) && this.container.removeChild(t),
        t.targetPoint.x != t.x && (e = t.targetPoint.x > t.x,
        t.x += e ? 20 : -20,
        t.targetPoint.x > t.x != e && (t.x = t.targetPoint.x)),
        t.targetPoint.y != t.y && (e = t.targetPoint.y > t.y,
        t.y += e ? 3 : -3,
        t.targetPoint.y > t.y != e && (t.y = t.targetPoint.y)),
        t.targetScale != t.container.scale.x && (e = t.targetScale > t.container.scale.x,
        t.container.scale.x += e ? .1 : -.1,
        t.targetScale > t.container.scale.x != e && (t.container.scale.x = t.targetScale),
        t.container.scale.y = t.container.scale.x,
        t.updateScale())
}
,
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.clickHandler = function(t) {
    t.target instanceof canvas.app.clanCitadel.view.sanctuary.ListItem && (this.currentIndex = this.items.indexOf(t.target))
}
,
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.leftArrowClickHandler = function() {
    this.currentIndex--
}
,
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.rightArrowClickHandler = function() {
    this.currentIndex++
}
,
canvas.app.clanCitadel.view.sanctuary.ListView.prototype.destroy = function() {
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }]),
    canvas.EventManager.removeEventListener(canvas.app.clanCitadel.Event.ENTER_FRAME_WIN, null, this.updateHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftArrow, this.leftArrowClickHandler, this),
    canvas.EventManager.removeEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightArrow, this.rightArrowClickHandler, this),
    this.click = null
}
,
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow = function() {
    canvas.px.Window.call(this),
    this.addChild(new canvas.px.Mask(300,300)),
    this.container = this.addChild(new canvas.px.Container),
    this.goButton = this.container.addChild(new canvas.app.view.MainButton),
    this.goButton.setTitle(canvas.Translator.getText(1250)),
    this.goButton.setSize(200),
    this.goButton.position.set(200, 300),
    this.backButton = this.container.addChild(new canvas.app.view.MainButton),
    this.backButton.setTitle(canvas.Translator.getText(232)),
    this.backButton.setSize(200),
    this.backButton.position.set(100, 300),
    this.backButton.visible = !1,
    this.list = this.container.addChild(new canvas.app.clanCitadel.view.sanctuary.ListView),
    this.closeButton = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "sanctuary_close"))),
    this.closeButton.x = 575;
    var t = canvas.app.clanCitadel.model.sanctuary;
    (t.prevItems = null) != t.items && (this.list.data = t.items,
    t.currentItem = t.items[0],
    this.list.currentIndex = 0),
    this.update(),
    canvas.EventManager.addEventListener(canvas.app.clanCitadel.Event.SANCTUARY_SELECT, null, this.selectHandler, this)
}
,
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype = Object.create(canvas.px.Window.prototype),
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype.update = function() {
    var t = canvas.app.clanCitadel.model.sanctuary;
    null == t.prevItems ? (this.backButton.visible = !1,
    this.goButton.x = 200) : (this.backButton.visible = !0,
    this.goButton.x = 300),
    this.goButton.enabled = null != t.currentItem && !t.currentItem.locked
}
,
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype.clickHandler = function(t) {
    canvas.px.Window.prototype.clickHandler.call(this, t);
    var e = canvas.app.clanCitadel.model.sanctuary;
    canvas.Functions.findParent(this.goButton, t.target) ? null != e.currentItem && (e.currentItem.url && "" != e.currentItem.url ? canvas.Functions.navigateToURL(e.currentItem.url, "_self") : null != e.currentItem.list && 0 < e.currentItem.list.length && (e.prevItems = this.list.data,
    e.prevIndex = this.list.currentIndex,
    this.list.data = e.currentItem.list,
    this.list.currentIndex = 0)) : canvas.Functions.findParent(this.backButton, t.target) && null != e.prevItems && (this.list.data = e.prevItems,
    e.prevItems = null,
    this.list.currentIndex = e.prevIndex)
}
,
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype.selectHandler = function(t) {
    canvas.app.clanCitadel.model.sanctuary.currentItem = t.params,
    this.update()
}
,
canvas.app.clanCitadel.view.sanctuary.SanctuaryWindow.prototype.destroy = function() {
    canvas.px.Window.prototype.destroy.call(this),
    canvas.EventManager.removeEventListener(canvas.app.clanCitadel.Event.SANCTUARY_SELECT, null, this.selectHandler, this)
}
,
canvas.app.clanWar.Const = {
    MODE_CLAN_WAR: 1,
    MODE_CLAN_FORTRESS: 2,
    WIDTH: 800,
    HEIGHT: 200,
    NUM_ISLANDS: 5
},
canvas.app.clanWar.Event = {
    ENTER_FRAME: "ClanWar.ENTER_FRAME",
    HINT_ADD: "ClanWar.HINT_ADD",
    HINT_REMOVE: "ClanWar.HINT_REMOVE",
    RESIZE: "ClanWar.RESIZE",
    SHOW_BATTLE: "ClanWar.SHOW_BATTLE",
    SHOW_POPUP: "ClanWar.SHOW_POPUP"
},
canvas.app.clanWar.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.hintManager = new canvas.utils.HintManager,
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    this.windowsManager = new canvas.utils.WindowsManager,
    this.windowsManager.dx = 8,
    this.windowsManager.dy = 8,
    this.windowsContainer = new canvas.px.Container,
    this.view = this.addChild(new canvas.app.clanWar.View),
    this.addChild(this.windowsContainer),
    this.addChild(this.hintContainer),
    this.mainRequest = new canvas.utils.URLRequest,
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.mainRequest, this.mainRequestCompleteHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.mainRequest, this.requestErrorHandler, this),
    this.request = new canvas.utils.URLRequest,
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.request, this.requestCompleteHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.request, this.requestErrorHandler, this),
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.RESIZE, null, this.resize, this),
    this.view.mousedown = this.downHandler.bind(this),
    this.view.mouseup = this.upHandler.bind(this),
    this.view.click = this.clickHandler.bind(this),
    this.view.interactive = !0,
    this.timer = setInterval(this.timerHandler.bind(this), 5e3),
    this.timerHandler(),
    this.timer1000 = setInterval(this.timer1000Handler.bind(this), 1e3),
    this.timer1000Handler(),
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.SHOW_BATTLE, null, this.eventsHandler, this),
    canvas.EventManager.addEventListener(canvas.app.clanWar.Event.SHOW_POPUP, null, this.eventsHandler, this)
}
,
canvas.app.clanWar.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanWar.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.clanWar.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.clanWar.Main.prototype.swfObject = function(t) {
    if (t)
        for (var e in t)
            t[e]
}
,
canvas.app.clanWar.Main.prototype.update = function(t) {
    this.model.parse(t),
    this.view.update()
}
,
canvas.app.clanWar.Main.prototype.mainRequestCompleteHandler = function() {
    var t = (new DOMParser).parseFromString(this.mainRequest.request.response.replace(/&/g, "&amp;"), "text/xml");
    "battle" == t.firstChild.nodeName && this.update(t.firstChild)
}
,
canvas.app.clanWar.Main.prototype.requestCompleteHandler = function() {
    var t = (new DOMParser).parseFromString(this.request.request.response, "text/xml").firstChild;
    canvas.Functions.getAttribute(t, "redirect_url") ? canvas.Functions.navigateToURL(canvas.Functions.getAttribute(t, "redirect_url"), "_self") : (canvas.Functions.getAttribute(t, "msg") && (this.hintManager.hide(),
    this.view.showMessage(canvas.Functions.getAttribute(t, "msg"))),
    "1" == canvas.Functions.getAttribute(t, "status") && this.update(this.model.lastXML),
    this.timerHandler())
}
,
canvas.app.clanWar.Main.prototype.requestErrorHandler = function() {}
,
canvas.app.clanWar.Main.prototype.sendRequest = function(t, e) {
    e = (canvas.Config.isLocal ? "use_buff.xml" : this.model.requestURL) + "?mode=" + t + (e ? "&" + e : "");
    this.request.load(e)
}
,
canvas.app.clanWar.Main.prototype.resize = function() {
    this.view.resize(),
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view),
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height)
}
,
canvas.app.clanWar.Main.prototype.timerHandler = function() {
    var t = (canvas.Config.isLocal ? "clan_battle_conf.xml" : this.model.requestURL) + "?mode=clan_battle_info&" + this.model.requestIDTitle + "=" + this.model.battleID + (0 < this.model.currentRoom ? "&room=" + this.model.currentRoom : "");
    this.mainRequest.load(t)
}
,
canvas.app.clanWar.Main.prototype.timer1000Handler = function() {
    this.view.clocks.update()
}
,
canvas.app.clanWar.Main.prototype.downHandler = function(t) {
    var e, a, s;
    if (this.model.supervisor)
        return "login" == t.target.name ? (e = t.target.parent,
        !(s = this.model.findByAttributeValue(this.model.lastXML, ["users", "user"], "id", e.data.id)) || this.model.fightStarted && 0 < parseInt(s.attributes.room.value) ? void 0 : (this.model.dragUserID = e.data.id,
        this.view.dragLine(e, t.data.global.x, t.data.global.y),
        void this.view.map.update())) : void (t.target.name && "baf_" == t.target.name.substr(0, 4) && (a = t.target.parent).enabled && (this.model.dragBaffID = a.name.substr(4),
        this.view.dragBaf(a, t.data.global.x, t.data.global.y),
        this.view.map.update()))
}
,
canvas.app.clanWar.Main.prototype.upHandler = function(t) {
    var e, a = this.view.dragLine(null, t.data.global.x, t.data.global.y);
    "" != a && null != this.model.users[this.model.dragUserID] && this.model.users[this.model.dragUserID].room != parseInt(a) && (e = this.model.users[this.model.dragUserID],
    this.model.confirmVoivoda && e && e.id == this.model.myId ? this.view.showPopup(canvas.Translator.getText(323), this.assignMemberAction.bind(this), [a]) : this.assignMemberAction(a)),
    "" != (a = this.view.dragBaf(null, t.data.global.x, t.data.global.y)) && this.useBuffAction(a)
}
,
canvas.app.clanWar.Main.prototype.assignMemberAction = function(t) {
    var e = this.model.findByAttributeValue(this.model.lastXML, ["users", "user"], "id", this.model.dragUserID);
    e && (e.attributes.room.value = "-1",
    this.update(this.model.lastXML),
    e.attributes.room.value = t),
    this.sendRequest("assign_member", this.model.requestIDTitle + "=" + this.model.battleID + "&room=" + t + "&user_id=" + this.model.dragUserID),
    "" != this.model.dragUserID && (this.model.dragUserID = "",
    this.view.map.update())
}
,
canvas.app.clanWar.Main.prototype.clickHandler = function(t) {
    var e;
    switch (t.target.name) {
    case "private":
        e = t.target.parent.parent,
        userPrvTag(e.data.login.replace(/ \[\d*\]$/, ""));
        break;
    case "exit":
        this.hintManager.hide(),
        this.model.warFinished ? this.exit() : this.view.showPopup(canvas.Translator.getText(320), this.exit.bind(this));
        break;
    case "reserv":
        if (!t.target.parent.enabled)
            return;
        this.reservAction();
        break;
    case "ready":
        if (!t.target.parent.enabled)
            return;
        this.readyAction()
    }
}
,
canvas.app.clanWar.Main.prototype.exit = function() {
    this.sendRequest("leave", this.model.requestIDTitle + "=" + this.model.battleID)
}
,
canvas.app.clanWar.Main.prototype.reservAction = function() {
    this.model.lastXML.setAttribute("reserv", "1"),
    this.model.lastXML.setAttribute("reservTimeLeft", "1000000"),
    this.update(this.model.lastXML),
    this.sendRequest("use_reserv", this.model.requestIDTitle + "=" + this.model.battleID)
}
,
canvas.app.clanWar.Main.prototype.readyAction = function() {
    this.model.lastXML.setAttribute("ready", "1"),
    this.update(this.model.lastXML),
    this.sendRequest("ready", this.model.requestIDTitle + "=" + this.model.battleID)
}
,
canvas.app.clanWar.Main.prototype.useBuffAction = function(t) {
    var e = this.model.findByAttributeValue(this.model.lastXML, ["buffs", "buff"], "id", this.model.dragBaffID);
    e && (e.attributes.cd_left.value = "100",
    this.update(this.model.lastXML)),
    this.sendRequest("use_buff", this.model.requestIDTitle + "=" + this.model.battleID + "&room=" + t + "&buff_id=" + this.model.dragBaffID),
    "" != this.model.dragBaffID && (this.model.dragBaffID = "",
    this.view.map.update())
}
,
canvas.app.clanWar.Main.prototype.eventsHandler = function(t) {
    switch (t.name) {
    case canvas.app.clanWar.Event.SHOW_BATTLE:
        this.model.fightStarted && (t.params && "list_" == t.params.substr(0, 5) ? this.model.currentRoom = parseInt(t.params.substr(5)) : (this.update(this.model.lastXML),
        this.model.currentRoom = 0),
        this.view.map.showBattle(),
        this.timerHandler());
        break;
    case canvas.app.clanWar.Event.SHOW_POPUP:
        this.view.showPopup(t.params)
    }
}
,
canvas.app.clanWar.Model = function(t) {
    var e, a;
    for (this.w = 400,
    this.h = 400,
    this.fightStarted = !0,
    this.warFinished = !0,
    this.reservUsed = !0,
    this.ready = !1,
    this.readyEnemy = !1,
    this.reservTimeLeft = 0,
    this.reserv2TimeLeft = 0,
    this.useReservTimeLeft = 0,
    this.useLeaderTimeLeft = 0,
    this.battleID = "",
    this.requestURL = "",
    this.requestIDTitle = "",
    this.currentRoom = 0,
    this.logsURL = new Array,
    this.baffs = new Object,
    this.rooms = new Array,
    this.roomsStatus = new Array,
    this.dragUserID = "",
    this.dragBaffID = "",
    this.timeToStart = 0,
    this.date = new Date,
    this.lastXML = null,
    this.mode = 1,
    this.supervisor = null == t.supervisor || 1 == parseInt(t.supervisor),
    this.myId = t.my_id,
    null != t.fort && 1 == parseInt(t.fort) ? (this.mode = canvas.app.clanWar.Const.MODE_CLAN_FORTRESS,
    this.mapBackURL = t.backImage) : (this.mode = canvas.app.clanWar.Const.MODE_CLAN_WAR,
    this.mapBackURL = "back.jpg"),
    this.mode === canvas.app.clanWar.Const.MODE_CLAN_FORTRESS ? (canvas.app.clanWar.Const.NUM_ISLANDS = 3,
    this.battleID = null == t.clan_fort_id ? "" : t.clan_fort_id,
    this.requestURL = "clan_fort_conf.php",
    this.requestIDTitle = "clan_fort_id") : (canvas.app.clanWar.Const.NUM_ISLANDS = 5,
    this.battleID = null == t.clan_battle_id ? "" : t.clan_battle_id,
    this.requestURL = "clan_battle_conf.php",
    this.requestIDTitle = "clan_battle_id"),
    e = 0; e <= canvas.app.clanWar.Const.NUM_ISLANDS; e++)
        this.rooms.push({
            team1: [],
            team2: []
        });
    for (e = 1; e <= 3; e++)
        (a = new Object).id = null == t["buff_" + e.toString() + "_id"] ? e.toString() : t["buff_" + e.toString() + "_id"],
        a.desc = null == t["buff_" + e.toString() + "_descr"] ? "" : t["buff_" + e.toString() + "_descr"],
        a.cd = null == t["buff_" + e.toString() + "_cd"] ? 0 : parseInt(t["buff_" + e.toString() + "_cd"]),
        a.cdLeft = 100,
        this.baffs[a.id] = a
}
,
canvas.app.clanWar.Model.prototype.parse = function(t) {
    var e;
    this.warFinished || 2 != parseInt(t.attributes.status.value) || !t.attributes.info || "" == t.attributes.info.value ? (this.ready = !!t.attributes.ready && 1 == parseInt(t.attributes.ready.value),
    this.fightStarted = 1 <= parseInt(t.attributes.status.value),
    this.warFinished = 2 == parseInt(t.attributes.status.value),
    this.reservUsed = 1 != parseInt(t.attributes.status.value) || 1 == parseInt(t.attributes.reserv.value),
    this.reservTimeLeft = t.attributes.reservTimeLeft ? parseInt(t.attributes.reservTimeLeft.value) : 0,
    this.reserv2TimeLeft = t.attributes.reserv2TimeLeft ? parseInt(t.attributes.reserv2TimeLeft.value) : 0,
    this.useReservTimeLeft = t.attributes.startReservTimeLeft ? parseInt(t.attributes.startReservTimeLeft.value) : 0,
    this.useLeaderTimeLeft = t.attributes.useLeaderTimeLeft ? parseInt(t.attributes.useLeaderTimeLeft.value) : 0,
    this.timeToStart = t.attributes.time_before_fight ? parseInt(t.attributes.time_before_fight.value) : 0,
    this.fightStarted && (this.ready = !0),
    this.readyEnemy = !!t.attributes.ready_enemy && 1 == parseInt(t.attributes.ready_enemy.value),
    this.confirmVoivoda = t.attributes.confirm_voivoda && 1 == parseInt(t.attributes.confirm_voivoda.value),
    this.date = new Date,
    (e = canvas.Functions.getChildNodeByName(t, "users")) && this.parseUsers(e[0]),
    this.fightStarted && ((e = canvas.Functions.getChildNodeByName(t, "buffs")) && this.parseBaffs(e[0]),
    (e = canvas.Functions.getChildNodeByName(t, "rooms")) && this.parseRooms(e[0]),
    (e = canvas.Functions.getChildNodeByName(t, "room")) && this.parseRoomUsers(e[0])),
    this.lastXML = t) : canvas.Functions.navigateToURL(t.attributes.info.value, "_self")
}
,
canvas.app.clanWar.Model.prototype.parseUsers = function(t) {
    var e, a, s;
    for (this.myTeamIds = new Array,
    this.users = new Object,
    o = 0; o <= canvas.app.clanWar.Const.NUM_ISLANDS; o++)
        this.rooms[o].team1 = new Array;
    for (var i = t.getElementsByTagName("user"), n = i.length, o = 0; o < n; o++)
        e = i[o],
        (a = parseInt(canvas.Functions.getAttribute(e, "room"))) < 0 || (s = new canvas.data.clanWar.UserData(canvas.Functions.getAttribute(e, "nick"),!1,!0,canvas.Functions.getAttribute(e, "id"),canvas.Functions.getAttribute(e, "hp") ? parseInt(canvas.Functions.getAttribute(e, "hp")) : -1,canvas.Functions.getAttribute(e, "mp") ? parseInt(canvas.Functions.getAttribute(e, "mp")) : -1,1 == parseInt(canvas.Functions.getAttribute(e, "voivoda")),a,1 == parseInt(canvas.Functions.getAttribute(e, "delayed"))),
        this.rooms[a].team1.push(s),
        this.myTeamIds.push(parseInt(canvas.Functions.getAttribute(e, "id"))),
        this.users[s.id] = s)
}
,
canvas.app.clanWar.Model.prototype.parseRoomUsers = function(t) {
    var e, a, s = parseInt(canvas.Functions.getAttribute(t, "num"));
    this.roomsStatus[s] = parseInt(canvas.Functions.getAttribute(t, "status")),
    this.logsURL[s] = canvas.Functions.getAttribute(t, "fight_info"),
    this.rooms[s].team1 = new Array,
    this.rooms[s].team2 = new Array;
    for (var i, n, o, r = t.getElementsByTagName("team"), c = r.length, p = 0; p < c; p++)
        if (e = r[p],
        "1" == canvas.Functions.getAttribute(e, "num"))
            for (o = (i = e.getElementsByTagName("user")).length,
            n = 0; n < o; n++)
                a = i[n],
                this.rooms[s].team1.push(new canvas.data.clanWar.UserData(canvas.Functions.getAttribute(a, "nick"),!1,!0,canvas.Functions.getAttribute(a, "id"),canvas.Functions.getAttribute(a, "hp") ? parseInt(canvas.Functions.getAttribute(a, "hp")) : -1,canvas.Functions.getAttribute(a, "mp") ? parseInt(canvas.Functions.getAttribute(a, "mp")) : -1,void 0,void 0,1 == parseInt(canvas.Functions.getAttribute(a, "delayed"))));
        else if ("2" == canvas.Functions.getAttribute(e, "num"))
            for (o = (i = e.getElementsByTagName("user")).length,
            n = 0; n < o; n++)
                a = i[n],
                this.rooms[s].team2.push(new canvas.data.clanWar.UserData(canvas.Functions.getAttribute(a, "nick"),!1,!0,canvas.Functions.getAttribute(a, "id"),canvas.Functions.getAttribute(a, "hp") ? parseInt(canvas.Functions.getAttribute(a, "hp")) : -1,canvas.Functions.getAttribute(a, "mp") ? parseInt(canvas.Functions.getAttribute(a, "mp")) : -1,void 0,void 0,1 == parseInt(canvas.Functions.getAttribute(a, "delayed"))))
}
,
canvas.app.clanWar.Model.prototype.parseBaffs = function(t) {
    for (var e, a = t.getElementsByTagName("buff"), s = a.length, i = 0; i < s; i++)
        e = a[i],
        null != this.baffs[canvas.Functions.getAttribute(e, "id")] && (this.baffs[canvas.Functions.getAttribute(e, "id")].cdLeft = parseInt(canvas.Functions.getAttribute(e, "cd_left")))
}
,
canvas.app.clanWar.Model.prototype.parseRooms = function(t) {
    for (var e, a = t.getElementsByTagName("room"), s = a.length, i = 0; i < s; i++)
        e = a[i],
        this.roomsStatus[parseInt(canvas.Functions.getAttribute(e, "num"))] = parseInt(canvas.Functions.getAttribute(e, "status"))
}
,
canvas.app.clanWar.Model.prototype.findByAttributeValue = function(t, e, a, s) {
    for (var i = e.length, n = t, o = 0; o < i; o++)
        n = n.getElementsByTagName(e[o]),
        o < i - 1 && (n = n[0]);
    for (i = n.length,
    o = 0; o < i; o++)
        if (n[o].attributes[a] && n[o].attributes[a].value == s)
            return n[o];
    return null
}
,
canvas.app.clanWar.View = function() {
    canvas.px.Container.call(this),
    this.wall = this.addChild(new canvas.px.Mask(100,100,1654101,1)),
    this.wall.position.set(10, 10),
    this.msk = this.addChild(new canvas.px.Mask(100,100)),
    this.msk.position.set(10, 10),
    this.container = this.addChild(new canvas.px.Container),
    this.background = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "curl"),95,130,95,130)),
    this.map = this.container.addChild(new canvas.app.clanWar.view.Map),
    this.map.y = 10,
    this.map.mask = this.msk,
    this.users = this.addChild(new canvas.app.clanWar.view.UsersList("list_0",!0)),
    this.users.position.set(30, 30),
    this.baffs = this.container.addChild(new canvas.app.clanWar.view.Baffs),
    this.baffs.x = 10,
    this.clocks = this.container.addChild(new canvas.app.clanWar.view.Clocks),
    this.clocks.y = 60,
    this.exitButton = this.container.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "exit_button"))),
    this.exitButton.sprite.name = "exit",
    this.exitButton.y = 24,
    this.confirmWindow = new canvas.app.manor.view.controls.ConfirmWindow,
    this.messageWindow = new canvas.app.manor.view.controls.MessageWindow,
    this.update(),
    this.resize(),
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.HINT_ADD, null, {
        target: this.exitButton,
        params: new canvas.utils.HintParams(new canvas.app.view.MappingHint(canvas.Translator.getText(300)))
    })
}
,
canvas.app.clanWar.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanWar.View.prototype.resize = function() {
    var t = canvas.app.clanWar.model;
    this.users.updateView(),
    this.map.x = Math.round(.5 * (t.w - this.map.width)) + 30,
    this.wall.setSize(t.w - 20, t.h - 20),
    this.msk.setSize(t.w - 20, t.h - 20),
    this.background.width = t.w,
    this.background.height = t.h,
    this.baffs.y = t.h - 79,
    this.clocks.x = t.w - this.clocks.width - 20,
    this.exitButton.x = t.w - this.exitButton.width - 20
}
,
canvas.app.clanWar.View.prototype.update = function() {
    var t = canvas.app.clanWar.model;
    this.users.title = canvas.Translator.getText(301) + " - " + t.rooms[0].team1.length + ":",
    this.users.users = t.rooms[0].team1,
    this.users.updateView(),
    this.users.enabled = !t.fightStarted && !t.ready || t.reservUsed,
    this.map.update(),
    this.baffs.update(),
    this.clocks.update()
}
,
canvas.app.clanWar.View.prototype.dragLine = function(t, e, a) {
    var s, i, n, o, r = canvas.app.clanWar.model, c = "";
    if (null != this.currentDragLine) {
        for (n = (s = this.getObjectsUnderPoint(new canvas.px.Point(e,a))).length,
        o = 0; o < n; o++)
            (i = s[o]).name && "list_" == i.name.substr(0, 5) && (c = i.name.substr(5));
        this.currentDragLine.stopDrag(),
        this.removeChild(this.currentDragLine),
        this.currentDragLine = null
    }
    return t && (this.currentDragLine = t.cloneLogin(),
    this.addChild(this.currentDragLine),
    t = new canvas.px.Point(Math.round(.5 * this.currentDragLine.spriteLogin.textWidth),20),
    this.currentDragLine.startDrag(t, new canvas.px.Rectangle(0,0,r.w,r.h), new canvas.px.Point(e,a)),
    this.currentDragLine.interactive = !1,
    this.currentDragLine.interactiveChildren = !1),
    c
}
,
canvas.app.clanWar.View.prototype.dragBaf = function(t, e, a) {
    var s, i, n, o, r = canvas.app.clanWar.model, c = "";
    if (null != this.currentDragBaf) {
        for (n = (s = this.getObjectsUnderPoint(new canvas.px.Point(e,a))).length,
        o = 0; o < n; o++)
            (i = s[o]).name && "list_" == i.name.substr(0, 5) && "0" != i.name.substr(5) && (c = i.name.substr(5));
        this.currentDragBaf.stopDrag(),
        this.removeChild(this.currentDragBaf),
        this.currentDragBaf = null
    }
    return t && (this.currentDragBaf = t.clone(),
    this.addChild(this.currentDragBaf),
    t = new canvas.px.Point(Math.round(.5 * this.currentDragBaf.width) + 3,Math.round(.5 * this.currentDragBaf.height) + 3),
    this.currentDragBaf.startDrag(t, new canvas.px.Rectangle(0,0,r.w,r.h), new canvas.px.Point(e + 8,a + 8)),
    this.currentDragBaf.interactive = !1,
    this.currentDragBaf.interactiveChildren = !1),
    c
}
,
canvas.app.clanWar.View.prototype.showPopup = function(t, e, a) {
    this.confirmWindow.init(t, {
        func: e,
        params: a
    }),
    canvas.utils.WindowsManager.instance.openWindow(this.confirmWindow)
}
,
canvas.app.clanWar.View.prototype.showMessage = function(t) {
    this.messageWindow.init(t),
    canvas.utils.WindowsManager.instance.openWindow(this.messageWindow)
}
,
canvas.app.clanWar.view.BafIcon = function(t, e) {
    this._popup = "",
    Object.defineProperty(this, "popup", {
        get: function() {
            return this._popup
        },
        set: function(t) {
            this._popup = t,
            this._popup ? (this.hint.update(this._popup),
            canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.HINT_ADD, null, {
                target: this,
                params: new canvas.utils.HintParams(this.hint)
            })) : canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.HINT_REMOVE, null, {
                target: this
            })
        }
    }),
    this._showBorder = !1,
    Object.defineProperty(this, "showBorder", {
        get: function() {
            return this._showBorder
        },
        set: function(t) {
            this._showBorder = t,
            this._showBorder ? (this.border || (this.border = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "baf_border")),
            this.border.position.set(-4, -3)),
            this.addChildAt(this.border, 0)) : this.border && this.removeIfExist(this.border)
        }
    }),
    canvas.ui.SimpleButton.call(this, canvas.ResourceLoader.getImage("ui", t)),
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t,
            this.buttonMode = this.sprite.interactive = t,
            this.sprite.filters = t ? null : [canvas.Functions.getBlackAndWhite()]
        }
    }),
    this.hint = new canvas.app.view.BigHint2(250),
    this.imageName = t,
    this.popup = e || ""
}
,
canvas.app.clanWar.view.BafIcon.prototype = Object.create(canvas.ui.SimpleButton.prototype),
canvas.app.clanWar.view.BafIcon.prototype.clone = function() {
    return new canvas.app.clanWar.view.BafIcon(this.imageName)
}
,
canvas.app.clanWar.view.Baffs = function() {
    canvas.px.Container.call(this),
    this.items = {},
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "bafs_back"))),
    this.back.x = 12;
    var t, e, a, s = canvas.app.clanWar.model, i = ["baf1", "baf2", "baf3"], n = 0, o = 19;
    for (e in s.baffs)
        a = s.baffs[e],
        (t = this.addChild(new canvas.app.clanWar.view.BafIcon(i[n],a.desc))).name = t.sprite.name = "baf_" + a.id,
        t.position.set(o, 11),
        o += t.width,
        t.enabled = !1,
        this.items[a.id] = t,
        n++;
    this.reservIcon = this.addChild(new canvas.app.clanWar.view.BafIcon("baf4",canvas.Translator.getText(308))),
    this.reservIcon.name = this.reservIcon.sprite.name = "reserv",
    this.reservIcon.position.set(o, 11),
    o += this.reservIcon.width,
    this.reservIcon.enabled = !1,
    this.readyIcon = this.addChild(new canvas.app.clanWar.view.BafIcon("baf5",canvas.Translator.getText(309))),
    this.readyIcon.name = this.readyIcon.sprite.name = "ready",
    this.readyIcon.position.set(o, 11),
    o += this.readyIcon.width,
    this.readyIcon.enabled = !1
}
,
canvas.app.clanWar.view.Baffs.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanWar.view.Baffs.prototype.update = function() {
    var t, e, a = canvas.app.clanWar.model;
    for (e in this.items)
        (t = this.items[e]).enabled = a.supervisor && 0 == a.baffs[t.name.substr(4)].cdLeft && a.fightStarted && !a.warFinished;
    this.reservIcon.enabled = a.supervisor && !a.reservUsed && a.fightStarted && !a.warFinished,
    this.readyIcon.enabled = a.supervisor && !a.fightStarted && !a.ready,
    this.readyIcon.showBorder = a.readyEnemy
}
,
canvas.app.clanWar.view.Clocks = function() {
    canvas.px.Container.call(this),
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "clocks_back"))),
    this.back.alpha = .4,
    this.title = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,14540253,92,16,"center")),
    this.title.position.set(0, 6),
    this.time = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,14540253,92,16,"center")),
    this.time.position.set(0, 22)
}
,
canvas.app.clanWar.view.Clocks.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanWar.view.Clocks.prototype.update = function() {
    var t, e = canvas.app.clanWar.model, a = new Date, s = 0;
    switch (this.visible = !0,
    e.fightStarted ? e.reservUsed ? 0 < e.reservTimeLeft && e.reservTimeLeft < 1e6 ? s = 2 : 0 < e.reserv2TimeLeft && e.reserv2TimeLeft < 1e6 ? s = 5 : 0 < e.useLeaderTimeLeft && e.useLeaderTimeLeft < 1e6 && (s = 4) : 0 < e.useReservTimeLeft && e.useReservTimeLeft < 1e6 && (s = 3) : s = 1,
    s) {
    case 1:
        this.title.text = canvas.Translator.getText(314) + ":",
        0 < (t = e.timeToStart - (Math.round(.001 * a.getTime()) - Math.round(.001 * e.date.getTime()))) ? (this.time.text = this.formatDate(t),
        this.visible = !0,
        this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back")) : this.visible = !1;
        break;
    case 2:
        this.title.text = canvas.Translator.getText(321) + ":",
        0 < (t = e.reservTimeLeft - (Math.round(.001 * a.getTime()) - Math.round(.001 * e.date.getTime()))) ? (this.time.text = this.formatDate(t),
        this.visible = !0,
        this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back")) : this.visible = !1;
        break;
    case 3:
        this.title.text = canvas.Translator.getText(315) + ":",
        0 < (t = e.useReservTimeLeft - (Math.round(.001 * a.getTime()) - Math.round(.001 * e.date.getTime()))) ? (this.time.text = this.formatDate(t),
        this.visible = !0,
        this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back_green")) : this.visible = !1;
        break;
    case 4:
        this.title.text = canvas.Translator.getText(322) + ":",
        0 < (t = e.useLeaderTimeLeft - (Math.round(.001 * a.getTime()) - Math.round(.001 * e.date.getTime()))) ? (this.time.text = this.formatDate(t),
        this.visible = !0,
        this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back_red")) : this.visible = !1;
        break;
    case 5:
        this.title.text = canvas.Translator.getText(340) + ":",
        0 < (t = e.reserv2TimeLeft - (Math.round(.001 * a.getTime()) - Math.round(.001 * e.date.getTime()))) ? (this.time.text = this.formatDate(t),
        this.visible = !0,
        this.back.texture = canvas.ResourceLoader.getImage("ui", "clocks_back_yellow")) : this.visible = !1;
        break;
    default:
        this.visible = !1
    }
}
,
canvas.app.clanWar.view.Clocks.prototype.formatDate = function(t) {
    var e = t % 60
      , t = Math.floor(t / 60);
    return canvas.Functions.setNumberLen(t) + ":" + canvas.Functions.setNumberLen(e)
}
,
canvas.app.clanWar.view.FightList = function(t) {
    canvas.px.Container.call(this),
    this.back = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "fight_back"))),
    this.back.alpha = .4,
    this.back.name = t,
    this.titleField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16769442,150,16,"left")),
    this.titleField.position.set(40, 4),
    this.closeButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "close_button"))),
    this.closeButton.x = 265;
    t = this.closeButton.sprite.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11,16769442,50,20,"left","top",0));
    t.text = "<a>" + canvas.Translator.getText(310) + "</a>",
    t.position.set(24, 2),
    this.logButton = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "log_button"))),
    (t = this.logButton.sprite.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11,canvas.Const.FONT_TAHOMA_11,16769442,50,20,"left","top",0))).text = "<a>" + canvas.Translator.getText(311) + "</a>",
    t.position.set(24, 2),
    this.logButton.x = this.closeButton.x - this.logButton.width - 5,
    (t = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16769442,60,16,"left"))).position.set(30, 25),
    t.text = canvas.Translator.getText(312) + "1",
    (t = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16769442,60,16,"left"))).position.set(200, 25),
    t.text = canvas.Translator.getText(312) + "2",
    this.list1 = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1)),
    this.list1.position.set(0, 40),
    this.list1.paddingV = -5,
    this.list1.setSize(130, 108),
    this.list1.scroll = new canvas.app.clanWar.view.ScrollView(this.list1),
    this.list1.scroll.setSize(20, this.list1._height),
    this.list2 = this.addChild(new canvas.ui.List(canvas.ui.ListType.VERTICAL,1)),
    this.list2.position.set(170, 40),
    this.list2.paddingV = -5,
    this.list2.setSize(130, 108),
    this.list2.scroll = new canvas.app.clanWar.view.ScrollView(this.list2),
    this.list2.scroll.setSize(20, this.list2._height),
    this.currentIcon = this.addChild(new canvas.px.Sprite(canvas.px.TextureEmpty)),
    this.currentIcon.position.set(-4, -4),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.closeButton, this.closeClickHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.logButton, this.logClickHandler, this)
}
,
canvas.app.clanWar.view.FightList.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanWar.view.FightList.prototype.closeClickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.SHOW_BATTLE)
}
,
canvas.app.clanWar.view.FightList.prototype.logClickHandler = function() {
    var t = canvas.app.clanWar.model;
    canvas.Functions.navigateToURL(t.logsURL[t.currentRoom], "_blank")
}
,
canvas.app.clanWar.view.FightList.prototype.setIcon = function(t) {
    this.currentIcon.texture = t ? canvas.ResourceLoader.getImage("ui", "icon_" + t) : canvas.px.TextureEmpty
}
,
canvas.app.clanWar.view.FightList.prototype.update = function() {
    var t, e;
    for (this.titleField.text = this.title + ":",
    this.clear(),
    t = this.team1.length,
    e = 0; e < t; e++)
        this.list1.add(new canvas.app.clanWar.view.UserLine(this.team1[e],!1,!1), !1);
    for (this.list1.update(),
    this.list1.scroll && this.list1.scroll.parent ? this.list1.setSize(130, 108) : this.list1.setSize(166, 108),
    this.list1.scroll.position.set(140, 0),
    t = this.team2.length,
    e = 0; e < t; e++)
        this.list2.add(new canvas.app.clanWar.view.UserLine(this.team2[e],!1,!1), !1);
    this.list2.update(),
    this.list2.scroll && this.list2.scroll.parent ? this.list2.setSize(130, 108) : this.list2.setSize(166, 108),
    this.list2.scroll.position.set(140, 0)
}
,
canvas.app.clanWar.view.FightList.prototype.clear = function() {
    this.list1.clear(!1),
    this.list2.clear(!1)
}
,
canvas.app.clanWar.view.HpMpProgress = function(t, e) {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_back")));
    var a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_hp")))
      , s = this.addChild(new canvas.px.Mask(a.width,a.height));
    (a.mask = s).scale.x = t,
    a = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "progress_mp"))),
    s = this.addChild(new canvas.px.Mask(a.width,a.height)),
    (a.mask = s).scale.x = e,
    a.y = s.y = 3
}
,
canvas.app.clanWar.view.HpMpProgress.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanWar.view.Map = function() {
    var t, e;
    canvas.px.Container.call(this),
    this.lists = new Array,
    this.battles = new Array;
    var a, s, i, n = canvas.app.clanWar.model;
    for (this.background = this.addChild(new canvas.px.Container),
    t = n.mode === canvas.app.clanWar.Const.MODE_CLAN_FORTRESS ? (this.image = new canvas.ui.Image(n.mapBackURL),
    canvas.EventManager.addEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.image, this.completeHandler, this),
    e = [new canvas.px.Point(355,10), new canvas.px.Point(533,146), new canvas.px.Point(666,7)],
    [canvas.Translator.getText(317), canvas.Translator.getText(319), canvas.Translator.getText(318)]) : (this.image = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")),
    e = [new canvas.px.Point(165,10), new canvas.px.Point(476,7), new canvas.px.Point(343,146), new canvas.px.Point(165,158), new canvas.px.Point(539,157)],
    [canvas.Translator.getText(302), canvas.Translator.getText(303), canvas.Translator.getText(304), canvas.Translator.getText(305), canvas.Translator.getText(306)]),
    this.background.addChild(this.image),
    this.listContainer = this.background.addChild(new canvas.px.Container),
    this.battleContainer = this.background.addChild(new canvas.px.Container),
    i = 0; i < canvas.app.clanWar.Const.NUM_ISLANDS; i++)
        (s = this.listContainer.addChild(new canvas.app.clanWar.view.UsersList("list_" + (i + 1),!1))).title = t[i],
        s.position.set(e[i].x, e[i].y),
        this.lists.push(s);
    for (i = 0; i < canvas.app.clanWar.Const.NUM_ISLANDS; i++)
        (a = new canvas.app.clanWar.view.FightList("list_" + (i + 1))).title = t[i],
        this.battles.push(a);
    this.showBattle()
}
,
canvas.app.clanWar.view.Map.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.clanWar.view.Map.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.ui.ImageEvent.EVENT_LOADED, this.image, this.completeHandler, this),
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.RESIZE)
}
,
canvas.app.clanWar.view.Map.prototype.update = function() {
    for (var t, e, a, s, i, n, o, r = canvas.app.clanWar.model, c = 1; c <= canvas.app.clanWar.Const.NUM_ISLANDS; c++) {
        for (a = this.lists[c - 1],
        i = new Array,
        o = r.rooms[c].team1.length,
        t = 0; t < o; t++)
            n = r.rooms[c].team1[t],
            0 <= r.myTeamIds.indexOf(parseInt(n.id)) && i.push(n);
        if (a.users = i,
        a.updateView(),
        (e = this.battles[c - 1]).team1 = r.rooms[c].team1,
        e.team2 = r.rooms[c].team2,
        e.update(),
        r.fightStarted) {
            switch (r.roomsStatus[c]) {
            case 0:
                s = "fight",
                a.light(0);
                break;
            case 1:
                s = "victory",
                a.light(1503090);
                break;
            case 2:
                s = "defeat",
                a.light(16711680);
                break;
            default:
                s = "",
                a.light(0)
            }
            a.setIcon(s),
            e.setIcon(s)
        }
        a.back.alpha = .4
    }
    "" != r.dragBaffID || "" != r.dragUserID ? (canvas.EventManager.addEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.mouseMoveHandler, this),
    this.mouseMoveHandler(this.lastMoveEvent)) : canvas.EventManager.removeEventListener(canvas.Event.STAGE_MOUSE_MOVE, null, this.mouseMoveHandler, this)
}
,
canvas.app.clanWar.view.Map.prototype.showBattle = function() {
    var t = canvas.app.clanWar.model;
    this.battleContainer.removeChildren(),
    0 < t.currentRoom ? (this.battles[t.currentRoom - 1].clear(),
    this.battleContainer.addChild(this.battles[t.currentRoom - 1]),
    this.listContainer.visible = !1,
    this.battleContainer.visible = !0,
    this.battleContainer.position.set(Math.round(.5 * (this.background.width - this.battleContainer.width)), 60)) : (this.listContainer.visible = !0,
    this.battleContainer.visible = !1)
}
,
canvas.app.clanWar.view.Map.prototype.mouseMoveHandler = function(t) {
    if (t && !canvas.utils.WindowsManager.instance.haveActiveWindows) {
        this.lastMoveEvent = t;
        for (var e, a = this.lists.length, s = 0; s < a; s++)
            (e = this.lists[s]).back.alpha = e.getBounds().intersectsPoint(new canvas.px.Point(canvas.app.CanvasClanWar.App.renderer.plugins.interaction.mouse.global.x - 10,canvas.app.CanvasClanWar.App.renderer.plugins.interaction.mouse.global.y - 10)) ? .4 : .6
    }
}
,
canvas.app.clanWar.view.ScrollView = function(t) {
    var e = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_arrow"))
      , a = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_arrow"));
    a.scale.y = -1,
    a.pivot = new canvas.px.Point(0,a.height);
    var s = new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "scroll_drag"));
    s.setSize = function() {}
    ;
    var i = new canvas.px.Mask(16,16,0,.5);
    canvas.ui.Scroll.call(this, canvas.ui.ScrollType.VERTICAL, e, a, i, s, t, !1, !0, !0, !0),
    this.padding = 13,
    this.backPadding = 10,
    this.step = 10,
    this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "scroll_uzor"),0)).position.set(-5, -6),
    this.bottomUzor = this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "scroll_uzor"),0)),
    this.bottomUzor.scale.y = -1,
    this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "scroll_arrow_grey"),0)).position.set(5, 0),
    this.bottomArrow = this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "scroll_arrow_grey"),0)),
    this.bottomArrow.scale.y = -1
}
,
canvas.app.clanWar.view.ScrollView.prototype = Object.create(canvas.ui.Scroll.prototype),
canvas.app.clanWar.view.ScrollView.prototype.setSize = function(t, e) {
    canvas.ui.Scroll.prototype.setSize.call(this, t, e),
    this.bottomUzor.position.set(-5, this._height + 6),
    this.bottomArrow.position.set(5, this._height)
}
,
canvas.app.clanWar.view.UserLine = function(t, e, a) {
    canvas.ui.ListRenderer.call(this),
    this.onlyLogin = e || !1,
    this.inReserv = a || !1,
    this.data = t,
    this.setSize(150, 20);
    var s, t = 0;
    this.onlyLogin || (s = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "green_check")),
    this.data.ready && (this.addChild(s),
    s.position.set(t, 4)),
    t += s.width + 3,
    (s = this.addChild(new canvas.ui.SimpleButton(canvas.ResourceLoader.getImage("ui", "red_arrow")))).sprite.name = "private",
    s.position.set(t, 4),
    t += s.width + 3,
    s.enabled = this.data.online),
    (s = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,this.data.online ? 16762368 : 7829104,160,14,"left","top",0,0,!0))).name = "login",
    s.text = this.data.login,
    s.position.set(t, 2),
    s.buttonMode = !0,
    (this.spriteLogin = s).interactive = this.data.online,
    s.alpha = this.data.delayed ? .7 : 1,
    this.spriteLogin.mouseover = this.overHandler.bind(this),
    this.spriteLogin.mouseout = this.outHandler.bind(this),
    this.interactive = !1,
    !this.inReserv && !this.onlyLogin && 0 <= this.data.hp && 0 <= this.data.mp && ((s = this.addChild(new canvas.app.clanWar.view.HpMpProgress(.01 * this.data.hp,.01 * this.data.mp))).position.set(Math.round(t + 2), Math.round(this.spriteLogin.textHeight + 5)),
    this.setSize(150, 30))
}
,
canvas.app.clanWar.view.UserLine.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.clanWar.view.UserLine.prototype.overHandler = function() {
    this.spriteLogin.color = 16777215
}
,
canvas.app.clanWar.view.UserLine.prototype.outHandler = function() {
    this.spriteLogin.color = this.data.online ? 16762368 : 7829104
}
,
canvas.app.clanWar.view.UserLine.prototype.cloneLogin = function() {
    return new canvas.app.clanWar.view.UserLine(this.data,!0)
}
,
canvas.app.clanWar.view.UserLine.prototype.destroy = function() {
    canvas.ui.ListRenderer.prototype.destroy.call(this),
    this.spriteLogin.mouseover = null,
    this.spriteLogin.mouseout = null
}
,
canvas.app.clanWar.view.UserListTitleRenderer = function(t) {
    canvas.ui.ListRenderer.call(this),
    this.field = this.addChild(new canvas.ui.HtmlText(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16762368,150,20,"left")),
    this.field.text = "<a href='#'>" + t + "</a>",
    this.field.position.set(17, 0),
    this.setSize(150, 20),
    this.interactiveChildren = !1
}
,
canvas.app.clanWar.view.UserListTitleRenderer.prototype = Object.create(canvas.ui.ListRenderer.prototype),
canvas.app.clanWar.view.UsersList = function(t, e) {
    this._enabled = !0,
    Object.defineProperty(this, "enabled", {
        get: function() {
            return this._enabled
        },
        set: function(t) {
            this._enabled = t,
            this.interactiveChildren = this._enabled,
            this.alpha = this._enabled ? 1 : .7
        }
    }),
    canvas.ui.List.call(this, canvas.ui.ListType.VERTICAL, 1),
    this._paddingV = -5,
    this.isReserv = !1,
    this.isReserv = null != e && e,
    this.backName = this.isReserv ? "list_back_1" : "list_back_2",
    this.back = this.addChildAt(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", this.backName)), 0),
    this.back.alpha = .4,
    this.back.name = t,
    this.w = this.back.width - 40,
    this.h = this.back.height,
    this.setSize(this.w, this.h - 40),
    this.titleField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD_STROKE,16769442,100,20,this.isReserv ? "center" : "left")),
    this.titleField.position.set(this.isReserv ? 0 : 40, 7),
    this.scroll = new canvas.app.clanWar.view.ScrollView(this),
    this.scroll.setSize(20, this._height),
    this.mainContainer.position.set(0, this.isReserv ? 30 : 34),
    this.currentIcon = this.addChild(new canvas.ui.SimpleButton(canvas.px.TextureEmpty)),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.currentIcon, this.clickHandler, this)
}
,
canvas.app.clanWar.view.UsersList.prototype = Object.create(canvas.ui.List.prototype),
canvas.app.clanWar.view.UsersList.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.clanWar.Event.SHOW_BATTLE, null, this.back.name)
}
,
canvas.app.clanWar.view.UsersList.prototype.setIcon = function(t) {
    this.currentIcon.sprite.texture = this.currentIcon.baseTexture = t ? canvas.ResourceLoader.getImage("ui", "icon_" + t) : canvas.px.TextureEmpty
}
,
canvas.app.clanWar.view.UsersList.prototype.light = function(t) {
    switch (t) {
    case 1503090:
        this.back.texture = canvas.ResourceLoader.getImage("ui", this.backName + "_green");
        break;
    case 16711680:
        this.back.texture = canvas.ResourceLoader.getImage("ui", this.backName + "_red");
        break;
    default:
        this.back.texture = canvas.ResourceLoader.getImage("ui", this.backName)
    }
}
,
canvas.app.clanWar.view.UsersList.prototype.updateView = function() {
    var t, e = canvas.app.clanWar.model;
    this.titleField.text = this.title,
    this.titleField.setSize(this.w),
    this.clear(!1);
    var a = !1;
    this.h;
    this.users.sort(this.sortByTitle);
    var s = 0 < this.users.length && this.users[0].voivoda;
    s && this.add(new canvas.app.clanWar.view.UserListTitleRenderer(canvas.Translator.getText(316)), !1);
    for (var i = this.users.length, n = 0; n < i; n++)
        t = this.users[n],
        s && !t.voivoda && (s = !1,
        this.add(new canvas.app.clanWar.view.UserListTitleRenderer(canvas.Translator.getText(307)), !1)),
        !this.isReserv && e.fightStarted && (t.ready = !1),
        this.add(new canvas.app.clanWar.view.UserLine(t,!1,this.isReserv), !1),
        t.ready && (a = !0);
    this.container.x = a ? 10 : -5,
    this.scroll && this.scroll.parent ? this._width = this.w : this._width = this.w + 36,
    this.update()
}
,
canvas.app.clanWar.view.UsersList.prototype.update = function() {
    canvas.ui.List.prototype.update.call(this),
    this.scroll && this.scroll.position.set(this.back.width - 30, this.mainContainer.y)
}
,
canvas.app.clanWar.view.UsersList.prototype.sortByTitle = function(t, e) {
    return t.voivoda != e.voivoda ? t.voivoda ? -1 : 1 : t.login > e.login ? 1 : t.login < e.login ? -1 : 0
}
,
canvas.app.barber.Barber = function(t, e) {
    canvas.px.Container.call(this),
    this.model = new canvas.app.barber.Model(t);
    t = 0;
    this.model.withoutGender || (this.createLine("bb9", "bb10", 291, t),
    t += 26),
    this.createLine("bb7", "bb8", 291, t),
    t += 26,
    this.createLine("bb3", "bb4", 291, t),
    t += 26,
    this.createLine("bb1", "bb2", 291, t),
    t += 26,
    this.createLine("bb5", "bb6", 291, t),
    t += 26,
    this.randomButton = this.addChild(new canvas.app.view.OldButton(9722697)),
    this.randomButton.setTitle(canvas.Translator.getText(3026)),
    this.randomButton.position.set(258, t),
    this.randomButton.setSize(200),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.randomButton, this.randomClickHandler, this),
    this.playersContainer = this.addChild(new canvas.px.Container),
    this.playersContainer.position.set(30, -5),
    this.playerM = new canvas.animation.SkeletonInfo(canvas.Config.skPath + "M/sk01_UI",new canvas.px.Point(70,180),this),
    this.playerF = new canvas.animation.SkeletonInfo(canvas.Config.skPath + "F/sk01_UI",new canvas.px.Point(70,180),this),
    this.playerM.frameEvent = canvas.app.barber.Event.ENTER_FRAME,
    this.playerF.frameEvent = canvas.app.barber.Event.ENTER_FRAME,
    this.playerM.loop = !0,
    this.playerF.loop = !0,
    e && (e.action_bb1 = this.bb1Action.bind(this),
    e.action_bb2 = this.bb2Action.bind(this),
    e.action_bb3 = this.bb3Action.bind(this),
    e.action_bb4 = this.bb4Action.bind(this),
    e.action_bb5 = this.bb5Action.bind(this),
    e.action_bb6 = this.bb6Action.bind(this),
    e.action_bb7 = this.bb7Action.bind(this),
    e.action_bb8 = this.bb8Action.bind(this),
    e.action_bb9 = this.bb9Action.bind(this),
    e.action_bb10 = this.bb10Action.bind(this),
    e.action_bb11 = this.bb11Action.bind(this),
    e.action_bb12 = this.bb12Action.bind(this),
    e.action_randomBtn = this.randomClickHandler.bind(this)),
    this.interactive = !0,
    this.click = this.clickHandler.bind(this),
    this.bigChange(),
    this.refreshPlayer(!0)
}
,
canvas.app.barber.Barber.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.barber.Barber.prototype.createLine = function(t, e, a, s) {
    var i = this.addChild(new canvas.px.Container)
      , n = i.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_red"),canvas.ResourceLoader.getImage("ui", "arrow_yellow")));
    n.scale.x = -1,
    n.name = t,
    (n = i.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_red"),canvas.ResourceLoader.getImage("ui", "arrow_yellow")))).name = e,
    n.x = 129,
    i.position.set(a, s)
}
,
canvas.app.barber.Barber.prototype.randomClickHandler = function() {
    var t = this.model;
    t.myHairColorVal[t.myRaceVal] = t.myHairColorAr[t.myRaceVal][Math.floor(Math.random() * t.myHairColorAr[t.myRaceVal].length)],
    t.parts[3] = t.myHairColorVal[t.myRaceVal],
    t.myBodyColorVal[t.myRaceVal] = t.myBodyColorAr[t.myRaceVal][Math.floor(Math.random() * t.myBodyColorAr[t.myRaceVal].length)];
    for (var e = 7; e < 90; e += 6)
        t.parts[e] = t.myBodyColorVal[t.myRaceVal];
    t.parts[1] = t.myBodyColorVal[t.myRaceVal],
    t.myHairPaksVal[t.mySexVal][t.myRaceVal] = t.myHairPaksAr[t.mySexVal][t.myRaceVal][Math.floor(Math.random() * t.myHairPaksAr[t.mySexVal][t.myRaceVal].length)],
    t.parts[2] = t.myHairPaksVal[t.mySexVal][t.myRaceVal],
    t.myHeadPaksVal[t.mySexVal][t.myRaceVal] = t.myHeadPaksAr[t.mySexVal][t.myRaceVal][Math.floor(Math.random() * t.myHeadPaksAr[t.mySexVal][t.myRaceVal].length)],
    t.parts[0] = t.myHeadPaksVal[t.mySexVal][t.myRaceVal],
    this.refreshPlayer()
}
,
canvas.app.barber.Barber.prototype.clickHandler = function(t) {
    if (t.target && t.target.parent && t.target.parent.name)
        switch (t.target.parent.name) {
        case "bb1":
            this.bb1Action();
            break;
        case "bb2":
            this.bb2Action();
            break;
        case "bb3":
            this.bb3Action();
            break;
        case "bb4":
            this.bb4Action();
            break;
        case "bb5":
            this.bb5Action();
            break;
        case "bb6":
            this.bb6Action();
            break;
        case "bb7":
            this.bb7Action();
            break;
        case "bb8":
            this.bb8Action();
            break;
        case "bb9":
            this.bb9Action();
            break;
        case "bb10":
            this.bb10Action();
            break;
        case "bb11":
            this.bb11Action();
            break;
        case "bb12":
            this.bb12Action()
        }
}
,
canvas.app.barber.Barber.prototype.bb1Action = function() {
    var t = this.model;
    "0" != t.myHairPaksVal[t.mySexVal][t.myRaceVal] && (0 == t.myHairColorIndex[t.myRaceVal] && (t.myHairColorIndex[t.myRaceVal] = t.myHairColorAr[t.myRaceVal].length),
    t.myHairColorIndex[t.myRaceVal]--,
    t.myHairColorVal[t.myRaceVal] = t.myHairColorAr[t.myRaceVal][t.myHairColorIndex[t.myRaceVal]],
    t.parts[3] = t.myHairColorVal[t.myRaceVal],
    this.refreshPlayer())
}
,
canvas.app.barber.Barber.prototype.bb2Action = function() {
    var t = this.model;
    "0" != t.myHairPaksVal[t.mySexVal][t.myRaceVal] && (t.myHairColorIndex[t.myRaceVal] == t.myHairColorAr[t.myRaceVal].length - 1 && (t.myHairColorIndex[t.myRaceVal] = -1),
    t.myHairColorIndex[t.myRaceVal]++,
    t.myHairColorVal[t.myRaceVal] = t.myHairColorAr[t.myRaceVal][t.myHairColorIndex[t.myRaceVal]],
    t.parts[3] = t.myHairColorVal[t.myRaceVal],
    this.refreshPlayer())
}
,
canvas.app.barber.Barber.prototype.bb3Action = function() {
    var t = this.model;
    0 == t.myBodyColorIndex[t.myRaceVal] && (t.myBodyColorIndex[t.myRaceVal] = t.myBodyColorAr[t.myRaceVal].length),
    t.myBodyColorIndex[t.myRaceVal]--,
    t.myBodyColorVal[t.myRaceVal] = t.myBodyColorAr[t.myRaceVal][t.myBodyColorIndex[t.myRaceVal]];
    for (var e = 7; e < 90; e += 6)
        t.parts[e] = t.myBodyColorVal[t.myRaceVal];
    t.parts[1] = t.myBodyColorVal[t.myRaceVal],
    this.refreshPlayer()
}
,
canvas.app.barber.Barber.prototype.bb4Action = function() {
    var t = this.model;
    t.myBodyColorIndex[t.myRaceVal] == t.myBodyColorAr[t.myRaceVal].length && (t.myBodyColorIndex[t.myRaceVal] = 0),
    t.myBodyColorIndex[t.myRaceVal]++,
    t.myBodyColorVal[t.myRaceVal] = t.myBodyColorAr[t.myRaceVal][t.myBodyColorIndex[t.myRaceVal]];
    for (var e = 7; e < 90; e += 6)
        t.parts[e] = t.myBodyColorVal[t.myRaceVal];
    t.parts[1] = t.myBodyColorVal[t.myRaceVal],
    this.refreshPlayer()
}
,
canvas.app.barber.Barber.prototype.bb5Action = function() {
    var t = this.model;
    0 == t.myHairPaksIndex[t.mySexVal][t.myRaceVal] && (t.myHairPaksIndex[t.mySexVal][t.myRaceVal] = t.myHairPaksAr[t.mySexVal][t.myRaceVal].length),
    t.myHairPaksIndex[t.mySexVal][t.myRaceVal]--,
    t.myHairPaksVal[t.mySexVal][t.myRaceVal] = t.myHairPaksAr[t.mySexVal][t.myRaceVal][t.myHairPaksIndex[t.mySexVal][t.myRaceVal]],
    t.parts[2] = t.myHairPaksVal[t.mySexVal][t.myRaceVal],
    this.refreshPlayer()
}
,
canvas.app.barber.Barber.prototype.bb6Action = function() {
    var t = this.model;
    t.myHairPaksIndex[t.mySexVal][t.myRaceVal] == t.myHairPaksAr[t.mySexVal][t.myRaceVal].length - 1 && (t.myHairPaksIndex[t.mySexVal][t.myRaceVal] = -1),
    t.myHairPaksIndex[t.mySexVal][t.myRaceVal]++,
    t.myHairPaksVal[t.mySexVal][t.myRaceVal] = t.myHairPaksAr[t.mySexVal][t.myRaceVal][t.myHairPaksIndex[t.mySexVal][t.myRaceVal]],
    t.parts[2] = t.myHairPaksVal[t.mySexVal][t.myRaceVal],
    this.refreshPlayer()
}
,
canvas.app.barber.Barber.prototype.bb7Action = function() {
    var t = this.model;
    0 == t.myHeadPaksIndex[t.mySexVal][t.myRaceVal] && (t.myHeadPaksIndex[t.mySexVal][t.myRaceVal] = t.myHeadPaksAr[t.mySexVal][t.myRaceVal].length),
    t.myHeadPaksIndex[t.mySexVal][t.myRaceVal]--,
    t.myHeadPaksVal[t.mySexVal][t.myRaceVal] = t.myHeadPaksAr[t.mySexVal][t.myRaceVal][t.myHeadPaksIndex[t.mySexVal][t.myRaceVal]],
    t.parts[0] = t.myHeadPaksVal[t.mySexVal][t.myRaceVal],
    this.refreshPlayer()
}
,
canvas.app.barber.Barber.prototype.bb8Action = function() {
    var t = this.model;
    t.myHeadPaksIndex[t.mySexVal][t.myRaceVal] == t.myHeadPaksAr[t.mySexVal][t.myRaceVal].length - 1 && (t.myHeadPaksIndex[t.mySexVal][t.myRaceVal] = -1),
    t.myHeadPaksIndex[t.mySexVal][t.myRaceVal]++,
    t.myHeadPaksVal[t.mySexVal][t.myRaceVal] = t.myHeadPaksAr[t.mySexVal][t.myRaceVal][t.myHeadPaksIndex[t.mySexVal][t.myRaceVal]],
    t.parts[0] = t.myHeadPaksVal[t.mySexVal][t.myRaceVal],
    this.refreshPlayer()
}
,
canvas.app.barber.Barber.prototype.bb9Action = function() {
    var t = this.model;
    0 == t.mySexIndex && (t.mySexIndex = t.mySexAr.length),
    t.mySexIndex--,
    t.mySexVal = t.mySexAr[t.mySexIndex],
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.GENDER_CHANGE, null, t.mySexVal),
    this.bigChange(),
    this.refreshPlayer(!0)
}
,
canvas.app.barber.Barber.prototype.bb10Action = function() {
    var t = this.model;
    t.mySexIndex == t.mySexAr.length - 1 && (t.mySexIndex = -1),
    t.mySexIndex++,
    t.mySexVal = t.mySexAr[t.mySexIndex],
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.GENDER_CHANGE, null, t.mySexVal),
    this.bigChange(),
    this.refreshPlayer(!0)
}
,
canvas.app.barber.Barber.prototype.bb11Action = function() {
    var t = this.model;
    0 != t.myRaceIndex && (t.myRaceIndex = 0,
    t.myRaceVal = t.myRaceAr[0],
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.RACE_CHANGE, null, t.myRaceVal),
    this.bigChange(),
    this.refreshPlayer())
}
,
canvas.app.barber.Barber.prototype.bb12Action = function() {
    var t = this.model;
    1 != t.myRaceIndex && (t.myRaceIndex = 1,
    t.myRaceVal = t.myRaceAr[1],
    canvas.EventManager.dispatchEvent(canvas.app.barber.Event.RACE_CHANGE, null, t.myRaceVal),
    this.bigChange(),
    this.refreshPlayer())
}
,
canvas.app.barber.Barber.prototype.refreshPlayer = function(t) {
    var e, a = this.model;
    a.flag ? a.dontSendUpdate || persUpdate(a.mySexVal, a.myRaceVal, a.myHeadPaksVal[a.mySexVal][a.myRaceVal], a.myHairPaksVal[a.mySexVal][a.myRaceVal], a.myBodyPaksAr[a.mySexVal][a.myRaceVal], a.myHairColorVal[a.myRaceVal], a.myBodyColorVal[a.myRaceVal]) : a.flag = !0,
    t ? (e = "M" == a.mySexAr2[a.mySexIndex] ? this.playerM : this.playerF).parent || (0 < this.playersContainer.numChildren && this.playersContainer.removeChildAt(0).stop(),
    this.playersContainer.addChild(e),
    e.play()) : e = this.playersContainer.getChildAt(0),
    e.skeletonData = new canvas.data.battle.SkeletonData(a.getUIParts(),a.mySexAr2[a.mySexIndex])
}
,
canvas.app.barber.Barber.prototype.bigChange = function() {
    var t, e = this.model;
    for (e.parts[3] = e.myHairColorVal[e.myRaceVal],
    t = 7; t < 90; t += 6)
        e.parts[t] = e.myBodyColorVal[e.myRaceVal];
    for (e.parts[1] = e.myBodyColorVal[e.myRaceVal],
    e.parts[0] = e.myHeadPaksVal[e.mySexVal][e.myRaceVal],
    e.parts[2] = e.myHairPaksVal[e.mySexVal][e.myRaceVal],
    t = 6; t < 90; t += 6)
        e.parts[t] = e.myBodyPaksAr[e.mySexVal][e.myRaceVal]
}
,
canvas.app.barber.Event = {
    ENTER_FRAME: "Barber.ENTER_FRAME",
    RACE_CHANGE: "Barber.RACE_CHANGE",
    GENDER_CHANGE: "Barber.GENDER_CHANGE"
},
canvas.app.barber.Model = function(t) {
    var e;
    if (this.kindBonus = 0,
    this.parts = [],
    this.mySexVal = "1",
    this.mySexIndex = 0,
    this.mySexAr = ["1", "2"],
    this.mySexAr2 = ["M", "F"],
    this.myRaceAr = ["1", "2"],
    this.myRaceVal = "1",
    this.myRaceIndex = 0,
    this.myBodyColorAr = [],
    this.myBodyColorVal = [],
    this.myBodyColorIndex = [],
    this.myHairColorAr = [],
    this.myHairColorVal = [],
    this.myHairColorIndex = [],
    this.myHeadPaksAr = [],
    this.myHeadPaksVal = [],
    this.myHeadPaksIndex = [],
    this.myHairPaksAr = [],
    this.myHairPaksVal = [],
    this.myHairPaksIndex = [],
    this.myBodyPaksAr = [],
    this.flag = !1,
    this.dontSendUpdate = !1,
    this.ok(t.kind_bonus) && (this.kindBonus = parseInt(t.kind_bonus)),
    this.ok(t.withoutGender) && (this.withoutGender = "1" == t.withoutGender),
    this.ok(t.dontSendUpdate) && (this.dontSendUpdate = "1" == t.dontSendUpdate),
    this.parts.push(5, 0, 6, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(1, 0, 0, 0, 0, 0),
    this.parts.push(0, 0, 0, 0, 0, 0),
    this.parts.push(0, 0, 0, 0, 0, 0),
    this.parts.push(0, 0, 0, 0, 0, 0),
    this.ok(t.hairCol) && (this.parts[3] = t.hairCol),
    this.ok(t.bodyCol)) {
        for (e = 7; e < 78; e += 6)
            this.parts[e] = t.bodyCol;
        this.parts[1] = t.bodyCol
    }
    var a = (this.ok(t.cfg) ? t.cfg : "1,1,5,30,1,11,0").split(",");
    "1" == a[0] ? (this.mySexVal = "1",
    this.mySexIndex = 0) : "2" == a[0] && (this.mySexVal = "2",
    this.mySexIndex = 1),
    "1" == a[1] ? (this.myRaceVal = "1",
    this.myRaceIndex = 0) : "2" == a[1] && (this.myRaceVal = "2",
    this.myRaceIndex = 1);
    var s = this.ok(t.cbodyH) ? t.cbodyH : "0:1:2:3:4:5"
      , i = this.ok(t.cbodyM) ? t.cbodyM : "0:6:7:8:9:10"
      , n = this.ok(t.chairH) ? t.chairH : "11:12:13:14:15"
      , o = this.ok(t.chairM) ? t.chairM : "16:17:18:19:20";
    for (this.myBodyColorAr[1] = s.split(":"),
    this.myBodyColorVal[1] = this.myBodyColorAr[1][0],
    this.myBodyColorIndex[1] = 0,
    this.myBodyColorAr[2] = i.split(":"),
    this.myBodyColorVal[2] = this.myBodyColorAr[2][0],
    this.myBodyColorIndex[2] = 0,
    this.myBodyColorVal[this.myRaceVal] = a[6],
    this.myBodyColorIndex[this.myRaceVal] = this.getIndex(this.myBodyColorAr[this.myRaceVal], a[6]),
    e = 7; e < 90; e += 6)
        this.parts[e] = this.myBodyColorVal[this.myRaceVal];
    this.parts[1] = this.myBodyColorVal[this.myRaceVal],
    this.myHairColorAr[1] = n.split(":"),
    this.myHairColorVal[1] = this.myHairColorAr[1][0],
    this.myHairColorIndex[1] = 0,
    this.myHairColorAr[2] = o.split(":"),
    this.myHairColorVal[2] = this.myHairColorAr[2][0],
    this.myHairColorIndex[2] = 0,
    this.myHairColorVal[this.myRaceVal] = a[5],
    this.myHairColorIndex[this.myRaceVal] = this.getIndex(this.myHairColorAr[this.myRaceVal], a[5]),
    this.parts[3] = this.myHairColorVal[this.myRaceVal];
    var r = this.ok(t.phead11) ? t.phead11 : "5:6:13:14:15"
      , c = this.ok(t.phead12) ? t.phead12 : "505:506:507:508:509"
      , p = this.ok(t.phead21) ? t.phead21 : "5:6:13:14:15"
      , h = this.ok(t.phead22) ? t.phead22 : "505:506:507:508:509"
      , l = this.ok(t.phair11) ? t.phair11 : "30:31:32:33:34:0"
      , d = this.ok(t.phair12) ? t.phair12 : "530:531:532:533:534:0"
      , v = this.ok(t.phair21) ? t.phair21 : "30:31:32:33:34"
      , u = this.ok(t.phair22) ? t.phair22 : "530:531:532:533"
      , s = this.ok(t.pbody11) ? t.pbody11 : "1"
      , i = this.ok(t.pbody12) ? t.pbody12 : "501"
      , n = this.ok(t.pbody21) ? t.pbody21 : "1"
      , o = this.ok(t.pbody22) ? t.pbody22 : "501";
    this.myHeadPaksAr[1] = [],
    this.myHeadPaksAr[1][1] = r.split(":"),
    this.myHeadPaksAr[1][2] = c.split(":"),
    this.myHeadPaksVal[1] = [],
    this.myHeadPaksVal[1][1] = this.myHeadPaksAr[1][1][0],
    this.myHeadPaksVal[1][2] = this.myHeadPaksAr[1][2][0],
    this.myHeadPaksIndex[1] = [],
    this.myHeadPaksIndex[1][1] = 0,
    this.myHeadPaksIndex[1][2] = 0,
    this.myHeadPaksAr[2] = [],
    this.myHeadPaksAr[2][1] = p.split(":"),
    this.myHeadPaksAr[2][2] = h.split(":"),
    this.myHeadPaksVal[2] = [],
    this.myHeadPaksVal[2][1] = this.myHeadPaksAr[2][1][0],
    this.myHeadPaksVal[2][2] = this.myHeadPaksAr[2][2][0],
    this.myHeadPaksIndex[2] = [],
    this.myHeadPaksIndex[2][1] = 0,
    this.myHeadPaksIndex[2][2] = 0,
    this.myHeadPaksVal[this.mySexVal][this.myRaceVal] = a[2],
    this.myHeadPaksIndex[this.mySexVal][this.myRaceVal] = this.getIndex(this.myHeadPaksAr[this.mySexVal][this.myRaceVal], a[2]),
    this.myHairPaksAr[1] = [],
    this.myHairPaksAr[1][1] = l.split(":"),
    this.myHairPaksAr[1][2] = d.split(":"),
    this.myHairPaksVal[1] = [],
    this.myHairPaksVal[1][1] = this.myHairPaksAr[1][1][0],
    this.myHairPaksVal[1][2] = this.myHairPaksAr[1][2][0],
    this.myHairPaksIndex[1] = [],
    this.myHairPaksIndex[1][1] = 0,
    this.myHairPaksIndex[1][2] = 0,
    this.myHairPaksAr[2] = [],
    this.myHairPaksAr[2][1] = v.split(":"),
    this.myHairPaksAr[2][2] = u.split(":"),
    this.myHairPaksVal[2] = [],
    this.myHairPaksVal[2][1] = this.myHairPaksAr[2][1][0],
    this.myHairPaksVal[2][2] = this.myHairPaksAr[2][2][0],
    this.myHairPaksIndex[2] = [],
    this.myHairPaksIndex[2][1] = 0,
    this.myHairPaksIndex[2][2] = 0,
    this.myHairPaksVal[this.mySexVal][this.myRaceVal] = a[3],
    this.myHairPaksIndex[this.mySexVal][this.myRaceVal] = this.getIndex(this.myHairPaksAr[this.mySexVal][this.myRaceVal], a[3]),
    this.myBodyPaksAr[1] = [],
    this.myBodyPaksAr[1][1] = s,
    this.myBodyPaksAr[1][2] = i,
    this.myBodyPaksAr[2] = [],
    this.myBodyPaksAr[2][1] = n,
    this.myBodyPaksAr[2][2] = o
}
,
canvas.app.barber.Model.prototype.getIndex = function(t, e) {
    for (var a = t.length, s = 0; s < a; s++)
        if (t[s] == e)
            return s;
    return 0
}
,
canvas.app.barber.Model.prototype.ok = function(t) {
    return null != t
}
,
canvas.app.barber.Model.prototype.getUIParts = function() {
    for (var t = this.parts.length, e = "", a = 0; a < t; a += 2)
        e += ("" == e ? "" : ",") + String(this.parts[a] | this.parts[a + 1] << 16) + ";;;",
        4 == a && (e += ",0;;;,0;;;,0;;;");
    return e
}
,
canvas.app.mem.Event = {
    ENTER_FRAME: "Mem.ENTER_FRAME",
    HINT_ADD: "Mem.HINT_ADD",
    HINT_REMOVE: "Mem.HINT_REMOVE",
    TOGGLE_BUTTON_CLICK: "Mem.TOGGLE_BUTTON_CLICK",
    INPUT: "Mem.INPUT",
    PERS_SELECT: "Mem.PERS_SELECT",
    UPDATE_VISIBLE_IDS: "Mem.UPDATE_VISIBLE_IDS",
    GET_EFFECTS: "Mem.GET_EFFECTS",
    WATCH_SELECT: "Mem.WATCH_SELECT"
},
canvas.app.mem.Main = function(t, e) {
    this.model = t,
    this.view = new canvas.app.mem.View(e),
    this.fullReqInterval = setInterval(this.fullReqFunc.bind(this), 2e3),
    this.fullReqFunc(),
    canvas.EventManager.addEventListener(canvas.app.mem.Event.PERS_SELECT, null, this.persSelectHandler, this),
    canvas.EventManager.addEventListener(canvas.app.mem.Event.UPDATE_VISIBLE_IDS, null, this.updateVisibleIdsHandler, this),
    canvas.EventManager.addEventListener(canvas.app.mem.Event.GET_EFFECTS, null, this.getEffectsHandler, this),
    canvas.EventManager.addEventListener(canvas.app.mem.Event.WATCH_SELECT, null, this.watchSelectHandler, this),
    canvas.EventManager.addEventListener(canvas.app.mem.Event.TOGGLE_BUTTON_CLICK, this.view.leftButton, this.toggleDeadHandler, this),
    canvas.EventManager.addEventListener(canvas.app.mem.Event.TOGGLE_BUTTON_CLICK, this.view.rightButton, this.toggleHPMPHandler, this),
    canvas.EventManager.addEventListener(canvas.app.mem.Event.INPUT, this.view.input, this.inputHandler, this)
}
,
canvas.app.mem.Main.prototype.resize = function() {
    this.view.resize()
}
,
canvas.app.mem.Main.prototype.persSelectHandler = function(t) {
    this.model.selectedPers = t.params,
    this.model.selectedPers && this.getEffects(),
    this.view.update()
}
,
canvas.app.mem.Main.prototype.swfData = function(t, e) {
    var a = e.split("@");
    if (2 == a.length) {
        switch (a[0]) {
        case "stopReq":
            clearInterval(this.fullReqInterval);
            break;
        case "pak1":
            this.model.persCreate(a[1]);
            break;
        case "pak1s":
            "done" != a[1] ? this.model.persCreateUnparsedBuffer += a[1] : (this.model.persCreate(this.model.persCreateUnparsedBuffer),
            this.model.persCreateUnparsedBuffer = "");
            break;
        case "pak2":
            this.model.persUpdate(a[1]);
            break;
        case "pak2s":
            "done" != a[1] ? this.model.persUpdateUnparsedBuffer += a[1] : (this.model.persUpdate(this.model.persUpdateUnparsedBuffer),
            this.model.persUpdateUnparsedBuffer = "");
            break;
        case "pers_bafs":
            this.model.parseEffects(a[1]);
            break;
        case "watchFightActive":
            this.model.parseWatchFight(a[1]);
            break;
        case "dead_cnt":
            this.model.parseDeadCount(a[1]);
            break;
        case "opp_id":
            this.model.setOppId(parseInt(a[1]));
            break;
        case "pers_focus":
            return void (a[1] && "0" != a[1] ? (this.persSelectHandler({
                params: parseInt(a[1])
            }),
            this.model.autoScrollToSelected = !0) : this.persSelectHandler({
                params: 0
            }));
        default:
            canvas.app.mem.log('WARN: unhandled event "' + a[0] + '"', 16711680)
        }
        this.view.update()
    }
}
,
canvas.app.mem.Main.prototype.sendData = function(t, e) {
    "undefined" != typeof swfTransfer && swfTransfer("game", t, e)
}
,
canvas.app.mem.Main.prototype.getEffects = function() {
    this.effectsReqInterval && clearInterval(this.effectsReqInterval),
    this.effectsReqInterval = setInterval(this.effectsReqFunc.bind(this), 2500),
    this.effectsReqFunc(!0)
}
,
canvas.app.mem.Main.prototype.effectsReqFunc = function(t) {
    (t || this.model.selectedPers) && (this.model.persById[this.model.selectedPers] ? this.sendData("game", "persFocus@" + String(this.model.selectedPers)) : this.model.resetEffects())
}
,
canvas.app.mem.Main.prototype.fullReqFunc = function() {
    this.sendData("game", "FullReq@null")
}
,
canvas.app.mem.Main.prototype.toggleDeadHandler = function(t) {
    this.model.deadHidded = !t.params,
    this.view.update()
}
,
canvas.app.mem.Main.prototype.toggleHPMPHandler = function(t) {
    this.model.showHPMP = t.params;
    t = this.model.showHPMP ? 1 : 0;
    this.sendData("game", "showHPMP@" + t),
    this.view.persList.updateBarsVisible()
}
,
canvas.app.mem.Main.prototype.inputHandler = function(t) {
    this.model.filterText = t.params,
    this.view.update()
}
,
canvas.app.mem.Main.prototype.updateVisibleIdsHandler = function(t) {
    this.model.visibleIds != t.params && (this.model.visibleIds = t.params,
    this.sendData("game", "persVisible@" + this.model.visibleIds))
}
,
canvas.app.mem.Main.prototype.getEffectsHandler = function(t) {
    this.getEffects()
}
,
canvas.app.mem.Main.prototype.watchSelectHandler = function(t) {
    this.model.watchId = t.params,
    this.view.update(),
    this.sendData("game", "watchFightPID@" + this.model.watchId)
}
,
canvas.app.mem.Model = function(t) {
    this._deadHidded = !1,
    Object.defineProperty(this, "deadHidded", {
        get: function() {
            return this._deadHidded
        },
        set: function(t) {
            this._deadHidded = t,
            this.localStorage.set("deadHidded", t)
        }
    }),
    this._showHPMP = !0,
    Object.defineProperty(this, "showHPMP", {
        get: function() {
            return this._showHPMP
        },
        set: function(t) {
            this._showHPMP = t,
            this.localStorage.set("showHPMP", t)
        }
    }),
    this._selectedPers = 0,
    Object.defineProperty(this, "selectedPers", {
        get: function() {
            return this._selectedPers
        },
        set: function(t) {
            this._selectedPers != t && (this._selectedPers = t,
            this.effectsWasChanged = !0,
            this.resetEffects())
        }
    }),
    this.localStorage = new canvas.utils.LocalStorage(canvas.Log.MEM),
    null != this.localStorage.get("deadHidded") && (this._deadHidded = "true" == this.localStorage.get("deadHidded")),
    null != this.localStorage.get("showHPMP") && (this._showHPMP = "true" == this.localStorage.get("showHPMP")),
    this.invisibleInfoUrl = t.invisible_info_url || "",
    this.fightFlags = t.fight_flags ? parseInt(t.fight_flags) : 0,
    this.fightServerId = t.fight_server_id || 0,
    this.team1serverUrl = t.team1_server_url || "",
    this.team2serverUrl = t.team2_server_url || "",
    this.persList = [[], []],
    this.persById = {},
    this.oppId = 0,
    this.myId = 0,
    this.myTeam = 1,
    this.deadCount = [0, 0],
    this.userCount = [0, 0],
    this.effects = [],
    this.effectsDeltaTime = 0,
    this.persCreateUnparsedBuffer = "",
    this.persUpdateUnparsedBuffer = "",
    this.effectsWasChanged = !0,
    this.autoScrollToSelected = !1,
    this.filterText = "",
    this.visibleIds = "",
    this.watchEnabled = !1,
    this.watchTeam = 0,
    this.watchId = 0
}
,
canvas.app.mem.Model.prototype.setOppId = function(t) {
    var e, a;
    for (a in this.persById)
        (e = this.persById[a]).id != t && e.id != this.oppId || (e.wasChanged = !0);
    this.oppId = t
}
,
canvas.app.mem.Model.prototype.persCreate = function(t) {
    var e, a, s = t.split(String.fromCharCode(2)), i = s.length;
    this.myId = parseInt(s[i - 1]);
    for (var n = 0; n < i - 1; n++)
        e = s[n].split(String.fromCharCode(1)),
        this.persById[parseInt(e[0])] ? canvas.app.mem.log("Warning: pers id=" + e[0] + " already exists in list", 6710886) : ((a = new canvas.data.battle.PersData).id = parseInt(e[0]),
        a.nick = e[1],
        a.team = parseInt(e[2]),
        a.team < 1 || 2 < a.team || (a.status = parseInt(e[3]),
        a.setRatios(parseInt(e[4]), parseInt(e[5]), parseInt(e[6]), parseInt(e[7])),
        a.clanImage = e[8],
        a.level = parseInt(e[9]),
        a.isBot = "false" != e[10],
        a.flags = parseInt(e[11]),
        a.fightId = parseInt(e[12]),
        a.isShadow = "false" != e[13],
        this.myId == a.id && (this.myTeam = a.team),
        this.persById[a.id] = a,
        this.persList[a.team - 1].push(a),
        a.isBot || this.userCount[a.team - 1]++))
}
,
canvas.app.mem.Model.prototype.persUpdate = function(t) {
    for (var e, a, s = t.split(String.fromCharCode(2)), i = s.length, n = 0; n < i; n++)
        e = s[n].split(String.fromCharCode(1)),
        (a = this.persById[parseInt(e[0])]) && (a.status = parseInt(e[1]),
        a.setRatios(parseInt(e[2]), parseInt(e[3]), parseInt(e[4]), parseInt(e[5])),
        a.flags = parseInt(e[6]))
}
,
canvas.app.mem.Model.prototype.parseDeadCount = function(t) {
    t = t.split(",");
    this.deadCount[0] = parseInt(t[0]),
    this.deadCount[1] = parseInt(t[1])
}
,
canvas.app.mem.Model.prototype.resetEffects = function() {
    this.effects = []
}
,
canvas.app.mem.Model.prototype.parseEffects = function(t) {
    var e = this.effects;
    if (this.resetEffects(),
    this.selectedPers) {
        var a = t.split("|");
        if (parseInt(a.shift()) == this.selectedPers) {
            this.effectsDeltaTime = parseInt(a.shift());
            for (var s, i = {}, n = 0; n < a.length; n++)
                a[n] && (s = a[n].split(";"),
                i[(s = new canvas.data.battle.EffectInfoData(parseInt(s[0]),s[1],parseInt(s[2]),s[3],parseInt(s[4]),parseInt(s[5]))).id] ? i[s.id].add(s) : (this.effects.push(s),
                i[s.id] = s));
            if (!this.effectsWasChanged)
                if (this.effects.length != e.length)
                    this.effectsWasChanged = !0;
                else
                    for (n = 0; n < this.effects.length; n++)
                        if (!e[n] || !e[n].equals(this.effects[n])) {
                            this.effectsWasChanged = !0;
                            break
                        }
        }
    }
}
,
canvas.app.mem.Model.prototype.parseWatchFight = function(t) {
    t = t.split(String.fromCharCode(1));
    this.watchEnabled = "false" != t[0],
    this.watchTeam = parseInt(t[1]),
    this.watchId = this.watchEnabled ? t[2] ? parseInt(t[2]) : this.watchId : this.myId
}
,
canvas.app.mem.View = function(t) {
    this.root = $(t),
    this.border = $(document.createElement("div")),
    this.border.addClass("mem_border");
    var e, t = $(document.createElement("div"));
    t.addClass("mem_uzor"),
    this.background = $(document.createElement("div")),
    this.background.addClass("mem_background"),
    this.container = $(document.createElement("div")),
    this.container.addClass("mem_container"),
    this.root.append(this.background),
    this.root.append(t),
    this.root.append(this.border),
    this.root.append(this.container),
    this.leftButton = new canvas.app.mem.view.ToggleButton(canvas.Translator.getText(1300),canvas.Translator.getText(1301)),
    this.container.append(this.leftButton.root),
    this.leftButton.selected = !canvas.app.mem.model.deadHidded,
    this.rightButton = new canvas.app.mem.view.ToggleButton(canvas.Translator.getText(1302),canvas.Translator.getText(1303)),
    this.container.append(this.rightButton.root),
    this.rightButton.selected = canvas.app.mem.model.showHPMP,
    this.headerBlock = $(document.createElement("div")),
    this.headerBlock.addClass("mem_header_block"),
    this.container.append(this.headerBlock),
    this.headers = new Array;
    for (var a = 0; a < 2; a++)
        (e = $(document.createElement("div"))).addClass("mem_header_container"),
        this.headerBlock.append(e),
        this.headers[a] = new canvas.app.mem.view.HeaderView(a),
        e.append(this.headers[a].root);
    this.input = new canvas.app.mem.view.InputView(canvas.Translator.getText(1306)),
    this.container.append(this.input.root),
    this.persList = new canvas.app.mem.view.PersList,
    this.container.append(this.persList.root),
    this.resize()
}
,
canvas.app.mem.View.prototype.resize = function() {
    this.container.css("width", this.border.width() + 92),
    this.container.css("height", this.border.height() + 92),
    this.background.css("width", this.border.width() + 70),
    this.background.css("height", this.border.height() + 70),
    this.persList.root.css("height", this.border.height() - 50)
}
,
canvas.app.mem.View.prototype.update = function() {
    canvas.app.mem.model;
    for (var t = 0; t < 2; t++)
        this.headers[t].update();
    this.updateList()
}
,
canvas.app.mem.View.prototype.updateList = function() {
    this.persList.update(),
    canvas.app.mem.model.effectsWasChanged && (canvas.app.mem.model.effectsWasChanged = !1)
}
,
canvas.app.mem.view.EffectView = function() {
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t,
            this.update()
        }
    }),
    this.root = $(document.createElement("div")),
    this.root.addClass("mem_effect_item"),
    this.countSpan = $(document.createElement("span")),
    this.root.append(this.countSpan),
    this.img = $(document.createElement("img")),
    this.root.append(this.img),
    this.img.addClass("mem_pers_view_button"),
    this.root.on("remove", this.removedHandler.bind(this)),
    this.img.on("mouseenter", this.overHandler.bind(this)).on("mousemove", this.moveHandler.bind(this)).on("mouseleave", this.outHandler.bind(this)).on("click", this.clickHandler.bind(this))
}
,
canvas.app.mem.view.EffectView.prototype.update = function() {
    this.data && (this.countSpan.text(this.data.count),
    this.img.attr("src", this.data.image))
}
,
canvas.app.mem.view.EffectView.prototype.clickHandler = function(t) {
    showArtifactInfo(!1, this.data.id)
}
,
canvas.app.mem.view.EffectView.prototype.overHandler = function(t) {
    this.root.append('<span class="mem_hint"></span>'),
    this.startHintUpdate(),
    $(".mem_hint").css({
        left: t.pageX + 10,
        top: t.pageY + 10
    })
}
,
canvas.app.mem.view.EffectView.prototype.moveHandler = function(t) {
    $(".mem_hint").css({
        left: t.pageX + 10,
        top: t.pageY + 10
    })
}
,
canvas.app.mem.view.EffectView.prototype.outHandler = function(t) {
    this.root.children(".mem_hint").remove(),
    this.stopHintUpdate()
}
,
canvas.app.mem.view.EffectView.prototype.startHintUpdate = function() {
    this.stopHintUpdate(),
    this.updateHint(),
    this.hintUpdateInterval = setInterval(this.updateHint.bind(this), 1e3)
}
,
canvas.app.mem.view.EffectView.prototype.stopHintUpdate = function() {
    this.hintUpdateInterval && clearInterval(this.hintUpdateInterval)
}
,
canvas.app.mem.view.EffectView.prototype.updateHint = function() {
    $(".mem_hint").html(this.getHintText())
}
,
canvas.app.mem.view.EffectView.prototype.getHintText = function() {
    var t = canvas.app.mem.model
      , e = this.data.title
      , a = !1
      , t = Math.floor(this.data.finishTime - Date.now() / 1e3 - t.effectsDeltaTime)
      , s = ""
      , i = ""
      , n = String(Math.max(0, 1 + t));
    if (t < 3600)
        switch (canvas.Translator.getLang()) {
        case "turk":
        case "de":
        case "cn":
        case "ru":
            1 == this.data.turnsLeft ? e += "<br/>" + canvas.Translator.getText(44) + " " : e += "<br/>" + canvas.Translator.getText(43) + " ",
            s += n + " " + canvas.Translator.getText(2003),
            a = !0;
            break;
        case "en":
            e += "<br/> ",
            i += canvas.Translator.getText(43),
            s += n + " " + canvas.Translator.getText(2003),
            a = !0;
            break;
        default:
            e += "<br/>" + n,
            a = !0
        }
    return a || (1 == this.data.turnsLeft ? e += "<br/>" + canvas.Translator.getText(44) + " " : e += "<br/>" + canvas.Translator.getText(43) + " "),
    0 < this.data.turnsLeft && this.data.turnsLeft < 3600 && (10 <= (t = this.data.turnsLeft) && (t %= 10),
    1 == t && (e += a ? this.data.turnsLeft + this.getRightPhraseForTurns(this.data.turnsLeft) + i + canvas.Translator.getText(53) + " " : this.data.turnsLeft + this.getRightPhraseForTurns(this.data.turnsLeft)),
    (1 < t || 0 == t) && (e += a ? this.data.turnsLeft + this.getRightPhraseForTurns(this.data.turnsLeft) + i + canvas.Translator.getText(53) + " " : this.data.turnsLeft + this.getRightPhraseForTurns(this.data.turnsLeft))),
    !a && (this.data.turnsLeft <= 0 || 3600 <= this.data.turnsLeft) ? e = this.data.title : e += s,
    e
}
,
canvas.app.mem.view.EffectView.prototype.getRightPhraseForTurns = function(t) {
    canvas.app.mem.model;
    return this.isPhraseManyTurns(t) ? " " + canvas.Translator.getText(52) : this.isPhraseTurn(t) ? " " + canvas.Translator.getText(50) : this.isPhraseOneTurn(t) ? " " + canvas.Translator.getText(51) : "--:--"
}
,
canvas.app.mem.view.EffectView.prototype.isPhraseManyTurns = function(t) {
    var e = t % 100;
    return 11 <= e && e <= 20 || (5 <= (e = t % 10) && e <= 9 || 0 == e)
}
,
canvas.app.mem.view.EffectView.prototype.isPhraseTurn = function(t) {
    t %= 10;
    return 2 <= t && t <= 4
}
,
canvas.app.mem.view.EffectView.prototype.isPhraseOneTurn = function(t) {
    return 1 == t % 10
}
,
canvas.app.mem.view.EffectView.prototype.removedHandler = function(t) {
    this.outHandler()
}
,
canvas.app.mem.view.HeaderView = function(t) {
    this._my = void 0,
    Object.defineProperty(this, "my", {
        get: function() {
            return this._my
        },
        set: function(t) {
            this._my !== t && ((this._my = t) ? (this.root.removeClass("mem_header_grey"),
            this.root.addClass("mem_header_green")) : (this.root.removeClass("mem_header_green"),
            this.root.addClass("mem_header_grey")))
        }
    }),
    this.index = t,
    this.root = $(document.createElement("div")),
    this.root.addClass("mem_header"),
    this.labelTop = $(document.createElement("div")),
    this.labelTop.attr("id", "label_top"),
    this.root.append(this.labelTop),
    this.labelBottom = $(document.createElement("div")),
    this.labelBottom.attr("id", "label_bottom"),
    this.root.append(this.labelBottom),
    this.labelTitle = $(document.createElement("div")),
    this.labelTitle.attr("id", "label_title"),
    this.root.append(this.labelTitle),
    this.setTitleLabel(canvas.Translator.getText(t ? 1305 : 1304));
    var e = canvas.Translator.getText(71);
    this.root.on("mouseenter", function(t) {
        e && ($(this).append('<span class="mem_hint">' + e + "</span>"),
        $(".mem_hint").css({
            left: t.pageX + 10,
            top: t.pageY + 10
        }))
    }).on("mousemove", function(t) {
        $(".mem_hint").css({
            left: t.pageX + 10,
            top: t.pageY + 10
        })
    }).on("mouseleave", function() {
        $(this).children(".mem_hint").remove()
    }),
    this.update()
}
,
canvas.app.mem.view.HeaderView.prototype.update = function() {
    var t = canvas.app.mem.model;
    this.my = t.myTeam == this.index + 1,
    this.setTopLabel(t.persList[this.index].length + " (" + t.userCount[this.index] + ")"),
    this.setBottomLabel(t.deadCount[this.index])
}
,
canvas.app.mem.view.HeaderView.prototype.setTopLabel = function(t) {
    this.labelTop.text(t)
}
,
canvas.app.mem.view.HeaderView.prototype.setBottomLabel = function(t) {
    this.labelBottom.text(t)
}
,
canvas.app.mem.view.HeaderView.prototype.setTitleLabel = function(t) {
    this.labelTitle.text(t)
}
,
canvas.app.mem.view.InputView = function(t) {
    this.defaultText = t,
    this.root = $(document.createElement("div")),
    this.root.addClass("mem_input");
    t = $(document.createElement("div"));
    this.root.append(t),
    this.input = $(document.createElement("input")),
    this.input.attr("type", "text"),
    this.input.attr("maxlength", 20),
    t.append(this.input),
    this.input.on("input", this.changeHandler.bind(this)),
    this.input.focusin(this.focusInHandler.bind(this)),
    this.input.focusout(this.focusOutHandler.bind(this)),
    this.focusOutHandler()
}
,
canvas.app.mem.view.InputView.prototype.changeHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.mem.Event.INPUT, this, this.input.val())
}
,
canvas.app.mem.view.InputView.prototype.focusInHandler = function() {
    this.input.val() == this.defaultText && this.input.val("")
}
,
canvas.app.mem.view.InputView.prototype.focusOutHandler = function() {
    "" == this.input.val() && this.input.val(this.defaultText)
}
,
canvas.app.mem.view.PersList = function() {
    this.root = $(document.createElement("div")),
    this.root.addClass("mem_pers_list"),
    this.containers = new Array,
    this.persList = new Array;
    for (var t = 0; t < 2; t++)
        this.persList[t] = new Array,
        this.containers[t] = $(document.createElement("div")),
        this.containers[t].addClass("mem_pers_list_container"),
        this.root.append(this.containers[t]);
    this.update()
}
,
canvas.app.mem.view.PersList.prototype.update = function() {
    for (var t, e, a, s = canvas.app.mem.model, i = 0; i < 2; i++)
        if (this.persList[i].length < s.persList[i].length)
            for (e = this.persList[i].length; e < s.persList[i].length; e++)
                (t = new canvas.app.mem.view.PersView).data = s.persList[i][e],
                this.persList[i][e] = t,
                this.containers[i].append(t.root);
    for (i = 0; i < 2; i++)
        for (a = this.persList[i].length,
        e = 0; e < a; e++)
            this.persList[i][e].update();
    canvas.EventManager.dispatchEvent(canvas.app.mem.Event.UPDATE_VISIBLE_IDS, null, this.getVisibleIds())
}
,
canvas.app.mem.view.PersList.prototype.updateBarsVisible = function() {
    for (var t = 0; t < 2; t++)
        for (var e = this.persList[t].length, a = 0; a < e; a++)
            this.persList[t][a].updateBarsVisible()
}
,
canvas.app.mem.view.PersList.prototype.getVisibleIds = function() {
    for (var t = [], e = 0; e < 2; e++)
        for (var a = this.persList[e].length, s = 0; s < a; s++)
            this.isElementInView(this.persList[e][s].root.context, !0) && t.push(this.persList[e][s].data.id);
    return t.sort(function(t, e) {
        return t - e
    }).join(",")
}
,
canvas.app.mem.view.PersList.prototype.isElementInView = function(t, e) {
    return !0
}
,
canvas.app.mem.view.PersView = function() {
    this._data = null,
    Object.defineProperty(this, "data", {
        get: function() {
            return this._data
        },
        set: function(t) {
            this._data = t,
            this.update()
        }
    }),
    this._hpmpVisible = !0,
    Object.defineProperty(this, "hpmpVisible", {
        get: function() {
            return this._hpmpVisible
        },
        set: function(t) {
            this._hpmpVisible != t && ((this._hpmpVisible = t) ? (this.hpmpContainer.show(),
            this.hpmpBr.show()) : (this.hpmpContainer.hide(),
            this.hpmpBr.hide()))
        }
    }),
    this._visible = !0,
    Object.defineProperty(this, "visible", {
        get: function() {
            return this._visible
        },
        set: function(t) {
            this._visible != t && ((this._visible = t) ? this.root.show() : this.root.hide())
        }
    }),
    this._nickEnabled = !0,
    Object.defineProperty(this, "nickEnabled", {
        get: function() {
            return this._nickEnabled
        },
        set: function(t) {
            this._nickEnabled != t && ((this._nickEnabled = t) ? this.nickDiv.addClass("mem_pers_view_button") : this.nickDiv.removeClass("mem_pers_view_button"))
        }
    }),
    this._watchSelected = !1,
    Object.defineProperty(this, "watchSelected", {
        get: function() {
            return this._watchSelected
        },
        set: function(t) {
            this._watchSelected != t && (this._watchSelected = t,
            this.watchImg.attr("src", t ? "../images/mem_watch_fight_dis.png" : "../images/mem_watch_fight.png"),
            t ? this.watchImg.removeClass("mem_pers_view_button") : this.watchImg.addClass("mem_pers_view_button"))
        }
    }),
    this.inited = !1,
    this.root = $(document.createElement("div")),
    this.root.addClass("mem_pers_view");
    var t = this;
    this.watchImg = $(document.createElement("img")),
    this.watchImg.attr("src", "../images/mem_watch_fight.png"),
    this.watchImg.addClass("mem_pers_view_button"),
    this.watchImg.mouseover(function() {
        t.watchSelected || $(this).attr("src", "../images/mem_watch_fight_over.png")
    }),
    this.watchImg.mouseout(function() {
        t.watchSelected || $(this).attr("src", "../images/mem_watch_fight.png")
    }),
    this.watchImg.click(this.watchClickHandler.bind(this)),
    this.root.append(this.watchImg),
    this.watchImg.hide(),
    this.prvImg = $(document.createElement("img")),
    this.prvImg.attr("src", "../images/users-arrow.gif"),
    this.prvImg.addClass("mem_pers_view_button"),
    this.prvImg.mouseover(function() {
        $(this).attr("src", "../images/users-arrow-org.gif")
    }),
    this.prvImg.mouseout(function() {
        $(this).attr("src", "../images/users-arrow.gif")
    }),
    this.prvImg.click(this.prvClickHandler.bind(this)),
    this.root.append(this.prvImg),
    this.clanImg = $(document.createElement("img")),
    this.root.append(this.clanImg),
    this.nickDiv = $(document.createElement("div")),
    this.nickDiv.addClass("mem_pers_view_button"),
    this.nickDiv.click(this.nickClickHandler.bind(this)),
    this.nickDiv.dblclick(this.nickDoubleClickHandler.bind(this)),
    this.root.append(this.nickDiv),
    this.infoImg = $(document.createElement("img")),
    this.infoImg.attr("src", "../images/player_info.gif"),
    this.infoImg.addClass("mem_pers_view_button"),
    this.infoImg.mouseover(function() {
        $(this).attr("src", "../images/player_info_over.gif")
    }),
    this.infoImg.mouseout(function() {
        $(this).attr("src", "../images/player_info.gif")
    }),
    this.infoImg.click(this.infoClickHandler.bind(this)),
    this.root.append(this.infoImg),
    this.hpmpBr = $(document.createElement("br")),
    this.root.append(this.hpmpBr),
    this.hpmpContainer = $(document.createElement("div")),
    this.root.append(this.hpmpContainer);
    var e = $(document.createElement("div"));
    e.addClass("mem_bar_back"),
    this.hpmpContainer.append(e),
    this.hpDiv = $(document.createElement("div")),
    this.hpDiv.addClass("mem_bar_hp"),
    e.append(this.hpDiv),
    e = $(document.createElement("br")),
    this.hpmpContainer.append(e),
    (e = $(document.createElement("div"))).addClass("mem_bar_back"),
    this.hpmpContainer.append(e),
    this.mpDiv = $(document.createElement("div")),
    this.mpDiv.addClass("mem_bar_mp"),
    e.append(this.mpDiv),
    e = $(document.createElement("br")),
    this.root.append(e),
    this.effectsContainer = $(document.createElement("div")),
    this.effectsContainer.addClass("mem_effects_container"),
    this.effects = [],
    this.root.append(this.effectsContainer)
}
,
canvas.app.mem.view.PersView.prototype.update = function() {
    var t, e = canvas.app.mem.model;
    this.data && (t = this.isFlee(),
    this.data.wasChanged && (e = canvas.app.mem.model,
    this.data.wasChanged = !1,
    this.inited || (this.inited = !0,
    this.init()),
    this.nickDiv.css("color", this.getNickColor()),
    this.nickEnabled = !t,
    this.hpDiv.css("width", Math.round(100 * this.data.hpRatio) + "%"),
    this.mpDiv.css("width", Math.round(100 * this.data.mpRatio) + "%")),
    (e.effectsWasChanged || t) && this.clearEffects(),
    e.selectedPers != this.data.id || t ? this.root.removeClass("mem_pers_view_selected") : (this.root.addClass("mem_pers_view_selected"),
    e.effectsWasChanged && this.renderEffects(),
    e.autoScrollToSelected && (this.root.context.scrollIntoView(!1),
    e.autoScrollToSelected = !1)),
    this.updateVisible(),
    this.updateWatch())
}
,
canvas.app.mem.view.PersView.prototype.updateVisible = function() {
    var t = canvas.app.mem.model;
    this.visible = (!t.deadHidded || this.data.status != canvas.app.battle.Const.STATUS_DEAD) && (!t.filterText || 0 <= this.data.nick.toLowerCase().indexOf(t.filterText.toLowerCase()))
}
,
canvas.app.mem.view.PersView.prototype.updateWatch = function() {
    var t = canvas.app.mem.model;
    this.data.isBot || !t.watchEnabled || t.watchTeam != this.data.team || this.data.status == canvas.app.battle.Const.STATUS_DEAD && this.data.id != t.myId ? this.watchImg.hide() : (this.watchImg.show(),
    this.watchSelected = this.data.id == t.watchId)
}
,
canvas.app.mem.view.PersView.prototype.updateBarsVisible = function() {
    this.hpmpVisible = canvas.app.mem.model.showHPMP
}
,
canvas.app.mem.view.PersView.prototype.init = function() {
    10 < this.data.nick.length ? this.nickDiv.text(this.data.nick.substr(0, 10) + "...[" + this.data.level + "]") : this.nickDiv.text(this.data.nick + "[" + this.data.level + "]"),
    this.data.clanImage ? (this.clanImg.attr("src", "../images/data/clans/" + this.data.clanImage),
    this.clanImg.show()) : this.clanImg.hide(),
    this.updateBarsVisible()
}
,
canvas.app.mem.view.PersView.prototype.clearEffects = function() {
    this.effectsContainer.empty();
    for (var t = 0; t < this.effects.length; t++)
        this.effects[t].removedHandler();
    this.effects = []
}
,
canvas.app.mem.view.PersView.prototype.renderEffects = function() {
    for (var t = canvas.app.mem.model, e = 0; e < t.effects.length; e++) {
        var a = new canvas.app.mem.view.EffectView;
        a.data = t.effects[e],
        this.effectsContainer.append(a.root),
        this.effects.push(a)
    }
}
,
canvas.app.mem.view.PersView.prototype.getNickColor = function() {
    var t = canvas.app.mem.model;
    if (t.oppId == this.data.id)
        return "#074cb4";
    if (this.isFlee())
        return "#FA9B4E";
    switch (this.data.status) {
    case canvas.app.battle.Const.STATUS_CREATED:
        return "#B89880";
    case canvas.app.battle.Const.STATUS_WAIT:
    case canvas.app.battle.Const.STATUS_ACTIVE:
    case canvas.app.battle.Const.STATUS_PASSIVE:
        return t.myId != this.data.id ? "#674F3D" : "#006600";
    case canvas.app.battle.Const.STATUS_DEAD:
        return "#FF0000";
    default:
        return "#674F3D"
    }
}
,
canvas.app.mem.view.PersView.prototype.isFlee = function() {
    return canvas.Functions.testFlag(this.data.flags, canvas.app.battle.Const.FS_PF_FLEE)
}
,
canvas.app.mem.view.PersView.prototype.nickClickHandler = function() {
    this.data && canvas.app.mem.model.selectedPers != this.data.id && !this.isFlee() && canvas.EventManager.dispatchEvent(canvas.app.mem.Event.PERS_SELECT, null, this.data.id)
}
,
canvas.app.mem.view.PersView.prototype.nickDoubleClickHandler = function() {
    this.isFlee() || this.watchClickHandler()
}
,
canvas.app.mem.view.PersView.prototype.prvClickHandler = function() {
    userPrvTag(this.data.nick)
}
,
canvas.app.mem.view.PersView.prototype.infoClickHandler = function() {
    var t = canvas.app.mem.model;
    canvas.Functions.testFlag(t.fightFlags, canvas.app.battle.Const.FIGHT_FLAG_BLIND) || canvas.Functions.testFlag(this.data.flags, canvas.app.battle.Const.FS_PF_INVISIBLE) && t.invisibleInfoUrl ? canvas.Functions.navigateToURL(t.invisibleInfoUrl, "_blank") : this.data.isShadow ? showShadowInfo(!1, String(this.data.id), !1, this.data.fightId, t.fightServerId || !1) : this.data.isBot ? showBotInfo(String(this.data.id), "0", this.data.fightId, t.fightServerId || !1) : showUserInfo(this.data.nick, !!t["team" + this.data.team + "serverUrl"] && t["team" + this.data.team + "serverUrl"])
}
,
canvas.app.mem.view.PersView.prototype.watchClickHandler = function() {
    !this.watchSelected && this.watchImg.is(":visible") && canvas.EventManager.dispatchEvent(canvas.app.mem.Event.WATCH_SELECT, null, this.data.id)
}
,
canvas.app.mem.view.ToggleButton = function(t, e) {
    this._selected = !1,
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            (this._selected = t) ? (this.label.text(this.label1),
            this.root.removeClass("mem_button_white"),
            this.root.addClass("mem_button_red")) : (this.label.text(this.label2),
            this.root.removeClass("mem_button_red"),
            this.root.addClass("mem_button_white"))
        }
    }),
    this.root = $(document.createElement("div")),
    this.root.addClass("mem_button"),
    this.label = $(document.createElement("div")),
    this.root.append(this.label),
    this.label1 = t,
    this.label2 = e,
    this.selected = !0,
    this.root.click(this.clickHandler.bind(this))
}
,
canvas.app.mem.view.ToggleButton.prototype.clickHandler = function() {
    this.selected = !this.selected,
    canvas.EventManager.dispatchEvent(canvas.app.mem.Event.TOGGLE_BUTTON_CLICK, this, this.selected)
}
,
canvas.app.firstBattle.Const = {
    WIDTH: 464,
    HEIGHT: 359,
    STATE_SELECT_GENDER: 1,
    STATE_BATTLE: 2,
    STATE_BATTLE_FINISH: 3
},
canvas.app.firstBattle.Event = {
    ENTER_FRAME: "FirstBattle.ENTER_FRAME",
    HINT_ADD: "FirstBattle.HINT_ADD",
    HINT_REMOVE: "FirstBattle.HINT_REMOVE",
    GENDER_CHANGE: "FirstBattle.GENDER_CHANGE",
    GENDER_SELECT: "FirstBattle.GENDER_SELECT",
    BLOCK_CHANGE: "FirstBattle.BLOCK_CHANGE",
    PERS_ATTACK: "FirstBattle.PERS_ATTACK",
    PERS_DAMAGE: "FirstBattle.PERS_DAMAGE",
    PERS_EFFECT_DAMAGE: "FirstBattle.PERS_EFFECT_DAMAGE",
    PERS_ATTACK_SPELL: "FirstBattle.PERS_ATTACK_SPELL",
    ENEMY_ATTACK: "FirstBattle.ENEMY_ATTACK",
    ENEMY_DAMAGE: "FirstBattle.ENEMY_DAMAGE",
    ENEMY_DEAD: "FirstBattle.ENEMY_DEAD",
    FINISH: "FirstBattle.FINISH"
},
canvas.app.firstBattle.Main = function(t, e) {
    canvas.px.Container.call(this),
    this.model = t,
    this.hintManager = e,
    this.hintContainer = new canvas.px.Container,
    this.hintContainer.interactive = !0,
    this.hintManager.init(this.hintContainer, this.model.width, this.model.height),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.HINT_ADD, null, this.handlerHintAdd, this),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.HINT_REMOVE, null, this.handlerHintRemove, this),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.GENDER_CHANGE, null, this.genderChangeHandler, this),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.GENDER_SELECT, null, this.genderSelectHandler, this),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.BLOCK_CHANGE, null, this.blockChangeHandler, this),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.PERS_ATTACK, null, this.persAttackHandler, this),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.PERS_ATTACK_SPELL, null, this.persAttackSpellHandler, this),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.PERS_DAMAGE, null, this.persDamageHandler, this),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENEMY_ATTACK, null, this.enemyAttackHandler, this),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENEMY_DAMAGE, null, this.enemyDamageHandler, this),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.PERS_EFFECT_DAMAGE, null, this.persEffectDamageHandler, this),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENEMY_DEAD, null, this.enemyDeadHandler, this),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.FINISH, null, this.finishHandler, this),
    this.view = new canvas.app.firstBattle.View,
    this.addChild(this.view),
    this.addChild(this.hintContainer)
}
,
canvas.app.firstBattle.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.Main.prototype.handlerHintAdd = function(t) {
    this.hintManager.add(t.params.target, t.params.params)
}
,
canvas.app.firstBattle.Main.prototype.handlerHintRemove = function(t) {
    this.hintManager.remove(t.params.target)
}
,
canvas.app.firstBattle.Main.prototype.genderChangeHandler = function(t) {
    this.model.gender = this.model.gender == canvas.Const.GENDER.MALE ? canvas.Const.GENDER.FEMALE : canvas.Const.GENDER.MALE,
    this.view.update()
}
,
canvas.app.firstBattle.Main.prototype.genderSelectHandler = function(t) {
    this.model.state = canvas.app.firstBattle.Const.STATE_BATTLE,
    this.view.update()
}
,
canvas.app.firstBattle.Main.prototype.blockChangeHandler = function(t) {
    this.model.blockOn = !this.model.blockOn,
    this.view.update(),
    this.view.battleView.persIdle()
}
,
canvas.app.firstBattle.Main.prototype.persAttackHandler = function(t) {
    this.model.myTurn = !1,
    this.view.battleView.persAttack(t.params)
}
,
canvas.app.firstBattle.Main.prototype.persAttackSpellHandler = function(t) {
    this.model.myTurn = !1,
    this.model.persCastSpell(),
    this.view.battleView.persAttackSpell(t.params),
    this.view.update()
}
,
canvas.app.firstBattle.Main.prototype.persDamageHandler = function(t) {
    this.model.myTurn = !0;
    var e = this.model.persDamage();
    this.view.update(),
    this.view.battleView.persDamage(e)
}
,
canvas.app.firstBattle.Main.prototype.persEffectDamageHandler = function(t) {
    var e = this.model.persEffectDamage();
    this.view.update(),
    this.view.battleView.persEffectDamage(e)
}
,
canvas.app.firstBattle.Main.prototype.enemyAttackHandler = function(t) {}
,
canvas.app.firstBattle.Main.prototype.enemyDamageHandler = function(t) {
    t = this.model.enemyDamage(t.params);
    this.view.update(),
    this.view.battleView.enemyDamage(t)
}
,
canvas.app.firstBattle.Main.prototype.enemyDeadHandler = function(t) {
    this.model.state = canvas.app.firstBattle.Const.STATE_BATTLE_FINISH,
    this.view.update()
}
,
canvas.app.firstBattle.Main.prototype.finishHandler = function(t) {
    canvas.Functions.navigateToURL(this.model.link, "_blank")
}
,
canvas.app.firstBattle.Model = function(t) {
    this.gender = canvas.Const.GENDER.MALE,
    this.state = canvas.app.firstBattle.Const.STATE_SELECT_GENDER,
    this.blockOn = !1,
    this.spells = {},
    this.spells[1] = {
        effId: 1,
        title: canvas.Translator.getText(1706),
        picture: "spell_fire"
    },
    this.spells[2] = {
        effId: 2,
        title: canvas.Translator.getText(1707),
        picture: "spell_air"
    },
    this.spells[3] = {
        effId: 3,
        title: canvas.Translator.getText(1708),
        picture: "spell_light"
    },
    this.spells[4] = {
        effId: 4,
        title: canvas.Translator.getText(1709),
        picture: "spell_earth"
    },
    this.spells[5] = {
        effId: 5,
        title: canvas.Translator.getText(1710),
        picture: "spell_dark"
    },
    this.mode = canvas.app.battle.Const.MODE_ATTACK,
    this.totalDamage = 0,
    this.myTurn = !0,
    this.persNumAttacks = 0,
    this.enemyNumAttacks = 0,
    this.effectUsed = !1,
    this.spellsUsed = !1,
    this.parse(t)
}
,
canvas.app.firstBattle.Model.prototype.parse = function(t) {
    this.persParams = {},
    this.persParams[canvas.Const.GENDER.MALE] = {
        nick: this.ok(t.fight_user_male_nick) ? t.fight_user_male_nick : "Warrior",
        sk: this.ok(t.fight_user_male_skeleton) ? t.fight_user_male_skeleton : 1,
        parts: this.ok(t.fight_user_male_parts) ? t.fight_user_male_parts : "590330;;;,0,0;;;,0;;;,0;;;,404;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,0;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,0;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,0;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,275;;;,271;;;,590325;;;,0;;;,271;;;,0;;;,0;;;,1186;;;,0;;;,0;;;,1368;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;",
        level: 5,
        curHp: 200,
        maxHp: 200,
        curMp: 100,
        maxMp: 100
    },
    this.persParams[canvas.Const.GENDER.FEMALE] = {
        nick: this.ok(t.fight_user_female_nick) ? t.fight_user_female_nick : "Warrior",
        sk: this.ok(t.fight_user_female_skeleton) ? t.fight_user_female_skeleton : 1,
        parts: this.ok(t.fight_user_female_parts) ? t.fight_user_female_parts : "262159;;;,0,0;;;,0;;;,0;;;,407;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,0;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,0;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,0;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,274;;;,270;;;,262145;;;,0;;;,270;;;,0;;;,0;;;,1187;;;,0;;;,0;;;,1369;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;,0;;;",
        level: 5,
        curHp: 200,
        maxHp: 200,
        curMp: 100,
        maxMp: 100
    },
    this.enemyParams = {
        nick: this.ok(t.fight_enemy_nick) ? t.fight_enemy_nick : "Enemy",
        sk: this.ok(t.fight_enemy_skeleton) ? t.fight_enemy_skeleton : 1160,
        parts: this.ok(t.fight_enemy_parts) ? t.fight_enemy_parts : "",
        level: 6,
        curHp: 250,
        maxHp: 250,
        curMp: 150,
        maxMp: 150
    },
    this.link = this.ok(t.link) ? t.link : "https://w1.dwar.ru/"
}
,
canvas.app.firstBattle.Model.prototype.getPersParams = function() {
    return this.persParams[this.gender]
}
,
canvas.app.firstBattle.Model.prototype.enemyIsDead = function() {
    return this.enemyParams.curHp < 1
}
,
canvas.app.firstBattle.Model.prototype.ok = function(t) {
    return null != t
}
,
canvas.app.firstBattle.Model.prototype.getAnimationNameByZone = function(t) {
    switch (parseInt(t)) {
    case 1:
        return "a_up_1";
    case 2:
        return "a_mid_1";
    case 3:
        return "a_bot_1"
    }
    return "a_mid_1"
}
,
canvas.app.firstBattle.Model.prototype.getSpellBySlot = function(t) {
    switch (parseInt(t)) {
    case 1:
        return "_SP2";
    case 2:
        return "_SP1";
    case 3:
        return "_SP5";
    case 4:
        return "_SP4";
    case 5:
        return "_SP6"
    }
    return "_SP1"
}
,
canvas.app.firstBattle.Model.prototype.persCastSpell = function() {
    this.getPersParams().curMp -= 12
}
,
canvas.app.firstBattle.Model.prototype.persDamage = function() {
    this.enemyNumAttacks++;
    var t = 20 + Math.floor(10 * Math.random());
    return (this.getPersParams().curHp < 70 || Math.random() >= this.getPersParams().curHp / this.getPersParams().maxHp) && (t = 0),
    this.blockOn && (t = Math.ceil(.5 * t)),
    this.getPersParams().curHp -= t,
    this.getPersParams().curHp <= 0 && (this.getPersParams().curHp = this.getPersParams().curMp = 0),
    t
}
,
canvas.app.firstBattle.Model.prototype.persEffectDamage = function() {
    var t = 5 + Math.floor(4 * Math.random());
    return this.getPersParams().curHp -= t,
    this.getPersParams().curHp <= 0 && (this.getPersParams().curHp = this.getPersParams().curMp = 0),
    t
}
,
canvas.app.firstBattle.Model.prototype.enemyDamage = function(t) {
    this.persNumAttacks++;
    t = (t ? 40 : 30) + Math.floor(10 * Math.random());
    return 2 == this.persNumAttacks && (t = 0),
    3 == this.persNumAttacks && (t *= 2),
    this.blockOn && (t = Math.ceil(.5 * t)),
    this.enemyParams.curHp -= t,
    this.enemyParams.curHp <= 0 && (this.enemyParams.curHp = this.enemyParams.curMp = 0),
    this.totalDamage += t,
    t
}
,
canvas.app.firstBattle.View = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.firstBattle.model
      , e = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "back")));
    e.position.set(14, 10),
    (e = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "battle_contour"),49,49,49,49))).width = canvas.app.firstBattle.Const.WIDTH,
    e.height = canvas.app.firstBattle.Const.HEIGHT,
    (e = this.addChild(new canvas.px.SlicedSprite(canvas.ResourceLoader.getImage("ui", "header"),31,0,31,0))).width = 150,
    e.y = 345,
    e.x = Math.round(.5 * (canvas.app.firstBattle.Const.WIDTH - e.width)),
    (e = e.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,15660470,e.width - 20,20,"center"))).position.set(10, 2),
    e.text = canvas.Translator.getText(1700),
    this.infoField = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,7158057,canvas.app.firstBattle.Const.WIDTH - 20,50,"center")),
    this.infoField.position.set(10, 370),
    this.infoField.text = canvas.Translator.getText(1701),
    t.gender = canvas.Const.GENDER.MALE,
    this.persPreviewMale = new canvas.animation.Skeleton(canvas.Config.skPath + "M/sk0" + t.getPersParams().sk),
    this.addChild(this.persPreviewMale),
    this.persPreviewMale.position.set(120, 15),
    this.persPreviewMale.skeletonData = new canvas.data.battle.SkeletonData(t.getPersParams().parts,"M"),
    this.persPreviewMale.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME,
    this.persPreviewMale.scale.x = this.persPreviewMale.scale.y = .85,
    this.persPreviewMale.visible = !1,
    t.gender = canvas.Const.GENDER.FEMALE,
    this.persPreviewFemale = new canvas.animation.Skeleton(canvas.Config.skPath + "F/sk0" + t.getPersParams().sk),
    this.addChild(this.persPreviewFemale),
    this.persPreviewFemale.position.set(120, 15),
    this.persPreviewFemale.skeletonData = new canvas.data.battle.SkeletonData(t.getPersParams().parts,"F"),
    this.persPreviewFemale.scale.x = this.persPreviewFemale.scale.y = .85,
    this.persPreviewFemale.visible = !1,
    t.gender = canvas.Const.GENDER.MALE,
    this.selectGenderWindow = this.addChild(new canvas.app.firstBattle.view.SelectGenderWindow),
    this.selectGenderWindow.position.set(Math.round(.5 * (canvas.app.firstBattle.Const.WIDTH - this.selectGenderWindow.width)), 20),
    this.persPreviewMale.ready ? this.update() : canvas.EventManager.addEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.persPreviewMale, this.completeHandler, this)
}
,
canvas.app.firstBattle.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.View.prototype.completeHandler = function() {
    canvas.EventManager.removeEventListener(canvas.px.MovieClipEvent.EVENT_READY, this.persPreviewMale, this.completeHandler, this),
    this.update()
}
,
canvas.app.firstBattle.View.prototype.update = function() {
    var t = canvas.app.firstBattle.model;
    switch (t.state) {
    case canvas.app.firstBattle.Const.STATE_SELECT_GENDER:
        this.selectGenderWindow && this.selectGenderWindow.update(),
        canvas.app.firstBattle.model.gender == canvas.Const.GENDER.MALE ? (this.persPreviewMale.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME,
        this.persPreviewMale.gotoAndPlay("idle"),
        this.persPreviewMale.visible = !0,
        this.persPreviewFemale.frameEvent = "",
        this.persPreviewFemale.visible = !1) : (this.persPreviewFemale.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME,
        this.persPreviewFemale.gotoAndPlay("idle"),
        this.persPreviewFemale.visible = !0,
        this.persPreviewMale.frameEvent = "",
        this.persPreviewMale.visible = !1);
        break;
    case canvas.app.firstBattle.Const.STATE_BATTLE:
        this.selectGenderWindow && this.selectGenderWindow.destroy({
            children: !0
        }),
        this.persPreviewMale && this.persPreviewMale.destroy(),
        this.persPreviewFemale && this.persPreviewFemale.destroy(),
        this.battleView || (this.battleView = this.addChild(new canvas.app.firstBattle.view.BattleView),
        this.battleView.x = 10),
        this.battleView && this.battleView.update(),
        this.infoField.text = canvas.Translator.getText(3 <= t.persNumAttacks ? 1718 : 1717);
        break;
    case canvas.app.firstBattle.Const.STATE_BATTLE_FINISH:
        this.finishView || (this.addChild(new canvas.px.Mask(canvas.app.firstBattle.Const.WIDTH - 20,canvas.app.firstBattle.Const.HEIGHT - 20,0,.7)).position.set(10, 10),
        this.finishView = this.addChild(new canvas.app.firstBattle.view.FinishView),
        this.finishView.position.set(5, 0),
        this.infoField.text = canvas.Translator.getText(1715))
    }
}
,
canvas.app.firstBattle.view.BattleView = function() {
    canvas.px.Container.call(this);
    var t = canvas.app.firstBattle.model;
    this.container = this.addChild(new canvas.px.Container),
    this.wall = this.addChild(new canvas.px.Mask(436,331,1,1)),
    this.wall.position.set(4, 13),
    this.container.mask = this.wall,
    this.topImage = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_top")),
    this.damageText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16697738,100,16,"center"),
    this.damageText.text = canvas.Translator.getText(30),
    this.hpmp = new canvas.app.firstBattle.view.HpMpView,
    this.persNick = new canvas.app.firstBattle.view.NickView,
    this.persNick.update(t.getPersParams().nick),
    this.oppNick = new canvas.app.firstBattle.view.NickView,
    this.oppNick.update(t.enemyParams.nick),
    this.persLevel = new canvas.app.firstBattle.view.LevelView,
    this.persLevel.setLevel(t.getPersParams().level),
    this.oppLevel = new canvas.app.firstBattle.view.LevelView,
    this.oppLevel.setLevel(t.enemyParams.level),
    this.totalDamage = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16697738,70,17,"center"),
    this.addChild(this.topImage),
    this.topImage.position.set(20, -4),
    this.addChild(this.damageText),
    this.damageText.position.set(172, 38),
    this.addChild(this.hpmp),
    this.addChild(this.persNick),
    this.persNick.position.set(133, 14),
    this.addChild(this.oppNick),
    this.oppNick.position.set(312, 14),
    this.addChild(this.persLevel),
    this.persLevel.position.set(36, 4),
    this.addChild(this.oppLevel),
    this.oppLevel.position.set(374, 4),
    this.addChild(this.totalDamage),
    this.totalDamage.position.set(188, 52),
    this.pers = new canvas.animation.Skeleton(canvas.Config.skPath + t.gender + "/sk0" + t.getPersParams().sk),
    this.pers.TURN = this.persTurn.bind(this),
    this.container.addChild(this.pers),
    this.persBasePos = new canvas.px.Point(-10,10),
    this.pers.position.set(this.persBasePos.x, this.persBasePos.y),
    this.pers.skeletonData = new canvas.data.battle.SkeletonData(t.getPersParams().parts,t.gender),
    this.pers.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME,
    this.pers.scale.x = this.pers.scale.y = .85,
    this.pers.gotoAndPlay("idle"),
    this.enemy = new canvas.animation.Bot(canvas.Config.botsPath + "img" + t.enemyParams.sk + "/img" + t.enemyParams.sk),
    this.container.addChild(this.enemy),
    this.enemy.position.set(465, 20),
    this.enemy.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME,
    this.enemy.scale.x = -1,
    this.enemy.TURN = this.enemyTurn.bind(this),
    this.centerView = new canvas.app.firstBattle.view.CenterView(this),
    this.addChild(this.centerView),
    this.centerView.buildSpells(),
    this.centerView.position.set(222, 226),
    this.setCenterVisible(!0),
    this.centerView.cDot.switchDot(!0)
}
,
canvas.app.firstBattle.view.BattleView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.BattleView.prototype.update = function(t) {
    var e = canvas.app.firstBattle.model;
    this.centerView.activeBlock(e.blockOn),
    this.totalDamage.text = e.totalDamage,
    this.hpmp.setHpPers(e.getPersParams().curHp, e.getPersParams().maxHp),
    this.hpmp.setMpPers(e.getPersParams().curMp, e.getPersParams().maxMp),
    this.hpmp.setHpOpp(e.enemyParams.curHp, e.enemyParams.maxHp),
    this.hpmp.setMpOpp(e.enemyParams.curMp, e.enemyParams.maxMp)
}
,
canvas.app.firstBattle.view.BattleView.prototype.persIdle = function() {
    var t = canvas.app.firstBattle.model;
    this.pers.gotoAndPlay(t.blockOn ? "protected" : "idle")
}
,
canvas.app.firstBattle.view.BattleView.prototype.setCenterVisible = function(t) {
    this.centerView.setVisible(t)
}
,
canvas.app.firstBattle.view.BattleView.prototype.playComboHit = function() {
    var t = new canvas.app.firstBattle.view.ComboHint;
    this.addChild(t),
    t.position.set(222, 110)
}
,
canvas.app.firstBattle.view.BattleView.prototype.showDmg = function(t) {
    this.addChild(new canvas.app.firstBattle.view.DmgFly(t,0))
}
,
canvas.app.firstBattle.view.BattleView.prototype.persAttack = function(t) {
    var e = canvas.app.firstBattle.model;
    this.pers.gotoAndPlay(2 == e.persNumAttacks ? "combo_1" : e.getAnimationNameByZone(t)),
    this.moveInterval = setInterval(this.persMoveIntervalHandler.bind(this), 60),
    this.moveIndex = 0,
    this.setCenterVisible(!1)
}
,
canvas.app.firstBattle.view.BattleView.prototype.persAttackSpell = function(t) {
    var e = canvas.app.firstBattle.model;
    this.pers.gotoAndPlay("spell_1"),
    this.setCenterVisible(!1);
    e = e.getSpellBySlot(t),
    t = new canvas.px.MovieClip(canvas.Config.spellsPath + e);
    this.sndPlay(e),
    t.autoDestroy = !0,
    t.frameEvent = canvas.app.firstBattle.Event.ENTER_FRAME,
    this.container.addChild(t),
    t.position.set(220, 200),
    setTimeout(this.persAttackSpellDamage.bind(this), 1e3),
    setTimeout(this.enemyAttack.bind(this), 3e3)
}
,
canvas.app.firstBattle.view.BattleView.prototype.persAttackSpellDamage = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.ENEMY_DAMAGE, null, {
        spell: !0
    })
}
,
canvas.app.firstBattle.view.BattleView.prototype.persMoveIntervalHandler = function() {
    this.pers.x = this.persBasePos.x + 10 * Math.abs(this.moveIndex),
    this.moveIndex += 0 < this.moveIndex ? 1 : 2,
    12 == this.moveIndex && (this.moveIndex = -12,
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.ENEMY_DAMAGE)),
    0 == this.moveIndex && (clearInterval(this.moveInterval),
    this.pers.x = this.persBasePos.x,
    setTimeout(this.enemyAttack.bind(this), 2e3))
}
,
canvas.app.firstBattle.view.BattleView.prototype.enemyDamage = function(t) {
    var e = canvas.app.firstBattle.model;
    3 == e.persNumAttacks && this.playComboHit(),
    this.enemy.gotoAndPlay(0 < t ? e.enemyIsDead() ? "die" : "wound" : "block"),
    this.sndPlay(t < 1 ? "block_weapon_1" : "wound_punch_" + (canvas.Functions.random(3) + 1)),
    e.enemyIsDead() && this.sndPlay("body_fall"),
    this.showDmg({
        tar: "opp",
        kick: 0 < t ? 3 == e.persNumAttacks ? canvas.app.battle.Const.DMG_KICK_CRIT : canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_BLOCK,
        val: -t
    })
}
,
canvas.app.firstBattle.view.BattleView.prototype.persDamage = function(t) {
    var e = canvas.app.firstBattle.model;
    this.pers.gotoAndPlay(0 < t ? "wound_1" : "dodge_1"),
    this.sndPlay(t < 1 ? "dodge" : "wound_punch_" + (canvas.Functions.random(3) + 1)),
    this.showDmg({
        tar: "pers",
        kick: 0 < t ? canvas.app.battle.Const.DMG_KICK_WOUND : canvas.app.battle.Const.DMG_KICK_DODGE,
        val: -t
    }),
    !e.effectUsed && 2 <= e.enemyNumAttacks && 0 < t && (this.effectView = this.addChild(new canvas.app.firstBattle.view.EffectView),
    this.effectView.position.set(45, 76),
    e.effectUsed = !0)
}
,
canvas.app.firstBattle.view.BattleView.prototype.persEffectDamage = function(t) {
    this.showDmg({
        tar: "pers",
        kick: canvas.app.battle.Const.DMG_KICK_WOUND,
        val: -t
    })
}
,
canvas.app.firstBattle.view.BattleView.prototype.enemyAttack = function() {
    var t = canvas.app.firstBattle.model;
    t.enemyIsDead() || (this.enemy.gotoAndPlay(t.getAnimationNameByZone(canvas.Functions.random(3) + 1)),
    setTimeout(this.enemyAttackDamage.bind(this), 700))
}
,
canvas.app.firstBattle.view.BattleView.prototype.enemyAttackDamage = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.PERS_DAMAGE)
}
,
canvas.app.firstBattle.view.BattleView.prototype.persTurn = function() {
    var t = canvas.app.firstBattle.model;
    this.persIdle(),
    t.myTurn && !t.enemyIsDead() && (t.spellsUsed || 3 != t.persNumAttacks || (this.tipView = this.addChild(new canvas.app.firstBattle.view.TipView),
    this.tipView.position.set(-10, 76),
    this.centerView.cDot.startBlicking()),
    this.setCenterVisible(!0))
}
,
canvas.app.firstBattle.view.BattleView.prototype.enemyTurn = function() {
    canvas.app.firstBattle.model.enemyIsDead() ? (canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.ENEMY_DEAD),
    this.sndPlay("fightover_victory")) : this.enemy.gotoAndPlay("idle")
}
,
canvas.app.firstBattle.view.BattleView.prototype.sndPlay = function(t) {
    canvas.SoundManager.play(canvas.Config.soundsPath + "default/" + t + ".mp3")
}
,
canvas.app.firstBattle.view.CenterView = function() {
    this._mode,
    Object.defineProperty(this, "mode", {
        get: function() {
            return this._mode
        },
        set: function(t) {
            this._mode = t,
            canvas.EventManager.dispatchEvent(canvas.app.battle.Event.CENTER_CHANGE_MODE, null, t)
        }
    }),
    canvas.px.Container.call(this),
    this.controls = new canvas.px.Container,
    this.addChild(this.controls),
    this.cDot = new canvas.app.firstBattle.view.CenterDotView(this),
    this.addChild(this.cDot),
    this.cDot.setIcon(canvas.app.battle.Const.MODE_ATTACK),
    this.cAttack = new canvas.app.firstBattle.view.CenterAttackView(this),
    this.cAttack.activate(),
    this.hotkeyShowersCont = new canvas.px.Container,
    this.addChild(this.hotkeyShowersCont),
    this.hotkeyShowersCont.position.set(-Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2), -Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2)),
    this.hotkeyShowersCont.visible = !1,
    this.cSpells = new canvas.app.firstBattle.view.CenterSpellsView(this,this.hotkeyShowersCont),
    this.mode = canvas.app.battle.Const.MODE_ATTACK
}
,
canvas.app.firstBattle.view.CenterView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.CenterView.prototype.activeBlock = function(t) {
    canvas.app.battle.log("cCenter:active_block " + t),
    this.cAttack.activeBlock(t)
}
,
canvas.app.firstBattle.view.CenterView.prototype.applyMask = function(t) {
    this.cAttack.applyMask(t)
}
,
canvas.app.firstBattle.view.CenterView.prototype.changeControlMode = function(t) {
    switch (void 0 === t && (t = !1),
    this.mode) {
    case canvas.app.battle.Const.MODE_ATTACK:
        this.mode = canvas.app.battle.Const.MODE_SPELLS,
        t || canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 1, canvas.app.battle.Const.TO_FS_PF_MAGIC]),
        this.cAttack.deactivate();
        break;
    case canvas.app.battle.Const.MODE_SPELLS:
        this.mode = canvas.app.battle.Const.MODE_ATTACK,
        t || (canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 0, canvas.app.battle.Const.TO_FS_PF_MAGIC]),
        canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_CHANGE_MODE, 0, canvas.app.battle.Const.TO_FS_PF_DEFENDED])),
        this.cSpells.deactivate(),
        this.hotkeyShowersCont.visible = !1;
        break;
    default:
        canvas.app.battle.log('ERR: unknown mode "' + this.mode + '"', 16711680)
    }
    this.cDot.setIcon(this.mode, t),
    canvas.app.firstBattle.model.mode = this.mode
}
,
canvas.app.firstBattle.view.CenterView.prototype.controlDeactivated = function() {
    switch (this.mode) {
    case canvas.app.battle.Const.MODE_ATTACK:
        this.cAttack.activate();
        break;
    case canvas.app.battle.Const.MODE_SPELLS:
        this.cSpells.activate();
        break;
    default:
        canvas.app.battle.log('ERR: unknown mode "' + this.mode + '"', 16711680)
    }
}
,
canvas.app.firstBattle.view.CenterView.prototype.addControl = function(t) {
    t.parent != this.controls ? this.controls.addChild(t) : canvas.app.battle.log('WARN: "' + t + '" already contains in controls', 10027008)
}
,
canvas.app.firstBattle.view.CenterView.prototype.removeControl = function(t) {
    t.parent == this.controls ? this.controls.removeChild(t) : canvas.app.battle.log('WARN: "' + t + '" not contains in controls', 10027008)
}
,
canvas.app.firstBattle.view.CenterView.prototype.buildSpells = function(t) {
    canvas.app.battle.log("cCenter:build_spells ** "),
    this.cDot.check(),
    this.cSpells.buildSpells()
}
,
canvas.app.firstBattle.view.CenterView.prototype.turnOnKeyCallbacks = function() {
    this.cDot.turnOnKeyCallbacks()
}
,
canvas.app.firstBattle.view.CenterView.prototype.turnOffKeyCallbacks = function() {
    this.cDot.turnOffKeyCallbacks()
}
,
canvas.app.firstBattle.view.CenterView.prototype.useEffect = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.EVENT_MY_FUNC, null, [canvas.app.battle.Const.MY_FUNC_USE_EFFECT, t]);
    t = canvas.app.battle.model;
    null != t.memDat[t.oppId] && (t = t.memDat[t.oppId].persFlags,
    this.coolDownStart(t))
}
,
canvas.app.firstBattle.view.CenterView.prototype.useSlotConfirmed = function(t) {
    this.cSpells.useSlotConfirmed(t)
}
,
canvas.app.firstBattle.view.CenterView.prototype.setDefCooldown = function() {
    this.cSpells.setDefCooldown()
}
,
canvas.app.firstBattle.view.CenterView.prototype.spellsUnlockOnError = function(t) {
    this.cSpells.spellsUnlockOnError(t)
}
,
canvas.app.firstBattle.view.CenterView.prototype.coolDownStart = function(t) {
    canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_STUNNED) && this.cAttack.coolDownStart()
}
,
canvas.app.firstBattle.view.CenterView.prototype.checkSpells = function(t) {
    this.cSpells.checkSpells(t)
}
,
canvas.app.firstBattle.view.CenterView.prototype.addSpellCoolDown = function(t, e) {
    void 0 === e && (e = !1),
    this.cSpells.addSpellCoolDown(t, e)
}
,
canvas.app.firstBattle.view.CenterView.prototype.turnBowPanel = function(t) {}
,
canvas.app.firstBattle.view.CenterView.prototype.setVisible = function(t) {
    this.visible = t,
    this.visible || this.cDot.externalMouseOut()
}
,
canvas.app.firstBattle.view.CenterView.prototype.attackFunc = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.PERS_ATTACK, null, t)
}
,
canvas.app.firstBattle.view.CenterView.prototype.blockSwitch = function() {
    canvas.EventManager.dispatchEvent(canvas.app.battle.Event.BLOCK_SWITCH)
}
,
canvas.app.firstBattle.view.CenterDotView = function(t) {
    canvas.px.Container.call(this),
    this.rt = t,
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot")),
    this.bg.position.set(-Math.round(this.bg.width / 2), -Math.round(this.bg.height / 2)),
    this.bgTop = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot_top")),
    this.bgTop.position.set(-Math.round(this.bgTop.width / 2), -Math.round(this.bgTop.height / 2)),
    this.bgLight = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot_light")),
    this.bgLight.position.set(this.bg.x, this.bg.y),
    this.bgLight.alpha = 0,
    this.icon = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.bt = new canvas.px.Graphics,
    this.bt.beginFill(0, 0),
    this.bt.drawCircle(0, 0, 34),
    this.bt.endFill(),
    this.bt.interactive = !0,
    this.bt.buttonMode = !0,
    this.interactive = !0,
    this.hint = new canvas.app.view.PxHint(canvas.Translator.getText(1711)),
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint)
    }),
    this.dotClickTime = 0,
    this.light = new canvas.px.Graphics,
    this.light.beginFill(16777215, .3),
    this.light.drawCircle(0, 0, 25),
    this.light.endFill(),
    this.light.blendMode = canvas.px.BlendMode.OVERLAY,
    this.addChild(this.bg),
    this.addChild(this.bgLight),
    this.addChild(this.icon),
    this.addChild(this.bt),
    this.rad = Math.round(this.bg.width / 2 - 6),
    this.msk = new canvas.px.Graphics,
    this.msk.beginFill(0, 1),
    this.msk.drawCircle(0, 0, this.rad - 1),
    this.msk.endFill(),
    this.har = [[this.rad, -this.rad], [this.rad, this.rad], [-this.rad, this.rad], [-this.rad, -this.rad], [0, -this.rad]],
    this.shp = new canvas.px.Graphics,
    this.shp.mask = this.msk,
    this.addChild(this.shp),
    this.addChild(this.msk),
    this.addChild(this.bgTop)
}
,
canvas.app.firstBattle.view.CenterDotView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.CenterDotView.prototype.startBlicking = function() {
    this.blickValue = 0,
    this.interval = setInterval(this.intervalHandler.bind(this), 20)
}
,
canvas.app.firstBattle.view.CenterDotView.prototype.intervalHandler = function() {
    var t = Math.floor(this.blickValue)
      , e = this.blickValue - t;
    this.bgLight.alpha = t % 2 == 0 ? e : 1 - e,
    this.blickValue += .05,
    6 < this.blickValue && (clearInterval(this.interval),
    this.bgLight.alpha = 0,
    this.bgLight.visible = !1)
}
,
canvas.app.firstBattle.view.CenterDotView.prototype.check = function() {
    this.btActivated || (this.btActivated = !0,
    this.bt.interactive = !0,
    this.btIsOn = !0,
    this.bt.mouseover = this.handlerBtnOver.bind(this),
    this.bt.mouseout = this.handlerBtnOut.bind(this),
    this.bt.mouseup = this.handlerBtnClick.bind(this))
}
,
canvas.app.firstBattle.view.CenterDotView.prototype.checkDot = function() {
    return Date.now() >= this.dotClickTime + canvas.app.battle.Const.CENTER_DOT_TIME_CD && 0 != canvas.app.battle.model.oppId
}
,
canvas.app.firstBattle.view.CenterDotView.prototype.switchDot = function(t) {
    canvas.app.battle.log("CenterDot: switch, fl=" + t),
    t ? this.btIsOn || (this.btIsOn = !0,
    this.bt.interactive = !0,
    this.bt.mouseover = this.handlerBtnOver.bind(this),
    this.bt.mouseout = this.handlerBtnOut.bind(this),
    this.bt.mouseup = this.handlerBtnClick.bind(this)) : this.btIsOn && !this.checkDot() && (this.btIsOn = !1,
    this.bt.interactive = !1,
    this.bt.mouseover = null,
    this.bt.mouseout = null,
    this.bt.mouseup = null),
    canvas.utils.HintManager.instance.hide()
}
,
canvas.app.firstBattle.view.CenterDotView.prototype.handlerBtnOver = function() {
    this.light.parent != this && this.addChild(this.light)
}
,
canvas.app.firstBattle.view.CenterDotView.prototype.handlerBtnOut = function() {
    this.light.parent == this && this.removeChild(this.light)
}
,
canvas.app.firstBattle.view.CenterDotView.prototype.handlerBtnClick = function() {
    this.handlerBtnOut();
    var t = Date.now();
    this.dotClickTime = t,
    this.rt.changeControlMode(),
    this.switchDot(!0),
    this.shp.clear(),
    this.hint.text = canvas.Translator.getText(canvas.app.firstBattle.model.mode == canvas.app.battle.Const.MODE_ATTACK ? 1711 : 1712),
    canvas.app.firstBattle.model.spellsUsed = !0
}
,
canvas.app.firstBattle.view.CenterDotView.prototype.externalMouseOut = function() {
    this.handlerBtnOut()
}
,
canvas.app.firstBattle.view.CenterDotView.prototype.setIcon = function(t, e) {
    switch (t) {
    case canvas.app.battle.Const.MODE_ATTACK:
    case canvas.app.battle.Const.MODE_SPELLS:
        this.icon.texture = canvas.ResourceLoader.getImage("ui", "battle_center_icon_" + (t == canvas.app.battle.Const.MODE_ATTACK ? "1" : e ? "3" : "2")),
        this.icon.x = -Math.round(this.icon.width / 2),
        this.icon.y = -Math.round(this.icon.height / 2);
        break;
    default:
        canvas.app.battle.log('WARN: unknown mode "' + t + '"', 10027008)
    }
}
,
canvas.app.firstBattle.view.CenterDotView.prototype.turnOnKeyCallbacks = function() {
    this.initKeyCallbacks(!0)
}
,
canvas.app.firstBattle.view.CenterDotView.prototype.turnOffKeyCallbacks = function() {
    this.initKeyCallbacks(!1)
}
,
canvas.app.firstBattle.view.CenterDotView.prototype.initKeyCallbacks = function(t) {
    t && canvas.app.battle.model.hasSpells ? canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this) : canvas.EventManager.removeEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this)
}
,
canvas.app.firstBattle.view.CenterDotView.prototype.handlerKey = function(t) {
    t.params.globalKeyCode == canvas.Const.TAB && canvas.app.battle.model.centerVisible && canvas.app.battle.model.hasSpells && this.handlerBtnClick()
}
,
canvas.app.firstBattle.view.CenterClsView = function() {
    canvas.px.Container.call(this),
    this.showVals = [.47, .67, 1],
    this.hideVals = [.67, .47, .4]
}
,
canvas.app.firstBattle.view.CenterClsView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.CenterClsView.prototype.activate = function() {
    this.rt.addControl(this),
    this.scale.set(.4, .4),
    this.frameIndex = 0,
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerShow, this)
}
,
canvas.app.firstBattle.view.CenterClsView.prototype.deactivate = function() {
    this.scale.set(1, 1),
    this.frameIndex = 0,
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerHide, this)
}
,
canvas.app.firstBattle.view.CenterClsView.prototype.handlerShow = function() {
    this.scale.set(this.showVals[this.frameIndex]),
    this.frameIndex < this.showVals.length - 1 ? this.frameIndex++ : canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerShow, this)
}
,
canvas.app.firstBattle.view.CenterClsView.prototype.handlerHide = function() {
    this.scale.set(this.hideVals[this.frameIndex], this.hideVals[this.frameIndex]),
    this.frameIndex < this.showVals.length - 1 ? this.frameIndex++ : (canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerHide, this),
    this.rt.removeControl(this),
    this.rt.controlDeactivated())
}
,
canvas.app.firstBattle.view.CenterAttackView = function(t) {
    canvas.app.firstBattle.view.CenterClsView.call(this),
    this.isCooldown = !1,
    this.rt = t,
    this.rad1 = 42,
    this.rad2 = 70,
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center")),
    this.bgGrey = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_grey")),
    this.bg.x = this.bgGrey.x = -Math.round(this.bg.width / 2),
    this.bg.y = this.bgGrey.y = -Math.round(this.bg.height / 2),
    this.bgMask = new canvas.px.Graphics,
    this.setBgMask(this.rad2),
    this.bg.mask = this.bgMask,
    this.bladeUp = new canvas.app.firstBattle.view.CenterBladeView(this.rt,9,-41,-55),
    this.bladeMid = new canvas.app.firstBattle.view.CenterBladeView(this.rt,39,-11,0),
    this.bladeBot = new canvas.app.firstBattle.view.CenterBladeView(this.rt,31,28,55),
    this.sectorUp = new canvas.app.firstBattle.view.CenterSectorView(0,0,-60,canvas.app.battle.Const.TOP_ATTACK_ID,this.bladeUp,this.rt.attackFunc,canvas.Translator.getText(33),canvas.Translator.getText(60)),
    this.sectorMid = new canvas.app.firstBattle.view.CenterSectorView(0,0,0,canvas.app.battle.Const.MIDDLE_ATTACK_ID,this.bladeMid,this.rt.attackFunc,canvas.Translator.getText(34),canvas.Translator.getText(61)),
    this.sectorBot = new canvas.app.firstBattle.view.CenterSectorView(0,0,60,canvas.app.battle.Const.BOTTOM_ATTACK_ID,this.bladeBot,this.rt.attackFunc,canvas.Translator.getText(35),canvas.Translator.getText(62)),
    this.blockOn = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_center_block1")),
    this.blockOn.position.set(-62, -22),
    this.blockOn.visible = !1,
    this.blockOff = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_center_block2")),
    this.blockOff.position.set(-62, -22),
    this.blockBtn = new canvas.px.Graphics,
    this.blockBtn.position.set(-62, -22),
    this.blockBtn.beginFill(0, 0),
    this.blockBtn.drawRect(0, 0, 18, 44),
    this.blockBtn.endFill(),
    this.blockBtn.interactive = !0,
    this.blockBtn.buttonMode = !0,
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, {
        target: this.blockBtn,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(canvas.Translator.getText(36),canvas.Translator.getText(63)))
    }),
    this.blockBtn.click = this.handlerBlockClick.bind(this),
    this.addChild(this.bgGrey),
    this.addChild(this.bg),
    this.addChild(this.bgMask),
    this.addChild(this.bladeUp),
    this.addChild(this.bladeMid),
    this.addChild(this.bladeBot),
    this.addChild(this.sectorUp),
    this.addChild(this.sectorMid),
    this.addChild(this.sectorBot),
    this.addChild(this.blockOn),
    this.addChild(this.blockOff),
    this.addChild(this.blockBtn)
}
,
canvas.app.firstBattle.view.CenterAttackView.prototype = Object.create(canvas.app.firstBattle.view.CenterClsView.prototype),
canvas.app.firstBattle.view.CenterAttackView.prototype.handlerBlockClick = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.BLOCK_CHANGE)
}
,
canvas.app.firstBattle.view.CenterAttackView.prototype.activeBlock = function(t) {
    this.blockOn.visible = t,
    this.blockOff.visible = !t
}
,
canvas.app.firstBattle.view.CenterAttackView.prototype.applyMask = function(t) {
    var e = 1 == (1 & t)
      , a = (2 & t) >> 1 == 1
      , t = (4 & t) >> 2 == 1;
    this.sectorUp.visible = e,
    this.bladeUp.visible = e,
    this.sectorMid.visible = a,
    this.bladeMid.visible = a,
    this.sectorBot.visible = t,
    this.bladeBot.visible = t
}
,
canvas.app.firstBattle.view.CenterAttackView.prototype.setBgMask = function(t) {
    this.bgMask.clear(),
    this.bgMask.beginFill(255, 1),
    this.bgMask.drawCircle(0, 0, t),
    this.bgMask.endFill()
}
,
canvas.app.firstBattle.view.CenterAttackView.prototype.coolDownStart = function() {}
,
canvas.app.firstBattle.view.CenterAttackView.prototype.setCooldown = function(t) {}
,
canvas.app.firstBattle.view.CenterAttackView.prototype.refreshBgMask = function() {
    var t;
    2050 < Date.now() - canvas.app.battle.model.attackTime ? (this.setBgMask(this.rad2),
    this.sectorUp.visible = this.bladeUp.visible = !0,
    this.sectorMid.visible = this.bladeMid.visible = !0,
    this.sectorBot.visible = this.bladeBot.visible = !0,
    this.applyMask(canvas.app.battle.model.oppMask),
    this.rt.mode == canvas.app.battle.Const.MODE_ATTACK && this.rt.cDot.switchDot(!0),
    this.mInterval && (clearInterval(this.mInterval),
    this.setCooldown(!1)),
    this.rt.turnBowPanel(!0)) : (t = this.rad1 + (this.rad2 - this.rad1) * (Date.now() - this.vTime) / this.sTime,
    this.setBgMask(t))
}
,
canvas.app.firstBattle.view.CenterBladeView = function(t, e, a, s) {
    canvas.px.Container.call(this),
    this.mv = [0, 2.7, 4.8, 6.3, 7.2, 7.5, 7.2, 6.3, 4.8, 2.7],
    this.mvLen = 10,
    this.rt = t,
    this.position.set(e, a),
    this.rotation = canvas.Functions.degToRad(s),
    this.bmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_blade")),
    this.addChild(this.bmp)
}
,
canvas.app.firstBattle.view.CenterBladeView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.CenterBladeView.prototype.handlerFrame = function() {
    this.mvIndex++,
    this.mvIndex == this.mvLen && (this.mvIndex = 0),
    this.bmp.x = this.mv[this.mvIndex]
}
,
canvas.app.firstBattle.view.CenterBladeView.prototype.over = function() {
    this.mvIndex = 0,
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerFrame, this)
}
,
canvas.app.firstBattle.view.CenterBladeView.prototype.out = function() {
    this.bmp.x = 0,
    canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerFrame, this)
}
,
canvas.app.firstBattle.view.CenterSectorView = function(t, e, a, s, i, n, o, r) {
    canvas.px.Graphics.call(this),
    this.position.set(t, e),
    this.rotation = canvas.Functions.degToRad(a),
    this.r1 = 28,
    this.r2 = 76,
    this.ang = Math.PI / 3,
    this.shape = new canvas.px.Graphics,
    this.shape.interactive = !0,
    this.addChild(this.shape),
    this.drawSector(),
    this.bladeId = s,
    this.bladeLnk = i,
    this.attackFunc = n,
    this.interactive = !0,
    this.buttonMode = !0,
    this.mouseover = this.handlerOver.bind(this),
    this.mouseup = this.handlerClick.bind(this),
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, {
        target: this.shape,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(o))
    })
}
,
canvas.app.firstBattle.view.CenterSectorView.prototype = Object.create(canvas.px.Graphics.prototype),
canvas.app.firstBattle.view.CenterSectorView.prototype.drawSector = function() {
    this.shape.moveTo(this.r1 * Math.sin(this.ang), this.r1 * Math.cos(this.ang)),
    this.shape.beginFill(0, 0),
    this.shape.lineTo(this.r2 * Math.sin(this.ang), this.r2 * Math.cos(this.ang)),
    this.shape.lineTo(this.r2 * Math.sin(3 * this.ang / 2), this.r2 * Math.cos(3 * this.ang / 2)),
    this.shape.lineTo(this.r2 * Math.sin(2 * this.ang), this.r2 * Math.cos(2 * this.ang)),
    this.shape.lineTo(this.r1 * Math.sin(2 * this.ang), this.r1 * Math.cos(2 * this.ang)),
    this.shape.lineTo(this.r1 * Math.sin(3 * this.ang / 2), this.r1 * Math.cos(3 * this.ang / 2)),
    this.endFill()
}
,
canvas.app.firstBattle.view.CenterSectorView.prototype.handlerOver = function() {
    this.bladeLnk.over(),
    this.mouseout = this.handlerOut.bind(this)
}
,
canvas.app.firstBattle.view.CenterSectorView.prototype.handlerOut = function() {
    this.bladeLnk.out(),
    this.mouseout = null
}
,
canvas.app.firstBattle.view.CenterSectorView.prototype.handlerClick = function() {
    this.attackFunc && this.attackFunc(this.bladeId)
}
,
canvas.app.firstBattle.view.CenterSpellsView = function(t, e) {
    canvas.app.firstBattle.view.CenterClsView.call(this),
    this.rt = t,
    this.hotkeyShowersCont = e,
    this.hotkeysPoints = [new canvas.px.Point(69,38), new canvas.px.Point(91,45), new canvas.px.Point(104,62), new canvas.px.Point(104,84), new canvas.px.Point(90,101), new canvas.px.Point(69,109), new canvas.px.Point(48,102), new canvas.px.Point(35,85), new canvas.px.Point(34,62), new canvas.px.Point(47,45)],
    this.slotsPos = [[-18, -78], [17, -67], [38, -36], [39, 0], [17, 29], [-18, 41], [-53, 29], [-75, 0], [-75, -36], [-53, -66]],
    this.spellsCont = new canvas.px.Container,
    this.tgBmp = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_spells")),
    this.tgBmp.position.set(-Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2), -Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2)),
    this.addChild(this.spellsCont),
    this.addChild(this.tgBmp),
    this.slots = {}
}
,
canvas.app.firstBattle.view.CenterSpellsView.prototype = Object.create(canvas.app.firstBattle.view.CenterClsView.prototype),
canvas.app.firstBattle.view.CenterSpellsView.prototype.buildSpells = function() {
    var t, e, a;
    for (t in canvas.Functions.destroyChildren(this.spellsCont),
    this.removeAllSpellHotkeyShowers(),
    canvas.Functions.destroyChildren(this.tgBmp),
    canvas.app.firstBattle.model.spells)
        e = canvas.app.firstBattle.model.spells[t],
        (a = this.slotsPos[parseInt(t) - 1]) ? (this.slots[t] && (this.slots[t].remove(),
        delete this.slots[t]),
        this.slots[t] = new canvas.app.firstBattle.view.CenterSpellItemRenderer(this,t,a,e)) : canvas.app.battle.log("ERR: positions for slotId=" + t + " is null", 16711680);
    for (var s, i = 0; i < canvas.app.battle.Const.CENTER_SPELL_ITEMS_COUNT; i++)
        this.slots[i + 1] || (a = this.slotsPos[i],
        s = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_spell_empty")),
        this.tgBmp.addChild(s),
        s.position.set(a[0] + Math.round(canvas.app.battle.Const.SPELLS_CONT_WIDTH / 2) - 1, a[1] + Math.round(canvas.app.battle.Const.SPELLS_CONT_HEIGHT / 2) - 1))
}
,
canvas.app.firstBattle.view.CenterSpellsView.prototype.useSpellItem = function(t) {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.PERS_ATTACK_SPELL, null, t)
}
,
canvas.app.firstBattle.view.CenterSpellsView.prototype.useSlotConfirmed = function(t) {
    var e, a = canvas.app.battle.model.spells[t], s = Date.now(), i = 1e3 * canvas.app.battle.model.spells[t].cdTime + s;
    for (e in this.slots)
        canvas.app.battle.model.spells[e].cdGripId == a.cdGripId ? this.slots[e].cooldownStart(s, i) : this.slots[e].cooldownStart(s, s + canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN);
    this.unlock()
}
,
canvas.app.firstBattle.view.CenterSpellsView.prototype.setDefCooldown = function() {
    var t, e = Date.now(), a = e + canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN;
    for (t in this.slots)
        this.slots[t].cooldownStart(e, a)
}
,
canvas.app.firstBattle.view.CenterSpellsView.prototype.spellsUnlockOnError = function(t) {
    for (var e in canvas.app.battle.log("CenterSpellsView: spellsUnlockOnError " + t),
    canvas.app.battle.model.spells)
        if (canvas.app.battle.model.spells[e].effId == t) {
            canvas.app.battle.log("spells unlocked on error"),
            this.unlock();
            break
        }
}
,
canvas.app.firstBattle.view.CenterSpellsView.prototype.restoreCooldowns = function() {
    for (var t in this.slots)
        this.slots[t].restoreCooldown()
}
,
canvas.app.firstBattle.view.CenterSpellsView.prototype.switchDot = function(t) {
    this.rt.cDot.switchDot(t)
}
,
canvas.app.firstBattle.view.CenterSpellsView.prototype.checkSpells = function(t) {
    for (var e in this.slots)
        this.slots[e].checkSpells(t)
}
,
canvas.app.firstBattle.view.CenterSpellsView.prototype.addSpellCoolDown = function(t, e) {
    for (var a in void 0 === e && (e = !1),
    this.slots)
        this.slots[a].addSpellCoolDown(t, !0, e)
}
,
canvas.app.firstBattle.view.CenterSpellsView.prototype.unlock = function() {
    this.locked = !1
}
,
canvas.app.firstBattle.view.CenterSpellsView.prototype.createSpellHotkeyShowers = function() {
    for (var t, e, a = 0; a < canvas.app.battle.Const.CENTER_SPELL_ITEMS_COUNT; a++)
        t = "",
        (e = this.slots[a + 1]) && (t = e.getHotkeyText()),
        e = this.hotkeysPoints[a],
        t = new canvas.app.firstBattle.view.CenterSpellHotkeyRenderer(t),
        this.hotkeyShowersCont.addChild(t),
        t.x = e.x,
        t.y = e.y
}
,
canvas.app.firstBattle.view.CenterSpellsView.prototype.removeSpellHotkeyShower = function(t) {
    for (var e = this.hotkeyShowersCont.children.length, a = 0; a < e; a++)
        if (this.hotkeyShowersCont.getChildAt(a) == t) {
            this.hotkeyShowersCont.removeChildAt(a);
            break
        }
}
,
canvas.app.firstBattle.view.CenterSpellsView.prototype.removeAllSpellHotkeyShowers = function() {
    canvas.Functions.destroyChildren(this.hotkeyShowersCont)
}
,
canvas.app.firstBattle.view.CenterSpellHotkeyRenderer = function(t) {
    canvas.px.Container.call(this),
    this.bg = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_center_dot")),
    this.bg.width = 16,
    this.bg.height = 16,
    this.addChild(this.bg),
    this.textTF = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16509576,this.bg.width,this.bg.height,"center"),
    this.addChild(this.textTF),
    this.textTF.position.set(0, 2),
    this.textTF.text = t
}
,
canvas.app.firstBattle.view.CenterSpellHotkeyRenderer.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.CenterSpellItemRenderer = function(t, e, a, s) {
    canvas.px.Container.call(this),
    this.spellsHotkeys = ["Q", "W", "E", "R", "T", "A", "S", "D", "F", "G"],
    this.spellsHotkeyCodes = [canvas.Const.KEYS.Q, canvas.Const.KEYS.W, canvas.Const.KEYS.E, canvas.Const.KEYS.R, canvas.Const.KEYS.T, canvas.Const.KEYS.A, canvas.Const.KEYS.S, canvas.Const.KEYS.D, canvas.Const.KEYS.F, canvas.Const.KEYS.G],
    this.rt = t,
    this.slotId = e,
    this.obj = s,
    this.position.set(a[0] - 1, a[1] - 1);
    this.bmpMsk = new canvas.px.Graphics,
    this.bmpMsk.beginFill(0, 0),
    this.bmpMsk.drawCircle(19, 19, 19),
    this.bmpMsk.endFill(),
    this.bmp = new canvas.px.Sprite(canvas.px.TextureEmpty),
    this.bmp.mask = this.bmpMsk,
    this.bmp.scale.set(38 / 60, 38 / 60),
    this.light = new canvas.px.Graphics,
    this.light.beginFill(16777215, .3),
    this.light.drawCircle(19, 19, 19),
    this.light.endFill(),
    this.light.visible = !1,
    this.light.blendMode = canvas.px.BlendMode.OVERLAY,
    this.btn = new canvas.px.Graphics,
    this.btn.beginFill(0, 0),
    this.btn.drawCircle(19, 19, 19),
    this.btn.endFill(),
    this.btn.buttonMode = !0,
    this.btn.interactive = !0,
    this.btn.mouseover = this.handlerOver.bind(this),
    this.btn.click = this.handlerClick.bind(this),
    this.cooldown = new canvas.app.firstBattle.view.CenterSpellItemCdRenderer(this),
    this.addChild(this.bmp),
    this.addChild(this.bmpMsk),
    this.addChild(this.light),
    this.addChild(this.btn),
    this.rt.spellsCont.addChild(this),
    this.addChild(this.cooldown),
    0 < s.cdTime && 0 < s.cdLeft && (a = Date.now(),
    this.cooldown.activate(a - (s.cdTime - s.cdLeft), 1e3 * s.cdLeft + a)),
    this.initKeyCallbacks(),
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(new canvas.app.view.PxHint(this.obj.title))
    }),
    this.bmp.texture = canvas.ResourceLoader.getImage("ui", this.obj.picture),
    this.interactive = !0
}
,
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.handlerClick = function() {
    this.cooldown.active() || (this.rt.useSpellItem(this.slotId),
    this.cooldown.showTxt())
}
,
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.handlerOver = function() {
    this.btn.mouseout = this.handlerOut.bind(this),
    this.light.visible = !0,
    this.cooldown.active() && this.cooldown.showTxt()
}
,
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.handlerOut = function() {
    this.light.visible = !1,
    this.btn.mouseout = null,
    this.cooldown.active() && this.cooldown.hideTxt()
}
,
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.cooldownStart = function(t, e) {
    this.cooldown.parent != this && this.addChild(this.cooldown),
    this.cooldown.activate(t, e)
}
,
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.restoreCooldown = function() {
    this.cooldown.restore()
}
,
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.cooldownCancel = function() {
    this.cooldown.parent == this && this.removeChild(this.cooldown),
    0 != canvas.app.battle.model.oppId && this.rt.switchDot(!0)
}
,
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.remove = function() {
    this.parent == this.rt.spellsCont ? this.rt.spellsCont.removeChild(this) : canvas.app.battle.log("ERR: this slot is not contains", 16711680),
    this.rt = null
}
,
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.checkSpells = function(t) {
    this.cooldown.forStep() && (this.cooldown.cooldownDone(),
    canvas.app.battle.model.testFlag(t, canvas.app.battle.Const.FS_PF_STUNNED) && this.addSpellCoolDown(3050))
}
,
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.addSpellCoolDown = function(t, e, a) {
    void 0 === e && (e = !1),
    void 0 === a && (a = !1);
    var s = Date.now();
    e ? (e = canvas.app.battle.model.abilsFlags[canvas.app.battle.model.spells[this.slotId].effId],
    a && canvas.app.battle.model.testFlag(e, canvas.app.battle.Const.FS_PEF_PASSTURN) && (t = 12e5),
    this.cooldownStart(s, s + t)) : s - canvas.app.battle.model.attackTime < t && this.cooldownStart(s, canvas.app.battle.model.attackTime + t)
}
,
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.initKeyCallbacks = function() {
    canvas.EventManager.addEventListener(canvas.Event.STAGE_KEY_DOWN, null, this.handlerKey, this)
}
,
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.handlerKey = function(t) {
    canvas.app.battle.model.centerMode != canvas.app.battle.Const.MODE_ATTACK && t.params.globalKeyCode == this.getHotkeyCode() && this.handlerClick()
}
,
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.getHotkeyCode = function() {
    return this.spellsHotkeyCodes[this.slotId - 1]
}
,
canvas.app.firstBattle.view.CenterSpellItemRenderer.prototype.getHotkeyText = function() {
    return this.spellsHotkeys[this.slotId - 1]
}
,
canvas.app.firstBattle.view.CenterSpellItemCdRenderer = function(t) {
    canvas.px.Container.call(this),
    this.rt = t,
    this.realFT = -1,
    this.realST = -1,
    this.forStepFl = !1,
    this.rad = 19;
    t = this.rad;
    this.har = [[t, -t], [t, t], [-t, t], [-t, -t], [0, -t]],
    this.shp = new canvas.px.Graphics,
    this.shp.position.set(t, t),
    this.msk = new canvas.px.Graphics,
    this.msk.position.set(t, t),
    this.msk.beginFill(0, 1),
    this.msk.drawCircle(0, 0, t - 1),
    this.msk.endFill(),
    this.tf = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_STROKE,16777215,24,16,"center"),
    this.tf.position.set(t - 12, t - 8),
    this.shp.mask = this.msk,
    this.addChild(this.shp),
    this.addChild(this.msk)
}
,
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.restore = function() {
    0 < this.realFT && this.activate(0, 0)
}
,
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.activate = function(t, e) {
    12e5 <= e - t ? (this.realFT = this.ftime,
    this.realST = this.stime) : 0 < this.realFT && (t = this.realST,
    e = this.realFT,
    this.realFT = -1,
    this.activated = !1),
    this.activated ? this.ftime - t < e - t && (this.stime = t,
    this.ftime = e) : (this.forStepFl = e - t == canvas.app.battle.Const.DEFAULT_SPELLS_COOLDOWN || 1e6 < e - t,
    this.activated = !0,
    this.stime = t,
    this.ftime = e,
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerFrame, this))
}
,
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.handlerFrame = function() {
    try {
        var t, e = Date.now();
        if (this.har && e < this.ftime) {
            1e6 < this.ftime - this.stime ? (t = 100,
            this.ftime = e + 12e5,
            this.tf.text = "") : (this.tf.text = Math.round((this.ftime - e) / 1e3),
            t = (e - this.stime) / (this.ftime - this.stime) * 100),
            this.shp.clear(),
            this.shp.beginFill(0, .6),
            this.shp.moveTo(0, 0);
            var a = t * (3.6 / 57.2958) - 1.57
              , e = this.rad * Math.cos(a)
              , a = this.rad * Math.sin(a);
            this.shp.lineTo(e, a);
            for (var s = Math.round(t % 100 / 25); s < this.har.length; )
                this.shp.lineTo(this.har[s][0], this.har[s][1]),
                s++;
            this.shp.endFill()
        } else
            this.cooldownDone()
    } catch (t) {}
}
,
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.cooldownDone = function() {
    this.activated = this.forStepFl = !1,
    canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.handlerFrame, this),
    this.hideTxt(),
    this.rt.cooldownCancel()
}
,
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.showTxt = function() {
    this.tf.parent != this && this.addChild(this.tf)
}
,
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.hideTxt = function() {
    this.tf.parent == this && this.removeChild(this.tf)
}
,
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.active = function() {
    return this.activated
}
,
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.setActive = function(t) {
    this.activated = t
}
,
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.forStep = function() {
    return this.forStepFl
}
,
canvas.app.firstBattle.view.CenterSpellItemCdRenderer.prototype.setForStep = function(t) {
    this.forStepFl = t
}
,
canvas.app.firstBattle.view.ComboHint = function() {
    canvas.px.Container.call(this),
    this.image = new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "battle_combo_hint")),
    this.image.scale.set(0, 0),
    this.image.anchor.set(.5, .5),
    this.addChild(this.image),
    this.state = !1,
    this.delayIndex = 0,
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.firstBattle.view.ComboHint.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.ComboHint.prototype.frameHandler = function() {
    var t;
    this.state ? 15 < this.delayIndex ? this.image.alpha <= 0 ? this.finish() : (this.image.y += 4,
    this.image.alpha -= .15) : this.delayIndex++ : 1 <= this.image.scale.x ? (this.state = !0,
    this.image.scale.set(1, 1)) : (t = 1 < (t = this.image.scale.x + .1) ? 1 : t,
    this.image.scale.set(t, t))
}
,
canvas.app.firstBattle.view.ComboHint.prototype.finish = function() {
    canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.parent.removeChild(this),
    this.destroy({
        children: !0
    })
}
,
canvas.app.firstBattle.view.DmgFly = function(t, e) {
    var a, s;
    switch (canvas.px.Container.call(this),
    this.ARR_Y = [70, 61.3, 54.55, 49.7, 46.8, 45.85, 45.85, 45.7, 45.6, 45.35, 44.95, 44.65, 44.15, 43.6, 43, 42.3, 41.6, 40.8, 39.85, 38.95, 37.9, 36.8, 35.65, 34.45, 33.1, 31.75, 30.3, 28.75, 27.2, 25.45, 23.75, 21.95, 20.1, 18.1, 16.15, 14.05, 11.85, 9.6, 7.3, 4.95, 2.5, 0],
    this.ARR_A = [0, .36, .64, .84, .96, 1, 1, 1, .99, .99, .98, .97, .96, .95, .94, .92, .91, .89, .87, .85, .83, .8, .78, .75, .72, .69, .66, .63, .59, .55, .52, .48, .44, .39, .35, .3, .26, .21, .16, .11, .05, 0],
    canvas.app.battle.Const.PERS_POS_X[t.tar] ? (this.x = canvas.app.battle.Const.PERS_POS_X[t.tar],
    this.dX = this.x + Math.floor(90 * Math.random() - 25) * ("pers" == t.tar ? 1 : -1),
    this.dX_mir = this.x + Math.floor(40 * Math.random() + 25) * ("pers" == t.tar ? -1 : 1),
    this.whose_dmg = t.tar) : (canvas.app.battle.log("DmgFly WARN: dmg_fly, unknown target = " + t.tar, 16711680),
    this.dX = this.x),
    this.y = 20 * e + 60,
    this.yy = this.y,
    this.dV = .7 * Math.random() + .65,
    this.dVx = .065,
    1 == t.crit && (t.kick = canvas.app.battle.Const.DMG_KICK_CRIT),
    t.kick) {
    case canvas.app.battle.Const.DMG_KICK_DODGE:
        a = 39168,
        s = canvas.Translator.getText(16),
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_WOUND:
        a = 16777215,
        s = this.val2str(t.val);
        break;
    case canvas.app.battle.Const.DMG_KICK_CRIT:
        a = 16711680,
        s = this.val2str(t.val);
        break;
    case canvas.app.battle.Const.DMG_KICK_BLOCK:
        a = 170,
        s = canvas.Translator.getText(31),
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_CURE:
        a = 39168,
        s = this.val2str(t.val),
        this.dX = this.dX_mir;
        break;
    case canvas.app.battle.Const.DMG_KICK_MANA:
        a = 4605695,
        s = this.val2str(t.val),
        this.dX = this.dX_mir;
        break;
    case canvas.app.battle.Const.DMG_KICK_ABSORB:
        a = 16776960,
        s = canvas.Translator.getText(17) + " " + String(t.val),
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_RESIST:
        a = 16711935,
        s = canvas.Translator.getText(18) + " " + String(t.val) + "%",
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_IMMUNITY:
        a = 65535,
        s = canvas.Translator.getText(46),
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_NOCHANCE:
        a = 65535,
        s = canvas.Translator.getText(47),
        this.dX = this.x;
        break;
    case canvas.app.battle.Const.DMG_KICK_FULLRES:
        a = 65535,
        s = canvas.Translator.getText(18),
        this.dX = this.x;
        break;
    default:
        canvas.app.battle.log("DmgFly WARN: showDMG unknown kick = " + t.kick, 16711680)
    }
    e = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_20_BOLD_STROKE,a,30,20,"center");
    e.text = s,
    this.addChild(e),
    this.dmg_fly_index = 0,
    this.updatePos(),
    canvas.EventManager.addEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.frameHandler, this)
}
,
canvas.app.firstBattle.view.DmgFly.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.DmgFly.prototype.val2str = function(t) {
    return 0 < t ? "+" + String(t) : String(t)
}
,
canvas.app.firstBattle.view.DmgFly.prototype.frameHandler = function() {
    this.dmg_fly_index++,
    this.dmg_fly_index < this.ARR_A.length ? this.updatePos() : (canvas.EventManager.removeEventListener(canvas.app.firstBattle.Event.ENTER_FRAME, null, this.frameHandler, this),
    this.parent.removeChild(this),
    this.destroy({
        children: !0
    }))
}
,
canvas.app.firstBattle.view.DmgFly.prototype.updatePos = function() {
    this.y = this.yy + this.ARR_Y[this.dmg_fly_index] * this.dV,
    this.alpha = this.ARR_A[this.dmg_fly_index] * this.dV,
    1 < Math.abs(this.x - this.dX) && (this.x -= (this.x - this.dX) * this.dVx)
}
,
canvas.app.firstBattle.view.EffectView = function() {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "inferno_effect"))),
    this.interactive = !0,
    this.hint = new canvas.app.view.PxHint,
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_ADD, null, {
        target: this,
        params: new canvas.utils.HintParams(this.hint)
    }),
    this.seconds = 12,
    this.update(),
    this.interval = setInterval(this.intervalHandler.bind(this), 1e3)
}
,
canvas.app.firstBattle.view.EffectView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.EffectView.prototype.update = function() {
    this.hint.text = canvas.Translator.getText(1713, [this.seconds])
}
,
canvas.app.firstBattle.view.EffectView.prototype.intervalHandler = function() {
    if (this.seconds--,
    this.update(),
    this.seconds < 1)
        return clearInterval(this.interval),
        canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.HINT_REMOVE, null, {
            target: this
        }),
        void this.destroy({
            children: !0
        });
    this.seconds % 3 == 0 && canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.PERS_EFFECT_DAMAGE)
}
,
canvas.app.firstBattle.view.FinishView = function() {
    canvas.px.Container.call(this),
    this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "victory_win")));
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("locale", "victory_win_title")));
    t.position.set(102, 138),
    (t = this.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11,7158057,256,100,"center"))).position.set(10, 2),
    t.text = canvas.Translator.getText(1716),
    t.position.set(102, 176);
    t = this.addChild(new canvas.px.Mask(150,28,0,0));
    t.position.set(150, 270),
    t.interactive = !0,
    t.buttonMode = !0,
    t.click = this.clickHandler.bind(this)
}
,
canvas.app.firstBattle.view.FinishView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.FinishView.prototype.clickHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.FINISH)
}
,
canvas.app.firstBattle.view.HpMpView = function() {
    canvas.px.Container.call(this),
    this.hpPersFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_hp_fill")),
    this.hpPers = new canvas.px.Graphics,
    this.hpPers.beginFill(0, 1),
    this.hpPers.lineStyle(0, 0, 0),
    this.hpPers.drawRect(0, 0, this.hpPersFill.width, this.hpPersFill.height),
    this.hpPers.endFill(),
    this.addChild(this.hpPersFill),
    this.addChild(this.hpPers),
    this.hpPersFill.mask = this.hpPers,
    this.hpPersFill.position.set(42, 38),
    this.hpPers.position.set(42, 38),
    this.hpOppFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_hp_fill")),
    this.hpOpp = new canvas.px.Graphics,
    this.hpOpp.beginFill(0, 1),
    this.hpOpp.lineStyle(0, 0, 0),
    this.hpOpp.drawRect(0, 0, this.hpOppFill.width, this.hpOppFill.height),
    this.hpOpp.endFill(),
    this.addChild(this.hpOppFill),
    this.addChild(this.hpOpp),
    this.hpOppFill.mask = this.hpOpp,
    this.hpOppFill.scale.x = -1,
    this.hpOppFill.position.set(403, 38),
    this.hpOpp.position.set(403, 38),
    this.mpPersFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_mp_fill")),
    this.mpPers = new canvas.px.Graphics,
    this.mpPers.beginFill(0, 1),
    this.mpPers.lineStyle(0, 0, 0),
    this.mpPers.drawRect(0, 0, this.mpPersFill.width, this.mpPersFill.height),
    this.mpPers.endFill(),
    this.addChild(this.mpPersFill),
    this.addChild(this.mpPers),
    this.mpPersFill.mask = this.mpPers,
    this.mpPersFill.position.set(42, 52),
    this.mpPers.position.set(42, 52),
    this.mpOppFill = new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "battle_mp_fill")),
    this.mpOpp = new canvas.px.Graphics,
    this.mpOpp.beginFill(0, 1),
    this.mpOpp.lineStyle(0, 0, 0),
    this.mpOpp.drawRect(0, 0, this.mpOppFill.width, this.mpOppFill.height),
    this.mpOpp.endFill(),
    this.addChild(this.mpOppFill),
    this.addChild(this.mpOpp),
    this.mpOppFill.mask = this.mpOpp,
    this.mpOppFill.position.set(275, 52),
    this.mpOpp.position.set(403, 52),
    this.hpPersText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center"),
    this.hpPersText.position.set(42, 38),
    this.addChild(this.hpPersText),
    this.mpPersText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center"),
    this.mpPersText.position.set(42, 52),
    this.addChild(this.mpPersText),
    this.hpOppText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center"),
    this.hpOppText.position.set(275, 38),
    this.addChild(this.hpOppText),
    this.mpOppText = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9,16770533,129,16,"center"),
    this.mpOppText.position.set(275, 52),
    this.addChild(this.mpOppText),
    this.setHpPers(0, 0),
    this.setMpPers(0, 0),
    this.setHpOpp(0, 0),
    this.setMpOpp(0, 0)
}
,
canvas.app.firstBattle.view.HpMpView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.HpMpView.prototype.setHpPers = function(t, e) {
    this.setValue(this.hpPersText, this.hpPers, t, e, 1)
}
,
canvas.app.firstBattle.view.HpMpView.prototype.setMpPers = function(t, e) {
    this.setValue(this.mpPersText, this.mpPers, t, e, 1)
}
,
canvas.app.firstBattle.view.HpMpView.prototype.setHpOpp = function(t, e) {
    this.setValue(this.hpOppText, this.hpOpp, t, e, -1)
}
;
canvas.app.firstBattle.view.HpMpView.prototype.setMpOpp = function(t, e) {
    this.setValue(this.mpOppText, this.mpOpp, t, e, -1)
}
,
canvas.app.firstBattle.view.HpMpView.prototype.setValue = function(t, e, a, s, i) {
    a = (s = s < 0 ? 0 : s) < a ? s : a < 0 ? 0 : a,
    0 != s ? (t.text = a + "/" + s,
    e.scale.x = a / s * i) : (t.text = "0/0",
    e.scale.x = 0)
}
,
canvas.app.firstBattle.view.LevelView = function() {
    canvas.px.Container.call(this),
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD,3616041,25,18,"center"),
    this.addChild(this.field),
    this.field.position.set(5, 13)
}
,
canvas.app.firstBattle.view.LevelView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.LevelView.prototype.setLevel = function(t) {
    this.field.text = t
}
,
canvas.app.firstBattle.view.NickView = function() {
    canvas.px.Container.call(this),
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_9_BOLD,16697738,120,10,"left"),
    this.addChild(this.field),
    this.field.y = 2,
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.infoButton, this.clickHandler, this)
}
,
canvas.app.firstBattle.view.NickView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.NickView.prototype.update = function(t, e) {
    this.nick = t,
    this.id = e,
    this.nick.length <= 18 ? this.field.text = this.nick : this.field.text = this.nick.substr(0, 16) + "...",
    this.field.x = -Math.round(this.field.width / 2) - 5,
    this.visible = !0
}
,
canvas.app.firstBattle.view.NickView.prototype.unshow = function() {
    this.nick = "",
    this.id = 0,
    this.field.text = "",
    this.visible = !1
}
,
canvas.app.firstBattle.view.SelectGenderWindow = function() {
    canvas.px.Container.call(this);
    var t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("ui", "select_win_back")));
    (t = t.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_11_BOLD,15660470,t.width - 20,20,"center"))).position.set(10, 2),
    t.text = canvas.Translator.getText(1702),
    this.selectField = t.addChild(new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD,9788490,80,20,"center")),
    this.selectField.position.set(63, 30),
    this.leftButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_red"),canvas.ResourceLoader.getImage("ui", "arrow_yellow"))),
    this.leftButton.scale.x = -1,
    this.leftButton.position.set(70, 33),
    this.rightButton = this.addChild(new canvas.ui.Button(canvas.ResourceLoader.getImage("ui", "arrow_red"),canvas.ResourceLoader.getImage("ui", "arrow_yellow"))),
    this.rightButton.position.set(156, 33),
    this.selectButton = this.addChild(new canvas.app.view.OldButton(9722697)),
    this.selectButton.setTitle(canvas.Translator.getText(1705)),
    this.selectButton.position.set(29, 52),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.leftButton, this.changeHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.rightButton, this.changeHandler, this),
    canvas.EventManager.addEventListener(canvas.ui.ButtonEvent.EVENT_CLICK, this.selectButton, this.selectHandler, this),
    this.update()
}
,
canvas.app.firstBattle.view.SelectGenderWindow.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.SelectGenderWindow.prototype.update = function() {
    this.selectField.text = canvas.Translator.getText(canvas.app.firstBattle.model.gender == canvas.Const.GENDER.MALE ? 1703 : 1704)
}
,
canvas.app.firstBattle.view.SelectGenderWindow.prototype.changeHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.GENDER_CHANGE)
}
,
canvas.app.firstBattle.view.SelectGenderWindow.prototype.selectHandler = function() {
    canvas.EventManager.dispatchEvent(canvas.app.firstBattle.Event.GENDER_SELECT)
}
,
canvas.app.firstBattle.view.TipView = function() {
    canvas.px.Container.call(this),
    this.field = new canvas.ui.Text(canvas.Const.FONT_TAHOMA_12_BOLD_STROKE_RED_WHITE,-1,canvas.app.firstBattle.Const.WIDTH,18,"center"),
    this.addChild(this.field),
    this.field.text = canvas.Translator.getText(1714),
    setTimeout(this.hide.bind(this), 3e3),
    this.interactive = !1
}
,
canvas.app.firstBattle.view.TipView.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.firstBattle.view.TipView.prototype.update = function() {}
,
canvas.app.firstBattle.view.TipView.prototype.hide = function() {
    this.interval = setInterval(this.intervalHandler.bind(this), 50)
}
,
canvas.app.firstBattle.view.TipView.prototype.intervalHandler = function() {
    this.alpha -= .05,
    this.alpha <= 0 && (clearInterval(this.interval),
    this.destroy({
        children: !0
    }))
}
,
canvas.app.puzzle.Event = {
    ENTER_FRAME: "Puzzle.ENTER_FRAME",
    GAME_OVER: "Puzzle.GAME_OVER",
    FINISH_GAME: "Puzzle.FINISH_GAME",
    CLOSE_GAME: "Puzzle.CLOSE_GAME",
    CONTINUE_GAME: "Puzzle.CONTINUE_GAME"
},
canvas.app.puzzle.Main = function(t) {
    canvas.px.Container.call(this),
    this.model = t,
    this.windowsManager = new canvas.utils.WindowsManager,
    this.view = new canvas.app.puzzle.View,
    this.addChild(this.view),
    this.windowsContainer = new canvas.px.Container,
    this.addChild(this.windowsContainer),
    this.windowsManager.init(this.windowsContainer, this.model.width, this.model.height, this.view),
    canvas.EventManager.addEventListener(canvas.app.puzzle.Event.GAME_OVER, null, this.gameOverHandler, this),
    canvas.EventManager.addEventListener(canvas.app.puzzle.Event.FINISH_GAME, null, this.finishGameHandler, this),
    canvas.EventManager.addEventListener(canvas.app.puzzle.Event.CLOSE_GAME, null, this.closeGameHandler, this),
    this.puzzle = new canvas.app.puzzle.view.PuzzleWindow,
    canvas.utils.WindowsManager.instance.openWindow(this.puzzle),
    this.initPuzzle()
}
,
canvas.app.puzzle.Main.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.puzzle.Main.prototype.initPuzzle = function() {
    this.model.gameFinished = !1,
    this.puzzle.initGame()
}
,
canvas.app.puzzle.Main.prototype.gameOverHandler = function() {
    this.model.gameFinished = !0,
    this.puzzle.finishGame()
}
,
canvas.app.puzzle.Main.prototype.finishGameHandler = function() {
    new canvas.utils.URLRequest(canvas.Config.entryPoint + "?object=user&action=puzzle_finish&json_mode_on=1").load()
}
,
canvas.app.puzzle.Main.prototype.closeGameHandler = function() {
    closePuzzle()
}
,
canvas.app.puzzle.Main.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.app.puzzle.Event.GAME_OVER, null, this.gameOverHandler, this),
    canvas.EventManager.removeEventListener(canvas.app.puzzle.Event.FINISH_GAME, null, this.finishGameHandler, this),
    canvas.EventManager.removeEventListener(canvas.app.puzzle.Event.CLOSE_GAME, null, this.closeGameHandler, this),
    canvas.px.Container.prototype.destroy.apply(this, [{
        children: !0
    }]),
    this.puzzle.destroy()
}
,
canvas.app.puzzle.Model = function(t) {
    this.pictureUrl = this.ok(t.pictureURI) ? t.pictureURI : "testImage.png",
    this.segmentsOnSide = this.ok(t.segmentsOnSide) ? parseInt(t.segmentsOnSide) : 3,
    this.quickStart = !!this.ok(t.quickStart) && 1 == parseInt(t.quickStart)
}
,
canvas.app.puzzle.Model.prototype.ok = function(t) {
    return null != t
}
,
canvas.app.puzzle.View = function() {
    canvas.px.Container.call(this)
}
,
canvas.app.puzzle.View.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.puzzle.view.PuzzleList = function() {
    canvas.px.Container.call(this),
    canvas.EventManager.addEventListener(canvas.app.puzzle.Event.CONTINUE_GAME, null, this.finishAnimHandler, this),
    this.click = this.clickHandler.bind(this),
    this.interactive = !0,
    this.interactiveChildren = !0
}
,
canvas.app.puzzle.view.PuzzleList.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.puzzle.view.PuzzleList.prototype.create = function(t, e) {
    var a;
    null == e && (e = 4),
    this.clear(),
    this.items = new Array,
    this.sizeW = t.width,
    this.sizeH = t.height;
    for (var s, i = Math.floor(t.width / e), n = Math.floor(t.height / e), o = 0; o < e; o++)
        for (a = 0; a < e; a++)
            s = new canvas.px.Texture(t,new canvas.px.Rectangle(o * i,a * n,i,n)),
            s = new canvas.app.puzzle.view.PuzzleRenderer(s,new canvas.px.Point(o,a)),
            this.addChild(s)
}
,
canvas.app.puzzle.view.PuzzleList.prototype.clear = function() {
    for (var t, e = this.numChildren; e--; )
        (t = this.getChildAt(e)).dispose(),
        this.removeChild(t)
}
,
canvas.app.puzzle.view.PuzzleList.prototype.randomize = function(t) {
    null == t && (t = !1);
    for (var e, a, s, i = this.numChildren; i--; )
        (e = this.getChildAt(i)).point.equals(e.newPoint) && (a = this.getChildAt(canvas.Functions.random(i)),
        s = e.newPoint,
        e.newPoint = a.newPoint,
        a.newPoint = s,
        t && (e.goNewPoint(!0),
        a.goNewPoint(!0)));
    t ? (this.alpha = 0,
    new canvas.px.Tween.Tween(this).to({
        alpha: 1
    }, 1e3).start()) : this.animateParts()
}
,
canvas.app.puzzle.view.PuzzleList.prototype.animateParts = function() {
    for (var t = this.numChildren, e = new canvas.px.Point(Math.round(.5 * this.sizeW),Math.round(.5 * this.sizeH)); t--; )
        this.getChildAt(t).animate(e)
}
,
canvas.app.puzzle.view.PuzzleList.prototype.clickHandler = function(t) {
    var e = t.target;
    e && (this.selectedRenderer ? (this.selectedRenderer != e && (t = this.selectedRenderer.newPoint,
    this.selectedRenderer.newPoint = e.newPoint,
    e.newPoint = t,
    e.goNewPoint(),
    this.selectedRenderer.goNewPoint(),
    this.setChildIndex(e, this.numChildren - 1)),
    this.selectedRenderer.selected = !1,
    this.selectedRenderer = null) : (this.selectedRenderer = e,
    this.selectedRenderer.selected = !0,
    this.setChildIndex(e, this.numChildren - 1)))
}
,
canvas.app.puzzle.view.PuzzleList.prototype.finishAnimHandler = function() {
    this.testGameOver()
}
,
canvas.app.puzzle.view.PuzzleList.prototype.testGameOver = function() {
    if (!canvas.app.puzzle.model.gameFinished) {
        for (var t = this.numChildren; t--; )
            if (!this.getChildAt(t).isDone())
                return;
        canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.GAME_OVER)
    }
}
,
canvas.app.puzzle.view.PuzzleList.prototype.destroy = function() {
    canvas.EventManager.removeEventListener(canvas.app.puzzle.Event.CONTINUE_GAME, null, this.finishAnimHandler, this)
}
,
canvas.app.puzzle.view.PuzzleRenderer = function(t, e) {
    this._selected = !1,
    Object.defineProperty(this, "selected", {
        get: function() {
            return this._selected
        },
        set: function(t) {
            this._selected = t;
            this.line0.height = this.line1.height = this.line2.height = this.line3.height = t ? 6 : 1
        }
    }),
    canvas.px.Container.call(this),
    this.point = e,
    this.newPoint = e.clone(),
    this.x = this.point.x * t.width,
    this.y = this.point.y * t.height,
    this.sprite = this.addChild(new canvas.px.Sprite),
    this.texture = t,
    this.sprite.texture = t,
    this.interactive = this.interactiveChildren = !1;
    t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("puzzle", "line")));
    t.interactive = !1,
    t.width = this.texture.width,
    this.line0 = t,
    (t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("puzzle", "line")))).interactive = !1,
    t.scale.y = -1,
    t.width = this.texture.width,
    t.y = +this.texture.height,
    this.line1 = t,
    (t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("puzzle", "line")))).interactive = !1,
    t.scale.y = -1,
    t.width = this.texture.height,
    t.rotation = canvas.Functions.degToRad(90),
    this.line2 = t,
    (t = this.addChild(new canvas.px.Sprite(canvas.ResourceLoader.getImage("puzzle", "line")))).interactive = !1,
    t.width = this.texture.height,
    t.rotation = canvas.Functions.degToRad(90),
    t.x = this.texture.width,
    this.line3 = t
}
,
canvas.app.puzzle.view.PuzzleRenderer.prototype = Object.create(canvas.px.Container.prototype),
canvas.app.puzzle.view.PuzzleRenderer.prototype.isDone = function() {
    return this.point.equals(this.newPoint)
}
,
canvas.app.puzzle.view.PuzzleRenderer.prototype.animate = function(t) {
    new canvas.px.Tween.Tween(this).to({
        x: t.x - Math.round(.5 * this.width),
        y: t.y - Math.round(.5 * this.height)
    }, 700).onComplete(this.animationComplete.bind(this)).start()
}
,
canvas.app.puzzle.view.PuzzleRenderer.prototype.animationComplete = function() {
    this.goNewPoint()
}
,
canvas.app.puzzle.view.PuzzleRenderer.prototype.goNewPoint = function(t) {
    null == t && (t = !1);
    var e = new canvas.px.Point(this.newPoint.x * this.width,this.newPoint.y * this.height);
    t ? (this.x = e.x,
    this.y = e.y,
    this.interactive = this.interactiveChildren = !0) : (this.interactive = this.interactiveChildren = !1,
    new canvas.px.Tween.Tween(this).to({
        x: e.x,
        y: e.y
    }, 700).onComplete(this.continueGame.bind(this)).start())
}
,
canvas.app.puzzle.view.PuzzleRenderer.prototype.continueGame = function() {
    this.interactive = this.interactiveChildren = !0,
    canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.CONTINUE_GAME)
}
,
canvas.app.puzzle.view.PuzzleRenderer.prototype.dispose = function() {
    this.texture && this.texture.destroy()
}
,
canvas.app.puzzle.view.PuzzleWindow = function() {
    canvas.app.manor.view.WindowManorBase.call(this, canvas.app.puzzle.model.width, canvas.app.puzzle.model.height),
    this.dragAvailable = !1,
    this.container = this.addChild(new canvas.px.Container),
    this.container.position.set(20, 30),
    this.beginButton = this.addChild(new canvas.app.view.MainButton),
    this.beginButton.visible = !1,
    this.list = new canvas.app.puzzle.view.PuzzleList,
    this.visible = !1,
    this.interactive = !0,
    this.interactiveChildren = !0
}
,
canvas.app.puzzle.view.PuzzleWindow.prototype = Object.create(canvas.app.manor.view.WindowManorBase.prototype),
canvas.app.puzzle.view.PuzzleWindow.prototype.initGame = function() {
    canvas.Functions.destroyChildren(this.container),
    this.container.addChild(this.list),
    this.beginButton.setTitle(canvas.Translator.getText(1523)),
    this.texture = canvas.ResourceLoader.getTexture("puzzleImage"),
    this.resize(this.texture.width + 42, this.texture.height + 100),
    this.content = this.container.addChild(new canvas.px.Sprite),
    this.content.texture = this.texture,
    this.content.alpha = 0,
    canvas.app.puzzle.model.quickStart ? this.beginGameQuick() : new canvas.px.Tween.Tween(this.content).to({
        alpha: 1
    }, 500).onComplete(this.initAnimationComplete.bind(this)).start()
}
,
canvas.app.puzzle.view.PuzzleWindow.prototype.initAnimationComplete = function() {
    this.beginButton.visible = !0
}
,
canvas.app.puzzle.view.PuzzleWindow.prototype.beginAnimationComplete = function() {
    this.list.randomize()
}
,
canvas.app.puzzle.view.PuzzleWindow.prototype.beginGame = function() {
    this.list.create(this.texture, canvas.app.puzzle.model.segmentsOnSide),
    new canvas.px.Tween.Tween(this.content).to({
        alpha: 0
    }, 1e3).onComplete(this.beginAnimationComplete.bind(this)).start(),
    this.beginButton.visible = !1
}
,
canvas.app.puzzle.view.PuzzleWindow.prototype.beginGameQuick = function() {
    this.list.create(this.texture, canvas.app.puzzle.model.segmentsOnSide),
    this.list.randomize(!0)
}
,
canvas.app.puzzle.view.PuzzleWindow.prototype.clickHandler = function(t) {
    canvas.Functions.findParent(this.beginButton, t.target) ? canvas.app.puzzle.model.gameFinished ? canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.FINISH_GAME) : this.beginGame() : canvas.px.Window.prototype.clickHandler.call(this, t)
}
,
canvas.app.puzzle.view.PuzzleWindow.prototype.resize = function(t, e) {
    this.visible = !0,
    this.setSize(t, e),
    this.beginButton.y = e - 60,
    this.beginButton.x = Math.round(.5 * (t - this.beginButton.width))
}
,
canvas.app.puzzle.view.PuzzleWindow.prototype.finishGame = function() {
    new canvas.px.Tween.Tween(this.content).to({
        alpha: 1
    }, 1e3).onComplete(this.finishAnimationComplete.bind(this)).start()
}
,
canvas.app.puzzle.view.PuzzleWindow.prototype.finishAnimationComplete = function() {
    this.list.clear(),
    this.beginButton.setTitle(canvas.Translator.getText(1524)),
    this.beginButton.visible = !0
}
,
canvas.app.puzzle.view.PuzzleWindow.prototype.hide = function() {
    canvas.app.manor.view.WindowManorBase.prototype.hide.call(this),
    canvas.EventManager.dispatchEvent(canvas.app.puzzle.Event.CLOSE_GAME)
}
,
canvas.app.puzzle.view.PuzzleWindow.prototype.destroy = function() {
    this.list.destroy()
}
,
canvas.modules.ChatClock = function(t, e, a) {
    t.style.backgroundImage = "url('images/tbl-main_chat-clock-bg.gif')";
    var s = document.createElement("img");
    t.appendChild(s),
    s.src = "images/tbl-main_chat-clock-btn.gif",
    s.style.cursor = "pointer",
    s.style.position = "relative",
    s.style.top = 12,
    s.onclick = this.clickHandler.bind(this);
    s = document.createElement("span");
    t.appendChild(s),
    s.style.position = "relative",
    s.style.color = "#f9dfa1",
    s.style.fontSize = 13,
    s.style.fontWeight = "bold",
    s.style.top = 3,
    s.style.left = 2,
    this.span = s;
    t = new Date;
    null == a && (a = t.getHours() + ":" + t.getMinutes() + ":" + t.getSeconds());
    s = a.split(":"),
    a = new Date;
    a.setHours(parseInt(s[0])),
    a.setMinutes(parseInt(s[1])),
    a.setSeconds(parseInt(s[2])),
    this.delta = a.getTime() - t.getTime(),
    setInterval(this.timerHandler.bind(this), 1e4),
    this.timerHandler()
}
,
canvas.modules.ChatClock.prototype.clickHandler = function() {
    chat_change_time_zone()
}
,
canvas.modules.ChatClock.prototype.timerHandler = function() {
    var t = new Date(Date.now() + this.delta);
    this.span.innerText = canvas.Functions.setNumberLen(t.getHours()) + ":" + canvas.Functions.setNumberLen(t.getMinutes())
}
,
canvas.modules.ChatClock.prototype.getTime = function() {
    return Date.now() + this.delta
}
,
canvas.modules.ChatClock.prototype.time_shift = function(t) {
    this.delta += 6e4 * parseInt(t)
}
,
canvas.modules.EservProxy = function() {
    this.callBacks = {},
    this.proxyRequest = null,
    this.ON_CONNECT = "onConnect",
    this.ON_DISCONNECT = "onDisconnect",
    this.ON_ERROR = "onError",
    this.ON_DATA = "onData",
    this.CONNECT_TIMEOUT = 1e4,
    this.stack = []
}
,
canvas.modules.EservProxy.prototype.connect = function(t, e, a, s) {
    this.proxy = a,
    this.createProxy(),
    this.firstRequest = this.proxyRequest,
    this.proxyLoad(),
    this.connectRequest = this.proxyRequest,
    this.timer && clearInterval(this.timer),
    this.timer = setInterval(this.frameHandler.bind(this), 100),
    this.connectTime = Date.now(),
    window[this.callBacks[this.ON_CONNECT]]()
}
,
canvas.modules.EservProxy.prototype.createProxy = function() {
    this.proxyRequest && (canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.proxyRequest, this.proxyCompleteHandler, this),
    canvas.EventManager.removeEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.proxyRequest, this.proxyErrorHandler, this)),
    this.proxyRequest = new canvas.utils.URLRequest(this.proxy,"POST",null,"arraybuffer"),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_COMPLETE, this.proxyRequest, this.proxyCompleteHandler, this),
    canvas.EventManager.addEventListener(canvas.utils.URLRequestEvent.EVENT_ERROR, this.proxyRequest, this.proxyErrorHandler, this)
}
,
canvas.modules.EservProxy.prototype.frameHandler = function() {
    this.firstRequest && (4 == this.firstRequest.request.readyState && 200 == this.firstRequest.request.status ? (this.parseResponse(this.firstRequest.request.response),
    clearInterval(this.timer),
    this.firstRequest = null) : Date.now() - this.connectTime > this.CONNECT_TIMEOUT && (clearInterval(this.timer),
    this.firstRequest = null))
}
,
canvas.modules.EservProxy.prototype.proxyCompleteHandler = function() {
    this.proxyRequest.request.response && 0 < this.proxyRequest.request.response.byteLength && this.parseResponse(this.proxyRequest.request.response),
    this.proxyLoad()
}
,
canvas.modules.EservProxy.prototype.proxyErrorHandler = function() {
    this.proxyLoad()
}
,
canvas.modules.EservProxy.prototype.proxyLoad = function() {
    var t, e = 0 < this.stack.length ? this.stack.pop() : void 0;
    null == e ? (t = new ArrayBuffer(1),
    new Uint8Array(t)[0] = 0,
    this.proxyRequest.load(void 0, t, !1)) : this.proxyRequest.load(void 0, e, !1),
    this.timeout && clearTimeout(this.timeout),
    this.timeout = setTimeout(this.timerHandler.bind(this), 3e4)
}
,
canvas.modules.EservProxy.prototype.timerHandler = function() {
    this.proxyRequest.abort(),
    this.proxyLoadData()
}
,
canvas.modules.EservProxy.prototype.proxyLoadData = function(t) {
    null != t && this.stack.push(t),
    this.createProxy(),
    this.proxyLoad()
}
,
canvas.modules.EservProxy.prototype.sendRequest = function(t) {
    t = canvas.px.AMF.stringify(this.objectToArray(t));
    this.proxyLoadData(t)
}
,
canvas.modules.EservProxy.prototype.addCallback = function(t, e) {
    this.callBacks[t] = e
}
,
canvas.modules.EservProxy.prototype.httpRequest = function() {}
,
canvas.modules.EservProxy.prototype.getLog = function() {}
,
canvas.modules.EservProxy.prototype.objectToArray = function(t) {
    var e, a = [];
    for (e in t)
        "string" == typeof t[e] || "number" == typeof t[e] ? a[e] = t[e] : a[e] = this.objectToArray(t[e]);
    return a
}
,
canvas.modules.EservProxy.prototype.parseResponse = function(t) {
    for (var e, a, s, i = new Uint8Array(t), n = 0, o = i.length; !(o < n + 4 || (a = new DataView(t,n,4).getUint32(0),
    o < (n += 4) + a)); ) {
        for (e = "",
        s = (n += a) - a; s < n; s++)
            e += String.fromCharCode(i[s]);
        e = canvas.px.AMF.parse(e),
        window[this.callBacks[this.ON_DATA]](this.arrayToObjectDoubleBackslash(e))
    }
}
,
canvas.modules.EservProxy.prototype.arrayToObjectDoubleBackslash = function(t) {
    var e, a, s = new Object;
    for (e in t)
        a = t[e],
        e = e.replace(/"/g, ""),
        Array.isArray(a) ? s[e] = this.arrayToObjectDoubleBackslash(a) : s[e] = "string" == typeof a ? a.replace(/\\/g, "\\\\") : a;
    return s
}
;
